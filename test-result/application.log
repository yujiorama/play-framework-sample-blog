12 10 2010 15:07:48,968 INFO  ~ Starting D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog
12 10 2010 15:07:48,972 INFO  ~ Module scala is available (D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3)
12 10 2010 15:07:50,061 INFO  ~ 
12 10 2010 15:07:50,061 INFO  ~ Go to http://localhost:9000/@tests to run the tests
12 10 2010 15:07:50,061 INFO  ~ 
12 10 2010 15:07:50,062 WARN  ~ You're running Play! in DEV mode
12 10 2010 15:07:50,145 INFO  ~ Listening for HTTP on port 9000 (Waiting a first request to start) ...
12 10 2010 15:08:03,364 DEBUG ~ Creating new CacheManager with default config
12 10 2010 15:08:03,366 DEBUG ~ Configuring ehcache from classpath.
12 10 2010 15:08:03,369 DEBUG ~ Configuring ehcache from ehcache.xml found in the classpath: jar:file:/D:/cygwin/home/yuji-okazawa/work/j/play-1.1-beta2/framework/play.jar!/ehcache.xml
12 10 2010 15:08:03,370 DEBUG ~ Configuring ehcache from URL: jar:file:/D:/cygwin/home/yuji-okazawa/work/j/play-1.1-beta2/framework/play.jar!/ehcache.xml
12 10 2010 15:08:03,370 DEBUG ~ Configuring ehcache from InputStream
12 10 2010 15:08:03,406 DEBUG ~ Ignoring ehcache attribute xmlns:xsi
12 10 2010 15:08:03,407 DEBUG ~ Ignoring ehcache attribute xsi:noNamespaceSchemaLocation
12 10 2010 15:08:03,409 DEBUG ~ Disk Store Path: C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\
12 10 2010 15:08:03,421 DEBUG ~ propertiesString is null.
12 10 2010 15:08:03,424 DEBUG ~ No disk store path defined. Skipping disk store path conflict test.
12 10 2010 15:08:03,424 DEBUG ~ No CacheManagerEventListenerFactory class specified. Skipping...
12 10 2010 15:08:03,443 DEBUG ~ No BootstrapCacheLoaderFactory class specified. Skipping...
12 10 2010 15:08:03,443 DEBUG ~ CacheWriter factory not configured. Skipping...
12 10 2010 15:08:03,444 DEBUG ~ No CacheExceptionHandlerFactory class specified. Skipping...
12 10 2010 15:08:03,451 DEBUG ~ Initialized net.sf.ehcache.store.MemoryStore for play
12 10 2010 15:08:03,454 DEBUG ~ Initialised cache: play
12 10 2010 15:08:03,742 INFO  ~ Connected to jdbc:hsqldb:mem:playembed
12 10 2010 15:08:03,815 INFO  ~ Hibernate Annotations 3.5.3-Final
12 10 2010 15:08:03,832 INFO  ~ Hibernate 3.5.3-Final
12 10 2010 15:08:03,833 INFO  ~ hibernate.properties not found
12 10 2010 15:08:03,837 INFO  ~ Bytecode provider name : javassist
12 10 2010 15:08:03,840 INFO  ~ using JDK 1.4 java.sql.Timestamp handling
12 10 2010 15:08:03,899 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 15:08:03,902 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
12 10 2010 15:08:03,902 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
12 10 2010 15:08:03,904 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
12 10 2010 15:08:03,904 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
12 10 2010 15:08:03,905 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
12 10 2010 15:08:03,906 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
12 10 2010 15:08:03,907 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
12 10 2010 15:08:03,907 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
12 10 2010 15:08:03,908 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
12 10 2010 15:08:03,908 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 15:08:03,909 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
12 10 2010 15:08:03,910 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
12 10 2010 15:08:03,912 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
12 10 2010 15:08:03,917 INFO  ~ Hibernate Commons Annotations 3.2.0.Final
12 10 2010 15:08:03,923 INFO  ~ Hibernate EntityManager 3.5.3-Final
12 10 2010 15:08:03,923 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 15:08:03,923 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
12 10 2010 15:08:03,923 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
12 10 2010 15:08:03,923 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
12 10 2010 15:08:03,923 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
12 10 2010 15:08:03,923 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
12 10 2010 15:08:03,923 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
12 10 2010 15:08:03,924 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
12 10 2010 15:08:03,924 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
12 10 2010 15:08:03,924 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
12 10 2010 15:08:03,924 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 15:08:03,924 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
12 10 2010 15:08:03,924 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
12 10 2010 15:08:03,924 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
12 10 2010 15:08:03,949 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:08:03,978 DEBUG ~ Process hbm files
12 10 2010 15:08:03,978 DEBUG ~ Process annotated classes
12 10 2010 15:08:03,988 INFO  ~ Binding entity from annotated class: models.User
12 10 2010 15:08:03,998 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 15:08:04,000 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 15:08:04,011 DEBUG ~ Import with entity name User
12 10 2010 15:08:04,015 INFO  ~ Bind entity models.User on table User
12 10 2010 15:08:04,043 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 15:08:04,046 DEBUG ~ binding property id with lazy=false
12 10 2010 15:08:04,048 DEBUG ~ building SimpleValue for id
12 10 2010 15:08:04,050 DEBUG ~ Building property id
12 10 2010 15:08:04,052 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
12 10 2010 15:08:04,052 DEBUG ~ binding property email with lazy=false
12 10 2010 15:08:04,053 DEBUG ~ building SimpleValue for email
12 10 2010 15:08:04,053 DEBUG ~ Building property email
12 10 2010 15:08:04,053 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
12 10 2010 15:08:04,053 DEBUG ~ binding property fullname with lazy=false
12 10 2010 15:08:04,053 DEBUG ~ building SimpleValue for fullname
12 10 2010 15:08:04,053 DEBUG ~ Building property fullname
12 10 2010 15:08:04,053 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
12 10 2010 15:08:04,054 DEBUG ~ binding property isAdmin with lazy=false
12 10 2010 15:08:04,054 DEBUG ~ building SimpleValue for isAdmin
12 10 2010 15:08:04,054 DEBUG ~ Building property isAdmin
12 10 2010 15:08:04,054 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
12 10 2010 15:08:04,054 DEBUG ~ binding property password with lazy=false
12 10 2010 15:08:04,054 DEBUG ~ building SimpleValue for password
12 10 2010 15:08:04,055 DEBUG ~ Building property password
12 10 2010 15:08:04,057 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 15:08:04,057 DEBUG ~ setting SimpleValue typeName for email
12 10 2010 15:08:04,057 DEBUG ~ setting SimpleValue typeName for fullname
12 10 2010 15:08:04,057 DEBUG ~ setting SimpleValue typeName for isAdmin
12 10 2010 15:08:04,057 DEBUG ~ setting SimpleValue typeName for password
12 10 2010 15:08:04,057 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:08:04,059 DEBUG ~ processing extends queue
12 10 2010 15:08:04,059 DEBUG ~ processing collection mappings
12 10 2010 15:08:04,059 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:08:04,059 DEBUG ~ processing association property references
12 10 2010 15:08:04,059 DEBUG ~ processing foreign key constraints
12 10 2010 15:08:04,064 INFO  ~ Hibernate Validator not found: ignoring
12 10 2010 15:08:04,079 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
12 10 2010 15:08:04,083 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
12 10 2010 15:08:04,085 DEBUG ~ Search not present in classpath, ignoring event listener registration.
12 10 2010 15:08:04,086 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
12 10 2010 15:08:04,086 DEBUG ~ Preparing to build session factory with filters : {}
12 10 2010 15:08:04,086 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:08:04,086 DEBUG ~ Process hbm files
12 10 2010 15:08:04,086 DEBUG ~ Process annotated classes
12 10 2010 15:08:04,086 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:08:04,086 DEBUG ~ processing extends queue
12 10 2010 15:08:04,086 DEBUG ~ processing collection mappings
12 10 2010 15:08:04,086 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:08:04,086 DEBUG ~ processing association property references
12 10 2010 15:08:04,086 DEBUG ~ processing foreign key constraints
12 10 2010 15:08:04,129 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
12 10 2010 15:08:04,131 INFO  ~ Using provided datasource
12 10 2010 15:08:04,142 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
12 10 2010 15:08:04,142 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
12 10 2010 15:08:04,163 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
12 10 2010 15:08:04,168 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
12 10 2010 15:08:04,169 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
12 10 2010 15:08:04,171 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
12 10 2010 15:08:04,171 INFO  ~ Automatic flush during beforeCompletion(): disabled
12 10 2010 15:08:04,171 INFO  ~ Automatic session close at end of transaction: disabled
12 10 2010 15:08:04,171 INFO  ~ JDBC batch size: 15
12 10 2010 15:08:04,171 INFO  ~ JDBC batch updates for versioned data: disabled
12 10 2010 15:08:04,172 INFO  ~ Scrollable result sets: enabled
12 10 2010 15:08:04,172 DEBUG ~ Wrap result sets: disabled
12 10 2010 15:08:04,172 INFO  ~ JDBC3 getGeneratedKeys(): disabled
12 10 2010 15:08:04,172 INFO  ~ Connection release mode: auto
12 10 2010 15:08:04,172 INFO  ~ Default batch fetch size: 1
12 10 2010 15:08:04,172 INFO  ~ Generate SQL with comments: disabled
12 10 2010 15:08:04,172 INFO  ~ Order SQL updates by primary key: disabled
12 10 2010 15:08:04,173 INFO  ~ Order SQL inserts for batching: disabled
12 10 2010 15:08:04,173 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
12 10 2010 15:08:04,174 INFO  ~ Using ASTQueryTranslatorFactory
12 10 2010 15:08:04,174 INFO  ~ Query language substitutions: {}
12 10 2010 15:08:04,174 INFO  ~ JPA-QL strict compliance: enabled
12 10 2010 15:08:04,175 INFO  ~ Second-level cache: enabled
12 10 2010 15:08:04,175 INFO  ~ Query cache: disabled
12 10 2010 15:08:04,175 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
12 10 2010 15:08:04,175 INFO  ~ Optimize cache for minimal puts: disabled
12 10 2010 15:08:04,175 INFO  ~ Structured second-level cache entries: disabled
12 10 2010 15:08:04,179 INFO  ~ Statistics: disabled
12 10 2010 15:08:04,179 INFO  ~ Deleted entity synthetic identifier rollback: disabled
12 10 2010 15:08:04,179 INFO  ~ Default entity-mode: pojo
12 10 2010 15:08:04,180 INFO  ~ Named query checking : enabled
12 10 2010 15:08:04,180 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
12 10 2010 15:08:04,206 INFO  ~ building session factory
12 10 2010 15:08:04,211 DEBUG ~ Session factory constructed with filter configurations : {}
12 10 2010 15:08:04,212 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
12 10 2010 15:08:04,213 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:08:04,310 DEBUG ~ Static SQL for entity: models.User
12 10 2010 15:08:04,311 DEBUG ~  Version select: select id from User where id =?
12 10 2010 15:08:04,311 DEBUG ~  Snapshot select: select user_.id, user_.email as email0_, user_.fullname as fullname0_, user_.isAdmin as isAdmin0_, user_.password as password0_ from User user_ where user_.id=?
12 10 2010 15:08:04,311 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
12 10 2010 15:08:04,311 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
12 10 2010 15:08:04,311 DEBUG ~  Delete 0: delete from User where id=?
12 10 2010 15:08:04,311 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
12 10 2010 15:08:04,330 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id0_0_, user0_.email as email0_0_, user0_.fullname as fullname0_0_, user0_.isAdmin as isAdmin0_0_, user0_.password as password0_0_ from User user0_ where user0_.id=?
12 10 2010 15:08:04,330 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id0_0_, user0_.email as email0_0_, user0_.fullname as fullname0_0_, user0_.isAdmin as isAdmin0_0_, user0_.password as password0_0_ from User user0_ where user0_.id=?
12 10 2010 15:08:04,330 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id0_0_, user0_.email as email0_0_, user0_.fullname as fullname0_0_, user0_.isAdmin as isAdmin0_0_, user0_.password as password0_0_ from User user0_ where user0_.id=?
12 10 2010 15:08:04,330 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id0_0_, user0_.email as email0_0_, user0_.fullname as fullname0_0_, user0_.isAdmin as isAdmin0_0_, user0_.password as password0_0_ from User user0_ where user0_.id=?
12 10 2010 15:08:04,330 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id0_0_, user0_.email as email0_0_, user0_.fullname as fullname0_0_, user0_.isAdmin as isAdmin0_0_, user0_.password as password0_0_ from User user0_ where user0_.id=?
12 10 2010 15:08:04,331 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id0_0_, user0_.email as email0_0_, user0_.fullname as fullname0_0_, user0_.isAdmin as isAdmin0_0_, user0_.password as password0_0_ from User user0_ where user0_.id=?
12 10 2010 15:08:04,331 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id0_0_, user0_.email as email0_0_, user0_.fullname as fullname0_0_, user0_.isAdmin as isAdmin0_0_, user0_.password as password0_0_ from User user0_ where user0_.id=?
12 10 2010 15:08:04,331 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id0_0_, user0_.email as email0_0_, user0_.fullname as fullname0_0_, user0_.isAdmin as isAdmin0_0_, user0_.password as password0_0_ from User user0_ where user0_.id=?
12 10 2010 15:08:04,331 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id0_0_, user0_.email as email0_0_, user0_.fullname as fullname0_0_, user0_.isAdmin as isAdmin0_0_, user0_.password as password0_0_ from User user0_ where user0_.id=?
12 10 2010 15:08:04,331 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id0_0_, user0_.email as email0_0_, user0_.fullname as fullname0_0_, user0_.isAdmin as isAdmin0_0_, user0_.password as password0_0_ from User user0_ where user0_.id=?
12 10 2010 15:08:04,337 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id0_0_, user0_.email as email0_0_, user0_.fullname as fullname0_0_, user0_.isAdmin as isAdmin0_0_, user0_.password as password0_0_ from User user0_ where user0_.id=?
12 10 2010 15:08:04,337 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id0_0_, user0_.email as email0_0_, user0_.fullname as fullname0_0_, user0_.isAdmin as isAdmin0_0_, user0_.password as password0_0_ from User user0_ where user0_.id=?
12 10 2010 15:08:04,340 DEBUG ~ initializing class SessionFactoryObjectFactory
12 10 2010 15:08:04,340 DEBUG ~ registered: 2c9082cd2b9f0d81012b9f0d82f30000 (unnamed)
12 10 2010 15:08:04,341 INFO  ~ Not binding factory to JNDI, no JNDI name configured
12 10 2010 15:08:04,341 DEBUG ~ instantiated session factory
12 10 2010 15:08:04,365 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:08:04,365 DEBUG ~ Process hbm files
12 10 2010 15:08:04,365 DEBUG ~ Process annotated classes
12 10 2010 15:08:04,365 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:08:04,365 DEBUG ~ processing extends queue
12 10 2010 15:08:04,365 DEBUG ~ processing collection mappings
12 10 2010 15:08:04,365 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:08:04,365 DEBUG ~ processing association property references
12 10 2010 15:08:04,365 DEBUG ~ processing foreign key constraints
12 10 2010 15:08:04,367 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:08:04,367 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:08:04,367 DEBUG ~ Process hbm files
12 10 2010 15:08:04,367 DEBUG ~ Process annotated classes
12 10 2010 15:08:04,367 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:08:04,367 DEBUG ~ processing extends queue
12 10 2010 15:08:04,367 DEBUG ~ processing collection mappings
12 10 2010 15:08:04,368 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:08:04,368 DEBUG ~ processing association property references
12 10 2010 15:08:04,368 DEBUG ~ processing foreign key constraints
12 10 2010 15:08:04,369 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:08:04,369 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:08:04,371 INFO  ~ Running hbm2ddl schema export
12 10 2010 15:08:04,372 DEBUG ~ import file not found: /import.sql
12 10 2010 15:08:04,372 INFO  ~ exporting generated schema to database
12 10 2010 15:08:04,374 DEBUG ~ drop table User if exists
12 10 2010 15:08:04,375 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
12 10 2010 15:08:04,376 INFO  ~ schema export complete
12 10 2010 15:08:04,377 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:08:04,377 DEBUG ~ Process hbm files
12 10 2010 15:08:04,377 DEBUG ~ Process annotated classes
12 10 2010 15:08:04,377 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:08:04,377 DEBUG ~ processing extends queue
12 10 2010 15:08:04,377 DEBUG ~ processing collection mappings
12 10 2010 15:08:04,377 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:08:04,377 DEBUG ~ processing association property references
12 10 2010 15:08:04,378 DEBUG ~ processing foreign key constraints
12 10 2010 15:08:04,379 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:08:04,379 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:08:04,379 DEBUG ~ Process hbm files
12 10 2010 15:08:04,379 DEBUG ~ Process annotated classes
12 10 2010 15:08:04,379 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:08:04,379 DEBUG ~ processing extends queue
12 10 2010 15:08:04,379 DEBUG ~ processing collection mappings
12 10 2010 15:08:04,379 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:08:04,379 DEBUG ~ processing association property references
12 10 2010 15:08:04,380 DEBUG ~ processing foreign key constraints
12 10 2010 15:08:04,380 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:08:04,381 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:08:04,381 DEBUG ~ Checking 0 named HQL queries
12 10 2010 15:08:04,381 DEBUG ~ Checking 0 named SQL queries
12 10 2010 15:08:04,455 INFO  ~ Application 'blog' is now started !
12 10 2010 15:08:04,505 DEBUG ~ opened session at timestamp: 12868636844
12 10 2010 15:08:04,511 DEBUG ~ begin
12 10 2010 15:08:04,511 DEBUG ~ opening JDBC connection
12 10 2010 15:08:04,511 DEBUG ~ current autocommit status: true
12 10 2010 15:08:04,511 DEBUG ~ disabling autocommit
12 10 2010 15:08:07,048 DEBUG ~ commit
12 10 2010 15:08:07,048 DEBUG ~ re-enabling autocommit
12 10 2010 15:08:07,048 DEBUG ~ committed JDBC Connection
12 10 2010 15:08:07,049 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:08:07,049 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:08:20,653 DEBUG ~ opened session at timestamp: 12868637006
12 10 2010 15:08:20,653 DEBUG ~ begin
12 10 2010 15:08:20,653 DEBUG ~ opening JDBC connection
12 10 2010 15:08:20,653 DEBUG ~ current autocommit status: true
12 10 2010 15:08:20,653 DEBUG ~ disabling autocommit
12 10 2010 15:08:20,664 DEBUG ~ commit
12 10 2010 15:08:20,664 DEBUG ~ re-enabling autocommit
12 10 2010 15:08:20,665 DEBUG ~ committed JDBC Connection
12 10 2010 15:08:20,665 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:08:20,665 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:08:20,678 DEBUG ~ opened session at timestamp: 12868637006
12 10 2010 15:08:20,678 DEBUG ~ begin
12 10 2010 15:08:20,678 DEBUG ~ opening JDBC connection
12 10 2010 15:08:20,679 DEBUG ~ current autocommit status: true
12 10 2010 15:08:20,679 DEBUG ~ disabling autocommit
12 10 2010 15:08:21,359 DEBUG ~ commit
12 10 2010 15:08:21,360 DEBUG ~ re-enabling autocommit
12 10 2010 15:08:21,360 DEBUG ~ committed JDBC Connection
12 10 2010 15:08:21,360 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:08:21,360 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:08:21,377 DEBUG ~ opened session at timestamp: 12868637013
12 10 2010 15:08:21,377 DEBUG ~ begin
12 10 2010 15:08:21,377 DEBUG ~ opening JDBC connection
12 10 2010 15:08:21,377 DEBUG ~ current autocommit status: true
12 10 2010 15:08:21,377 DEBUG ~ disabling autocommit
12 10 2010 15:08:21,635 DEBUG ~ opened session at timestamp: 12868637016
12 10 2010 15:08:21,636 DEBUG ~ begin
12 10 2010 15:08:21,636 DEBUG ~ opening JDBC connection
12 10 2010 15:08:21,636 DEBUG ~ current autocommit status: true
12 10 2010 15:08:21,636 DEBUG ~ disabling autocommit
12 10 2010 15:08:21,869 DEBUG ~ commit
12 10 2010 15:08:21,870 DEBUG ~ re-enabling autocommit
12 10 2010 15:08:21,870 DEBUG ~ committed JDBC Connection
12 10 2010 15:08:21,870 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:08:21,870 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:08:21,876 DEBUG ~ commit
12 10 2010 15:08:21,877 DEBUG ~ re-enabling autocommit
12 10 2010 15:08:21,877 DEBUG ~ committed JDBC Connection
12 10 2010 15:08:21,877 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:08:21,877 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:08:23,394 DEBUG ~ opened session at timestamp: 12868637033
12 10 2010 15:08:23,394 DEBUG ~ begin
12 10 2010 15:08:23,394 DEBUG ~ opening JDBC connection
12 10 2010 15:08:23,394 DEBUG ~ current autocommit status: true
12 10 2010 15:08:23,394 DEBUG ~ disabling autocommit
12 10 2010 15:08:23,455 DEBUG ~ commit
12 10 2010 15:08:23,455 DEBUG ~ re-enabling autocommit
12 10 2010 15:08:23,456 DEBUG ~ committed JDBC Connection
12 10 2010 15:08:23,456 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:08:23,456 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:08:23,545 DEBUG ~ opened session at timestamp: 12868637035
12 10 2010 15:08:23,545 DEBUG ~ begin
12 10 2010 15:08:23,545 DEBUG ~ opening JDBC connection
12 10 2010 15:08:23,545 DEBUG ~ current autocommit status: true
12 10 2010 15:08:23,545 DEBUG ~ disabling autocommit
12 10 2010 15:08:23,836 DEBUG ~ commit
12 10 2010 15:08:23,836 DEBUG ~ re-enabling autocommit
12 10 2010 15:08:23,836 DEBUG ~ committed JDBC Connection
12 10 2010 15:08:23,836 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:08:23,836 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:08:23,924 DEBUG ~ opened session at timestamp: 12868637039
12 10 2010 15:08:23,924 DEBUG ~ begin
12 10 2010 15:08:23,924 DEBUG ~ opening JDBC connection
12 10 2010 15:08:23,924 DEBUG ~ current autocommit status: true
12 10 2010 15:08:23,924 DEBUG ~ disabling autocommit
12 10 2010 15:08:23,933 DEBUG ~ commit
12 10 2010 15:08:23,933 DEBUG ~ re-enabling autocommit
12 10 2010 15:08:23,933 DEBUG ~ committed JDBC Connection
12 10 2010 15:08:23,933 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:08:23,933 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:08:23,997 DEBUG ~ opened session at timestamp: 12868637039
12 10 2010 15:08:23,998 DEBUG ~ begin
12 10 2010 15:08:23,998 DEBUG ~ opening JDBC connection
12 10 2010 15:08:23,998 DEBUG ~ current autocommit status: true
12 10 2010 15:08:23,998 DEBUG ~ disabling autocommit
12 10 2010 15:08:24,009 DEBUG ~ commit
12 10 2010 15:08:24,009 DEBUG ~ re-enabling autocommit
12 10 2010 15:08:24,009 DEBUG ~ committed JDBC Connection
12 10 2010 15:08:24,009 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:08:24,009 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:08:24,218 DEBUG ~ opened session at timestamp: 12868637042
12 10 2010 15:08:24,218 DEBUG ~ begin
12 10 2010 15:08:24,218 DEBUG ~ opening JDBC connection
12 10 2010 15:08:24,218 DEBUG ~ current autocommit status: true
12 10 2010 15:08:24,218 DEBUG ~ disabling autocommit
12 10 2010 15:08:24,345 DEBUG ~ commit
12 10 2010 15:08:24,345 DEBUG ~ re-enabling autocommit
12 10 2010 15:08:24,345 DEBUG ~ committed JDBC Connection
12 10 2010 15:08:24,346 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:08:24,346 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:08:25,947 DEBUG ~ opened session at timestamp: 12868637059
12 10 2010 15:08:25,948 DEBUG ~ begin
12 10 2010 15:08:25,948 DEBUG ~ opening JDBC connection
12 10 2010 15:08:25,948 DEBUG ~ current autocommit status: true
12 10 2010 15:08:25,948 DEBUG ~ disabling autocommit
12 10 2010 15:08:25,951 DEBUG ~ commit
12 10 2010 15:08:25,951 DEBUG ~ re-enabling autocommit
12 10 2010 15:08:25,951 DEBUG ~ committed JDBC Connection
12 10 2010 15:08:25,951 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:08:25,951 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:08:25,967 DEBUG ~ opened session at timestamp: 12868637059
12 10 2010 15:08:25,968 DEBUG ~ begin
12 10 2010 15:08:25,968 DEBUG ~ opening JDBC connection
12 10 2010 15:08:25,968 DEBUG ~ current autocommit status: true
12 10 2010 15:08:25,968 DEBUG ~ disabling autocommit
12 10 2010 15:08:25,972 DEBUG ~ commit
12 10 2010 15:08:25,972 DEBUG ~ re-enabling autocommit
12 10 2010 15:08:25,972 DEBUG ~ committed JDBC Connection
12 10 2010 15:08:25,972 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:08:25,972 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:11:45,169 INFO  ~ closing
12 10 2010 15:11:45,170 INFO  ~ Running hbm2ddl schema export
12 10 2010 15:11:45,170 DEBUG ~ import file not found: /import.sql
12 10 2010 15:11:45,170 INFO  ~ exporting generated schema to database
12 10 2010 15:11:45,170 DEBUG ~ drop table User if exists
12 10 2010 15:11:45,171 INFO  ~ schema export complete
12 10 2010 15:11:46,200 ERROR ~ 

@645j8gm94
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 5)
The file /test/BasicTest.scala could not be compiled. Error raised is : value QueryFunctions is not a member of package play.db.jpa

play.exceptions.CompilationException: value QueryFunctions is not a member of package play.db.jpa
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.compileAll(ScalaPlugin.scala:100)
	at play.classloading.ApplicationClassloader.getAllClasses(ApplicationClassloader.java:403)
	at play.Play.start(Play.java:385)
	at play.Play.detectChanges(Play.java:502)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 15:18:38,804 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 15:18:38,804 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
12 10 2010 15:18:38,804 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
12 10 2010 15:18:38,804 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
12 10 2010 15:18:38,804 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
12 10 2010 15:18:38,804 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
12 10 2010 15:18:38,804 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
12 10 2010 15:18:38,805 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
12 10 2010 15:18:38,805 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
12 10 2010 15:18:38,805 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
12 10 2010 15:18:38,805 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 15:18:38,805 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
12 10 2010 15:18:38,805 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
12 10 2010 15:18:38,805 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
12 10 2010 15:18:38,806 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:18:38,806 DEBUG ~ Process hbm files
12 10 2010 15:18:38,806 DEBUG ~ Process annotated classes
12 10 2010 15:18:38,806 INFO  ~ Binding entity from annotated class: models.User
12 10 2010 15:18:38,806 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 15:18:38,806 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 15:18:38,807 DEBUG ~ Import with entity name User
12 10 2010 15:18:38,807 INFO  ~ Bind entity models.User on table User
12 10 2010 15:18:38,809 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 15:18:38,809 DEBUG ~ binding property id with lazy=false
12 10 2010 15:18:38,809 DEBUG ~ building SimpleValue for id
12 10 2010 15:18:38,809 DEBUG ~ Building property id
12 10 2010 15:18:38,809 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
12 10 2010 15:18:38,809 DEBUG ~ binding property email with lazy=false
12 10 2010 15:18:38,809 DEBUG ~ building SimpleValue for email
12 10 2010 15:18:38,810 DEBUG ~ Building property email
12 10 2010 15:18:38,810 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
12 10 2010 15:18:38,810 DEBUG ~ binding property fullname with lazy=false
12 10 2010 15:18:38,810 DEBUG ~ building SimpleValue for fullname
12 10 2010 15:18:38,810 DEBUG ~ Building property fullname
12 10 2010 15:18:38,810 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
12 10 2010 15:18:38,810 DEBUG ~ binding property isAdmin with lazy=false
12 10 2010 15:18:38,810 DEBUG ~ building SimpleValue for isAdmin
12 10 2010 15:18:38,810 DEBUG ~ Building property isAdmin
12 10 2010 15:18:38,810 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
12 10 2010 15:18:38,811 DEBUG ~ binding property password with lazy=false
12 10 2010 15:18:38,811 DEBUG ~ building SimpleValue for password
12 10 2010 15:18:38,811 DEBUG ~ Building property password
12 10 2010 15:18:38,811 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 15:18:38,811 DEBUG ~ setting SimpleValue typeName for email
12 10 2010 15:18:38,811 DEBUG ~ setting SimpleValue typeName for fullname
12 10 2010 15:18:38,811 DEBUG ~ setting SimpleValue typeName for isAdmin
12 10 2010 15:18:38,811 DEBUG ~ setting SimpleValue typeName for password
12 10 2010 15:18:38,811 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:18:38,811 DEBUG ~ processing extends queue
12 10 2010 15:18:38,811 DEBUG ~ processing collection mappings
12 10 2010 15:18:38,811 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:18:38,812 DEBUG ~ processing association property references
12 10 2010 15:18:38,812 DEBUG ~ processing foreign key constraints
12 10 2010 15:18:38,813 INFO  ~ Hibernate Validator not found: ignoring
12 10 2010 15:18:38,818 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
12 10 2010 15:18:38,819 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
12 10 2010 15:18:38,821 DEBUG ~ Search not present in classpath, ignoring event listener registration.
12 10 2010 15:18:38,821 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
12 10 2010 15:18:38,821 DEBUG ~ Preparing to build session factory with filters : {}
12 10 2010 15:18:38,822 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:18:38,822 DEBUG ~ Process hbm files
12 10 2010 15:18:38,822 DEBUG ~ Process annotated classes
12 10 2010 15:18:38,822 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:18:38,822 DEBUG ~ processing extends queue
12 10 2010 15:18:38,822 DEBUG ~ processing collection mappings
12 10 2010 15:18:38,822 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:18:38,822 DEBUG ~ processing association property references
12 10 2010 15:18:38,822 DEBUG ~ processing foreign key constraints
12 10 2010 15:18:38,824 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
12 10 2010 15:18:38,824 INFO  ~ Using provided datasource
12 10 2010 15:18:38,825 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
12 10 2010 15:18:38,825 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
12 10 2010 15:18:38,825 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
12 10 2010 15:18:38,825 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
12 10 2010 15:18:38,825 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
12 10 2010 15:18:38,826 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
12 10 2010 15:18:38,826 INFO  ~ Automatic flush during beforeCompletion(): disabled
12 10 2010 15:18:38,826 INFO  ~ Automatic session close at end of transaction: disabled
12 10 2010 15:18:38,826 INFO  ~ JDBC batch size: 15
12 10 2010 15:18:38,826 INFO  ~ JDBC batch updates for versioned data: disabled
12 10 2010 15:18:38,826 INFO  ~ Scrollable result sets: enabled
12 10 2010 15:18:38,826 DEBUG ~ Wrap result sets: disabled
12 10 2010 15:18:38,826 INFO  ~ JDBC3 getGeneratedKeys(): disabled
12 10 2010 15:18:38,826 INFO  ~ Connection release mode: auto
12 10 2010 15:18:38,826 INFO  ~ Default batch fetch size: 1
12 10 2010 15:18:38,826 INFO  ~ Generate SQL with comments: disabled
12 10 2010 15:18:38,826 INFO  ~ Order SQL updates by primary key: disabled
12 10 2010 15:18:38,826 INFO  ~ Order SQL inserts for batching: disabled
12 10 2010 15:18:38,826 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
12 10 2010 15:18:38,827 INFO  ~ Using ASTQueryTranslatorFactory
12 10 2010 15:18:38,827 INFO  ~ Query language substitutions: {}
12 10 2010 15:18:38,827 INFO  ~ JPA-QL strict compliance: enabled
12 10 2010 15:18:38,827 INFO  ~ Second-level cache: enabled
12 10 2010 15:18:38,827 INFO  ~ Query cache: disabled
12 10 2010 15:18:38,827 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
12 10 2010 15:18:38,827 INFO  ~ Optimize cache for minimal puts: disabled
12 10 2010 15:18:38,827 INFO  ~ Structured second-level cache entries: disabled
12 10 2010 15:18:38,827 INFO  ~ Statistics: disabled
12 10 2010 15:18:38,827 INFO  ~ Deleted entity synthetic identifier rollback: disabled
12 10 2010 15:18:38,827 INFO  ~ Default entity-mode: pojo
12 10 2010 15:18:38,828 INFO  ~ Named query checking : enabled
12 10 2010 15:18:38,828 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
12 10 2010 15:18:38,831 INFO  ~ building session factory
12 10 2010 15:18:38,831 DEBUG ~ Session factory constructed with filter configurations : {}
12 10 2010 15:18:38,832 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
12 10 2010 15:18:38,832 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:18:38,849 DEBUG ~ Static SQL for entity: models.User
12 10 2010 15:18:38,849 DEBUG ~  Version select: select id from User where id =?
12 10 2010 15:18:38,850 DEBUG ~  Snapshot select: select user_.id, user_.email as email2_, user_.fullname as fullname2_, user_.isAdmin as isAdmin2_, user_.password as password2_ from User user_ where user_.id=?
12 10 2010 15:18:38,850 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
12 10 2010 15:18:38,850 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
12 10 2010 15:18:38,850 DEBUG ~  Delete 0: delete from User where id=?
12 10 2010 15:18:38,850 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
12 10 2010 15:18:38,850 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id2_0_, user0_.email as email2_0_, user0_.fullname as fullname2_0_, user0_.isAdmin as isAdmin2_0_, user0_.password as password2_0_ from User user0_ where user0_.id=?
12 10 2010 15:18:38,850 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id2_0_, user0_.email as email2_0_, user0_.fullname as fullname2_0_, user0_.isAdmin as isAdmin2_0_, user0_.password as password2_0_ from User user0_ where user0_.id=?
12 10 2010 15:18:38,850 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id2_0_, user0_.email as email2_0_, user0_.fullname as fullname2_0_, user0_.isAdmin as isAdmin2_0_, user0_.password as password2_0_ from User user0_ where user0_.id=?
12 10 2010 15:18:38,851 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id2_0_, user0_.email as email2_0_, user0_.fullname as fullname2_0_, user0_.isAdmin as isAdmin2_0_, user0_.password as password2_0_ from User user0_ where user0_.id=?
12 10 2010 15:18:38,851 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id2_0_, user0_.email as email2_0_, user0_.fullname as fullname2_0_, user0_.isAdmin as isAdmin2_0_, user0_.password as password2_0_ from User user0_ where user0_.id=?
12 10 2010 15:18:38,851 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id2_0_, user0_.email as email2_0_, user0_.fullname as fullname2_0_, user0_.isAdmin as isAdmin2_0_, user0_.password as password2_0_ from User user0_ where user0_.id=?
12 10 2010 15:18:38,851 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id2_0_, user0_.email as email2_0_, user0_.fullname as fullname2_0_, user0_.isAdmin as isAdmin2_0_, user0_.password as password2_0_ from User user0_ where user0_.id=?
12 10 2010 15:18:38,851 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id2_0_, user0_.email as email2_0_, user0_.fullname as fullname2_0_, user0_.isAdmin as isAdmin2_0_, user0_.password as password2_0_ from User user0_ where user0_.id=?
12 10 2010 15:18:38,851 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id2_0_, user0_.email as email2_0_, user0_.fullname as fullname2_0_, user0_.isAdmin as isAdmin2_0_, user0_.password as password2_0_ from User user0_ where user0_.id=?
12 10 2010 15:18:38,852 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id2_0_, user0_.email as email2_0_, user0_.fullname as fullname2_0_, user0_.isAdmin as isAdmin2_0_, user0_.password as password2_0_ from User user0_ where user0_.id=?
12 10 2010 15:18:38,852 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id2_0_, user0_.email as email2_0_, user0_.fullname as fullname2_0_, user0_.isAdmin as isAdmin2_0_, user0_.password as password2_0_ from User user0_ where user0_.id=?
12 10 2010 15:18:38,852 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id2_0_, user0_.email as email2_0_, user0_.fullname as fullname2_0_, user0_.isAdmin as isAdmin2_0_, user0_.password as password2_0_ from User user0_ where user0_.id=?
12 10 2010 15:18:38,852 DEBUG ~ registered: 2c9082cd2b9f0d81012b9f1731840001 (unnamed)
12 10 2010 15:18:38,852 INFO  ~ Not binding factory to JNDI, no JNDI name configured
12 10 2010 15:18:38,852 DEBUG ~ instantiated session factory
12 10 2010 15:18:38,852 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:18:38,852 DEBUG ~ Process hbm files
12 10 2010 15:18:38,853 DEBUG ~ Process annotated classes
12 10 2010 15:18:38,853 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:18:38,853 DEBUG ~ processing extends queue
12 10 2010 15:18:38,853 DEBUG ~ processing collection mappings
12 10 2010 15:18:38,853 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:18:38,853 DEBUG ~ processing association property references
12 10 2010 15:18:38,853 DEBUG ~ processing foreign key constraints
12 10 2010 15:18:38,856 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:18:38,856 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:18:38,856 DEBUG ~ Process hbm files
12 10 2010 15:18:38,856 DEBUG ~ Process annotated classes
12 10 2010 15:18:38,857 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:18:38,857 DEBUG ~ processing extends queue
12 10 2010 15:18:38,857 DEBUG ~ processing collection mappings
12 10 2010 15:18:38,857 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:18:38,857 DEBUG ~ processing association property references
12 10 2010 15:18:38,857 DEBUG ~ processing foreign key constraints
12 10 2010 15:18:38,859 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:18:38,859 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:18:38,859 INFO  ~ Running hbm2ddl schema export
12 10 2010 15:18:38,860 DEBUG ~ import file not found: /import.sql
12 10 2010 15:18:38,860 INFO  ~ exporting generated schema to database
12 10 2010 15:18:38,860 DEBUG ~ drop table User if exists
12 10 2010 15:18:38,860 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
12 10 2010 15:18:38,860 INFO  ~ schema export complete
12 10 2010 15:18:38,862 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:18:38,862 DEBUG ~ Process hbm files
12 10 2010 15:18:38,862 DEBUG ~ Process annotated classes
12 10 2010 15:18:38,862 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:18:38,862 DEBUG ~ processing extends queue
12 10 2010 15:18:38,862 DEBUG ~ processing collection mappings
12 10 2010 15:18:38,862 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:18:38,862 DEBUG ~ processing association property references
12 10 2010 15:18:38,862 DEBUG ~ processing foreign key constraints
12 10 2010 15:18:38,864 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:18:38,864 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:18:38,864 DEBUG ~ Process hbm files
12 10 2010 15:18:38,865 DEBUG ~ Process annotated classes
12 10 2010 15:18:38,865 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:18:38,866 DEBUG ~ processing extends queue
12 10 2010 15:18:38,866 DEBUG ~ processing collection mappings
12 10 2010 15:18:38,866 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:18:38,866 DEBUG ~ processing association property references
12 10 2010 15:18:38,866 DEBUG ~ processing foreign key constraints
12 10 2010 15:18:38,868 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:18:38,868 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:18:38,868 DEBUG ~ Checking 0 named HQL queries
12 10 2010 15:18:38,868 DEBUG ~ Checking 0 named SQL queries
12 10 2010 15:18:38,876 DEBUG ~ opened session at timestamp: 12868643188
12 10 2010 15:18:38,876 DEBUG ~ begin
12 10 2010 15:18:38,876 DEBUG ~ opening JDBC connection
12 10 2010 15:18:38,876 DEBUG ~ current autocommit status: true
12 10 2010 15:18:38,876 DEBUG ~ disabling autocommit
12 10 2010 15:18:38,976 DEBUG ~ commit
12 10 2010 15:18:38,976 DEBUG ~ re-enabling autocommit
12 10 2010 15:18:38,977 DEBUG ~ committed JDBC Connection
12 10 2010 15:18:38,977 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:18:38,977 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:18:41,940 DEBUG ~ opened session at timestamp: 12868643219
12 10 2010 15:18:41,940 DEBUG ~ begin
12 10 2010 15:18:41,941 DEBUG ~ opening JDBC connection
12 10 2010 15:18:41,941 DEBUG ~ current autocommit status: true
12 10 2010 15:18:41,941 DEBUG ~ disabling autocommit
12 10 2010 15:18:42,014 DEBUG ~ commit
12 10 2010 15:18:42,015 DEBUG ~ re-enabling autocommit
12 10 2010 15:18:42,015 DEBUG ~ committed JDBC Connection
12 10 2010 15:18:42,015 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:18:42,015 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:18:42,038 DEBUG ~ opened session at timestamp: 12868643220
12 10 2010 15:18:42,038 DEBUG ~ begin
12 10 2010 15:18:42,038 DEBUG ~ opening JDBC connection
12 10 2010 15:18:42,038 DEBUG ~ current autocommit status: true
12 10 2010 15:18:42,038 DEBUG ~ disabling autocommit
12 10 2010 15:18:42,316 DEBUG ~ commit
12 10 2010 15:18:42,317 DEBUG ~ re-enabling autocommit
12 10 2010 15:18:42,317 DEBUG ~ committed JDBC Connection
12 10 2010 15:18:42,317 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:18:42,317 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:18:42,343 DEBUG ~ opened session at timestamp: 12868643223
12 10 2010 15:18:42,344 DEBUG ~ begin
12 10 2010 15:18:42,344 DEBUG ~ opening JDBC connection
12 10 2010 15:18:42,344 DEBUG ~ current autocommit status: true
12 10 2010 15:18:42,344 DEBUG ~ disabling autocommit
12 10 2010 15:18:42,601 DEBUG ~ opened session at timestamp: 12868643226
12 10 2010 15:18:42,602 DEBUG ~ begin
12 10 2010 15:18:42,602 DEBUG ~ opening JDBC connection
12 10 2010 15:18:42,602 DEBUG ~ current autocommit status: true
12 10 2010 15:18:42,602 DEBUG ~ disabling autocommit
12 10 2010 15:18:42,631 DEBUG ~ commit
12 10 2010 15:18:42,631 DEBUG ~ re-enabling autocommit
12 10 2010 15:18:42,631 DEBUG ~ committed JDBC Connection
12 10 2010 15:18:42,631 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:18:42,631 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:18:42,636 DEBUG ~ commit
12 10 2010 15:18:42,636 DEBUG ~ re-enabling autocommit
12 10 2010 15:18:42,636 DEBUG ~ committed JDBC Connection
12 10 2010 15:18:42,637 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:18:42,637 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:18:43,585 DEBUG ~ opened session at timestamp: 12868643235
12 10 2010 15:18:43,585 DEBUG ~ begin
12 10 2010 15:18:43,585 DEBUG ~ opening JDBC connection
12 10 2010 15:18:43,585 DEBUG ~ current autocommit status: true
12 10 2010 15:18:43,585 DEBUG ~ disabling autocommit
12 10 2010 15:18:43,603 DEBUG ~ commit
12 10 2010 15:18:43,603 DEBUG ~ re-enabling autocommit
12 10 2010 15:18:43,604 DEBUG ~ committed JDBC Connection
12 10 2010 15:18:43,604 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:18:43,604 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:18:43,702 DEBUG ~ opened session at timestamp: 12868643237
12 10 2010 15:18:43,702 DEBUG ~ begin
12 10 2010 15:18:43,702 DEBUG ~ opening JDBC connection
12 10 2010 15:18:43,702 DEBUG ~ current autocommit status: true
12 10 2010 15:18:43,702 DEBUG ~ disabling autocommit
12 10 2010 15:18:43,753 DEBUG ~ commit
12 10 2010 15:18:43,753 DEBUG ~ re-enabling autocommit
12 10 2010 15:18:43,753 DEBUG ~ committed JDBC Connection
12 10 2010 15:18:43,753 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:18:43,753 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:18:43,831 DEBUG ~ opened session at timestamp: 12868643238
12 10 2010 15:18:43,832 DEBUG ~ begin
12 10 2010 15:18:43,832 DEBUG ~ opening JDBC connection
12 10 2010 15:18:43,832 DEBUG ~ current autocommit status: true
12 10 2010 15:18:43,832 DEBUG ~ disabling autocommit
12 10 2010 15:18:43,872 DEBUG ~ commit
12 10 2010 15:18:43,873 DEBUG ~ re-enabling autocommit
12 10 2010 15:18:43,873 DEBUG ~ committed JDBC Connection
12 10 2010 15:18:43,873 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:18:43,873 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:18:44,155 DEBUG ~ opened session at timestamp: 12868643241
12 10 2010 15:18:44,155 DEBUG ~ begin
12 10 2010 15:18:44,155 DEBUG ~ opening JDBC connection
12 10 2010 15:18:44,155 DEBUG ~ current autocommit status: true
12 10 2010 15:18:44,155 DEBUG ~ disabling autocommit
12 10 2010 15:18:44,180 DEBUG ~ commit
12 10 2010 15:18:44,181 DEBUG ~ re-enabling autocommit
12 10 2010 15:18:44,181 DEBUG ~ committed JDBC Connection
12 10 2010 15:18:44,181 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:18:44,181 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:18:44,662 DEBUG ~ opened session at timestamp: 12868643246
12 10 2010 15:18:44,662 DEBUG ~ begin
12 10 2010 15:18:44,662 DEBUG ~ opening JDBC connection
12 10 2010 15:18:44,662 DEBUG ~ current autocommit status: true
12 10 2010 15:18:44,662 DEBUG ~ disabling autocommit
12 10 2010 15:18:44,665 DEBUG ~ commit
12 10 2010 15:18:44,665 DEBUG ~ re-enabling autocommit
12 10 2010 15:18:44,665 DEBUG ~ committed JDBC Connection
12 10 2010 15:18:44,665 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:18:44,665 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:18:44,692 DEBUG ~ opened session at timestamp: 12868643246
12 10 2010 15:18:44,692 DEBUG ~ begin
12 10 2010 15:18:44,692 DEBUG ~ opening JDBC connection
12 10 2010 15:18:44,692 DEBUG ~ current autocommit status: true
12 10 2010 15:18:44,692 DEBUG ~ disabling autocommit
12 10 2010 15:18:44,697 DEBUG ~ commit
12 10 2010 15:18:44,697 DEBUG ~ re-enabling autocommit
12 10 2010 15:18:44,697 DEBUG ~ committed JDBC Connection
12 10 2010 15:18:44,698 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:18:44,698 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:20:03,993 ERROR ~ 

@645j8gm95
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 14)
The file /test/BasicTest.scala could not be compiled. Error raised is : not found: value find

play.exceptions.CompilationException: not found: value find
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 15:22:10,829 ERROR ~ 

@645j8gm96
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 17)
The file /test/BasicTest.scala could not be compiled. Error raised is : value fullname is not a member of Option[models.User]

play.exceptions.CompilationException: value fullname is not a member of Option[models.User]
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 15:22:28,756 INFO  ~ closing
12 10 2010 15:22:28,756 INFO  ~ Running hbm2ddl schema export
12 10 2010 15:22:28,756 DEBUG ~ import file not found: /import.sql
12 10 2010 15:22:28,756 INFO  ~ exporting generated schema to database
12 10 2010 15:22:28,756 DEBUG ~ drop table User if exists
12 10 2010 15:22:28,757 INFO  ~ schema export complete
12 10 2010 15:22:28,809 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 15:22:28,809 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
12 10 2010 15:22:28,809 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
12 10 2010 15:22:28,809 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
12 10 2010 15:22:28,809 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
12 10 2010 15:22:28,809 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
12 10 2010 15:22:28,809 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
12 10 2010 15:22:28,809 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
12 10 2010 15:22:28,810 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
12 10 2010 15:22:28,810 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
12 10 2010 15:22:28,810 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 15:22:28,810 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
12 10 2010 15:22:28,810 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
12 10 2010 15:22:28,810 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
12 10 2010 15:22:28,810 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:22:28,811 DEBUG ~ Process hbm files
12 10 2010 15:22:28,811 DEBUG ~ Process annotated classes
12 10 2010 15:22:28,811 INFO  ~ Binding entity from annotated class: models.User
12 10 2010 15:22:28,811 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 15:22:28,811 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 15:22:28,811 DEBUG ~ Import with entity name User
12 10 2010 15:22:28,811 INFO  ~ Bind entity models.User on table User
12 10 2010 15:22:28,814 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 15:22:28,814 DEBUG ~ binding property id with lazy=false
12 10 2010 15:22:28,814 DEBUG ~ building SimpleValue for id
12 10 2010 15:22:28,815 DEBUG ~ Building property id
12 10 2010 15:22:28,816 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
12 10 2010 15:22:28,816 DEBUG ~ binding property email with lazy=false
12 10 2010 15:22:28,816 DEBUG ~ building SimpleValue for email
12 10 2010 15:22:28,816 DEBUG ~ Building property email
12 10 2010 15:22:28,816 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
12 10 2010 15:22:28,816 DEBUG ~ binding property fullname with lazy=false
12 10 2010 15:22:28,816 DEBUG ~ building SimpleValue for fullname
12 10 2010 15:22:28,816 DEBUG ~ Building property fullname
12 10 2010 15:22:28,817 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
12 10 2010 15:22:28,817 DEBUG ~ binding property isAdmin with lazy=false
12 10 2010 15:22:28,817 DEBUG ~ building SimpleValue for isAdmin
12 10 2010 15:22:28,817 DEBUG ~ Building property isAdmin
12 10 2010 15:22:28,817 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
12 10 2010 15:22:28,817 DEBUG ~ binding property password with lazy=false
12 10 2010 15:22:28,817 DEBUG ~ building SimpleValue for password
12 10 2010 15:22:28,818 DEBUG ~ Building property password
12 10 2010 15:22:28,819 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 15:22:28,819 DEBUG ~ setting SimpleValue typeName for email
12 10 2010 15:22:28,819 DEBUG ~ setting SimpleValue typeName for fullname
12 10 2010 15:22:28,819 DEBUG ~ setting SimpleValue typeName for isAdmin
12 10 2010 15:22:28,819 DEBUG ~ setting SimpleValue typeName for password
12 10 2010 15:22:28,819 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:22:28,819 DEBUG ~ processing extends queue
12 10 2010 15:22:28,819 DEBUG ~ processing collection mappings
12 10 2010 15:22:28,819 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:22:28,819 DEBUG ~ processing association property references
12 10 2010 15:22:28,820 DEBUG ~ processing foreign key constraints
12 10 2010 15:22:28,821 INFO  ~ Hibernate Validator not found: ignoring
12 10 2010 15:22:28,827 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
12 10 2010 15:22:28,828 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
12 10 2010 15:22:28,831 DEBUG ~ Search not present in classpath, ignoring event listener registration.
12 10 2010 15:22:28,831 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
12 10 2010 15:22:28,831 DEBUG ~ Preparing to build session factory with filters : {}
12 10 2010 15:22:28,831 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:22:28,831 DEBUG ~ Process hbm files
12 10 2010 15:22:28,831 DEBUG ~ Process annotated classes
12 10 2010 15:22:28,831 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:22:28,831 DEBUG ~ processing extends queue
12 10 2010 15:22:28,831 DEBUG ~ processing collection mappings
12 10 2010 15:22:28,831 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:22:28,831 DEBUG ~ processing association property references
12 10 2010 15:22:28,831 DEBUG ~ processing foreign key constraints
12 10 2010 15:22:28,833 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
12 10 2010 15:22:28,833 INFO  ~ Using provided datasource
12 10 2010 15:22:28,833 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
12 10 2010 15:22:28,833 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
12 10 2010 15:22:28,834 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
12 10 2010 15:22:28,834 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
12 10 2010 15:22:28,834 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
12 10 2010 15:22:28,834 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
12 10 2010 15:22:28,834 INFO  ~ Automatic flush during beforeCompletion(): disabled
12 10 2010 15:22:28,834 INFO  ~ Automatic session close at end of transaction: disabled
12 10 2010 15:22:28,834 INFO  ~ JDBC batch size: 15
12 10 2010 15:22:28,835 INFO  ~ JDBC batch updates for versioned data: disabled
12 10 2010 15:22:28,835 INFO  ~ Scrollable result sets: enabled
12 10 2010 15:22:28,835 DEBUG ~ Wrap result sets: disabled
12 10 2010 15:22:28,835 INFO  ~ JDBC3 getGeneratedKeys(): disabled
12 10 2010 15:22:28,835 INFO  ~ Connection release mode: auto
12 10 2010 15:22:28,835 INFO  ~ Default batch fetch size: 1
12 10 2010 15:22:28,835 INFO  ~ Generate SQL with comments: disabled
12 10 2010 15:22:28,835 INFO  ~ Order SQL updates by primary key: disabled
12 10 2010 15:22:28,835 INFO  ~ Order SQL inserts for batching: disabled
12 10 2010 15:22:28,835 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
12 10 2010 15:22:28,835 INFO  ~ Using ASTQueryTranslatorFactory
12 10 2010 15:22:28,835 INFO  ~ Query language substitutions: {}
12 10 2010 15:22:28,835 INFO  ~ JPA-QL strict compliance: enabled
12 10 2010 15:22:28,836 INFO  ~ Second-level cache: enabled
12 10 2010 15:22:28,836 INFO  ~ Query cache: disabled
12 10 2010 15:22:28,836 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
12 10 2010 15:22:28,836 INFO  ~ Optimize cache for minimal puts: disabled
12 10 2010 15:22:28,836 INFO  ~ Structured second-level cache entries: disabled
12 10 2010 15:22:28,836 INFO  ~ Statistics: disabled
12 10 2010 15:22:28,836 INFO  ~ Deleted entity synthetic identifier rollback: disabled
12 10 2010 15:22:28,836 INFO  ~ Default entity-mode: pojo
12 10 2010 15:22:28,836 INFO  ~ Named query checking : enabled
12 10 2010 15:22:28,836 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
12 10 2010 15:22:28,840 INFO  ~ building session factory
12 10 2010 15:22:28,841 DEBUG ~ Session factory constructed with filter configurations : {}
12 10 2010 15:22:28,841 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
12 10 2010 15:22:28,841 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:22:28,849 DEBUG ~ Static SQL for entity: models.User
12 10 2010 15:22:28,850 DEBUG ~  Version select: select id from User where id =?
12 10 2010 15:22:28,850 DEBUG ~  Snapshot select: select user_.id, user_.email as email4_, user_.fullname as fullname4_, user_.isAdmin as isAdmin4_, user_.password as password4_ from User user_ where user_.id=?
12 10 2010 15:22:28,850 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
12 10 2010 15:22:28,850 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
12 10 2010 15:22:28,850 DEBUG ~  Delete 0: delete from User where id=?
12 10 2010 15:22:28,850 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
12 10 2010 15:22:28,850 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id4_0_, user0_.email as email4_0_, user0_.fullname as fullname4_0_, user0_.isAdmin as isAdmin4_0_, user0_.password as password4_0_ from User user0_ where user0_.id=?
12 10 2010 15:22:28,850 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id4_0_, user0_.email as email4_0_, user0_.fullname as fullname4_0_, user0_.isAdmin as isAdmin4_0_, user0_.password as password4_0_ from User user0_ where user0_.id=?
12 10 2010 15:22:28,850 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id4_0_, user0_.email as email4_0_, user0_.fullname as fullname4_0_, user0_.isAdmin as isAdmin4_0_, user0_.password as password4_0_ from User user0_ where user0_.id=?
12 10 2010 15:22:28,851 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id4_0_, user0_.email as email4_0_, user0_.fullname as fullname4_0_, user0_.isAdmin as isAdmin4_0_, user0_.password as password4_0_ from User user0_ where user0_.id=?
12 10 2010 15:22:28,851 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id4_0_, user0_.email as email4_0_, user0_.fullname as fullname4_0_, user0_.isAdmin as isAdmin4_0_, user0_.password as password4_0_ from User user0_ where user0_.id=?
12 10 2010 15:22:28,851 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id4_0_, user0_.email as email4_0_, user0_.fullname as fullname4_0_, user0_.isAdmin as isAdmin4_0_, user0_.password as password4_0_ from User user0_ where user0_.id=?
12 10 2010 15:22:28,851 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id4_0_, user0_.email as email4_0_, user0_.fullname as fullname4_0_, user0_.isAdmin as isAdmin4_0_, user0_.password as password4_0_ from User user0_ where user0_.id=?
12 10 2010 15:22:28,851 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id4_0_, user0_.email as email4_0_, user0_.fullname as fullname4_0_, user0_.isAdmin as isAdmin4_0_, user0_.password as password4_0_ from User user0_ where user0_.id=?
12 10 2010 15:22:28,851 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id4_0_, user0_.email as email4_0_, user0_.fullname as fullname4_0_, user0_.isAdmin as isAdmin4_0_, user0_.password as password4_0_ from User user0_ where user0_.id=?
12 10 2010 15:22:28,852 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id4_0_, user0_.email as email4_0_, user0_.fullname as fullname4_0_, user0_.isAdmin as isAdmin4_0_, user0_.password as password4_0_ from User user0_ where user0_.id=?
12 10 2010 15:22:28,852 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id4_0_, user0_.email as email4_0_, user0_.fullname as fullname4_0_, user0_.isAdmin as isAdmin4_0_, user0_.password as password4_0_ from User user0_ where user0_.id=?
12 10 2010 15:22:28,852 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id4_0_, user0_.email as email4_0_, user0_.fullname as fullname4_0_, user0_.isAdmin as isAdmin4_0_, user0_.password as password4_0_ from User user0_ where user0_.id=?
12 10 2010 15:22:28,852 DEBUG ~ registered: 2c9082cd2b9f0d81012b9f1ab3f40002 (unnamed)
12 10 2010 15:22:28,852 INFO  ~ Not binding factory to JNDI, no JNDI name configured
12 10 2010 15:22:28,852 DEBUG ~ instantiated session factory
12 10 2010 15:22:28,852 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:22:28,853 DEBUG ~ Process hbm files
12 10 2010 15:22:28,853 DEBUG ~ Process annotated classes
12 10 2010 15:22:28,853 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:22:28,853 DEBUG ~ processing extends queue
12 10 2010 15:22:28,853 DEBUG ~ processing collection mappings
12 10 2010 15:22:28,853 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:22:28,853 DEBUG ~ processing association property references
12 10 2010 15:22:28,853 DEBUG ~ processing foreign key constraints
12 10 2010 15:22:28,855 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:22:28,855 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:22:28,855 DEBUG ~ Process hbm files
12 10 2010 15:22:28,855 DEBUG ~ Process annotated classes
12 10 2010 15:22:28,855 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:22:28,855 DEBUG ~ processing extends queue
12 10 2010 15:22:28,855 DEBUG ~ processing collection mappings
12 10 2010 15:22:28,855 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:22:28,855 DEBUG ~ processing association property references
12 10 2010 15:22:28,855 DEBUG ~ processing foreign key constraints
12 10 2010 15:22:28,857 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:22:28,857 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:22:28,857 INFO  ~ Running hbm2ddl schema export
12 10 2010 15:22:28,857 DEBUG ~ import file not found: /import.sql
12 10 2010 15:22:28,857 INFO  ~ exporting generated schema to database
12 10 2010 15:22:28,858 DEBUG ~ drop table User if exists
12 10 2010 15:22:28,858 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
12 10 2010 15:22:28,858 INFO  ~ schema export complete
12 10 2010 15:22:28,858 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:22:28,858 DEBUG ~ Process hbm files
12 10 2010 15:22:28,858 DEBUG ~ Process annotated classes
12 10 2010 15:22:28,858 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:22:28,858 DEBUG ~ processing extends queue
12 10 2010 15:22:28,858 DEBUG ~ processing collection mappings
12 10 2010 15:22:28,858 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:22:28,859 DEBUG ~ processing association property references
12 10 2010 15:22:28,859 DEBUG ~ processing foreign key constraints
12 10 2010 15:22:28,860 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:22:28,860 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:22:28,860 DEBUG ~ Process hbm files
12 10 2010 15:22:28,861 DEBUG ~ Process annotated classes
12 10 2010 15:22:28,861 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:22:28,861 DEBUG ~ processing extends queue
12 10 2010 15:22:28,861 DEBUG ~ processing collection mappings
12 10 2010 15:22:28,861 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:22:28,861 DEBUG ~ processing association property references
12 10 2010 15:22:28,861 DEBUG ~ processing foreign key constraints
12 10 2010 15:22:28,862 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:22:28,863 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:22:28,863 DEBUG ~ Checking 0 named HQL queries
12 10 2010 15:22:28,863 DEBUG ~ Checking 0 named SQL queries
12 10 2010 15:22:28,869 DEBUG ~ opened session at timestamp: 12868645488
12 10 2010 15:22:28,869 DEBUG ~ begin
12 10 2010 15:22:28,869 DEBUG ~ opening JDBC connection
12 10 2010 15:22:28,869 DEBUG ~ current autocommit status: true
12 10 2010 15:22:28,870 DEBUG ~ disabling autocommit
12 10 2010 15:22:28,981 DEBUG ~ commit
12 10 2010 15:22:28,981 DEBUG ~ re-enabling autocommit
12 10 2010 15:22:28,981 DEBUG ~ committed JDBC Connection
12 10 2010 15:22:28,981 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:22:28,981 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:22:31,645 DEBUG ~ opened session at timestamp: 12868645516
12 10 2010 15:22:31,645 DEBUG ~ begin
12 10 2010 15:22:31,645 DEBUG ~ opening JDBC connection
12 10 2010 15:22:31,645 DEBUG ~ current autocommit status: true
12 10 2010 15:22:31,645 DEBUG ~ disabling autocommit
12 10 2010 15:22:31,685 DEBUG ~ commit
12 10 2010 15:22:31,685 DEBUG ~ re-enabling autocommit
12 10 2010 15:22:31,685 DEBUG ~ committed JDBC Connection
12 10 2010 15:22:31,685 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:22:31,685 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:22:31,699 DEBUG ~ opened session at timestamp: 12868645516
12 10 2010 15:22:31,699 DEBUG ~ begin
12 10 2010 15:22:31,699 DEBUG ~ opening JDBC connection
12 10 2010 15:22:31,700 DEBUG ~ current autocommit status: true
12 10 2010 15:22:31,700 DEBUG ~ disabling autocommit
12 10 2010 15:22:31,988 DEBUG ~ executing identity-insert immediately
12 10 2010 15:22:31,988 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:22:31,994 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:22:31,994 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:22:32,002 DEBUG ~ Natively generated identity: 1
12 10 2010 15:22:32,002 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:22:32,006 DEBUG ~ processing flush-time cascades
12 10 2010 15:22:32,006 DEBUG ~ dirty checking collections
12 10 2010 15:22:32,009 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 15:22:32,009 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:22:32,010 DEBUG ~ listing entities:
12 10 2010 15:22:32,010 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:22:32,097 DEBUG ~ parse() - HQL: from models.User where email = ?
12 10 2010 15:22:32,110 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'email'
          \-[PARAM] Node: '?'

12 10 2010 15:22:32,111 DEBUG ~ throwQueryException() : no errors
12 10 2010 15:22:32,161 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 15:22:32,179 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 15:22:32,182 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 15:22:32,183 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 15:22:32,185 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 15:22:32,187 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 15:22:32,187 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.email {synthetic-alias} email ) ? ) ) )
12 10 2010 15:22:32,192 DEBUG ~ Derived SELECT clause created.
12 10 2010 15:22:32,198 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 15:22:32,198 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 15:22:32,200 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id4_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email4_, user0_.fullname as fullname4_, user0_.isAdmin as isAdmin4_, user0_.password as password4_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'email' {originalText=email}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 15:22:32,200 DEBUG ~ throwQueryException() : no errors
12 10 2010 15:22:32,217 DEBUG ~ HQL: from models.User where email = ?
12 10 2010 15:22:32,217 DEBUG ~ SQL: select user0_.id as id4_, user0_.email as email4_, user0_.fullname as fullname4_, user0_.isAdmin as isAdmin4_, user0_.password as password4_ from User user0_ where user0_.email=?
12 10 2010 15:22:32,217 DEBUG ~ throwQueryException() : no errors
12 10 2010 15:22:32,253 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:22:32,253 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:22:32,254 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:22:32,254 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:22:32,254 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:22:32,255 DEBUG ~ initializing non-lazy collections
12 10 2010 15:22:32,282 DEBUG ~ commit
12 10 2010 15:22:32,282 DEBUG ~ processing flush-time cascades
12 10 2010 15:22:32,282 DEBUG ~ dirty checking collections
12 10 2010 15:22:32,282 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 15:22:32,282 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:22:32,282 DEBUG ~ listing entities:
12 10 2010 15:22:32,282 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:22:32,283 DEBUG ~ re-enabling autocommit
12 10 2010 15:22:32,283 DEBUG ~ committed JDBC Connection
12 10 2010 15:22:32,283 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:22:32,283 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:22:32,325 DEBUG ~ opened session at timestamp: 12868645523
12 10 2010 15:22:32,326 DEBUG ~ begin
12 10 2010 15:22:32,326 DEBUG ~ opening JDBC connection
12 10 2010 15:22:32,326 DEBUG ~ current autocommit status: true
12 10 2010 15:22:32,326 DEBUG ~ disabling autocommit
12 10 2010 15:22:32,330 DEBUG ~ commit
12 10 2010 15:22:32,330 DEBUG ~ re-enabling autocommit
12 10 2010 15:22:32,330 DEBUG ~ committed JDBC Connection
12 10 2010 15:22:32,330 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:22:32,330 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:29:48,320 ERROR ~ 

@645j8gm97
Internal Server Error (500) for request GET /@tests

Compilation error (In /app/models/User.scala around line 21)
The file /app/models/User.scala could not be compiled. Error raised is : not found: value self

play.exceptions.CompilationException: not found: value self
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 15:30:00,990 ERROR ~ 

@645j8gm98
Internal Server Error (500) for request GET /@tests

Compilation error (In /app/models/User.scala around line 21)
The file /app/models/User.scala could not be compiled. Error raised is : method connect has return statement; needs result type

play.exceptions.CompilationException: method connect has return statement; needs result type
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 15:30:20,013 INFO  ~ closing
12 10 2010 15:30:20,014 INFO  ~ Running hbm2ddl schema export
12 10 2010 15:30:20,014 DEBUG ~ import file not found: /import.sql
12 10 2010 15:30:20,014 INFO  ~ exporting generated schema to database
12 10 2010 15:30:20,014 DEBUG ~ drop table User if exists
12 10 2010 15:30:20,015 INFO  ~ schema export complete
12 10 2010 15:30:22,471 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 15:30:22,471 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
12 10 2010 15:30:22,471 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
12 10 2010 15:30:22,471 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
12 10 2010 15:30:22,471 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
12 10 2010 15:30:22,472 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
12 10 2010 15:30:22,472 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
12 10 2010 15:30:22,472 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
12 10 2010 15:30:22,472 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
12 10 2010 15:30:22,472 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
12 10 2010 15:30:22,472 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 15:30:22,472 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
12 10 2010 15:30:22,472 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
12 10 2010 15:30:22,472 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
12 10 2010 15:30:22,473 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:30:22,473 DEBUG ~ Process hbm files
12 10 2010 15:30:22,473 DEBUG ~ Process annotated classes
12 10 2010 15:30:22,473 INFO  ~ Binding entity from annotated class: models.User
12 10 2010 15:30:22,473 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 15:30:22,473 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 15:30:22,474 DEBUG ~ Import with entity name User
12 10 2010 15:30:22,474 INFO  ~ Bind entity models.User on table User
12 10 2010 15:30:22,476 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 15:30:22,476 DEBUG ~ binding property id with lazy=false
12 10 2010 15:30:22,477 DEBUG ~ building SimpleValue for id
12 10 2010 15:30:22,477 DEBUG ~ Building property id
12 10 2010 15:30:22,477 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
12 10 2010 15:30:22,477 DEBUG ~ binding property email with lazy=false
12 10 2010 15:30:22,477 DEBUG ~ building SimpleValue for email
12 10 2010 15:30:22,477 DEBUG ~ Building property email
12 10 2010 15:30:22,477 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
12 10 2010 15:30:22,477 DEBUG ~ binding property fullname with lazy=false
12 10 2010 15:30:22,477 DEBUG ~ building SimpleValue for fullname
12 10 2010 15:30:22,477 DEBUG ~ Building property fullname
12 10 2010 15:30:22,478 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
12 10 2010 15:30:22,478 DEBUG ~ binding property isAdmin with lazy=false
12 10 2010 15:30:22,478 DEBUG ~ building SimpleValue for isAdmin
12 10 2010 15:30:22,478 DEBUG ~ Building property isAdmin
12 10 2010 15:30:22,478 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
12 10 2010 15:30:22,478 DEBUG ~ binding property password with lazy=false
12 10 2010 15:30:22,478 DEBUG ~ building SimpleValue for password
12 10 2010 15:30:22,478 DEBUG ~ Building property password
12 10 2010 15:30:22,478 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 15:30:22,478 DEBUG ~ setting SimpleValue typeName for email
12 10 2010 15:30:22,479 DEBUG ~ setting SimpleValue typeName for fullname
12 10 2010 15:30:22,479 DEBUG ~ setting SimpleValue typeName for isAdmin
12 10 2010 15:30:22,479 DEBUG ~ setting SimpleValue typeName for password
12 10 2010 15:30:22,479 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:30:22,479 DEBUG ~ processing extends queue
12 10 2010 15:30:22,479 DEBUG ~ processing collection mappings
12 10 2010 15:30:22,479 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:30:22,479 DEBUG ~ processing association property references
12 10 2010 15:30:22,479 DEBUG ~ processing foreign key constraints
12 10 2010 15:30:22,487 INFO  ~ Hibernate Validator not found: ignoring
12 10 2010 15:30:22,499 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
12 10 2010 15:30:22,500 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
12 10 2010 15:30:22,502 DEBUG ~ Search not present in classpath, ignoring event listener registration.
12 10 2010 15:30:22,502 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
12 10 2010 15:30:22,502 DEBUG ~ Preparing to build session factory with filters : {}
12 10 2010 15:30:22,502 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:30:22,502 DEBUG ~ Process hbm files
12 10 2010 15:30:22,502 DEBUG ~ Process annotated classes
12 10 2010 15:30:22,502 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:30:22,502 DEBUG ~ processing extends queue
12 10 2010 15:30:22,503 DEBUG ~ processing collection mappings
12 10 2010 15:30:22,503 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:30:22,503 DEBUG ~ processing association property references
12 10 2010 15:30:22,503 DEBUG ~ processing foreign key constraints
12 10 2010 15:30:22,504 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
12 10 2010 15:30:22,505 INFO  ~ Using provided datasource
12 10 2010 15:30:22,505 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
12 10 2010 15:30:22,505 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
12 10 2010 15:30:22,505 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
12 10 2010 15:30:22,505 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
12 10 2010 15:30:22,506 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
12 10 2010 15:30:22,506 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
12 10 2010 15:30:22,506 INFO  ~ Automatic flush during beforeCompletion(): disabled
12 10 2010 15:30:22,506 INFO  ~ Automatic session close at end of transaction: disabled
12 10 2010 15:30:22,506 INFO  ~ JDBC batch size: 15
12 10 2010 15:30:22,506 INFO  ~ JDBC batch updates for versioned data: disabled
12 10 2010 15:30:22,506 INFO  ~ Scrollable result sets: enabled
12 10 2010 15:30:22,506 DEBUG ~ Wrap result sets: disabled
12 10 2010 15:30:22,506 INFO  ~ JDBC3 getGeneratedKeys(): disabled
12 10 2010 15:30:22,506 INFO  ~ Connection release mode: auto
12 10 2010 15:30:22,506 INFO  ~ Default batch fetch size: 1
12 10 2010 15:30:22,506 INFO  ~ Generate SQL with comments: disabled
12 10 2010 15:30:22,506 INFO  ~ Order SQL updates by primary key: disabled
12 10 2010 15:30:22,507 INFO  ~ Order SQL inserts for batching: disabled
12 10 2010 15:30:22,507 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
12 10 2010 15:30:22,507 INFO  ~ Using ASTQueryTranslatorFactory
12 10 2010 15:30:22,507 INFO  ~ Query language substitutions: {}
12 10 2010 15:30:22,507 INFO  ~ JPA-QL strict compliance: enabled
12 10 2010 15:30:22,507 INFO  ~ Second-level cache: enabled
12 10 2010 15:30:22,507 INFO  ~ Query cache: disabled
12 10 2010 15:30:22,507 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
12 10 2010 15:30:22,507 INFO  ~ Optimize cache for minimal puts: disabled
12 10 2010 15:30:22,507 INFO  ~ Structured second-level cache entries: disabled
12 10 2010 15:30:22,507 INFO  ~ Statistics: disabled
12 10 2010 15:30:22,507 INFO  ~ Deleted entity synthetic identifier rollback: disabled
12 10 2010 15:30:22,508 INFO  ~ Default entity-mode: pojo
12 10 2010 15:30:22,508 INFO  ~ Named query checking : enabled
12 10 2010 15:30:22,508 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
12 10 2010 15:30:22,511 INFO  ~ building session factory
12 10 2010 15:30:22,512 DEBUG ~ Session factory constructed with filter configurations : {}
12 10 2010 15:30:22,512 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
12 10 2010 15:30:22,512 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:30:22,520 DEBUG ~ Static SQL for entity: models.User
12 10 2010 15:30:22,520 DEBUG ~  Version select: select id from User where id =?
12 10 2010 15:30:22,520 DEBUG ~  Snapshot select: select user_.id, user_.email as email6_, user_.fullname as fullname6_, user_.isAdmin as isAdmin6_, user_.password as password6_ from User user_ where user_.id=?
12 10 2010 15:30:22,520 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
12 10 2010 15:30:22,520 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
12 10 2010 15:30:22,520 DEBUG ~  Delete 0: delete from User where id=?
12 10 2010 15:30:22,520 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
12 10 2010 15:30:22,521 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id6_0_, user0_.email as email6_0_, user0_.fullname as fullname6_0_, user0_.isAdmin as isAdmin6_0_, user0_.password as password6_0_ from User user0_ where user0_.id=?
12 10 2010 15:30:22,521 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id6_0_, user0_.email as email6_0_, user0_.fullname as fullname6_0_, user0_.isAdmin as isAdmin6_0_, user0_.password as password6_0_ from User user0_ where user0_.id=?
12 10 2010 15:30:22,521 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id6_0_, user0_.email as email6_0_, user0_.fullname as fullname6_0_, user0_.isAdmin as isAdmin6_0_, user0_.password as password6_0_ from User user0_ where user0_.id=?
12 10 2010 15:30:22,521 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id6_0_, user0_.email as email6_0_, user0_.fullname as fullname6_0_, user0_.isAdmin as isAdmin6_0_, user0_.password as password6_0_ from User user0_ where user0_.id=?
12 10 2010 15:30:22,521 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id6_0_, user0_.email as email6_0_, user0_.fullname as fullname6_0_, user0_.isAdmin as isAdmin6_0_, user0_.password as password6_0_ from User user0_ where user0_.id=?
12 10 2010 15:30:22,522 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id6_0_, user0_.email as email6_0_, user0_.fullname as fullname6_0_, user0_.isAdmin as isAdmin6_0_, user0_.password as password6_0_ from User user0_ where user0_.id=?
12 10 2010 15:30:22,522 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id6_0_, user0_.email as email6_0_, user0_.fullname as fullname6_0_, user0_.isAdmin as isAdmin6_0_, user0_.password as password6_0_ from User user0_ where user0_.id=?
12 10 2010 15:30:22,522 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id6_0_, user0_.email as email6_0_, user0_.fullname as fullname6_0_, user0_.isAdmin as isAdmin6_0_, user0_.password as password6_0_ from User user0_ where user0_.id=?
12 10 2010 15:30:22,522 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id6_0_, user0_.email as email6_0_, user0_.fullname as fullname6_0_, user0_.isAdmin as isAdmin6_0_, user0_.password as password6_0_ from User user0_ where user0_.id=?
12 10 2010 15:30:22,522 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id6_0_, user0_.email as email6_0_, user0_.fullname as fullname6_0_, user0_.isAdmin as isAdmin6_0_, user0_.password as password6_0_ from User user0_ where user0_.id=?
12 10 2010 15:30:22,522 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id6_0_, user0_.email as email6_0_, user0_.fullname as fullname6_0_, user0_.isAdmin as isAdmin6_0_, user0_.password as password6_0_ from User user0_ where user0_.id=?
12 10 2010 15:30:22,523 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id6_0_, user0_.email as email6_0_, user0_.fullname as fullname6_0_, user0_.isAdmin as isAdmin6_0_, user0_.password as password6_0_ from User user0_ where user0_.id=?
12 10 2010 15:30:22,523 DEBUG ~ registered: 2c9082cd2b9f0d81012b9f21ee3b0003 (unnamed)
12 10 2010 15:30:22,523 INFO  ~ Not binding factory to JNDI, no JNDI name configured
12 10 2010 15:30:22,523 DEBUG ~ instantiated session factory
12 10 2010 15:30:22,523 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:30:22,523 DEBUG ~ Process hbm files
12 10 2010 15:30:22,523 DEBUG ~ Process annotated classes
12 10 2010 15:30:22,523 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:30:22,523 DEBUG ~ processing extends queue
12 10 2010 15:30:22,523 DEBUG ~ processing collection mappings
12 10 2010 15:30:22,523 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:30:22,523 DEBUG ~ processing association property references
12 10 2010 15:30:22,523 DEBUG ~ processing foreign key constraints
12 10 2010 15:30:22,525 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:30:22,525 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:30:22,525 DEBUG ~ Process hbm files
12 10 2010 15:30:22,525 DEBUG ~ Process annotated classes
12 10 2010 15:30:22,526 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:30:22,526 DEBUG ~ processing extends queue
12 10 2010 15:30:22,526 DEBUG ~ processing collection mappings
12 10 2010 15:30:22,526 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:30:22,526 DEBUG ~ processing association property references
12 10 2010 15:30:22,526 DEBUG ~ processing foreign key constraints
12 10 2010 15:30:22,527 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:30:22,527 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:30:22,527 INFO  ~ Running hbm2ddl schema export
12 10 2010 15:30:22,528 DEBUG ~ import file not found: /import.sql
12 10 2010 15:30:22,528 INFO  ~ exporting generated schema to database
12 10 2010 15:30:22,528 DEBUG ~ drop table User if exists
12 10 2010 15:30:22,528 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
12 10 2010 15:30:22,529 INFO  ~ schema export complete
12 10 2010 15:30:22,529 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:30:22,529 DEBUG ~ Process hbm files
12 10 2010 15:30:22,529 DEBUG ~ Process annotated classes
12 10 2010 15:30:22,529 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:30:22,529 DEBUG ~ processing extends queue
12 10 2010 15:30:22,529 DEBUG ~ processing collection mappings
12 10 2010 15:30:22,529 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:30:22,529 DEBUG ~ processing association property references
12 10 2010 15:30:22,529 DEBUG ~ processing foreign key constraints
12 10 2010 15:30:22,531 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:30:22,531 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:30:22,531 DEBUG ~ Process hbm files
12 10 2010 15:30:22,531 DEBUG ~ Process annotated classes
12 10 2010 15:30:22,531 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:30:22,531 DEBUG ~ processing extends queue
12 10 2010 15:30:22,531 DEBUG ~ processing collection mappings
12 10 2010 15:30:22,531 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:30:22,531 DEBUG ~ processing association property references
12 10 2010 15:30:22,531 DEBUG ~ processing foreign key constraints
12 10 2010 15:30:22,533 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:30:22,533 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:30:22,533 DEBUG ~ Checking 0 named HQL queries
12 10 2010 15:30:22,533 DEBUG ~ Checking 0 named SQL queries
12 10 2010 15:30:22,537 DEBUG ~ opened session at timestamp: 12868650225
12 10 2010 15:30:22,537 DEBUG ~ begin
12 10 2010 15:30:22,537 DEBUG ~ opening JDBC connection
12 10 2010 15:30:22,538 DEBUG ~ current autocommit status: true
12 10 2010 15:30:22,538 DEBUG ~ disabling autocommit
12 10 2010 15:30:22,638 DEBUG ~ commit
12 10 2010 15:30:22,638 DEBUG ~ re-enabling autocommit
12 10 2010 15:30:22,638 DEBUG ~ committed JDBC Connection
12 10 2010 15:30:22,639 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:30:22,639 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:30:24,849 DEBUG ~ opened session at timestamp: 12868650248
12 10 2010 15:30:24,849 DEBUG ~ begin
12 10 2010 15:30:24,850 DEBUG ~ opening JDBC connection
12 10 2010 15:30:24,850 DEBUG ~ current autocommit status: true
12 10 2010 15:30:24,850 DEBUG ~ disabling autocommit
12 10 2010 15:30:24,874 DEBUG ~ commit
12 10 2010 15:30:24,874 DEBUG ~ re-enabling autocommit
12 10 2010 15:30:24,874 DEBUG ~ committed JDBC Connection
12 10 2010 15:30:24,875 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:30:24,875 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:30:24,898 DEBUG ~ opened session at timestamp: 12868650248
12 10 2010 15:30:24,899 DEBUG ~ begin
12 10 2010 15:30:24,899 DEBUG ~ opening JDBC connection
12 10 2010 15:30:24,899 DEBUG ~ current autocommit status: true
12 10 2010 15:30:24,899 DEBUG ~ disabling autocommit
12 10 2010 15:30:25,151 DEBUG ~ executing identity-insert immediately
12 10 2010 15:30:25,151 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:30:25,152 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:30:25,152 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:30:25,152 DEBUG ~ Natively generated identity: 1
12 10 2010 15:30:25,152 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:30:25,152 DEBUG ~ processing flush-time cascades
12 10 2010 15:30:25,152 DEBUG ~ dirty checking collections
12 10 2010 15:30:25,153 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 15:30:25,153 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:30:25,153 DEBUG ~ listing entities:
12 10 2010 15:30:25,153 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:30:25,154 DEBUG ~ parse() - HQL: from models.User where email = ?
12 10 2010 15:30:25,158 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'email'
          \-[PARAM] Node: '?'

12 10 2010 15:30:25,158 DEBUG ~ throwQueryException() : no errors
12 10 2010 15:30:25,158 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 15:30:25,158 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 15:30:25,158 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 15:30:25,159 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 15:30:25,159 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 15:30:25,159 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 15:30:25,159 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.email {synthetic-alias} email ) ? ) ) )
12 10 2010 15:30:25,159 DEBUG ~ Derived SELECT clause created.
12 10 2010 15:30:25,159 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 15:30:25,159 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 15:30:25,160 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id6_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email6_, user0_.fullname as fullname6_, user0_.isAdmin as isAdmin6_, user0_.password as password6_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'email' {originalText=email}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 15:30:25,160 DEBUG ~ throwQueryException() : no errors
12 10 2010 15:30:25,160 DEBUG ~ HQL: from models.User where email = ?
12 10 2010 15:30:25,160 DEBUG ~ SQL: select user0_.id as id6_, user0_.email as email6_, user0_.fullname as fullname6_, user0_.isAdmin as isAdmin6_, user0_.password as password6_ from User user0_ where user0_.email=?
12 10 2010 15:30:25,160 DEBUG ~ throwQueryException() : no errors
12 10 2010 15:30:25,161 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:30:25,161 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:30:25,161 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:30:25,161 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:30:25,162 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:30:25,162 DEBUG ~ initializing non-lazy collections
12 10 2010 15:30:25,162 DEBUG ~ executing identity-insert immediately
12 10 2010 15:30:25,162 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:30:25,162 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:30:25,162 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:30:25,163 DEBUG ~ Natively generated identity: 2
12 10 2010 15:30:25,163 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:30:25,163 DEBUG ~ processing flush-time cascades
12 10 2010 15:30:25,163 DEBUG ~ dirty checking collections
12 10 2010 15:30:25,163 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 15:30:25,163 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:30:25,163 DEBUG ~ listing entities:
12 10 2010 15:30:25,164 DEBUG ~ models.User{id=2, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:30:25,164 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:30:25,165 DEBUG ~ parse() - HQL: from models.User where email = ? AND password = ?
12 10 2010 15:30:25,167 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'AND'
          +-[EQ] Node: '='
          |  +-[IDENT] Node: 'email'
          |  \-[PARAM] Node: '?'
          \-[EQ] Node: '='
             +-[IDENT] Node: 'password'
             \-[PARAM] Node: '?'

12 10 2010 15:30:25,167 DEBUG ~ throwQueryException() : no errors
12 10 2010 15:30:25,167 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 15:30:25,168 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 15:30:25,168 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 15:30:25,168 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 15:30:25,168 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 15:30:25,168 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 15:30:25,168 DEBUG ~ getDataType() : password -> org.hibernate.type.StringType@18b3c498
12 10 2010 15:30:25,168 DEBUG ~ Resolved :  {synthetic-alias}.password -> user0_.password
12 10 2010 15:30:25,169 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 15:30:25,169 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( AND ( = ( user0_.email {synthetic-alias} email ) ? ) ( = ( user0_.password {synthetic-alias} password ) ? ) ) ) )
12 10 2010 15:30:25,169 DEBUG ~ Derived SELECT clause created.
12 10 2010 15:30:25,169 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 15:30:25,169 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 15:30:25,170 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id6_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email6_, user0_.fullname as fullname6_, user0_.isAdmin as isAdmin6_, user0_.password as password6_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'AND'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  |  \-[IDENT] IdentNode: 'email' {originalText=email}
          |  \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'user0_.password' {propertyName=password,dereferenceType=ALL,propertyPath=password,path={synthetic-alias}.password,tableAlias=user0_,className=models.User,classAlias=null}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'password' {originalText=password}
             \-[PARAM] ParameterNode: '?' {ordinal=1, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 15:30:25,170 DEBUG ~ throwQueryException() : no errors
12 10 2010 15:30:25,170 DEBUG ~ HQL: from models.User where email = ? AND password = ?
12 10 2010 15:30:25,170 DEBUG ~ SQL: select user0_.id as id6_, user0_.email as email6_, user0_.fullname as fullname6_, user0_.isAdmin as isAdmin6_, user0_.password as password6_ from User user0_ where user0_.email=? and user0_.password=?
12 10 2010 15:30:25,171 DEBUG ~ throwQueryException() : no errors
12 10 2010 15:30:25,171 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:30:25,172 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:30:25,172 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:30:25,172 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:30:25,172 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:30:25,172 DEBUG ~ initializing non-lazy collections
12 10 2010 15:30:25,172 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:30:25,173 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:30:25,173 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:30:25,173 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:30:25,173 DEBUG ~ initializing non-lazy collections
12 10 2010 15:30:25,229 DEBUG ~ commit
12 10 2010 15:30:25,230 DEBUG ~ processing flush-time cascades
12 10 2010 15:30:25,230 DEBUG ~ dirty checking collections
12 10 2010 15:30:25,230 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 15:30:25,230 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:30:25,230 DEBUG ~ listing entities:
12 10 2010 15:30:25,230 DEBUG ~ models.User{id=2, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:30:25,230 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:30:25,230 DEBUG ~ re-enabling autocommit
12 10 2010 15:30:25,230 DEBUG ~ committed JDBC Connection
12 10 2010 15:30:25,231 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:30:25,231 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:30:25,264 DEBUG ~ opened session at timestamp: 12868650252
12 10 2010 15:30:25,264 DEBUG ~ begin
12 10 2010 15:30:25,265 DEBUG ~ opening JDBC connection
12 10 2010 15:30:25,265 DEBUG ~ current autocommit status: true
12 10 2010 15:30:25,267 DEBUG ~ disabling autocommit
12 10 2010 15:30:25,284 DEBUG ~ commit
12 10 2010 15:30:25,284 DEBUG ~ re-enabling autocommit
12 10 2010 15:30:25,284 DEBUG ~ committed JDBC Connection
12 10 2010 15:30:25,284 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:30:25,284 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:36:25,861 INFO  ~ closing
12 10 2010 15:36:25,861 INFO  ~ Running hbm2ddl schema export
12 10 2010 15:36:25,862 DEBUG ~ import file not found: /import.sql
12 10 2010 15:36:25,862 INFO  ~ exporting generated schema to database
12 10 2010 15:36:25,862 DEBUG ~ drop table User if exists
12 10 2010 15:36:25,862 INFO  ~ schema export complete
12 10 2010 15:36:25,892 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 15:36:25,892 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
12 10 2010 15:36:25,892 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
12 10 2010 15:36:25,892 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
12 10 2010 15:36:25,892 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
12 10 2010 15:36:25,892 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
12 10 2010 15:36:25,892 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
12 10 2010 15:36:25,892 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
12 10 2010 15:36:25,893 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
12 10 2010 15:36:25,893 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
12 10 2010 15:36:25,893 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 15:36:25,893 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
12 10 2010 15:36:25,893 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
12 10 2010 15:36:25,893 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
12 10 2010 15:36:25,893 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:36:25,893 DEBUG ~ Process hbm files
12 10 2010 15:36:25,894 DEBUG ~ Process annotated classes
12 10 2010 15:36:25,894 INFO  ~ Binding entity from annotated class: models.User
12 10 2010 15:36:25,894 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 15:36:25,894 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 15:36:25,894 DEBUG ~ Import with entity name User
12 10 2010 15:36:25,894 INFO  ~ Bind entity models.User on table User
12 10 2010 15:36:25,899 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 15:36:25,899 DEBUG ~ binding property id with lazy=false
12 10 2010 15:36:25,899 DEBUG ~ building SimpleValue for id
12 10 2010 15:36:25,899 DEBUG ~ Building property id
12 10 2010 15:36:25,899 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
12 10 2010 15:36:25,899 DEBUG ~ binding property email with lazy=false
12 10 2010 15:36:25,899 DEBUG ~ building SimpleValue for email
12 10 2010 15:36:25,899 DEBUG ~ Building property email
12 10 2010 15:36:25,899 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
12 10 2010 15:36:25,900 DEBUG ~ binding property fullname with lazy=false
12 10 2010 15:36:25,900 DEBUG ~ building SimpleValue for fullname
12 10 2010 15:36:25,900 DEBUG ~ Building property fullname
12 10 2010 15:36:25,900 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
12 10 2010 15:36:25,900 DEBUG ~ binding property isAdmin with lazy=false
12 10 2010 15:36:25,900 DEBUG ~ building SimpleValue for isAdmin
12 10 2010 15:36:25,900 DEBUG ~ Building property isAdmin
12 10 2010 15:36:25,900 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
12 10 2010 15:36:25,900 DEBUG ~ binding property password with lazy=false
12 10 2010 15:36:25,901 DEBUG ~ building SimpleValue for password
12 10 2010 15:36:25,901 DEBUG ~ Building property password
12 10 2010 15:36:25,901 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 15:36:25,901 DEBUG ~ setting SimpleValue typeName for email
12 10 2010 15:36:25,901 DEBUG ~ setting SimpleValue typeName for fullname
12 10 2010 15:36:25,901 DEBUG ~ setting SimpleValue typeName for isAdmin
12 10 2010 15:36:25,901 DEBUG ~ setting SimpleValue typeName for password
12 10 2010 15:36:25,901 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:36:25,901 DEBUG ~ processing extends queue
12 10 2010 15:36:25,902 DEBUG ~ processing collection mappings
12 10 2010 15:36:25,902 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:36:25,902 DEBUG ~ processing association property references
12 10 2010 15:36:25,902 DEBUG ~ processing foreign key constraints
12 10 2010 15:36:25,903 INFO  ~ Hibernate Validator not found: ignoring
12 10 2010 15:36:25,909 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
12 10 2010 15:36:25,912 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
12 10 2010 15:36:25,916 DEBUG ~ Search not present in classpath, ignoring event listener registration.
12 10 2010 15:36:25,917 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
12 10 2010 15:36:25,917 DEBUG ~ Preparing to build session factory with filters : {}
12 10 2010 15:36:25,917 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:36:25,917 DEBUG ~ Process hbm files
12 10 2010 15:36:25,917 DEBUG ~ Process annotated classes
12 10 2010 15:36:25,917 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:36:25,917 DEBUG ~ processing extends queue
12 10 2010 15:36:25,917 DEBUG ~ processing collection mappings
12 10 2010 15:36:25,917 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:36:25,917 DEBUG ~ processing association property references
12 10 2010 15:36:25,917 DEBUG ~ processing foreign key constraints
12 10 2010 15:36:25,919 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
12 10 2010 15:36:25,919 INFO  ~ Using provided datasource
12 10 2010 15:36:25,920 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
12 10 2010 15:36:25,920 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
12 10 2010 15:36:25,920 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
12 10 2010 15:36:25,920 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
12 10 2010 15:36:25,920 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
12 10 2010 15:36:25,920 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
12 10 2010 15:36:25,921 INFO  ~ Automatic flush during beforeCompletion(): disabled
12 10 2010 15:36:25,921 INFO  ~ Automatic session close at end of transaction: disabled
12 10 2010 15:36:25,921 INFO  ~ JDBC batch size: 15
12 10 2010 15:36:25,921 INFO  ~ JDBC batch updates for versioned data: disabled
12 10 2010 15:36:25,921 INFO  ~ Scrollable result sets: enabled
12 10 2010 15:36:25,921 DEBUG ~ Wrap result sets: disabled
12 10 2010 15:36:25,921 INFO  ~ JDBC3 getGeneratedKeys(): disabled
12 10 2010 15:36:25,921 INFO  ~ Connection release mode: auto
12 10 2010 15:36:25,921 INFO  ~ Default batch fetch size: 1
12 10 2010 15:36:25,921 INFO  ~ Generate SQL with comments: disabled
12 10 2010 15:36:25,921 INFO  ~ Order SQL updates by primary key: disabled
12 10 2010 15:36:25,921 INFO  ~ Order SQL inserts for batching: disabled
12 10 2010 15:36:25,921 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
12 10 2010 15:36:25,921 INFO  ~ Using ASTQueryTranslatorFactory
12 10 2010 15:36:25,922 INFO  ~ Query language substitutions: {}
12 10 2010 15:36:25,922 INFO  ~ JPA-QL strict compliance: enabled
12 10 2010 15:36:25,922 INFO  ~ Second-level cache: enabled
12 10 2010 15:36:25,922 INFO  ~ Query cache: disabled
12 10 2010 15:36:25,922 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
12 10 2010 15:36:25,922 INFO  ~ Optimize cache for minimal puts: disabled
12 10 2010 15:36:25,922 INFO  ~ Structured second-level cache entries: disabled
12 10 2010 15:36:25,922 INFO  ~ Statistics: disabled
12 10 2010 15:36:25,922 INFO  ~ Deleted entity synthetic identifier rollback: disabled
12 10 2010 15:36:25,922 INFO  ~ Default entity-mode: pojo
12 10 2010 15:36:25,922 INFO  ~ Named query checking : enabled
12 10 2010 15:36:25,922 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
12 10 2010 15:36:25,926 INFO  ~ building session factory
12 10 2010 15:36:25,926 DEBUG ~ Session factory constructed with filter configurations : {}
12 10 2010 15:36:25,926 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
12 10 2010 15:36:25,927 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:36:25,934 DEBUG ~ Static SQL for entity: models.User
12 10 2010 15:36:25,934 DEBUG ~  Version select: select id from User where id =?
12 10 2010 15:36:25,934 DEBUG ~  Snapshot select: select user_.id, user_.email as email8_, user_.fullname as fullname8_, user_.isAdmin as isAdmin8_, user_.password as password8_ from User user_ where user_.id=?
12 10 2010 15:36:25,934 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
12 10 2010 15:36:25,934 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
12 10 2010 15:36:25,934 DEBUG ~  Delete 0: delete from User where id=?
12 10 2010 15:36:25,935 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
12 10 2010 15:36:25,935 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id8_0_, user0_.email as email8_0_, user0_.fullname as fullname8_0_, user0_.isAdmin as isAdmin8_0_, user0_.password as password8_0_ from User user0_ where user0_.id=?
12 10 2010 15:36:25,935 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id8_0_, user0_.email as email8_0_, user0_.fullname as fullname8_0_, user0_.isAdmin as isAdmin8_0_, user0_.password as password8_0_ from User user0_ where user0_.id=?
12 10 2010 15:36:25,935 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id8_0_, user0_.email as email8_0_, user0_.fullname as fullname8_0_, user0_.isAdmin as isAdmin8_0_, user0_.password as password8_0_ from User user0_ where user0_.id=?
12 10 2010 15:36:25,935 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id8_0_, user0_.email as email8_0_, user0_.fullname as fullname8_0_, user0_.isAdmin as isAdmin8_0_, user0_.password as password8_0_ from User user0_ where user0_.id=?
12 10 2010 15:36:25,935 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id8_0_, user0_.email as email8_0_, user0_.fullname as fullname8_0_, user0_.isAdmin as isAdmin8_0_, user0_.password as password8_0_ from User user0_ where user0_.id=?
12 10 2010 15:36:25,936 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id8_0_, user0_.email as email8_0_, user0_.fullname as fullname8_0_, user0_.isAdmin as isAdmin8_0_, user0_.password as password8_0_ from User user0_ where user0_.id=?
12 10 2010 15:36:25,936 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id8_0_, user0_.email as email8_0_, user0_.fullname as fullname8_0_, user0_.isAdmin as isAdmin8_0_, user0_.password as password8_0_ from User user0_ where user0_.id=?
12 10 2010 15:36:25,936 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id8_0_, user0_.email as email8_0_, user0_.fullname as fullname8_0_, user0_.isAdmin as isAdmin8_0_, user0_.password as password8_0_ from User user0_ where user0_.id=?
12 10 2010 15:36:25,936 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id8_0_, user0_.email as email8_0_, user0_.fullname as fullname8_0_, user0_.isAdmin as isAdmin8_0_, user0_.password as password8_0_ from User user0_ where user0_.id=?
12 10 2010 15:36:25,937 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id8_0_, user0_.email as email8_0_, user0_.fullname as fullname8_0_, user0_.isAdmin as isAdmin8_0_, user0_.password as password8_0_ from User user0_ where user0_.id=?
12 10 2010 15:36:25,937 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id8_0_, user0_.email as email8_0_, user0_.fullname as fullname8_0_, user0_.isAdmin as isAdmin8_0_, user0_.password as password8_0_ from User user0_ where user0_.id=?
12 10 2010 15:36:25,937 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id8_0_, user0_.email as email8_0_, user0_.fullname as fullname8_0_, user0_.isAdmin as isAdmin8_0_, user0_.password as password8_0_ from User user0_ where user0_.id=?
12 10 2010 15:36:25,937 DEBUG ~ registered: 2c9082cd2b9f0d81012b9f2779d10004 (unnamed)
12 10 2010 15:36:25,937 INFO  ~ Not binding factory to JNDI, no JNDI name configured
12 10 2010 15:36:25,937 DEBUG ~ instantiated session factory
12 10 2010 15:36:25,937 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:36:25,938 DEBUG ~ Process hbm files
12 10 2010 15:36:25,938 DEBUG ~ Process annotated classes
12 10 2010 15:36:25,938 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:36:25,938 DEBUG ~ processing extends queue
12 10 2010 15:36:25,938 DEBUG ~ processing collection mappings
12 10 2010 15:36:25,938 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:36:25,938 DEBUG ~ processing association property references
12 10 2010 15:36:25,938 DEBUG ~ processing foreign key constraints
12 10 2010 15:36:25,940 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:36:25,942 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:36:25,942 DEBUG ~ Process hbm files
12 10 2010 15:36:25,942 DEBUG ~ Process annotated classes
12 10 2010 15:36:25,942 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:36:25,942 DEBUG ~ processing extends queue
12 10 2010 15:36:25,942 DEBUG ~ processing collection mappings
12 10 2010 15:36:25,942 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:36:25,942 DEBUG ~ processing association property references
12 10 2010 15:36:25,943 DEBUG ~ processing foreign key constraints
12 10 2010 15:36:25,945 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:36:25,945 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:36:25,945 INFO  ~ Running hbm2ddl schema export
12 10 2010 15:36:25,946 DEBUG ~ import file not found: /import.sql
12 10 2010 15:36:25,946 INFO  ~ exporting generated schema to database
12 10 2010 15:36:25,946 DEBUG ~ drop table User if exists
12 10 2010 15:36:25,946 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
12 10 2010 15:36:25,946 INFO  ~ schema export complete
12 10 2010 15:36:25,947 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:36:25,947 DEBUG ~ Process hbm files
12 10 2010 15:36:25,947 DEBUG ~ Process annotated classes
12 10 2010 15:36:25,947 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:36:25,947 DEBUG ~ processing extends queue
12 10 2010 15:36:25,947 DEBUG ~ processing collection mappings
12 10 2010 15:36:25,947 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:36:25,947 DEBUG ~ processing association property references
12 10 2010 15:36:25,947 DEBUG ~ processing foreign key constraints
12 10 2010 15:36:25,949 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:36:25,949 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:36:25,950 DEBUG ~ Process hbm files
12 10 2010 15:36:25,950 DEBUG ~ Process annotated classes
12 10 2010 15:36:25,950 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:36:25,950 DEBUG ~ processing extends queue
12 10 2010 15:36:25,950 DEBUG ~ processing collection mappings
12 10 2010 15:36:25,950 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:36:25,950 DEBUG ~ processing association property references
12 10 2010 15:36:25,950 DEBUG ~ processing foreign key constraints
12 10 2010 15:36:25,951 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:36:25,951 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:36:25,952 DEBUG ~ Checking 0 named HQL queries
12 10 2010 15:36:25,952 DEBUG ~ Checking 0 named SQL queries
12 10 2010 15:36:25,956 DEBUG ~ opened session at timestamp: 12868653859
12 10 2010 15:36:25,956 DEBUG ~ begin
12 10 2010 15:36:25,956 DEBUG ~ opening JDBC connection
12 10 2010 15:36:25,956 DEBUG ~ current autocommit status: true
12 10 2010 15:36:25,956 DEBUG ~ disabling autocommit
12 10 2010 15:36:26,045 DEBUG ~ commit
12 10 2010 15:36:26,045 DEBUG ~ re-enabling autocommit
12 10 2010 15:36:26,045 DEBUG ~ committed JDBC Connection
12 10 2010 15:36:26,046 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:36:26,046 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:36:29,869 DEBUG ~ opened session at timestamp: 12868653898
12 10 2010 15:36:29,869 DEBUG ~ begin
12 10 2010 15:36:29,869 DEBUG ~ opening JDBC connection
12 10 2010 15:36:29,869 DEBUG ~ current autocommit status: true
12 10 2010 15:36:29,869 DEBUG ~ disabling autocommit
12 10 2010 15:36:29,884 DEBUG ~ commit
12 10 2010 15:36:29,884 DEBUG ~ re-enabling autocommit
12 10 2010 15:36:29,885 DEBUG ~ committed JDBC Connection
12 10 2010 15:36:29,885 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:36:29,885 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:36:29,901 DEBUG ~ opened session at timestamp: 12868653899
12 10 2010 15:36:29,901 DEBUG ~ begin
12 10 2010 15:36:29,901 DEBUG ~ opening JDBC connection
12 10 2010 15:36:29,901 DEBUG ~ current autocommit status: true
12 10 2010 15:36:29,902 DEBUG ~ disabling autocommit
12 10 2010 15:36:30,154 DEBUG ~ executing identity-insert immediately
12 10 2010 15:36:30,154 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:36:30,155 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:36:30,155 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:36:30,155 DEBUG ~ Natively generated identity: 1
12 10 2010 15:36:30,155 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:36:30,155 DEBUG ~ processing flush-time cascades
12 10 2010 15:36:30,155 DEBUG ~ dirty checking collections
12 10 2010 15:36:30,156 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 15:36:30,156 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:36:30,156 DEBUG ~ listing entities:
12 10 2010 15:36:30,156 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:36:30,157 DEBUG ~ parse() - HQL: from models.User where email = ?
12 10 2010 15:36:30,166 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'email'
          \-[PARAM] Node: '?'

12 10 2010 15:36:30,166 DEBUG ~ throwQueryException() : no errors
12 10 2010 15:36:30,167 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 15:36:30,167 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 15:36:30,168 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 15:36:30,168 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 15:36:30,168 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 15:36:30,168 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 15:36:30,168 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.email {synthetic-alias} email ) ? ) ) )
12 10 2010 15:36:30,168 DEBUG ~ Derived SELECT clause created.
12 10 2010 15:36:30,169 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 15:36:30,169 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 15:36:30,169 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id8_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email8_, user0_.fullname as fullname8_, user0_.isAdmin as isAdmin8_, user0_.password as password8_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'email' {originalText=email}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 15:36:30,169 DEBUG ~ throwQueryException() : no errors
12 10 2010 15:36:30,172 DEBUG ~ HQL: from models.User where email = ?
12 10 2010 15:36:30,172 DEBUG ~ SQL: select user0_.id as id8_, user0_.email as email8_, user0_.fullname as fullname8_, user0_.isAdmin as isAdmin8_, user0_.password as password8_ from User user0_ where user0_.email=?
12 10 2010 15:36:30,172 DEBUG ~ throwQueryException() : no errors
12 10 2010 15:36:30,173 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:36:30,173 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:36:30,173 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:36:30,173 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:36:30,173 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:36:30,173 DEBUG ~ initializing non-lazy collections
12 10 2010 15:36:30,174 DEBUG ~ executing identity-insert immediately
12 10 2010 15:36:30,174 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:36:30,174 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:36:30,174 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:36:30,174 DEBUG ~ Natively generated identity: 2
12 10 2010 15:36:30,174 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:36:30,175 DEBUG ~ processing flush-time cascades
12 10 2010 15:36:30,175 DEBUG ~ dirty checking collections
12 10 2010 15:36:30,175 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 15:36:30,175 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:36:30,175 DEBUG ~ listing entities:
12 10 2010 15:36:30,175 DEBUG ~ models.User{id=2, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:36:30,175 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:36:30,176 DEBUG ~ parse() - HQL: from models.User where email = ? AND password = ?
12 10 2010 15:36:30,187 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'AND'
          +-[EQ] Node: '='
          |  +-[IDENT] Node: 'email'
          |  \-[PARAM] Node: '?'
          \-[EQ] Node: '='
             +-[IDENT] Node: 'password'
             \-[PARAM] Node: '?'

12 10 2010 15:36:30,187 DEBUG ~ throwQueryException() : no errors
12 10 2010 15:36:30,187 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 15:36:30,188 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 15:36:30,188 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 15:36:30,188 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 15:36:30,189 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 15:36:30,189 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 15:36:30,189 DEBUG ~ getDataType() : password -> org.hibernate.type.StringType@18b3c498
12 10 2010 15:36:30,189 DEBUG ~ Resolved :  {synthetic-alias}.password -> user0_.password
12 10 2010 15:36:30,189 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 15:36:30,189 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( AND ( = ( user0_.email {synthetic-alias} email ) ? ) ( = ( user0_.password {synthetic-alias} password ) ? ) ) ) )
12 10 2010 15:36:30,189 DEBUG ~ Derived SELECT clause created.
12 10 2010 15:36:30,189 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 15:36:30,189 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 15:36:30,190 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id8_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email8_, user0_.fullname as fullname8_, user0_.isAdmin as isAdmin8_, user0_.password as password8_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'AND'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  |  \-[IDENT] IdentNode: 'email' {originalText=email}
          |  \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'user0_.password' {propertyName=password,dereferenceType=ALL,propertyPath=password,path={synthetic-alias}.password,tableAlias=user0_,className=models.User,classAlias=null}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'password' {originalText=password}
             \-[PARAM] ParameterNode: '?' {ordinal=1, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 15:36:30,191 DEBUG ~ throwQueryException() : no errors
12 10 2010 15:36:30,191 DEBUG ~ HQL: from models.User where email = ? AND password = ?
12 10 2010 15:36:30,191 DEBUG ~ SQL: select user0_.id as id8_, user0_.email as email8_, user0_.fullname as fullname8_, user0_.isAdmin as isAdmin8_, user0_.password as password8_ from User user0_ where user0_.email=? and user0_.password=?
12 10 2010 15:36:30,191 DEBUG ~ throwQueryException() : no errors
12 10 2010 15:36:30,192 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:36:30,193 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:36:30,193 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:36:30,193 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:36:30,193 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:36:30,193 DEBUG ~ initializing non-lazy collections
12 10 2010 15:36:30,194 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:36:30,194 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:36:30,194 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:36:30,194 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:36:30,194 DEBUG ~ initializing non-lazy collections
12 10 2010 15:36:30,238 DEBUG ~ commit
12 10 2010 15:36:30,238 DEBUG ~ processing flush-time cascades
12 10 2010 15:36:30,238 DEBUG ~ dirty checking collections
12 10 2010 15:36:30,238 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 15:36:30,238 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:36:30,238 DEBUG ~ listing entities:
12 10 2010 15:36:30,239 DEBUG ~ models.User{id=2, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:36:30,239 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:36:30,239 DEBUG ~ re-enabling autocommit
12 10 2010 15:36:30,239 DEBUG ~ committed JDBC Connection
12 10 2010 15:36:30,239 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:36:30,239 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:36:30,259 DEBUG ~ opened session at timestamp: 12868653902
12 10 2010 15:36:30,260 DEBUG ~ begin
12 10 2010 15:36:30,260 DEBUG ~ opening JDBC connection
12 10 2010 15:36:30,260 DEBUG ~ current autocommit status: true
12 10 2010 15:36:30,260 DEBUG ~ disabling autocommit
12 10 2010 15:36:30,273 DEBUG ~ commit
12 10 2010 15:36:30,274 DEBUG ~ re-enabling autocommit
12 10 2010 15:36:30,274 DEBUG ~ committed JDBC Connection
12 10 2010 15:36:30,274 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:36:30,274 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:36:58,707 DEBUG ~ opened session at timestamp: 12868654187
12 10 2010 15:36:58,707 DEBUG ~ begin
12 10 2010 15:36:58,707 DEBUG ~ opening JDBC connection
12 10 2010 15:36:58,707 DEBUG ~ current autocommit status: true
12 10 2010 15:36:58,707 DEBUG ~ disabling autocommit
12 10 2010 15:36:58,721 DEBUG ~ commit
12 10 2010 15:36:58,722 DEBUG ~ re-enabling autocommit
12 10 2010 15:36:58,722 DEBUG ~ committed JDBC Connection
12 10 2010 15:36:58,722 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:36:58,722 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:37:00,704 DEBUG ~ opened session at timestamp: 12868654207
12 10 2010 15:37:00,704 DEBUG ~ begin
12 10 2010 15:37:00,704 DEBUG ~ opening JDBC connection
12 10 2010 15:37:00,704 DEBUG ~ current autocommit status: true
12 10 2010 15:37:00,704 DEBUG ~ disabling autocommit
12 10 2010 15:37:00,709 DEBUG ~ commit
12 10 2010 15:37:00,709 DEBUG ~ re-enabling autocommit
12 10 2010 15:37:00,709 DEBUG ~ committed JDBC Connection
12 10 2010 15:37:00,709 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:37:00,710 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:37:00,728 DEBUG ~ opened session at timestamp: 12868654207
12 10 2010 15:37:00,728 DEBUG ~ begin
12 10 2010 15:37:00,728 DEBUG ~ opening JDBC connection
12 10 2010 15:37:00,728 DEBUG ~ current autocommit status: true
12 10 2010 15:37:00,728 DEBUG ~ disabling autocommit
12 10 2010 15:37:00,980 DEBUG ~ executing identity-insert immediately
12 10 2010 15:37:00,980 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:00,980 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:00,981 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:00,981 DEBUG ~ Natively generated identity: 3
12 10 2010 15:37:00,981 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:00,982 DEBUG ~ processing flush-time cascades
12 10 2010 15:37:00,982 DEBUG ~ dirty checking collections
12 10 2010 15:37:00,982 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 15:37:00,982 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:37:00,982 DEBUG ~ listing entities:
12 10 2010 15:37:00,982 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:00,983 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:00,983 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:37:00,983 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:37:00,985 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:37:00,985 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:00,985 DEBUG ~ resolving associations for [models.User#1]
12 10 2010 15:37:00,986 DEBUG ~ done materializing entity [models.User#1]
12 10 2010 15:37:00,986 DEBUG ~ initializing non-lazy collections
12 10 2010 15:37:00,986 DEBUG ~ executing identity-insert immediately
12 10 2010 15:37:00,986 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:00,986 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:00,986 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:00,986 DEBUG ~ Natively generated identity: 4
12 10 2010 15:37:00,987 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:00,987 DEBUG ~ processing flush-time cascades
12 10 2010 15:37:00,987 DEBUG ~ dirty checking collections
12 10 2010 15:37:00,987 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 15:37:00,987 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:37:00,987 DEBUG ~ listing entities:
12 10 2010 15:37:00,988 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:00,988 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:00,988 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:00,988 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:00,989 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:37:00,989 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:37:00,989 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:37:00,989 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:00,989 DEBUG ~ initializing non-lazy collections
12 10 2010 15:37:00,989 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:00,990 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:37:00,990 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:37:00,990 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:00,990 DEBUG ~ initializing non-lazy collections
12 10 2010 15:37:00,997 DEBUG ~ commit
12 10 2010 15:37:00,997 DEBUG ~ processing flush-time cascades
12 10 2010 15:37:00,997 DEBUG ~ dirty checking collections
12 10 2010 15:37:00,998 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 15:37:00,998 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:37:00,998 DEBUG ~ listing entities:
12 10 2010 15:37:00,998 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:00,998 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:00,998 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:00,998 DEBUG ~ re-enabling autocommit
12 10 2010 15:37:00,998 DEBUG ~ committed JDBC Connection
12 10 2010 15:37:00,998 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:37:00,998 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:37:01,026 DEBUG ~ opened session at timestamp: 12868654210
12 10 2010 15:37:01,027 DEBUG ~ begin
12 10 2010 15:37:01,027 DEBUG ~ opening JDBC connection
12 10 2010 15:37:01,027 DEBUG ~ current autocommit status: true
12 10 2010 15:37:01,027 DEBUG ~ disabling autocommit
12 10 2010 15:37:01,032 DEBUG ~ commit
12 10 2010 15:37:01,032 DEBUG ~ re-enabling autocommit
12 10 2010 15:37:01,033 DEBUG ~ committed JDBC Connection
12 10 2010 15:37:01,033 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:37:01,033 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:37:21,495 DEBUG ~ opened session at timestamp: 12868654414
12 10 2010 15:37:21,496 DEBUG ~ begin
12 10 2010 15:37:21,496 DEBUG ~ opening JDBC connection
12 10 2010 15:37:21,496 DEBUG ~ current autocommit status: true
12 10 2010 15:37:21,496 DEBUG ~ disabling autocommit
12 10 2010 15:37:21,501 DEBUG ~ commit
12 10 2010 15:37:21,501 DEBUG ~ re-enabling autocommit
12 10 2010 15:37:21,501 DEBUG ~ committed JDBC Connection
12 10 2010 15:37:21,501 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:37:21,502 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:37:21,514 DEBUG ~ opened session at timestamp: 12868654415
12 10 2010 15:37:21,514 DEBUG ~ begin
12 10 2010 15:37:21,514 DEBUG ~ opening JDBC connection
12 10 2010 15:37:21,514 DEBUG ~ current autocommit status: true
12 10 2010 15:37:21,514 DEBUG ~ disabling autocommit
12 10 2010 15:37:21,766 DEBUG ~ executing identity-insert immediately
12 10 2010 15:37:21,766 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:21,766 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:21,766 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:21,766 DEBUG ~ Natively generated identity: 5
12 10 2010 15:37:21,766 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:21,767 DEBUG ~ processing flush-time cascades
12 10 2010 15:37:21,767 DEBUG ~ dirty checking collections
12 10 2010 15:37:21,767 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 15:37:21,767 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:37:21,767 DEBUG ~ listing entities:
12 10 2010 15:37:21,767 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:21,768 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:21,768 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:37:21,768 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:37:21,768 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:37:21,768 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:21,768 DEBUG ~ resolving associations for [models.User#1]
12 10 2010 15:37:21,768 DEBUG ~ done materializing entity [models.User#1]
12 10 2010 15:37:21,768 DEBUG ~ initializing non-lazy collections
12 10 2010 15:37:21,769 DEBUG ~ executing identity-insert immediately
12 10 2010 15:37:21,769 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:21,769 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:21,769 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:21,769 DEBUG ~ Natively generated identity: 6
12 10 2010 15:37:21,769 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:21,769 DEBUG ~ processing flush-time cascades
12 10 2010 15:37:21,770 DEBUG ~ dirty checking collections
12 10 2010 15:37:21,770 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 15:37:21,770 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:37:21,770 DEBUG ~ listing entities:
12 10 2010 15:37:21,770 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:21,770 DEBUG ~ models.User{id=6, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:21,770 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:21,770 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:21,771 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:37:21,771 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:37:21,771 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:37:21,771 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:21,771 DEBUG ~ initializing non-lazy collections
12 10 2010 15:37:21,771 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:21,771 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:37:21,772 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:37:21,772 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:21,772 DEBUG ~ initializing non-lazy collections
12 10 2010 15:37:21,780 DEBUG ~ commit
12 10 2010 15:37:21,780 DEBUG ~ processing flush-time cascades
12 10 2010 15:37:21,780 DEBUG ~ dirty checking collections
12 10 2010 15:37:21,780 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 15:37:21,780 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:37:21,780 DEBUG ~ listing entities:
12 10 2010 15:37:21,780 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:21,781 DEBUG ~ models.User{id=6, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:21,781 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:21,781 DEBUG ~ re-enabling autocommit
12 10 2010 15:37:21,781 DEBUG ~ committed JDBC Connection
12 10 2010 15:37:21,781 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:37:21,781 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:37:21,802 DEBUG ~ opened session at timestamp: 12868654418
12 10 2010 15:37:21,804 DEBUG ~ begin
12 10 2010 15:37:21,804 DEBUG ~ opening JDBC connection
12 10 2010 15:37:21,804 DEBUG ~ current autocommit status: true
12 10 2010 15:37:21,804 DEBUG ~ disabling autocommit
12 10 2010 15:37:21,809 DEBUG ~ commit
12 10 2010 15:37:21,809 DEBUG ~ re-enabling autocommit
12 10 2010 15:37:21,809 DEBUG ~ committed JDBC Connection
12 10 2010 15:37:21,809 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:37:21,809 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:37:24,044 DEBUG ~ opened session at timestamp: 12868654440
12 10 2010 15:37:24,044 DEBUG ~ begin
12 10 2010 15:37:24,044 DEBUG ~ opening JDBC connection
12 10 2010 15:37:24,045 DEBUG ~ current autocommit status: true
12 10 2010 15:37:24,045 DEBUG ~ disabling autocommit
12 10 2010 15:37:24,050 DEBUG ~ commit
12 10 2010 15:37:24,050 DEBUG ~ re-enabling autocommit
12 10 2010 15:37:24,050 DEBUG ~ committed JDBC Connection
12 10 2010 15:37:24,050 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:37:24,050 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:37:24,071 DEBUG ~ opened session at timestamp: 12868654440
12 10 2010 15:37:24,071 DEBUG ~ begin
12 10 2010 15:37:24,071 DEBUG ~ opening JDBC connection
12 10 2010 15:37:24,071 DEBUG ~ current autocommit status: true
12 10 2010 15:37:24,071 DEBUG ~ disabling autocommit
12 10 2010 15:37:24,323 DEBUG ~ executing identity-insert immediately
12 10 2010 15:37:24,323 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:24,323 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:24,323 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:24,324 DEBUG ~ Natively generated identity: 7
12 10 2010 15:37:24,324 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:24,324 DEBUG ~ processing flush-time cascades
12 10 2010 15:37:24,324 DEBUG ~ dirty checking collections
12 10 2010 15:37:24,324 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 15:37:24,324 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:37:24,324 DEBUG ~ listing entities:
12 10 2010 15:37:24,324 DEBUG ~ models.User{id=7, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:24,325 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:24,325 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:37:24,325 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:37:24,325 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:37:24,325 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:24,325 DEBUG ~ resolving associations for [models.User#1]
12 10 2010 15:37:24,325 DEBUG ~ done materializing entity [models.User#1]
12 10 2010 15:37:24,325 DEBUG ~ initializing non-lazy collections
12 10 2010 15:37:24,326 DEBUG ~ executing identity-insert immediately
12 10 2010 15:37:24,326 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:24,326 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:24,326 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:24,326 DEBUG ~ Natively generated identity: 8
12 10 2010 15:37:24,326 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:24,326 DEBUG ~ processing flush-time cascades
12 10 2010 15:37:24,327 DEBUG ~ dirty checking collections
12 10 2010 15:37:24,327 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 15:37:24,327 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:37:24,327 DEBUG ~ listing entities:
12 10 2010 15:37:24,327 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:24,327 DEBUG ~ models.User{id=8, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:24,327 DEBUG ~ models.User{id=7, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:24,327 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:24,328 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:37:24,328 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:37:24,328 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:37:24,328 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:24,328 DEBUG ~ initializing non-lazy collections
12 10 2010 15:37:24,328 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:24,329 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:37:24,329 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:37:24,329 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:24,329 DEBUG ~ initializing non-lazy collections
12 10 2010 15:37:24,335 DEBUG ~ commit
12 10 2010 15:37:24,336 DEBUG ~ processing flush-time cascades
12 10 2010 15:37:24,336 DEBUG ~ dirty checking collections
12 10 2010 15:37:24,336 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 15:37:24,336 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:37:24,336 DEBUG ~ listing entities:
12 10 2010 15:37:24,336 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:24,337 DEBUG ~ models.User{id=8, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:24,337 DEBUG ~ models.User{id=7, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:24,337 DEBUG ~ re-enabling autocommit
12 10 2010 15:37:24,337 DEBUG ~ committed JDBC Connection
12 10 2010 15:37:24,337 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:37:24,337 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:37:24,350 DEBUG ~ opened session at timestamp: 12868654443
12 10 2010 15:37:24,350 DEBUG ~ begin
12 10 2010 15:37:24,350 DEBUG ~ opening JDBC connection
12 10 2010 15:37:24,352 DEBUG ~ current autocommit status: true
12 10 2010 15:37:24,352 DEBUG ~ disabling autocommit
12 10 2010 15:37:24,357 DEBUG ~ commit
12 10 2010 15:37:24,357 DEBUG ~ re-enabling autocommit
12 10 2010 15:37:24,357 DEBUG ~ committed JDBC Connection
12 10 2010 15:37:24,357 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:37:24,357 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:37:25,157 DEBUG ~ opened session at timestamp: 12868654451
12 10 2010 15:37:25,157 DEBUG ~ begin
12 10 2010 15:37:25,157 DEBUG ~ opening JDBC connection
12 10 2010 15:37:25,158 DEBUG ~ current autocommit status: true
12 10 2010 15:37:25,158 DEBUG ~ disabling autocommit
12 10 2010 15:37:25,163 DEBUG ~ commit
12 10 2010 15:37:25,163 DEBUG ~ re-enabling autocommit
12 10 2010 15:37:25,163 DEBUG ~ committed JDBC Connection
12 10 2010 15:37:25,163 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:37:25,163 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:37:25,184 DEBUG ~ opened session at timestamp: 12868654451
12 10 2010 15:37:25,184 DEBUG ~ begin
12 10 2010 15:37:25,184 DEBUG ~ opening JDBC connection
12 10 2010 15:37:25,184 DEBUG ~ current autocommit status: true
12 10 2010 15:37:25,184 DEBUG ~ disabling autocommit
12 10 2010 15:37:25,436 DEBUG ~ executing identity-insert immediately
12 10 2010 15:37:25,436 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:25,437 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:25,437 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:25,437 DEBUG ~ Natively generated identity: 9
12 10 2010 15:37:25,437 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:25,437 DEBUG ~ processing flush-time cascades
12 10 2010 15:37:25,437 DEBUG ~ dirty checking collections
12 10 2010 15:37:25,437 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 15:37:25,437 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:37:25,438 DEBUG ~ listing entities:
12 10 2010 15:37:25,438 DEBUG ~ models.User{id=9, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:25,438 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:25,438 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:37:25,438 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:37:25,439 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:37:25,439 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:25,439 DEBUG ~ resolving associations for [models.User#1]
12 10 2010 15:37:25,439 DEBUG ~ done materializing entity [models.User#1]
12 10 2010 15:37:25,439 DEBUG ~ initializing non-lazy collections
12 10 2010 15:37:25,439 DEBUG ~ executing identity-insert immediately
12 10 2010 15:37:25,439 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:25,439 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:25,439 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:25,439 DEBUG ~ Natively generated identity: 10
12 10 2010 15:37:25,440 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:25,440 DEBUG ~ processing flush-time cascades
12 10 2010 15:37:25,440 DEBUG ~ dirty checking collections
12 10 2010 15:37:25,440 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 15:37:25,440 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:37:25,440 DEBUG ~ listing entities:
12 10 2010 15:37:25,440 DEBUG ~ models.User{id=10, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:25,440 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:25,440 DEBUG ~ models.User{id=9, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:25,441 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:25,442 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:37:25,442 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:37:25,442 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:37:25,442 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:25,442 DEBUG ~ initializing non-lazy collections
12 10 2010 15:37:25,442 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:25,443 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:37:25,443 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:37:25,443 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:25,443 DEBUG ~ initializing non-lazy collections
12 10 2010 15:37:25,451 DEBUG ~ commit
12 10 2010 15:37:25,451 DEBUG ~ processing flush-time cascades
12 10 2010 15:37:25,451 DEBUG ~ dirty checking collections
12 10 2010 15:37:25,452 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 15:37:25,452 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:37:25,452 DEBUG ~ listing entities:
12 10 2010 15:37:25,452 DEBUG ~ models.User{id=10, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:25,452 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:25,452 DEBUG ~ models.User{id=9, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:25,452 DEBUG ~ re-enabling autocommit
12 10 2010 15:37:25,452 DEBUG ~ committed JDBC Connection
12 10 2010 15:37:25,452 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:37:25,452 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:37:25,463 DEBUG ~ opened session at timestamp: 12868654454
12 10 2010 15:37:25,463 DEBUG ~ begin
12 10 2010 15:37:25,463 DEBUG ~ opening JDBC connection
12 10 2010 15:37:25,463 DEBUG ~ current autocommit status: true
12 10 2010 15:37:25,463 DEBUG ~ disabling autocommit
12 10 2010 15:37:25,470 DEBUG ~ commit
12 10 2010 15:37:25,470 DEBUG ~ re-enabling autocommit
12 10 2010 15:37:25,470 DEBUG ~ committed JDBC Connection
12 10 2010 15:37:25,470 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:37:25,470 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:37:26,229 DEBUG ~ opened session at timestamp: 12868654462
12 10 2010 15:37:26,230 DEBUG ~ begin
12 10 2010 15:37:26,230 DEBUG ~ opening JDBC connection
12 10 2010 15:37:26,230 DEBUG ~ current autocommit status: true
12 10 2010 15:37:26,230 DEBUG ~ disabling autocommit
12 10 2010 15:37:26,234 DEBUG ~ commit
12 10 2010 15:37:26,234 DEBUG ~ re-enabling autocommit
12 10 2010 15:37:26,234 DEBUG ~ committed JDBC Connection
12 10 2010 15:37:26,234 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:37:26,235 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:37:26,256 DEBUG ~ opened session at timestamp: 12868654462
12 10 2010 15:37:26,256 DEBUG ~ begin
12 10 2010 15:37:26,256 DEBUG ~ opening JDBC connection
12 10 2010 15:37:26,256 DEBUG ~ current autocommit status: true
12 10 2010 15:37:26,256 DEBUG ~ disabling autocommit
12 10 2010 15:37:26,508 DEBUG ~ executing identity-insert immediately
12 10 2010 15:37:26,508 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:26,508 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:26,508 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:26,509 DEBUG ~ Natively generated identity: 11
12 10 2010 15:37:26,509 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:26,509 DEBUG ~ processing flush-time cascades
12 10 2010 15:37:26,509 DEBUG ~ dirty checking collections
12 10 2010 15:37:26,509 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 15:37:26,509 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:37:26,509 DEBUG ~ listing entities:
12 10 2010 15:37:26,509 DEBUG ~ models.User{id=11, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:26,510 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:26,510 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:37:26,510 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:37:26,510 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:37:26,510 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:26,510 DEBUG ~ resolving associations for [models.User#1]
12 10 2010 15:37:26,511 DEBUG ~ done materializing entity [models.User#1]
12 10 2010 15:37:26,511 DEBUG ~ initializing non-lazy collections
12 10 2010 15:37:26,511 DEBUG ~ executing identity-insert immediately
12 10 2010 15:37:26,511 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:26,511 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:26,511 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:26,511 DEBUG ~ Natively generated identity: 12
12 10 2010 15:37:26,511 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:26,512 DEBUG ~ processing flush-time cascades
12 10 2010 15:37:26,512 DEBUG ~ dirty checking collections
12 10 2010 15:37:26,512 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 15:37:26,512 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:37:26,512 DEBUG ~ listing entities:
12 10 2010 15:37:26,512 DEBUG ~ models.User{id=11, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:26,512 DEBUG ~ models.User{id=12, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:26,512 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:26,513 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:26,513 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:37:26,513 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:37:26,513 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:37:26,513 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:26,513 DEBUG ~ initializing non-lazy collections
12 10 2010 15:37:26,514 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:26,514 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:37:26,514 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:37:26,514 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:26,514 DEBUG ~ initializing non-lazy collections
12 10 2010 15:37:26,521 DEBUG ~ commit
12 10 2010 15:37:26,521 DEBUG ~ processing flush-time cascades
12 10 2010 15:37:26,521 DEBUG ~ dirty checking collections
12 10 2010 15:37:26,522 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 15:37:26,522 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:37:26,522 DEBUG ~ listing entities:
12 10 2010 15:37:26,522 DEBUG ~ models.User{id=11, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:26,522 DEBUG ~ models.User{id=12, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:26,522 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:26,522 DEBUG ~ re-enabling autocommit
12 10 2010 15:37:26,522 DEBUG ~ committed JDBC Connection
12 10 2010 15:37:26,522 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:37:26,522 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:37:26,560 DEBUG ~ opened session at timestamp: 12868654465
12 10 2010 15:37:26,560 DEBUG ~ begin
12 10 2010 15:37:26,560 DEBUG ~ opening JDBC connection
12 10 2010 15:37:26,560 DEBUG ~ current autocommit status: true
12 10 2010 15:37:26,560 DEBUG ~ disabling autocommit
12 10 2010 15:37:26,564 DEBUG ~ commit
12 10 2010 15:37:26,564 DEBUG ~ re-enabling autocommit
12 10 2010 15:37:26,564 DEBUG ~ committed JDBC Connection
12 10 2010 15:37:26,564 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:37:26,564 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:37:44,800 DEBUG ~ opened session at timestamp: 12868654648
12 10 2010 15:37:44,800 DEBUG ~ begin
12 10 2010 15:37:44,800 DEBUG ~ opening JDBC connection
12 10 2010 15:37:44,800 DEBUG ~ current autocommit status: true
12 10 2010 15:37:44,800 DEBUG ~ disabling autocommit
12 10 2010 15:37:44,825 DEBUG ~ commit
12 10 2010 15:37:44,825 DEBUG ~ re-enabling autocommit
12 10 2010 15:37:44,825 DEBUG ~ committed JDBC Connection
12 10 2010 15:37:44,826 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:37:44,826 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:37:44,848 DEBUG ~ opened session at timestamp: 12868654648
12 10 2010 15:37:44,848 DEBUG ~ begin
12 10 2010 15:37:44,848 DEBUG ~ opening JDBC connection
12 10 2010 15:37:44,848 DEBUG ~ current autocommit status: true
12 10 2010 15:37:44,848 DEBUG ~ disabling autocommit
12 10 2010 15:37:45,100 DEBUG ~ executing identity-insert immediately
12 10 2010 15:37:45,100 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:45,100 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:45,100 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:45,101 DEBUG ~ Natively generated identity: 13
12 10 2010 15:37:45,101 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:45,101 DEBUG ~ processing flush-time cascades
12 10 2010 15:37:45,101 DEBUG ~ dirty checking collections
12 10 2010 15:37:45,101 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 15:37:45,101 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:37:45,101 DEBUG ~ listing entities:
12 10 2010 15:37:45,101 DEBUG ~ models.User{id=13, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:45,102 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:45,102 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:37:45,102 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:37:45,102 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:37:45,102 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:45,102 DEBUG ~ resolving associations for [models.User#1]
12 10 2010 15:37:45,103 DEBUG ~ done materializing entity [models.User#1]
12 10 2010 15:37:45,103 DEBUG ~ initializing non-lazy collections
12 10 2010 15:37:45,103 DEBUG ~ executing identity-insert immediately
12 10 2010 15:37:45,103 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:45,103 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:45,103 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:45,103 DEBUG ~ Natively generated identity: 14
12 10 2010 15:37:45,103 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:45,104 DEBUG ~ processing flush-time cascades
12 10 2010 15:37:45,104 DEBUG ~ dirty checking collections
12 10 2010 15:37:45,104 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 15:37:45,104 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:37:45,104 DEBUG ~ listing entities:
12 10 2010 15:37:45,104 DEBUG ~ models.User{id=13, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:45,104 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:45,104 DEBUG ~ models.User{id=14, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:45,105 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:45,105 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:37:45,105 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:37:45,105 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:37:45,105 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:45,105 DEBUG ~ initializing non-lazy collections
12 10 2010 15:37:45,105 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:45,106 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:37:45,106 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:37:45,106 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:45,106 DEBUG ~ initializing non-lazy collections
12 10 2010 15:37:45,113 DEBUG ~ commit
12 10 2010 15:37:45,113 DEBUG ~ processing flush-time cascades
12 10 2010 15:37:45,113 DEBUG ~ dirty checking collections
12 10 2010 15:37:45,113 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 15:37:45,113 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:37:45,114 DEBUG ~ listing entities:
12 10 2010 15:37:45,114 DEBUG ~ models.User{id=13, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:45,114 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:45,114 DEBUG ~ models.User{id=14, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:45,114 DEBUG ~ re-enabling autocommit
12 10 2010 15:37:45,114 DEBUG ~ committed JDBC Connection
12 10 2010 15:37:45,114 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:37:45,114 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:37:45,128 DEBUG ~ opened session at timestamp: 12868654651
12 10 2010 15:37:45,128 DEBUG ~ begin
12 10 2010 15:37:45,128 DEBUG ~ opening JDBC connection
12 10 2010 15:37:45,128 DEBUG ~ current autocommit status: true
12 10 2010 15:37:45,128 DEBUG ~ disabling autocommit
12 10 2010 15:37:45,141 DEBUG ~ commit
12 10 2010 15:37:45,141 DEBUG ~ re-enabling autocommit
12 10 2010 15:37:45,141 DEBUG ~ committed JDBC Connection
12 10 2010 15:37:45,141 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:37:45,141 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:37:45,925 DEBUG ~ opened session at timestamp: 12868654659
12 10 2010 15:37:45,925 DEBUG ~ begin
12 10 2010 15:37:45,925 DEBUG ~ opening JDBC connection
12 10 2010 15:37:45,925 DEBUG ~ current autocommit status: true
12 10 2010 15:37:45,925 DEBUG ~ disabling autocommit
12 10 2010 15:37:45,937 DEBUG ~ commit
12 10 2010 15:37:45,937 DEBUG ~ re-enabling autocommit
12 10 2010 15:37:45,938 DEBUG ~ committed JDBC Connection
12 10 2010 15:37:45,938 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:37:45,938 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:37:46,000 DEBUG ~ opened session at timestamp: 12868654660
12 10 2010 15:37:46,000 DEBUG ~ begin
12 10 2010 15:37:46,001 DEBUG ~ opening JDBC connection
12 10 2010 15:37:46,001 DEBUG ~ current autocommit status: true
12 10 2010 15:37:46,001 DEBUG ~ disabling autocommit
12 10 2010 15:37:46,253 DEBUG ~ executing identity-insert immediately
12 10 2010 15:37:46,253 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:46,253 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:46,253 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:46,254 DEBUG ~ Natively generated identity: 15
12 10 2010 15:37:46,254 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:46,254 DEBUG ~ processing flush-time cascades
12 10 2010 15:37:46,254 DEBUG ~ dirty checking collections
12 10 2010 15:37:46,254 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 15:37:46,254 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:37:46,254 DEBUG ~ listing entities:
12 10 2010 15:37:46,254 DEBUG ~ models.User{id=15, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:46,255 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:46,255 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:37:46,255 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:37:46,255 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:37:46,255 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:46,256 DEBUG ~ resolving associations for [models.User#1]
12 10 2010 15:37:46,256 DEBUG ~ done materializing entity [models.User#1]
12 10 2010 15:37:46,256 DEBUG ~ initializing non-lazy collections
12 10 2010 15:37:46,256 DEBUG ~ executing identity-insert immediately
12 10 2010 15:37:46,256 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:46,256 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:46,256 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:46,256 DEBUG ~ Natively generated identity: 16
12 10 2010 15:37:46,256 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:46,257 DEBUG ~ processing flush-time cascades
12 10 2010 15:37:46,257 DEBUG ~ dirty checking collections
12 10 2010 15:37:46,257 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 15:37:46,257 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:37:46,257 DEBUG ~ listing entities:
12 10 2010 15:37:46,257 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:46,257 DEBUG ~ models.User{id=15, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:46,257 DEBUG ~ models.User{id=16, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:46,258 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:46,258 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:37:46,258 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:37:46,258 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:37:46,258 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:46,258 DEBUG ~ initializing non-lazy collections
12 10 2010 15:37:46,259 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:37:46,259 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:37:46,259 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:37:46,259 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:37:46,259 DEBUG ~ initializing non-lazy collections
12 10 2010 15:37:46,266 DEBUG ~ commit
12 10 2010 15:37:46,266 DEBUG ~ processing flush-time cascades
12 10 2010 15:37:46,267 DEBUG ~ dirty checking collections
12 10 2010 15:37:46,267 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 15:37:46,267 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:37:46,267 DEBUG ~ listing entities:
12 10 2010 15:37:46,267 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:46,267 DEBUG ~ models.User{id=15, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:46,267 DEBUG ~ models.User{id=16, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:37:46,267 DEBUG ~ re-enabling autocommit
12 10 2010 15:37:46,267 DEBUG ~ committed JDBC Connection
12 10 2010 15:37:46,267 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:37:46,268 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:37:46,286 DEBUG ~ opened session at timestamp: 12868654662
12 10 2010 15:37:46,288 DEBUG ~ begin
12 10 2010 15:37:46,288 DEBUG ~ opening JDBC connection
12 10 2010 15:37:46,288 DEBUG ~ current autocommit status: true
12 10 2010 15:37:46,288 DEBUG ~ disabling autocommit
12 10 2010 15:37:46,292 DEBUG ~ commit
12 10 2010 15:37:46,297 DEBUG ~ re-enabling autocommit
12 10 2010 15:37:46,297 DEBUG ~ committed JDBC Connection
12 10 2010 15:37:46,297 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:37:46,297 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:55:37,174 DEBUG ~ opened session at timestamp: 12868665371
12 10 2010 15:55:37,174 DEBUG ~ begin
12 10 2010 15:55:37,175 DEBUG ~ opening JDBC connection
12 10 2010 15:55:37,175 DEBUG ~ current autocommit status: true
12 10 2010 15:55:37,175 DEBUG ~ disabling autocommit
12 10 2010 15:55:37,184 DEBUG ~ commit
12 10 2010 15:55:37,185 DEBUG ~ re-enabling autocommit
12 10 2010 15:55:37,185 DEBUG ~ committed JDBC Connection
12 10 2010 15:55:37,185 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:55:37,185 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:55:38,863 DEBUG ~ opened session at timestamp: 12868665388
12 10 2010 15:55:38,863 DEBUG ~ begin
12 10 2010 15:55:38,864 DEBUG ~ opening JDBC connection
12 10 2010 15:55:38,864 DEBUG ~ current autocommit status: true
12 10 2010 15:55:38,864 DEBUG ~ disabling autocommit
12 10 2010 15:55:38,890 DEBUG ~ commit
12 10 2010 15:55:38,891 DEBUG ~ re-enabling autocommit
12 10 2010 15:55:38,891 DEBUG ~ committed JDBC Connection
12 10 2010 15:55:38,891 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:55:38,891 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:55:38,905 DEBUG ~ opened session at timestamp: 12868665389
12 10 2010 15:55:38,905 DEBUG ~ begin
12 10 2010 15:55:38,905 DEBUG ~ opening JDBC connection
12 10 2010 15:55:38,905 DEBUG ~ current autocommit status: true
12 10 2010 15:55:38,905 DEBUG ~ disabling autocommit
12 10 2010 15:55:39,158 DEBUG ~ executing identity-insert immediately
12 10 2010 15:55:39,158 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:55:39,158 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:55:39,159 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:55:39,159 DEBUG ~ Natively generated identity: 17
12 10 2010 15:55:39,159 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:55:39,159 DEBUG ~ processing flush-time cascades
12 10 2010 15:55:39,159 DEBUG ~ dirty checking collections
12 10 2010 15:55:39,159 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 15:55:39,159 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:55:39,159 DEBUG ~ listing entities:
12 10 2010 15:55:39,159 DEBUG ~ models.User{id=17, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:55:39,160 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:55:39,160 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:55:39,160 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:55:39,160 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:55:39,160 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:55:39,161 DEBUG ~ resolving associations for [models.User#1]
12 10 2010 15:55:39,161 DEBUG ~ done materializing entity [models.User#1]
12 10 2010 15:55:39,161 DEBUG ~ initializing non-lazy collections
12 10 2010 15:55:39,161 DEBUG ~ executing identity-insert immediately
12 10 2010 15:55:39,161 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:55:39,161 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:55:39,161 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:55:39,161 DEBUG ~ Natively generated identity: 18
12 10 2010 15:55:39,161 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:55:39,162 DEBUG ~ processing flush-time cascades
12 10 2010 15:55:39,162 DEBUG ~ dirty checking collections
12 10 2010 15:55:39,162 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 15:55:39,162 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:55:39,162 DEBUG ~ listing entities:
12 10 2010 15:55:39,162 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:55:39,162 DEBUG ~ models.User{id=17, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:55:39,162 DEBUG ~ models.User{id=18, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:55:39,163 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:55:39,163 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:55:39,163 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:55:39,163 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:55:39,163 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:55:39,163 DEBUG ~ initializing non-lazy collections
12 10 2010 15:55:39,164 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:55:39,164 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:55:39,164 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:55:39,164 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:55:39,164 DEBUG ~ initializing non-lazy collections
12 10 2010 15:55:39,172 DEBUG ~ commit
12 10 2010 15:55:39,172 DEBUG ~ processing flush-time cascades
12 10 2010 15:55:39,172 DEBUG ~ dirty checking collections
12 10 2010 15:55:39,173 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 15:55:39,173 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:55:39,173 DEBUG ~ listing entities:
12 10 2010 15:55:39,173 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:55:39,173 DEBUG ~ models.User{id=17, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:55:39,173 DEBUG ~ models.User{id=18, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:55:39,173 DEBUG ~ re-enabling autocommit
12 10 2010 15:55:39,173 DEBUG ~ committed JDBC Connection
12 10 2010 15:55:39,174 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:55:39,174 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:55:39,191 DEBUG ~ opened session at timestamp: 12868665391
12 10 2010 15:55:39,191 DEBUG ~ begin
12 10 2010 15:55:39,191 DEBUG ~ opening JDBC connection
12 10 2010 15:55:39,191 DEBUG ~ current autocommit status: true
12 10 2010 15:55:39,191 DEBUG ~ disabling autocommit
12 10 2010 15:55:39,204 DEBUG ~ commit
12 10 2010 15:55:39,204 DEBUG ~ re-enabling autocommit
12 10 2010 15:55:39,204 DEBUG ~ committed JDBC Connection
12 10 2010 15:55:39,204 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:55:39,204 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:56:16,323 ERROR ~ 

@645j8gm99
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 28)
The file /test/BasicTest.scala could not be compiled. Error raised is : value isEmpty is not a member of Unit

play.exceptions.CompilationException: value isEmpty is not a member of Unit
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 15:56:27,812 DEBUG ~ opened session at timestamp: 12868665878
12 10 2010 15:56:27,813 DEBUG ~ begin
12 10 2010 15:56:27,813 DEBUG ~ opening JDBC connection
12 10 2010 15:56:27,813 DEBUG ~ current autocommit status: true
12 10 2010 15:56:27,813 DEBUG ~ disabling autocommit
12 10 2010 15:56:27,822 DEBUG ~ commit
12 10 2010 15:56:27,822 DEBUG ~ re-enabling autocommit
12 10 2010 15:56:27,823 DEBUG ~ committed JDBC Connection
12 10 2010 15:56:27,823 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:56:27,823 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:56:29,524 DEBUG ~ opened session at timestamp: 12868665895
12 10 2010 15:56:29,525 DEBUG ~ begin
12 10 2010 15:56:29,525 DEBUG ~ opening JDBC connection
12 10 2010 15:56:29,525 DEBUG ~ current autocommit status: true
12 10 2010 15:56:29,525 DEBUG ~ disabling autocommit
12 10 2010 15:56:29,534 DEBUG ~ commit
12 10 2010 15:56:29,535 DEBUG ~ re-enabling autocommit
12 10 2010 15:56:29,535 DEBUG ~ committed JDBC Connection
12 10 2010 15:56:29,535 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:56:29,535 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:56:29,545 DEBUG ~ opened session at timestamp: 12868665895
12 10 2010 15:56:29,551 DEBUG ~ begin
12 10 2010 15:56:29,551 DEBUG ~ opening JDBC connection
12 10 2010 15:56:29,551 DEBUG ~ current autocommit status: true
12 10 2010 15:56:29,551 DEBUG ~ disabling autocommit
12 10 2010 15:56:29,803 DEBUG ~ executing identity-insert immediately
12 10 2010 15:56:29,803 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:56:29,803 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:56:29,803 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:56:29,804 DEBUG ~ Natively generated identity: 19
12 10 2010 15:56:29,804 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:56:29,804 DEBUG ~ processing flush-time cascades
12 10 2010 15:56:29,804 DEBUG ~ dirty checking collections
12 10 2010 15:56:29,804 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 15:56:29,804 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:56:29,804 DEBUG ~ listing entities:
12 10 2010 15:56:29,804 DEBUG ~ models.User{id=19, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:56:29,805 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:56:29,805 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:56:29,805 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:56:29,805 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:56:29,805 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:56:29,806 DEBUG ~ resolving associations for [models.User#1]
12 10 2010 15:56:29,806 DEBUG ~ done materializing entity [models.User#1]
12 10 2010 15:56:29,806 DEBUG ~ initializing non-lazy collections
12 10 2010 15:56:29,806 DEBUG ~ executing identity-insert immediately
12 10 2010 15:56:29,806 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:56:29,806 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:56:29,806 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:56:29,806 DEBUG ~ Natively generated identity: 20
12 10 2010 15:56:29,806 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:56:29,807 DEBUG ~ processing flush-time cascades
12 10 2010 15:56:29,807 DEBUG ~ dirty checking collections
12 10 2010 15:56:29,807 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 15:56:29,807 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:56:29,807 DEBUG ~ listing entities:
12 10 2010 15:56:29,808 DEBUG ~ models.User{id=20, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:56:29,808 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:56:29,808 DEBUG ~ models.User{id=19, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:56:29,808 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:56:29,808 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:56:29,808 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:56:29,809 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:56:29,809 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:56:29,809 DEBUG ~ initializing non-lazy collections
12 10 2010 15:56:29,809 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:56:29,809 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:56:29,809 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:56:29,809 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:56:29,809 DEBUG ~ initializing non-lazy collections
12 10 2010 15:56:29,816 DEBUG ~ commit
12 10 2010 15:56:29,816 DEBUG ~ processing flush-time cascades
12 10 2010 15:56:29,817 DEBUG ~ dirty checking collections
12 10 2010 15:56:29,818 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 15:56:29,818 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:56:29,818 DEBUG ~ listing entities:
12 10 2010 15:56:29,818 DEBUG ~ models.User{id=20, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:56:29,818 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:56:29,818 DEBUG ~ models.User{id=19, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:56:29,818 DEBUG ~ re-enabling autocommit
12 10 2010 15:56:29,845 DEBUG ~ committed JDBC Connection
12 10 2010 15:56:29,845 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:56:29,845 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:56:29,858 DEBUG ~ opened session at timestamp: 12868665898
12 10 2010 15:56:29,858 DEBUG ~ begin
12 10 2010 15:56:29,858 DEBUG ~ opening JDBC connection
12 10 2010 15:56:29,858 DEBUG ~ current autocommit status: true
12 10 2010 15:56:29,858 DEBUG ~ disabling autocommit
12 10 2010 15:56:29,861 DEBUG ~ commit
12 10 2010 15:56:29,862 DEBUG ~ re-enabling autocommit
12 10 2010 15:56:29,862 DEBUG ~ committed JDBC Connection
12 10 2010 15:56:29,862 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:56:29,862 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:58:30,322 DEBUG ~ opened session at timestamp: 12868667103
12 10 2010 15:58:30,322 DEBUG ~ begin
12 10 2010 15:58:30,322 DEBUG ~ opening JDBC connection
12 10 2010 15:58:30,322 DEBUG ~ current autocommit status: true
12 10 2010 15:58:30,322 DEBUG ~ disabling autocommit
12 10 2010 15:58:30,332 DEBUG ~ commit
12 10 2010 15:58:30,332 DEBUG ~ re-enabling autocommit
12 10 2010 15:58:30,332 DEBUG ~ committed JDBC Connection
12 10 2010 15:58:30,332 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:58:30,332 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:58:32,361 DEBUG ~ opened session at timestamp: 12868667123
12 10 2010 15:58:32,361 DEBUG ~ begin
12 10 2010 15:58:32,361 DEBUG ~ opening JDBC connection
12 10 2010 15:58:32,361 DEBUG ~ current autocommit status: true
12 10 2010 15:58:32,361 DEBUG ~ disabling autocommit
12 10 2010 15:58:32,379 DEBUG ~ commit
12 10 2010 15:58:32,379 DEBUG ~ re-enabling autocommit
12 10 2010 15:58:32,379 DEBUG ~ committed JDBC Connection
12 10 2010 15:58:32,379 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:58:32,379 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:58:32,388 DEBUG ~ opened session at timestamp: 12868667123
12 10 2010 15:58:32,388 DEBUG ~ begin
12 10 2010 15:58:32,389 DEBUG ~ opening JDBC connection
12 10 2010 15:58:32,389 DEBUG ~ current autocommit status: true
12 10 2010 15:58:32,389 DEBUG ~ disabling autocommit
12 10 2010 15:58:32,640 DEBUG ~ executing identity-insert immediately
12 10 2010 15:58:32,640 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:58:32,641 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:58:32,641 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:58:32,641 DEBUG ~ Natively generated identity: 21
12 10 2010 15:58:32,641 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:58:32,641 DEBUG ~ processing flush-time cascades
12 10 2010 15:58:32,641 DEBUG ~ dirty checking collections
12 10 2010 15:58:32,641 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 15:58:32,642 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:58:32,642 DEBUG ~ listing entities:
12 10 2010 15:58:32,642 DEBUG ~ models.User{id=21, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:58:32,642 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:58:32,642 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:58:32,643 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:58:32,643 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:58:32,643 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:58:32,643 DEBUG ~ resolving associations for [models.User#1]
12 10 2010 15:58:32,643 DEBUG ~ done materializing entity [models.User#1]
12 10 2010 15:58:32,643 DEBUG ~ initializing non-lazy collections
12 10 2010 15:58:32,643 DEBUG ~ executing identity-insert immediately
12 10 2010 15:58:32,643 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:58:32,643 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:58:32,643 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:58:32,644 DEBUG ~ Natively generated identity: 22
12 10 2010 15:58:32,644 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:58:32,644 DEBUG ~ processing flush-time cascades
12 10 2010 15:58:32,644 DEBUG ~ dirty checking collections
12 10 2010 15:58:32,644 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 15:58:32,644 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:58:32,644 DEBUG ~ listing entities:
12 10 2010 15:58:32,644 DEBUG ~ models.User{id=21, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:58:32,644 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:58:32,645 DEBUG ~ models.User{id=22, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:58:32,645 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:58:32,645 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:58:32,645 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:58:32,646 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:58:32,646 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:58:32,646 DEBUG ~ initializing non-lazy collections
12 10 2010 15:58:32,646 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:58:32,646 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:58:32,646 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:58:32,646 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:58:32,647 DEBUG ~ initializing non-lazy collections
12 10 2010 15:58:32,647 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:58:32,648 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:58:32,648 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:58:32,648 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:58:32,648 DEBUG ~ initializing non-lazy collections
12 10 2010 15:58:32,654 DEBUG ~ commit
12 10 2010 15:58:32,654 DEBUG ~ processing flush-time cascades
12 10 2010 15:58:32,654 DEBUG ~ dirty checking collections
12 10 2010 15:58:32,654 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 15:58:32,654 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:58:32,655 DEBUG ~ listing entities:
12 10 2010 15:58:32,655 DEBUG ~ models.User{id=21, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:58:32,655 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:58:32,655 DEBUG ~ models.User{id=22, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:58:32,655 DEBUG ~ re-enabling autocommit
12 10 2010 15:58:32,655 DEBUG ~ committed JDBC Connection
12 10 2010 15:58:32,655 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:58:32,655 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:58:32,670 DEBUG ~ opened session at timestamp: 12868667126
12 10 2010 15:58:32,670 DEBUG ~ begin
12 10 2010 15:58:32,670 DEBUG ~ opening JDBC connection
12 10 2010 15:58:32,670 DEBUG ~ current autocommit status: true
12 10 2010 15:58:32,670 DEBUG ~ disabling autocommit
12 10 2010 15:58:32,676 DEBUG ~ commit
12 10 2010 15:58:32,676 DEBUG ~ re-enabling autocommit
12 10 2010 15:58:32,676 DEBUG ~ committed JDBC Connection
12 10 2010 15:58:32,676 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:58:32,676 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:59:32,762 ERROR ~ 

@645j8gm9a
Internal Server Error (500) for request GET /@tests

Compilation error (In /app/models/User.scala around line 21)
The file /app/models/User.scala could not be compiled. Error raised is : illegal start of declaration (possible cause: missing `=' in front of current method body)

play.exceptions.CompilationException: illegal start of declaration (possible cause: missing `=' in front of current method body)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 15:59:49,120 INFO  ~ closing
12 10 2010 15:59:49,120 INFO  ~ Running hbm2ddl schema export
12 10 2010 15:59:49,121 DEBUG ~ import file not found: /import.sql
12 10 2010 15:59:49,121 INFO  ~ exporting generated schema to database
12 10 2010 15:59:49,121 DEBUG ~ drop table User if exists
12 10 2010 15:59:49,121 INFO  ~ schema export complete
12 10 2010 15:59:49,162 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 15:59:49,162 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
12 10 2010 15:59:49,162 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
12 10 2010 15:59:49,162 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
12 10 2010 15:59:49,162 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
12 10 2010 15:59:49,162 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
12 10 2010 15:59:49,162 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
12 10 2010 15:59:49,162 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
12 10 2010 15:59:49,162 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
12 10 2010 15:59:49,162 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
12 10 2010 15:59:49,163 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 15:59:49,163 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
12 10 2010 15:59:49,163 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
12 10 2010 15:59:49,163 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
12 10 2010 15:59:49,163 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:59:49,163 DEBUG ~ Process hbm files
12 10 2010 15:59:49,163 DEBUG ~ Process annotated classes
12 10 2010 15:59:49,164 INFO  ~ Binding entity from annotated class: models.User
12 10 2010 15:59:49,164 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 15:59:49,164 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 15:59:49,164 DEBUG ~ Import with entity name User
12 10 2010 15:59:49,164 INFO  ~ Bind entity models.User on table User
12 10 2010 15:59:49,167 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 15:59:49,167 DEBUG ~ binding property id with lazy=false
12 10 2010 15:59:49,167 DEBUG ~ building SimpleValue for id
12 10 2010 15:59:49,167 DEBUG ~ Building property id
12 10 2010 15:59:49,167 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
12 10 2010 15:59:49,167 DEBUG ~ binding property email with lazy=false
12 10 2010 15:59:49,168 DEBUG ~ building SimpleValue for email
12 10 2010 15:59:49,168 DEBUG ~ Building property email
12 10 2010 15:59:49,168 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
12 10 2010 15:59:49,168 DEBUG ~ binding property fullname with lazy=false
12 10 2010 15:59:49,168 DEBUG ~ building SimpleValue for fullname
12 10 2010 15:59:49,168 DEBUG ~ Building property fullname
12 10 2010 15:59:49,168 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
12 10 2010 15:59:49,168 DEBUG ~ binding property isAdmin with lazy=false
12 10 2010 15:59:49,168 DEBUG ~ building SimpleValue for isAdmin
12 10 2010 15:59:49,168 DEBUG ~ Building property isAdmin
12 10 2010 15:59:49,168 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
12 10 2010 15:59:49,169 DEBUG ~ binding property password with lazy=false
12 10 2010 15:59:49,169 DEBUG ~ building SimpleValue for password
12 10 2010 15:59:49,169 DEBUG ~ Building property password
12 10 2010 15:59:49,169 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 15:59:49,169 DEBUG ~ setting SimpleValue typeName for email
12 10 2010 15:59:49,169 DEBUG ~ setting SimpleValue typeName for fullname
12 10 2010 15:59:49,169 DEBUG ~ setting SimpleValue typeName for isAdmin
12 10 2010 15:59:49,169 DEBUG ~ setting SimpleValue typeName for password
12 10 2010 15:59:49,169 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:59:49,169 DEBUG ~ processing extends queue
12 10 2010 15:59:49,169 DEBUG ~ processing collection mappings
12 10 2010 15:59:49,169 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:59:49,169 DEBUG ~ processing association property references
12 10 2010 15:59:49,170 DEBUG ~ processing foreign key constraints
12 10 2010 15:59:49,170 INFO  ~ Hibernate Validator not found: ignoring
12 10 2010 15:59:49,184 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
12 10 2010 15:59:49,185 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
12 10 2010 15:59:49,187 DEBUG ~ Search not present in classpath, ignoring event listener registration.
12 10 2010 15:59:49,187 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
12 10 2010 15:59:49,188 DEBUG ~ Preparing to build session factory with filters : {}
12 10 2010 15:59:49,188 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:59:49,188 DEBUG ~ Process hbm files
12 10 2010 15:59:49,188 DEBUG ~ Process annotated classes
12 10 2010 15:59:49,188 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:59:49,188 DEBUG ~ processing extends queue
12 10 2010 15:59:49,188 DEBUG ~ processing collection mappings
12 10 2010 15:59:49,188 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:59:49,188 DEBUG ~ processing association property references
12 10 2010 15:59:49,188 DEBUG ~ processing foreign key constraints
12 10 2010 15:59:49,190 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
12 10 2010 15:59:49,190 INFO  ~ Using provided datasource
12 10 2010 15:59:49,190 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
12 10 2010 15:59:49,190 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
12 10 2010 15:59:49,190 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
12 10 2010 15:59:49,191 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
12 10 2010 15:59:49,191 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
12 10 2010 15:59:49,191 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
12 10 2010 15:59:49,191 INFO  ~ Automatic flush during beforeCompletion(): disabled
12 10 2010 15:59:49,191 INFO  ~ Automatic session close at end of transaction: disabled
12 10 2010 15:59:49,191 INFO  ~ JDBC batch size: 15
12 10 2010 15:59:49,191 INFO  ~ JDBC batch updates for versioned data: disabled
12 10 2010 15:59:49,191 INFO  ~ Scrollable result sets: enabled
12 10 2010 15:59:49,191 DEBUG ~ Wrap result sets: disabled
12 10 2010 15:59:49,191 INFO  ~ JDBC3 getGeneratedKeys(): disabled
12 10 2010 15:59:49,191 INFO  ~ Connection release mode: auto
12 10 2010 15:59:49,191 INFO  ~ Default batch fetch size: 1
12 10 2010 15:59:49,192 INFO  ~ Generate SQL with comments: disabled
12 10 2010 15:59:49,192 INFO  ~ Order SQL updates by primary key: disabled
12 10 2010 15:59:49,192 INFO  ~ Order SQL inserts for batching: disabled
12 10 2010 15:59:49,192 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
12 10 2010 15:59:49,192 INFO  ~ Using ASTQueryTranslatorFactory
12 10 2010 15:59:49,192 INFO  ~ Query language substitutions: {}
12 10 2010 15:59:49,192 INFO  ~ JPA-QL strict compliance: enabled
12 10 2010 15:59:49,192 INFO  ~ Second-level cache: enabled
12 10 2010 15:59:49,192 INFO  ~ Query cache: disabled
12 10 2010 15:59:49,192 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
12 10 2010 15:59:49,192 INFO  ~ Optimize cache for minimal puts: disabled
12 10 2010 15:59:49,192 INFO  ~ Structured second-level cache entries: disabled
12 10 2010 15:59:49,193 INFO  ~ Statistics: disabled
12 10 2010 15:59:49,193 INFO  ~ Deleted entity synthetic identifier rollback: disabled
12 10 2010 15:59:49,193 INFO  ~ Default entity-mode: pojo
12 10 2010 15:59:49,193 INFO  ~ Named query checking : enabled
12 10 2010 15:59:49,193 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
12 10 2010 15:59:49,196 INFO  ~ building session factory
12 10 2010 15:59:49,196 DEBUG ~ Session factory constructed with filter configurations : {}
12 10 2010 15:59:49,197 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
12 10 2010 15:59:49,197 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:59:49,203 DEBUG ~ Static SQL for entity: models.User
12 10 2010 15:59:49,203 DEBUG ~  Version select: select id from User where id =?
12 10 2010 15:59:49,203 DEBUG ~  Snapshot select: select user_.id, user_.email as email10_, user_.fullname as fullname10_, user_.isAdmin as isAdmin10_, user_.password as password10_ from User user_ where user_.id=?
12 10 2010 15:59:49,203 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
12 10 2010 15:59:49,203 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
12 10 2010 15:59:49,203 DEBUG ~  Delete 0: delete from User where id=?
12 10 2010 15:59:49,203 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
12 10 2010 15:59:49,203 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id10_0_, user0_.email as email10_0_, user0_.fullname as fullname10_0_, user0_.isAdmin as isAdmin10_0_, user0_.password as password10_0_ from User user0_ where user0_.id=?
12 10 2010 15:59:49,203 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id10_0_, user0_.email as email10_0_, user0_.fullname as fullname10_0_, user0_.isAdmin as isAdmin10_0_, user0_.password as password10_0_ from User user0_ where user0_.id=?
12 10 2010 15:59:49,204 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id10_0_, user0_.email as email10_0_, user0_.fullname as fullname10_0_, user0_.isAdmin as isAdmin10_0_, user0_.password as password10_0_ from User user0_ where user0_.id=?
12 10 2010 15:59:49,204 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id10_0_, user0_.email as email10_0_, user0_.fullname as fullname10_0_, user0_.isAdmin as isAdmin10_0_, user0_.password as password10_0_ from User user0_ where user0_.id=?
12 10 2010 15:59:49,204 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id10_0_, user0_.email as email10_0_, user0_.fullname as fullname10_0_, user0_.isAdmin as isAdmin10_0_, user0_.password as password10_0_ from User user0_ where user0_.id=?
12 10 2010 15:59:49,204 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id10_0_, user0_.email as email10_0_, user0_.fullname as fullname10_0_, user0_.isAdmin as isAdmin10_0_, user0_.password as password10_0_ from User user0_ where user0_.id=?
12 10 2010 15:59:49,204 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id10_0_, user0_.email as email10_0_, user0_.fullname as fullname10_0_, user0_.isAdmin as isAdmin10_0_, user0_.password as password10_0_ from User user0_ where user0_.id=?
12 10 2010 15:59:49,204 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id10_0_, user0_.email as email10_0_, user0_.fullname as fullname10_0_, user0_.isAdmin as isAdmin10_0_, user0_.password as password10_0_ from User user0_ where user0_.id=?
12 10 2010 15:59:49,205 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id10_0_, user0_.email as email10_0_, user0_.fullname as fullname10_0_, user0_.isAdmin as isAdmin10_0_, user0_.password as password10_0_ from User user0_ where user0_.id=?
12 10 2010 15:59:49,205 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id10_0_, user0_.email as email10_0_, user0_.fullname as fullname10_0_, user0_.isAdmin as isAdmin10_0_, user0_.password as password10_0_ from User user0_ where user0_.id=?
12 10 2010 15:59:49,205 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id10_0_, user0_.email as email10_0_, user0_.fullname as fullname10_0_, user0_.isAdmin as isAdmin10_0_, user0_.password as password10_0_ from User user0_ where user0_.id=?
12 10 2010 15:59:49,205 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id10_0_, user0_.email as email10_0_, user0_.fullname as fullname10_0_, user0_.isAdmin as isAdmin10_0_, user0_.password as password10_0_ from User user0_ where user0_.id=?
12 10 2010 15:59:49,205 DEBUG ~ registered: 2c9082cd2b9f0d81012b9f3ce3550005 (unnamed)
12 10 2010 15:59:49,205 INFO  ~ Not binding factory to JNDI, no JNDI name configured
12 10 2010 15:59:49,205 DEBUG ~ instantiated session factory
12 10 2010 15:59:49,205 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:59:49,205 DEBUG ~ Process hbm files
12 10 2010 15:59:49,205 DEBUG ~ Process annotated classes
12 10 2010 15:59:49,205 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:59:49,206 DEBUG ~ processing extends queue
12 10 2010 15:59:49,206 DEBUG ~ processing collection mappings
12 10 2010 15:59:49,206 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:59:49,206 DEBUG ~ processing association property references
12 10 2010 15:59:49,206 DEBUG ~ processing foreign key constraints
12 10 2010 15:59:49,209 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:59:49,209 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:59:49,210 DEBUG ~ Process hbm files
12 10 2010 15:59:49,210 DEBUG ~ Process annotated classes
12 10 2010 15:59:49,210 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:59:49,210 DEBUG ~ processing extends queue
12 10 2010 15:59:49,210 DEBUG ~ processing collection mappings
12 10 2010 15:59:49,210 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:59:49,210 DEBUG ~ processing association property references
12 10 2010 15:59:49,210 DEBUG ~ processing foreign key constraints
12 10 2010 15:59:49,212 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:59:49,212 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:59:49,212 INFO  ~ Running hbm2ddl schema export
12 10 2010 15:59:49,213 DEBUG ~ import file not found: /import.sql
12 10 2010 15:59:49,213 INFO  ~ exporting generated schema to database
12 10 2010 15:59:49,213 DEBUG ~ drop table User if exists
12 10 2010 15:59:49,213 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
12 10 2010 15:59:49,213 INFO  ~ schema export complete
12 10 2010 15:59:49,213 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:59:49,214 DEBUG ~ Process hbm files
12 10 2010 15:59:49,214 DEBUG ~ Process annotated classes
12 10 2010 15:59:49,214 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:59:49,214 DEBUG ~ processing extends queue
12 10 2010 15:59:49,214 DEBUG ~ processing collection mappings
12 10 2010 15:59:49,214 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:59:49,214 DEBUG ~ processing association property references
12 10 2010 15:59:49,214 DEBUG ~ processing foreign key constraints
12 10 2010 15:59:49,222 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:59:49,222 DEBUG ~ Execute first pass mapping processing
12 10 2010 15:59:49,223 DEBUG ~ Process hbm files
12 10 2010 15:59:49,223 DEBUG ~ Process annotated classes
12 10 2010 15:59:49,223 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 15:59:49,223 DEBUG ~ processing extends queue
12 10 2010 15:59:49,223 DEBUG ~ processing collection mappings
12 10 2010 15:59:49,223 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 15:59:49,223 DEBUG ~ processing association property references
12 10 2010 15:59:49,223 DEBUG ~ processing foreign key constraints
12 10 2010 15:59:49,225 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:59:49,226 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 15:59:49,226 DEBUG ~ Checking 0 named HQL queries
12 10 2010 15:59:49,226 DEBUG ~ Checking 0 named SQL queries
12 10 2010 15:59:49,230 DEBUG ~ opened session at timestamp: 12868667892
12 10 2010 15:59:49,230 DEBUG ~ begin
12 10 2010 15:59:49,230 DEBUG ~ opening JDBC connection
12 10 2010 15:59:49,230 DEBUG ~ current autocommit status: true
12 10 2010 15:59:49,230 DEBUG ~ disabling autocommit
12 10 2010 15:59:49,313 DEBUG ~ commit
12 10 2010 15:59:49,313 DEBUG ~ re-enabling autocommit
12 10 2010 15:59:49,314 DEBUG ~ committed JDBC Connection
12 10 2010 15:59:49,314 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:59:49,314 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:59:51,029 DEBUG ~ opened session at timestamp: 12868667910
12 10 2010 15:59:51,029 DEBUG ~ begin
12 10 2010 15:59:51,029 DEBUG ~ opening JDBC connection
12 10 2010 15:59:51,029 DEBUG ~ current autocommit status: true
12 10 2010 15:59:51,029 DEBUG ~ disabling autocommit
12 10 2010 15:59:51,047 DEBUG ~ commit
12 10 2010 15:59:51,047 DEBUG ~ re-enabling autocommit
12 10 2010 15:59:51,048 DEBUG ~ committed JDBC Connection
12 10 2010 15:59:51,048 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:59:51,048 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:59:51,069 DEBUG ~ opened session at timestamp: 12868667910
12 10 2010 15:59:51,069 DEBUG ~ begin
12 10 2010 15:59:51,069 DEBUG ~ opening JDBC connection
12 10 2010 15:59:51,069 DEBUG ~ current autocommit status: true
12 10 2010 15:59:51,070 DEBUG ~ disabling autocommit
12 10 2010 15:59:51,321 DEBUG ~ executing identity-insert immediately
12 10 2010 15:59:51,321 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:59:51,322 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:59:51,322 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:59:51,322 DEBUG ~ Natively generated identity: 1
12 10 2010 15:59:51,322 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:59:51,322 DEBUG ~ processing flush-time cascades
12 10 2010 15:59:51,322 DEBUG ~ dirty checking collections
12 10 2010 15:59:51,322 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 15:59:51,322 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:59:51,322 DEBUG ~ listing entities:
12 10 2010 15:59:51,323 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:59:51,324 DEBUG ~ parse() - HQL: from models.User where email = ?
12 10 2010 15:59:51,326 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'email'
          \-[PARAM] Node: '?'

12 10 2010 15:59:51,326 DEBUG ~ throwQueryException() : no errors
12 10 2010 15:59:51,326 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 15:59:51,326 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 15:59:51,327 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 15:59:51,327 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 15:59:51,327 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 15:59:51,327 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 15:59:51,327 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.email {synthetic-alias} email ) ? ) ) )
12 10 2010 15:59:51,328 DEBUG ~ Derived SELECT clause created.
12 10 2010 15:59:51,328 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 15:59:51,328 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 15:59:51,328 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id10_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email10_, user0_.fullname as fullname10_, user0_.isAdmin as isAdmin10_, user0_.password as password10_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'email' {originalText=email}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 15:59:51,328 DEBUG ~ throwQueryException() : no errors
12 10 2010 15:59:51,329 DEBUG ~ HQL: from models.User where email = ?
12 10 2010 15:59:51,329 DEBUG ~ SQL: select user0_.id as id10_, user0_.email as email10_, user0_.fullname as fullname10_, user0_.isAdmin as isAdmin10_, user0_.password as password10_ from User user0_ where user0_.email=?
12 10 2010 15:59:51,329 DEBUG ~ throwQueryException() : no errors
12 10 2010 15:59:51,330 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:59:51,330 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:59:51,330 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:59:51,330 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:59:51,330 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:59:51,330 DEBUG ~ initializing non-lazy collections
12 10 2010 15:59:51,331 DEBUG ~ executing identity-insert immediately
12 10 2010 15:59:51,331 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:59:51,331 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:59:51,331 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:59:51,331 DEBUG ~ Natively generated identity: 2
12 10 2010 15:59:51,331 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:59:51,331 DEBUG ~ processing flush-time cascades
12 10 2010 15:59:51,332 DEBUG ~ dirty checking collections
12 10 2010 15:59:51,332 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 15:59:51,332 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:59:51,332 DEBUG ~ listing entities:
12 10 2010 15:59:51,332 DEBUG ~ models.User{id=2, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:59:51,332 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:59:51,333 DEBUG ~ parse() - HQL: from models.User where email = ? AND password = ?
12 10 2010 15:59:51,335 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'AND'
          +-[EQ] Node: '='
          |  +-[IDENT] Node: 'email'
          |  \-[PARAM] Node: '?'
          \-[EQ] Node: '='
             +-[IDENT] Node: 'password'
             \-[PARAM] Node: '?'

12 10 2010 15:59:51,335 DEBUG ~ throwQueryException() : no errors
12 10 2010 15:59:51,335 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 15:59:51,336 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 15:59:51,336 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 15:59:51,336 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 15:59:51,336 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 15:59:51,336 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 15:59:51,337 DEBUG ~ getDataType() : password -> org.hibernate.type.StringType@18b3c498
12 10 2010 15:59:51,337 DEBUG ~ Resolved :  {synthetic-alias}.password -> user0_.password
12 10 2010 15:59:51,337 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 15:59:51,337 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( AND ( = ( user0_.email {synthetic-alias} email ) ? ) ( = ( user0_.password {synthetic-alias} password ) ? ) ) ) )
12 10 2010 15:59:51,337 DEBUG ~ Derived SELECT clause created.
12 10 2010 15:59:51,337 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 15:59:51,337 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 15:59:51,338 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id10_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email10_, user0_.fullname as fullname10_, user0_.isAdmin as isAdmin10_, user0_.password as password10_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'AND'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  |  \-[IDENT] IdentNode: 'email' {originalText=email}
          |  \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'user0_.password' {propertyName=password,dereferenceType=ALL,propertyPath=password,path={synthetic-alias}.password,tableAlias=user0_,className=models.User,classAlias=null}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'password' {originalText=password}
             \-[PARAM] ParameterNode: '?' {ordinal=1, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 15:59:51,338 DEBUG ~ throwQueryException() : no errors
12 10 2010 15:59:51,339 DEBUG ~ HQL: from models.User where email = ? AND password = ?
12 10 2010 15:59:51,339 DEBUG ~ SQL: select user0_.id as id10_, user0_.email as email10_, user0_.fullname as fullname10_, user0_.isAdmin as isAdmin10_, user0_.password as password10_ from User user0_ where user0_.email=? and user0_.password=?
12 10 2010 15:59:51,339 DEBUG ~ throwQueryException() : no errors
12 10 2010 15:59:51,339 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:59:51,340 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:59:51,340 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 15:59:51,340 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:59:51,340 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:59:51,340 DEBUG ~ initializing non-lazy collections
12 10 2010 15:59:51,340 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 15:59:51,340 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 15:59:51,341 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 15:59:51,341 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 15:59:51,341 DEBUG ~ initializing non-lazy collections
12 10 2010 15:59:51,365 DEBUG ~ commit
12 10 2010 15:59:51,365 DEBUG ~ processing flush-time cascades
12 10 2010 15:59:51,365 DEBUG ~ dirty checking collections
12 10 2010 15:59:51,365 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 15:59:51,365 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 15:59:51,365 DEBUG ~ listing entities:
12 10 2010 15:59:51,366 DEBUG ~ models.User{id=2, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:59:51,366 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 15:59:51,366 DEBUG ~ re-enabling autocommit
12 10 2010 15:59:51,366 DEBUG ~ committed JDBC Connection
12 10 2010 15:59:51,366 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:59:51,366 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 15:59:51,382 DEBUG ~ opened session at timestamp: 12868667913
12 10 2010 15:59:51,382 DEBUG ~ begin
12 10 2010 15:59:51,382 DEBUG ~ opening JDBC connection
12 10 2010 15:59:51,382 DEBUG ~ current autocommit status: true
12 10 2010 15:59:51,382 DEBUG ~ disabling autocommit
12 10 2010 15:59:51,388 DEBUG ~ commit
12 10 2010 15:59:51,389 DEBUG ~ re-enabling autocommit
12 10 2010 15:59:51,389 DEBUG ~ committed JDBC Connection
12 10 2010 15:59:51,389 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 15:59:51,389 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:00:04,849 DEBUG ~ opened session at timestamp: 12868668048
12 10 2010 16:00:04,849 DEBUG ~ begin
12 10 2010 16:00:04,849 DEBUG ~ opening JDBC connection
12 10 2010 16:00:04,850 DEBUG ~ current autocommit status: true
12 10 2010 16:00:04,850 DEBUG ~ disabling autocommit
12 10 2010 16:00:04,859 DEBUG ~ commit
12 10 2010 16:00:04,860 DEBUG ~ re-enabling autocommit
12 10 2010 16:00:04,860 DEBUG ~ committed JDBC Connection
12 10 2010 16:00:04,860 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:00:04,860 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:00:06,207 DEBUG ~ opened session at timestamp: 12868668062
12 10 2010 16:00:06,207 DEBUG ~ begin
12 10 2010 16:00:06,207 DEBUG ~ opening JDBC connection
12 10 2010 16:00:06,207 DEBUG ~ current autocommit status: true
12 10 2010 16:00:06,207 DEBUG ~ disabling autocommit
12 10 2010 16:00:06,213 DEBUG ~ commit
12 10 2010 16:00:06,214 DEBUG ~ re-enabling autocommit
12 10 2010 16:00:06,214 DEBUG ~ committed JDBC Connection
12 10 2010 16:00:06,214 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:00:06,214 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:00:06,227 DEBUG ~ opened session at timestamp: 12868668062
12 10 2010 16:00:06,227 DEBUG ~ begin
12 10 2010 16:00:06,227 DEBUG ~ opening JDBC connection
12 10 2010 16:00:06,227 DEBUG ~ current autocommit status: true
12 10 2010 16:00:06,227 DEBUG ~ disabling autocommit
12 10 2010 16:00:06,479 DEBUG ~ executing identity-insert immediately
12 10 2010 16:00:06,479 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:00:06,479 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:00:06,479 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:00:06,480 DEBUG ~ Natively generated identity: 3
12 10 2010 16:00:06,480 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:00:06,480 DEBUG ~ processing flush-time cascades
12 10 2010 16:00:06,480 DEBUG ~ dirty checking collections
12 10 2010 16:00:06,480 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:00:06,480 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:00:06,480 DEBUG ~ listing entities:
12 10 2010 16:00:06,480 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:00:06,481 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:00:06,481 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:00:06,481 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 16:00:06,481 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:00:06,481 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:00:06,481 DEBUG ~ resolving associations for [models.User#1]
12 10 2010 16:00:06,482 DEBUG ~ done materializing entity [models.User#1]
12 10 2010 16:00:06,482 DEBUG ~ initializing non-lazy collections
12 10 2010 16:00:06,482 DEBUG ~ executing identity-insert immediately
12 10 2010 16:00:06,482 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:00:06,482 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:00:06,482 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:00:06,482 DEBUG ~ Natively generated identity: 4
12 10 2010 16:00:06,482 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:00:06,483 DEBUG ~ processing flush-time cascades
12 10 2010 16:00:06,483 DEBUG ~ dirty checking collections
12 10 2010 16:00:06,483 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 16:00:06,483 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:00:06,483 DEBUG ~ listing entities:
12 10 2010 16:00:06,483 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:00:06,483 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:00:06,483 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:00:06,484 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:00:06,484 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:00:06,484 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 16:00:06,484 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:00:06,484 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:00:06,484 DEBUG ~ initializing non-lazy collections
12 10 2010 16:00:06,485 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:00:06,485 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:00:06,485 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:00:06,485 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:00:06,485 DEBUG ~ initializing non-lazy collections
12 10 2010 16:00:06,486 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:00:06,486 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:00:06,486 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:00:06,486 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:00:06,486 DEBUG ~ initializing non-lazy collections
12 10 2010 16:00:06,498 DEBUG ~ commit
12 10 2010 16:00:06,498 DEBUG ~ processing flush-time cascades
12 10 2010 16:00:06,498 DEBUG ~ dirty checking collections
12 10 2010 16:00:06,498 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 16:00:06,498 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:00:06,499 DEBUG ~ listing entities:
12 10 2010 16:00:06,499 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:00:06,499 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:00:06,499 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:00:06,499 DEBUG ~ re-enabling autocommit
12 10 2010 16:00:06,499 DEBUG ~ committed JDBC Connection
12 10 2010 16:00:06,499 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:00:06,499 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:00:06,577 DEBUG ~ opened session at timestamp: 12868668065
12 10 2010 16:00:06,577 DEBUG ~ begin
12 10 2010 16:00:06,577 DEBUG ~ opening JDBC connection
12 10 2010 16:00:06,577 DEBUG ~ current autocommit status: true
12 10 2010 16:00:06,578 DEBUG ~ disabling autocommit
12 10 2010 16:00:06,582 DEBUG ~ commit
12 10 2010 16:00:06,582 DEBUG ~ re-enabling autocommit
12 10 2010 16:00:06,582 DEBUG ~ committed JDBC Connection
12 10 2010 16:00:06,582 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:00:06,582 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:01:46,115 INFO  ~ closing
12 10 2010 16:01:46,116 INFO  ~ Running hbm2ddl schema export
12 10 2010 16:01:46,116 DEBUG ~ import file not found: /import.sql
12 10 2010 16:01:46,116 INFO  ~ exporting generated schema to database
12 10 2010 16:01:46,116 DEBUG ~ drop table User if exists
12 10 2010 16:01:46,117 INFO  ~ schema export complete
12 10 2010 16:01:46,152 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 16:01:46,152 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
12 10 2010 16:01:46,152 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
12 10 2010 16:01:46,152 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
12 10 2010 16:01:46,152 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
12 10 2010 16:01:46,152 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
12 10 2010 16:01:46,152 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
12 10 2010 16:01:46,152 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
12 10 2010 16:01:46,152 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
12 10 2010 16:01:46,152 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
12 10 2010 16:01:46,152 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 16:01:46,152 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
12 10 2010 16:01:46,152 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
12 10 2010 16:01:46,152 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
12 10 2010 16:01:46,153 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:01:46,153 DEBUG ~ Process hbm files
12 10 2010 16:01:46,153 DEBUG ~ Process annotated classes
12 10 2010 16:01:46,153 INFO  ~ Binding entity from annotated class: models.User
12 10 2010 16:01:46,153 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 16:01:46,153 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 16:01:46,153 DEBUG ~ Import with entity name User
12 10 2010 16:01:46,153 INFO  ~ Bind entity models.User on table User
12 10 2010 16:01:46,156 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 16:01:46,157 DEBUG ~ binding property id with lazy=false
12 10 2010 16:01:46,157 DEBUG ~ building SimpleValue for id
12 10 2010 16:01:46,157 DEBUG ~ Building property id
12 10 2010 16:01:46,157 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
12 10 2010 16:01:46,157 DEBUG ~ binding property email with lazy=false
12 10 2010 16:01:46,157 DEBUG ~ building SimpleValue for email
12 10 2010 16:01:46,157 DEBUG ~ Building property email
12 10 2010 16:01:46,157 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
12 10 2010 16:01:46,157 DEBUG ~ binding property fullname with lazy=false
12 10 2010 16:01:46,158 DEBUG ~ building SimpleValue for fullname
12 10 2010 16:01:46,158 DEBUG ~ Building property fullname
12 10 2010 16:01:46,158 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
12 10 2010 16:01:46,158 DEBUG ~ binding property isAdmin with lazy=false
12 10 2010 16:01:46,158 DEBUG ~ building SimpleValue for isAdmin
12 10 2010 16:01:46,158 DEBUG ~ Building property isAdmin
12 10 2010 16:01:46,158 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
12 10 2010 16:01:46,158 DEBUG ~ binding property password with lazy=false
12 10 2010 16:01:46,158 DEBUG ~ building SimpleValue for password
12 10 2010 16:01:46,158 DEBUG ~ Building property password
12 10 2010 16:01:46,158 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 16:01:46,159 DEBUG ~ setting SimpleValue typeName for email
12 10 2010 16:01:46,159 DEBUG ~ setting SimpleValue typeName for fullname
12 10 2010 16:01:46,159 DEBUG ~ setting SimpleValue typeName for isAdmin
12 10 2010 16:01:46,159 DEBUG ~ setting SimpleValue typeName for password
12 10 2010 16:01:46,159 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:01:46,159 DEBUG ~ processing extends queue
12 10 2010 16:01:46,159 DEBUG ~ processing collection mappings
12 10 2010 16:01:46,159 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:01:46,159 DEBUG ~ processing association property references
12 10 2010 16:01:46,159 DEBUG ~ processing foreign key constraints
12 10 2010 16:01:46,160 INFO  ~ Hibernate Validator not found: ignoring
12 10 2010 16:01:46,166 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
12 10 2010 16:01:46,167 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
12 10 2010 16:01:46,169 DEBUG ~ Search not present in classpath, ignoring event listener registration.
12 10 2010 16:01:46,169 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
12 10 2010 16:01:46,169 DEBUG ~ Preparing to build session factory with filters : {}
12 10 2010 16:01:46,169 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:01:46,169 DEBUG ~ Process hbm files
12 10 2010 16:01:46,169 DEBUG ~ Process annotated classes
12 10 2010 16:01:46,169 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:01:46,169 DEBUG ~ processing extends queue
12 10 2010 16:01:46,169 DEBUG ~ processing collection mappings
12 10 2010 16:01:46,169 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:01:46,169 DEBUG ~ processing association property references
12 10 2010 16:01:46,169 DEBUG ~ processing foreign key constraints
12 10 2010 16:01:46,171 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
12 10 2010 16:01:46,171 INFO  ~ Using provided datasource
12 10 2010 16:01:46,171 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
12 10 2010 16:01:46,171 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
12 10 2010 16:01:46,171 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
12 10 2010 16:01:46,172 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
12 10 2010 16:01:46,172 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
12 10 2010 16:01:46,172 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
12 10 2010 16:01:46,172 INFO  ~ Automatic flush during beforeCompletion(): disabled
12 10 2010 16:01:46,172 INFO  ~ Automatic session close at end of transaction: disabled
12 10 2010 16:01:46,172 INFO  ~ JDBC batch size: 15
12 10 2010 16:01:46,172 INFO  ~ JDBC batch updates for versioned data: disabled
12 10 2010 16:01:46,172 INFO  ~ Scrollable result sets: enabled
12 10 2010 16:01:46,172 DEBUG ~ Wrap result sets: disabled
12 10 2010 16:01:46,172 INFO  ~ JDBC3 getGeneratedKeys(): disabled
12 10 2010 16:01:46,172 INFO  ~ Connection release mode: auto
12 10 2010 16:01:46,172 INFO  ~ Default batch fetch size: 1
12 10 2010 16:01:46,172 INFO  ~ Generate SQL with comments: disabled
12 10 2010 16:01:46,172 INFO  ~ Order SQL updates by primary key: disabled
12 10 2010 16:01:46,172 INFO  ~ Order SQL inserts for batching: disabled
12 10 2010 16:01:46,173 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
12 10 2010 16:01:46,173 INFO  ~ Using ASTQueryTranslatorFactory
12 10 2010 16:01:46,173 INFO  ~ Query language substitutions: {}
12 10 2010 16:01:46,173 INFO  ~ JPA-QL strict compliance: enabled
12 10 2010 16:01:46,173 INFO  ~ Second-level cache: enabled
12 10 2010 16:01:46,173 INFO  ~ Query cache: disabled
12 10 2010 16:01:46,173 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
12 10 2010 16:01:46,173 INFO  ~ Optimize cache for minimal puts: disabled
12 10 2010 16:01:46,173 INFO  ~ Structured second-level cache entries: disabled
12 10 2010 16:01:46,173 INFO  ~ Statistics: disabled
12 10 2010 16:01:46,173 INFO  ~ Deleted entity synthetic identifier rollback: disabled
12 10 2010 16:01:46,173 INFO  ~ Default entity-mode: pojo
12 10 2010 16:01:46,173 INFO  ~ Named query checking : enabled
12 10 2010 16:01:46,173 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
12 10 2010 16:01:46,178 INFO  ~ building session factory
12 10 2010 16:01:46,178 DEBUG ~ Session factory constructed with filter configurations : {}
12 10 2010 16:01:46,178 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
12 10 2010 16:01:46,179 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:01:46,186 DEBUG ~ Static SQL for entity: models.User
12 10 2010 16:01:46,186 DEBUG ~  Version select: select id from User where id =?
12 10 2010 16:01:46,186 DEBUG ~  Snapshot select: select user_.id, user_.email as email12_, user_.fullname as fullname12_, user_.isAdmin as isAdmin12_, user_.password as password12_ from User user_ where user_.id=?
12 10 2010 16:01:46,186 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
12 10 2010 16:01:46,186 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
12 10 2010 16:01:46,186 DEBUG ~  Delete 0: delete from User where id=?
12 10 2010 16:01:46,186 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
12 10 2010 16:01:46,186 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id12_0_, user0_.email as email12_0_, user0_.fullname as fullname12_0_, user0_.isAdmin as isAdmin12_0_, user0_.password as password12_0_ from User user0_ where user0_.id=?
12 10 2010 16:01:46,186 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id12_0_, user0_.email as email12_0_, user0_.fullname as fullname12_0_, user0_.isAdmin as isAdmin12_0_, user0_.password as password12_0_ from User user0_ where user0_.id=?
12 10 2010 16:01:46,186 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id12_0_, user0_.email as email12_0_, user0_.fullname as fullname12_0_, user0_.isAdmin as isAdmin12_0_, user0_.password as password12_0_ from User user0_ where user0_.id=?
12 10 2010 16:01:46,187 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id12_0_, user0_.email as email12_0_, user0_.fullname as fullname12_0_, user0_.isAdmin as isAdmin12_0_, user0_.password as password12_0_ from User user0_ where user0_.id=?
12 10 2010 16:01:46,187 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id12_0_, user0_.email as email12_0_, user0_.fullname as fullname12_0_, user0_.isAdmin as isAdmin12_0_, user0_.password as password12_0_ from User user0_ where user0_.id=?
12 10 2010 16:01:46,187 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id12_0_, user0_.email as email12_0_, user0_.fullname as fullname12_0_, user0_.isAdmin as isAdmin12_0_, user0_.password as password12_0_ from User user0_ where user0_.id=?
12 10 2010 16:01:46,187 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id12_0_, user0_.email as email12_0_, user0_.fullname as fullname12_0_, user0_.isAdmin as isAdmin12_0_, user0_.password as password12_0_ from User user0_ where user0_.id=?
12 10 2010 16:01:46,187 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id12_0_, user0_.email as email12_0_, user0_.fullname as fullname12_0_, user0_.isAdmin as isAdmin12_0_, user0_.password as password12_0_ from User user0_ where user0_.id=?
12 10 2010 16:01:46,187 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id12_0_, user0_.email as email12_0_, user0_.fullname as fullname12_0_, user0_.isAdmin as isAdmin12_0_, user0_.password as password12_0_ from User user0_ where user0_.id=?
12 10 2010 16:01:46,188 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id12_0_, user0_.email as email12_0_, user0_.fullname as fullname12_0_, user0_.isAdmin as isAdmin12_0_, user0_.password as password12_0_ from User user0_ where user0_.id=?
12 10 2010 16:01:46,188 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id12_0_, user0_.email as email12_0_, user0_.fullname as fullname12_0_, user0_.isAdmin as isAdmin12_0_, user0_.password as password12_0_ from User user0_ where user0_.id=?
12 10 2010 16:01:46,188 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id12_0_, user0_.email as email12_0_, user0_.fullname as fullname12_0_, user0_.isAdmin as isAdmin12_0_, user0_.password as password12_0_ from User user0_ where user0_.id=?
12 10 2010 16:01:46,188 DEBUG ~ registered: 2c9082cd2b9f0d81012b9f3eac4c0006 (unnamed)
12 10 2010 16:01:46,188 INFO  ~ Not binding factory to JNDI, no JNDI name configured
12 10 2010 16:01:46,188 DEBUG ~ instantiated session factory
12 10 2010 16:01:46,188 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:01:46,188 DEBUG ~ Process hbm files
12 10 2010 16:01:46,188 DEBUG ~ Process annotated classes
12 10 2010 16:01:46,189 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:01:46,189 DEBUG ~ processing extends queue
12 10 2010 16:01:46,189 DEBUG ~ processing collection mappings
12 10 2010 16:01:46,189 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:01:46,189 DEBUG ~ processing association property references
12 10 2010 16:01:46,189 DEBUG ~ processing foreign key constraints
12 10 2010 16:01:46,190 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:01:46,191 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:01:46,191 DEBUG ~ Process hbm files
12 10 2010 16:01:46,191 DEBUG ~ Process annotated classes
12 10 2010 16:01:46,191 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:01:46,191 DEBUG ~ processing extends queue
12 10 2010 16:01:46,191 DEBUG ~ processing collection mappings
12 10 2010 16:01:46,191 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:01:46,191 DEBUG ~ processing association property references
12 10 2010 16:01:46,191 DEBUG ~ processing foreign key constraints
12 10 2010 16:01:46,192 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:01:46,192 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:01:46,192 INFO  ~ Running hbm2ddl schema export
12 10 2010 16:01:46,193 DEBUG ~ import file not found: /import.sql
12 10 2010 16:01:46,193 INFO  ~ exporting generated schema to database
12 10 2010 16:01:46,193 DEBUG ~ drop table User if exists
12 10 2010 16:01:46,193 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
12 10 2010 16:01:46,193 INFO  ~ schema export complete
12 10 2010 16:01:46,193 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:01:46,193 DEBUG ~ Process hbm files
12 10 2010 16:01:46,193 DEBUG ~ Process annotated classes
12 10 2010 16:01:46,193 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:01:46,193 DEBUG ~ processing extends queue
12 10 2010 16:01:46,193 DEBUG ~ processing collection mappings
12 10 2010 16:01:46,193 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:01:46,193 DEBUG ~ processing association property references
12 10 2010 16:01:46,194 DEBUG ~ processing foreign key constraints
12 10 2010 16:01:46,195 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:01:46,195 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:01:46,195 DEBUG ~ Process hbm files
12 10 2010 16:01:46,195 DEBUG ~ Process annotated classes
12 10 2010 16:01:46,195 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:01:46,195 DEBUG ~ processing extends queue
12 10 2010 16:01:46,195 DEBUG ~ processing collection mappings
12 10 2010 16:01:46,195 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:01:46,195 DEBUG ~ processing association property references
12 10 2010 16:01:46,195 DEBUG ~ processing foreign key constraints
12 10 2010 16:01:46,197 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:01:46,197 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:01:46,197 DEBUG ~ Checking 0 named HQL queries
12 10 2010 16:01:46,197 DEBUG ~ Checking 0 named SQL queries
12 10 2010 16:01:46,201 DEBUG ~ opened session at timestamp: 12868669062
12 10 2010 16:01:46,201 DEBUG ~ begin
12 10 2010 16:01:46,201 DEBUG ~ opening JDBC connection
12 10 2010 16:01:46,201 DEBUG ~ current autocommit status: true
12 10 2010 16:01:46,201 DEBUG ~ disabling autocommit
12 10 2010 16:01:46,254 DEBUG ~ commit
12 10 2010 16:01:46,254 DEBUG ~ re-enabling autocommit
12 10 2010 16:01:46,254 DEBUG ~ committed JDBC Connection
12 10 2010 16:01:46,254 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:01:46,254 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:01:47,273 DEBUG ~ opened session at timestamp: 12868669072
12 10 2010 16:01:47,273 DEBUG ~ begin
12 10 2010 16:01:47,273 DEBUG ~ opening JDBC connection
12 10 2010 16:01:47,273 DEBUG ~ current autocommit status: true
12 10 2010 16:01:47,273 DEBUG ~ disabling autocommit
12 10 2010 16:01:47,334 DEBUG ~ commit
12 10 2010 16:01:47,334 DEBUG ~ re-enabling autocommit
12 10 2010 16:01:47,334 DEBUG ~ committed JDBC Connection
12 10 2010 16:01:47,334 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:01:47,334 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:01:47,356 DEBUG ~ opened session at timestamp: 12868669073
12 10 2010 16:01:47,357 DEBUG ~ begin
12 10 2010 16:01:47,357 DEBUG ~ opening JDBC connection
12 10 2010 16:01:47,357 DEBUG ~ current autocommit status: true
12 10 2010 16:01:47,357 DEBUG ~ disabling autocommit
12 10 2010 16:01:47,609 DEBUG ~ executing identity-insert immediately
12 10 2010 16:01:47,609 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:01:47,609 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:01:47,609 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:01:47,609 DEBUG ~ Natively generated identity: 1
12 10 2010 16:01:47,610 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:01:47,610 DEBUG ~ processing flush-time cascades
12 10 2010 16:01:47,610 DEBUG ~ dirty checking collections
12 10 2010 16:01:47,610 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:01:47,610 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:01:47,610 DEBUG ~ listing entities:
12 10 2010 16:01:47,610 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:01:47,611 DEBUG ~ parse() - HQL: from models.User where email = ?
12 10 2010 16:01:47,613 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'email'
          \-[PARAM] Node: '?'

12 10 2010 16:01:47,613 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:01:47,614 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 16:01:47,614 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 16:01:47,614 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 16:01:47,614 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 16:01:47,614 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 16:01:47,615 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 16:01:47,615 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.email {synthetic-alias} email ) ? ) ) )
12 10 2010 16:01:47,615 DEBUG ~ Derived SELECT clause created.
12 10 2010 16:01:47,615 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 16:01:47,615 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 16:01:47,615 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id12_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email12_, user0_.fullname as fullname12_, user0_.isAdmin as isAdmin12_, user0_.password as password12_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'email' {originalText=email}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 16:01:47,616 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:01:47,616 DEBUG ~ HQL: from models.User where email = ?
12 10 2010 16:01:47,616 DEBUG ~ SQL: select user0_.id as id12_, user0_.email as email12_, user0_.fullname as fullname12_, user0_.isAdmin as isAdmin12_, user0_.password as password12_ from User user0_ where user0_.email=?
12 10 2010 16:01:47,616 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:01:47,616 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:01:47,617 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:01:47,617 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 16:01:47,617 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:01:47,617 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:01:47,617 DEBUG ~ initializing non-lazy collections
12 10 2010 16:01:47,617 DEBUG ~ executing identity-insert immediately
12 10 2010 16:01:47,617 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:01:47,617 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:01:47,617 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:01:47,618 DEBUG ~ Natively generated identity: 2
12 10 2010 16:01:47,618 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:01:47,618 DEBUG ~ processing flush-time cascades
12 10 2010 16:01:47,618 DEBUG ~ dirty checking collections
12 10 2010 16:01:47,618 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 16:01:47,618 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:01:47,618 DEBUG ~ listing entities:
12 10 2010 16:01:47,618 DEBUG ~ models.User{id=2, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:01:47,618 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:01:47,619 DEBUG ~ parse() - HQL: from models.User where email = ? AND password = ?
12 10 2010 16:01:47,621 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'AND'
          +-[EQ] Node: '='
          |  +-[IDENT] Node: 'email'
          |  \-[PARAM] Node: '?'
          \-[EQ] Node: '='
             +-[IDENT] Node: 'password'
             \-[PARAM] Node: '?'

12 10 2010 16:01:47,621 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:01:47,622 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 16:01:47,622 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 16:01:47,622 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 16:01:47,622 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 16:01:47,622 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 16:01:47,622 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 16:01:47,622 DEBUG ~ getDataType() : password -> org.hibernate.type.StringType@18b3c498
12 10 2010 16:01:47,622 DEBUG ~ Resolved :  {synthetic-alias}.password -> user0_.password
12 10 2010 16:01:47,622 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 16:01:47,622 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( AND ( = ( user0_.email {synthetic-alias} email ) ? ) ( = ( user0_.password {synthetic-alias} password ) ? ) ) ) )
12 10 2010 16:01:47,622 DEBUG ~ Derived SELECT clause created.
12 10 2010 16:01:47,623 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 16:01:47,623 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 16:01:47,623 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id12_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email12_, user0_.fullname as fullname12_, user0_.isAdmin as isAdmin12_, user0_.password as password12_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'AND'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  |  \-[IDENT] IdentNode: 'email' {originalText=email}
          |  \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'user0_.password' {propertyName=password,dereferenceType=ALL,propertyPath=password,path={synthetic-alias}.password,tableAlias=user0_,className=models.User,classAlias=null}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'password' {originalText=password}
             \-[PARAM] ParameterNode: '?' {ordinal=1, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 16:01:47,623 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:01:47,624 DEBUG ~ HQL: from models.User where email = ? AND password = ?
12 10 2010 16:01:47,624 DEBUG ~ SQL: select user0_.id as id12_, user0_.email as email12_, user0_.fullname as fullname12_, user0_.isAdmin as isAdmin12_, user0_.password as password12_ from User user0_ where user0_.email=? and user0_.password=?
12 10 2010 16:01:47,624 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:01:47,624 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:01:47,625 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:01:47,625 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 16:01:47,625 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:01:47,625 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:01:47,625 DEBUG ~ initializing non-lazy collections
12 10 2010 16:01:47,625 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:01:47,625 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:01:47,625 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:01:47,625 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:01:47,626 DEBUG ~ initializing non-lazy collections
12 10 2010 16:01:47,626 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:01:47,626 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:01:47,626 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:01:47,626 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:01:47,626 DEBUG ~ initializing non-lazy collections
12 10 2010 16:01:47,648 DEBUG ~ commit
12 10 2010 16:01:47,648 DEBUG ~ processing flush-time cascades
12 10 2010 16:01:47,648 DEBUG ~ dirty checking collections
12 10 2010 16:01:47,648 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 16:01:47,648 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:01:47,648 DEBUG ~ listing entities:
12 10 2010 16:01:47,649 DEBUG ~ models.User{id=2, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:01:47,649 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:01:47,649 DEBUG ~ re-enabling autocommit
12 10 2010 16:01:47,649 DEBUG ~ committed JDBC Connection
12 10 2010 16:01:47,649 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:01:47,649 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:01:47,674 DEBUG ~ opened session at timestamp: 12868669076
12 10 2010 16:01:47,675 DEBUG ~ begin
12 10 2010 16:01:47,675 DEBUG ~ opening JDBC connection
12 10 2010 16:01:47,675 DEBUG ~ current autocommit status: true
12 10 2010 16:01:47,675 DEBUG ~ disabling autocommit
12 10 2010 16:01:47,679 DEBUG ~ commit
12 10 2010 16:01:47,679 DEBUG ~ re-enabling autocommit
12 10 2010 16:01:47,679 DEBUG ~ committed JDBC Connection
12 10 2010 16:01:47,679 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:01:47,679 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:06:04,847 ERROR ~ 

@645j8gm9b
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 35)
The file /test/BasicTest.scala could not be compiled. Error raised is : not found: type Post

play.exceptions.CompilationException: not found: type Post
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 16:07:54,586 INFO  ~ closing
12 10 2010 16:07:54,586 INFO  ~ Running hbm2ddl schema export
12 10 2010 16:07:54,587 DEBUG ~ import file not found: /import.sql
12 10 2010 16:07:54,587 INFO  ~ exporting generated schema to database
12 10 2010 16:07:54,587 DEBUG ~ drop table User if exists
12 10 2010 16:07:54,588 INFO  ~ schema export complete
12 10 2010 16:07:55,369 ERROR ~ 

@645j8gm9c
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 36)
The file /test/BasicTest.scala could not be compiled. Error raised is : not found: value Post

play.exceptions.CompilationException: not found: value Post
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.compileAll(ScalaPlugin.scala:100)
	at play.classloading.ApplicationClassloader.getAllClasses(ApplicationClassloader.java:403)
	at play.Play.start(Play.java:385)
	at play.Play.detectChanges(Play.java:502)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 16:08:24,570 ERROR ~ 

@645j8gm9d
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 42)
The file /test/BasicTest.scala could not be compiled. Error raised is : value get is not a member of models.Post

play.exceptions.CompilationException: value get is not a member of models.Post
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.compileAll(ScalaPlugin.scala:100)
	at play.classloading.ApplicationClassloader.getAllClasses(ApplicationClassloader.java:403)
	at play.Play.start(Play.java:385)
	at play.Play.detectChanges(Play.java:502)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 16:08:59,627 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 16:08:59,627 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
12 10 2010 16:08:59,627 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
12 10 2010 16:08:59,627 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
12 10 2010 16:08:59,627 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
12 10 2010 16:08:59,627 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
12 10 2010 16:08:59,627 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
12 10 2010 16:08:59,627 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
12 10 2010 16:08:59,627 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
12 10 2010 16:08:59,627 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
12 10 2010 16:08:59,627 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 16:08:59,628 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
12 10 2010 16:08:59,628 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
12 10 2010 16:08:59,628 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
12 10 2010 16:08:59,628 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:08:59,628 DEBUG ~ Process hbm files
12 10 2010 16:08:59,628 DEBUG ~ Process annotated classes
12 10 2010 16:08:59,629 INFO  ~ Binding entity from annotated class: models.Post
12 10 2010 16:08:59,629 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 16:08:59,629 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 16:08:59,629 DEBUG ~ Import with entity name Post
12 10 2010 16:08:59,629 INFO  ~ Bind entity models.Post on table Post
12 10 2010 16:08:59,636 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 16:08:59,636 DEBUG ~ binding property id with lazy=false
12 10 2010 16:08:59,636 DEBUG ~ building SimpleValue for id
12 10 2010 16:08:59,636 DEBUG ~ Building property id
12 10 2010 16:08:59,638 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
12 10 2010 16:08:59,638 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=author, insertable=true, updatable=true, unique=false}
12 10 2010 16:08:59,702 DEBUG ~ Building property author
12 10 2010 16:08:59,703 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=content, insertable=true, updatable=true, unique=false}
12 10 2010 16:08:59,703 DEBUG ~ binding property content with lazy=false
12 10 2010 16:08:59,703 DEBUG ~ building SimpleValue for content
12 10 2010 16:08:59,703 DEBUG ~ Building property content
12 10 2010 16:08:59,703 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
12 10 2010 16:08:59,703 DEBUG ~ binding property postedAt with lazy=false
12 10 2010 16:08:59,703 DEBUG ~ building SimpleValue for postedAt
12 10 2010 16:08:59,703 DEBUG ~ Building property postedAt
12 10 2010 16:08:59,703 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=title, insertable=true, updatable=true, unique=false}
12 10 2010 16:08:59,703 DEBUG ~ binding property title with lazy=false
12 10 2010 16:08:59,703 DEBUG ~ building SimpleValue for title
12 10 2010 16:08:59,703 DEBUG ~ Building property title
12 10 2010 16:08:59,703 INFO  ~ Binding entity from annotated class: models.User
12 10 2010 16:08:59,704 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 16:08:59,704 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 16:08:59,704 DEBUG ~ Import with entity name User
12 10 2010 16:08:59,704 INFO  ~ Bind entity models.User on table User
12 10 2010 16:08:59,705 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 16:08:59,705 DEBUG ~ binding property id with lazy=false
12 10 2010 16:08:59,705 DEBUG ~ building SimpleValue for id
12 10 2010 16:08:59,705 DEBUG ~ Building property id
12 10 2010 16:08:59,705 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
12 10 2010 16:08:59,706 DEBUG ~ binding property email with lazy=false
12 10 2010 16:08:59,706 DEBUG ~ building SimpleValue for email
12 10 2010 16:08:59,706 DEBUG ~ Building property email
12 10 2010 16:08:59,706 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
12 10 2010 16:08:59,706 DEBUG ~ binding property fullname with lazy=false
12 10 2010 16:08:59,706 DEBUG ~ building SimpleValue for fullname
12 10 2010 16:08:59,706 DEBUG ~ Building property fullname
12 10 2010 16:08:59,706 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
12 10 2010 16:08:59,706 DEBUG ~ binding property isAdmin with lazy=false
12 10 2010 16:08:59,706 DEBUG ~ building SimpleValue for isAdmin
12 10 2010 16:08:59,706 DEBUG ~ Building property isAdmin
12 10 2010 16:08:59,706 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
12 10 2010 16:08:59,706 DEBUG ~ binding property password with lazy=false
12 10 2010 16:08:59,706 DEBUG ~ building SimpleValue for password
12 10 2010 16:08:59,707 DEBUG ~ Building property password
12 10 2010 16:08:59,707 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 16:08:59,707 DEBUG ~ setting SimpleValue typeName for content
12 10 2010 16:08:59,707 DEBUG ~ setting SimpleValue typeName for postedAt
12 10 2010 16:08:59,707 DEBUG ~ setting SimpleValue typeName for title
12 10 2010 16:08:59,707 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 16:08:59,707 DEBUG ~ setting SimpleValue typeName for email
12 10 2010 16:08:59,707 DEBUG ~ setting SimpleValue typeName for fullname
12 10 2010 16:08:59,707 DEBUG ~ setting SimpleValue typeName for isAdmin
12 10 2010 16:08:59,707 DEBUG ~ setting SimpleValue typeName for password
12 10 2010 16:08:59,707 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:08:59,711 DEBUG ~ processing extends queue
12 10 2010 16:08:59,711 DEBUG ~ processing collection mappings
12 10 2010 16:08:59,711 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:08:59,711 DEBUG ~ processing association property references
12 10 2010 16:08:59,711 DEBUG ~ processing foreign key constraints
12 10 2010 16:08:59,711 DEBUG ~ resolving reference to class: models.User
12 10 2010 16:08:59,719 INFO  ~ Hibernate Validator not found: ignoring
12 10 2010 16:08:59,749 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
12 10 2010 16:08:59,749 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
12 10 2010 16:08:59,751 DEBUG ~ Search not present in classpath, ignoring event listener registration.
12 10 2010 16:08:59,751 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
12 10 2010 16:08:59,752 DEBUG ~ Preparing to build session factory with filters : {}
12 10 2010 16:08:59,752 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:08:59,752 DEBUG ~ Process hbm files
12 10 2010 16:08:59,752 DEBUG ~ Process annotated classes
12 10 2010 16:08:59,752 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:08:59,752 DEBUG ~ processing extends queue
12 10 2010 16:08:59,752 DEBUG ~ processing collection mappings
12 10 2010 16:08:59,752 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:08:59,752 DEBUG ~ processing association property references
12 10 2010 16:08:59,752 DEBUG ~ processing foreign key constraints
12 10 2010 16:08:59,752 DEBUG ~ resolving reference to class: models.User
12 10 2010 16:08:59,754 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
12 10 2010 16:08:59,754 INFO  ~ Using provided datasource
12 10 2010 16:08:59,754 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
12 10 2010 16:08:59,754 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
12 10 2010 16:08:59,754 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
12 10 2010 16:08:59,755 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
12 10 2010 16:08:59,755 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
12 10 2010 16:08:59,755 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
12 10 2010 16:08:59,755 INFO  ~ Automatic flush during beforeCompletion(): disabled
12 10 2010 16:08:59,755 INFO  ~ Automatic session close at end of transaction: disabled
12 10 2010 16:08:59,755 INFO  ~ JDBC batch size: 15
12 10 2010 16:08:59,755 INFO  ~ JDBC batch updates for versioned data: disabled
12 10 2010 16:08:59,755 INFO  ~ Scrollable result sets: enabled
12 10 2010 16:08:59,755 DEBUG ~ Wrap result sets: disabled
12 10 2010 16:08:59,755 INFO  ~ JDBC3 getGeneratedKeys(): disabled
12 10 2010 16:08:59,755 INFO  ~ Connection release mode: auto
12 10 2010 16:08:59,755 INFO  ~ Default batch fetch size: 1
12 10 2010 16:08:59,755 INFO  ~ Generate SQL with comments: disabled
12 10 2010 16:08:59,755 INFO  ~ Order SQL updates by primary key: disabled
12 10 2010 16:08:59,755 INFO  ~ Order SQL inserts for batching: disabled
12 10 2010 16:08:59,755 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
12 10 2010 16:08:59,756 INFO  ~ Using ASTQueryTranslatorFactory
12 10 2010 16:08:59,756 INFO  ~ Query language substitutions: {}
12 10 2010 16:08:59,756 INFO  ~ JPA-QL strict compliance: enabled
12 10 2010 16:08:59,756 INFO  ~ Second-level cache: enabled
12 10 2010 16:08:59,756 INFO  ~ Query cache: disabled
12 10 2010 16:08:59,756 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
12 10 2010 16:08:59,756 INFO  ~ Optimize cache for minimal puts: disabled
12 10 2010 16:08:59,756 INFO  ~ Structured second-level cache entries: disabled
12 10 2010 16:08:59,756 INFO  ~ Statistics: disabled
12 10 2010 16:08:59,756 INFO  ~ Deleted entity synthetic identifier rollback: disabled
12 10 2010 16:08:59,756 INFO  ~ Default entity-mode: pojo
12 10 2010 16:08:59,756 INFO  ~ Named query checking : enabled
12 10 2010 16:08:59,756 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
12 10 2010 16:08:59,768 INFO  ~ building session factory
12 10 2010 16:08:59,768 DEBUG ~ Session factory constructed with filter configurations : {}
12 10 2010 16:08:59,768 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
12 10 2010 16:08:59,769 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:08:59,769 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:08:59,775 DEBUG ~ Static SQL for entity: models.Post
12 10 2010 16:08:59,775 DEBUG ~  Version select: select id from Post where id =?
12 10 2010 16:08:59,775 DEBUG ~  Snapshot select: select post_.id, post_.author_id as author5_14_, post_.content as content14_, post_.postedAt as postedAt14_, post_.title as title14_ from Post post_ where post_.id=?
12 10 2010 16:08:59,775 DEBUG ~  Insert 0: insert into Post (author_id, content, postedAt, title, id) values (?, ?, ?, ?, ?)
12 10 2010 16:08:59,775 DEBUG ~  Update 0: update Post set author_id=?, content=?, postedAt=?, title=? where id=?
12 10 2010 16:08:59,775 DEBUG ~  Delete 0: delete from Post where id=?
12 10 2010 16:08:59,775 DEBUG ~  Identity insert: insert into Post (id, author_id, content, postedAt, title) values (null, ?, ?, ?, ?)
12 10 2010 16:08:59,779 DEBUG ~ Static SQL for entity: models.User
12 10 2010 16:08:59,779 DEBUG ~  Version select: select id from User where id =?
12 10 2010 16:08:59,779 DEBUG ~  Snapshot select: select user_.id, user_.email as email15_, user_.fullname as fullname15_, user_.isAdmin as isAdmin15_, user_.password as password15_ from User user_ where user_.id=?
12 10 2010 16:08:59,780 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
12 10 2010 16:08:59,780 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
12 10 2010 16:08:59,780 DEBUG ~  Delete 0: delete from User where id=?
12 10 2010 16:08:59,780 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
12 10 2010 16:08:59,782 DEBUG ~ Static select for entity models.Post [NONE]: select post0_.id as id14_1_, post0_.author_id as author5_14_1_, post0_.content as content14_1_, post0_.postedAt as postedAt14_1_, post0_.title as title14_1_, user1_.id as id15_0_, user1_.email as email15_0_, user1_.fullname as fullname15_0_, user1_.isAdmin as isAdmin15_0_, user1_.password as password15_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 16:08:59,782 DEBUG ~ Static select for entity models.Post [READ]: select post0_.id as id14_1_, post0_.author_id as author5_14_1_, post0_.content as content14_1_, post0_.postedAt as postedAt14_1_, post0_.title as title14_1_, user1_.id as id15_0_, user1_.email as email15_0_, user1_.fullname as fullname15_0_, user1_.isAdmin as isAdmin15_0_, user1_.password as password15_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 16:08:59,782 DEBUG ~ Static select for entity models.Post [UPGRADE]: select post0_.id as id14_0_, post0_.author_id as author5_14_0_, post0_.content as content14_0_, post0_.postedAt as postedAt14_0_, post0_.title as title14_0_ from Post post0_ where post0_.id=?
12 10 2010 16:08:59,783 DEBUG ~ Static select for entity models.Post [UPGRADE_NOWAIT]: select post0_.id as id14_0_, post0_.author_id as author5_14_0_, post0_.content as content14_0_, post0_.postedAt as postedAt14_0_, post0_.title as title14_0_ from Post post0_ where post0_.id=?
12 10 2010 16:08:59,783 DEBUG ~ Static select for entity models.Post [FORCE]: select post0_.id as id14_0_, post0_.author_id as author5_14_0_, post0_.content as content14_0_, post0_.postedAt as postedAt14_0_, post0_.title as title14_0_ from Post post0_ where post0_.id=?
12 10 2010 16:08:59,783 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_READ]: select post0_.id as id14_0_, post0_.author_id as author5_14_0_, post0_.content as content14_0_, post0_.postedAt as postedAt14_0_, post0_.title as title14_0_ from Post post0_ where post0_.id=?
12 10 2010 16:08:59,783 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_WRITE]: select post0_.id as id14_0_, post0_.author_id as author5_14_0_, post0_.content as content14_0_, post0_.postedAt as postedAt14_0_, post0_.title as title14_0_ from Post post0_ where post0_.id=?
12 10 2010 16:08:59,783 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_FORCE_INCREMENT]: select post0_.id as id14_0_, post0_.author_id as author5_14_0_, post0_.content as content14_0_, post0_.postedAt as postedAt14_0_, post0_.title as title14_0_ from Post post0_ where post0_.id=?
12 10 2010 16:08:59,783 DEBUG ~ Static select for entity models.Post [OPTIMISTIC]: select post0_.id as id14_1_, post0_.author_id as author5_14_1_, post0_.content as content14_1_, post0_.postedAt as postedAt14_1_, post0_.title as title14_1_, user1_.id as id15_0_, user1_.email as email15_0_, user1_.fullname as fullname15_0_, user1_.isAdmin as isAdmin15_0_, user1_.password as password15_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 16:08:59,784 DEBUG ~ Static select for entity models.Post [OPTIMISTIC_FORCE_INCREMENT]: select post0_.id as id14_1_, post0_.author_id as author5_14_1_, post0_.content as content14_1_, post0_.postedAt as postedAt14_1_, post0_.title as title14_1_, user1_.id as id15_0_, user1_.email as email15_0_, user1_.fullname as fullname15_0_, user1_.isAdmin as isAdmin15_0_, user1_.password as password15_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 16:08:59,784 DEBUG ~ Static select for action ACTION_MERGE on entity models.Post: select post0_.id as id14_0_, post0_.author_id as author5_14_0_, post0_.content as content14_0_, post0_.postedAt as postedAt14_0_, post0_.title as title14_0_ from Post post0_ where post0_.id=?
12 10 2010 16:08:59,784 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Post: select post0_.id as id14_0_, post0_.author_id as author5_14_0_, post0_.content as content14_0_, post0_.postedAt as postedAt14_0_, post0_.title as title14_0_ from Post post0_ where post0_.id=?
12 10 2010 16:08:59,784 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id15_0_, user0_.email as email15_0_, user0_.fullname as fullname15_0_, user0_.isAdmin as isAdmin15_0_, user0_.password as password15_0_ from User user0_ where user0_.id=?
12 10 2010 16:08:59,784 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id15_0_, user0_.email as email15_0_, user0_.fullname as fullname15_0_, user0_.isAdmin as isAdmin15_0_, user0_.password as password15_0_ from User user0_ where user0_.id=?
12 10 2010 16:08:59,784 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id15_0_, user0_.email as email15_0_, user0_.fullname as fullname15_0_, user0_.isAdmin as isAdmin15_0_, user0_.password as password15_0_ from User user0_ where user0_.id=?
12 10 2010 16:08:59,785 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id15_0_, user0_.email as email15_0_, user0_.fullname as fullname15_0_, user0_.isAdmin as isAdmin15_0_, user0_.password as password15_0_ from User user0_ where user0_.id=?
12 10 2010 16:08:59,785 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id15_0_, user0_.email as email15_0_, user0_.fullname as fullname15_0_, user0_.isAdmin as isAdmin15_0_, user0_.password as password15_0_ from User user0_ where user0_.id=?
12 10 2010 16:08:59,785 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id15_0_, user0_.email as email15_0_, user0_.fullname as fullname15_0_, user0_.isAdmin as isAdmin15_0_, user0_.password as password15_0_ from User user0_ where user0_.id=?
12 10 2010 16:08:59,785 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id15_0_, user0_.email as email15_0_, user0_.fullname as fullname15_0_, user0_.isAdmin as isAdmin15_0_, user0_.password as password15_0_ from User user0_ where user0_.id=?
12 10 2010 16:08:59,785 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id15_0_, user0_.email as email15_0_, user0_.fullname as fullname15_0_, user0_.isAdmin as isAdmin15_0_, user0_.password as password15_0_ from User user0_ where user0_.id=?
12 10 2010 16:08:59,785 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id15_0_, user0_.email as email15_0_, user0_.fullname as fullname15_0_, user0_.isAdmin as isAdmin15_0_, user0_.password as password15_0_ from User user0_ where user0_.id=?
12 10 2010 16:08:59,786 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id15_0_, user0_.email as email15_0_, user0_.fullname as fullname15_0_, user0_.isAdmin as isAdmin15_0_, user0_.password as password15_0_ from User user0_ where user0_.id=?
12 10 2010 16:08:59,786 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id15_0_, user0_.email as email15_0_, user0_.fullname as fullname15_0_, user0_.isAdmin as isAdmin15_0_, user0_.password as password15_0_ from User user0_ where user0_.id=?
12 10 2010 16:08:59,786 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id15_0_, user0_.email as email15_0_, user0_.fullname as fullname15_0_, user0_.isAdmin as isAdmin15_0_, user0_.password as password15_0_ from User user0_ where user0_.id=?
12 10 2010 16:08:59,786 DEBUG ~ registered: 2c9082cd2b9f0d81012b9f454a0a0007 (unnamed)
12 10 2010 16:08:59,786 INFO  ~ Not binding factory to JNDI, no JNDI name configured
12 10 2010 16:08:59,786 DEBUG ~ instantiated session factory
12 10 2010 16:08:59,786 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:08:59,786 DEBUG ~ Process hbm files
12 10 2010 16:08:59,786 DEBUG ~ Process annotated classes
12 10 2010 16:08:59,786 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:08:59,786 DEBUG ~ processing extends queue
12 10 2010 16:08:59,786 DEBUG ~ processing collection mappings
12 10 2010 16:08:59,786 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:08:59,786 DEBUG ~ processing association property references
12 10 2010 16:08:59,786 DEBUG ~ processing foreign key constraints
12 10 2010 16:08:59,786 DEBUG ~ resolving reference to class: models.User
12 10 2010 16:08:59,788 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:08:59,788 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:08:59,788 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:08:59,788 DEBUG ~ Process hbm files
12 10 2010 16:08:59,788 DEBUG ~ Process annotated classes
12 10 2010 16:08:59,788 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:08:59,789 DEBUG ~ processing extends queue
12 10 2010 16:08:59,789 DEBUG ~ processing collection mappings
12 10 2010 16:08:59,789 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:08:59,789 DEBUG ~ processing association property references
12 10 2010 16:08:59,789 DEBUG ~ processing foreign key constraints
12 10 2010 16:08:59,789 DEBUG ~ resolving reference to class: models.User
12 10 2010 16:08:59,790 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:08:59,790 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:08:59,790 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:08:59,790 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:08:59,790 INFO  ~ Running hbm2ddl schema export
12 10 2010 16:08:59,791 DEBUG ~ import file not found: /import.sql
12 10 2010 16:08:59,791 INFO  ~ exporting generated schema to database
12 10 2010 16:08:59,791 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 16:08:59,794 DEBUG ~ Unsuccessful: alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 16:08:59,794 DEBUG ~ Table not found: POST in statement [alter table Post]
12 10 2010 16:08:59,794 DEBUG ~ drop table Post if exists
12 10 2010 16:08:59,794 DEBUG ~ drop table User if exists
12 10 2010 16:08:59,794 DEBUG ~ create table Post (id bigint generated by default as identity (start with 1), content longvarchar, postedAt timestamp, title varchar(255), author_id bigint, primary key (id))
12 10 2010 16:08:59,794 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
12 10 2010 16:08:59,795 DEBUG ~ alter table Post add constraint FK260CC0A7CD013E foreign key (author_id) references User
12 10 2010 16:08:59,797 INFO  ~ schema export complete
12 10 2010 16:08:59,797 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:08:59,797 DEBUG ~ Process hbm files
12 10 2010 16:08:59,797 DEBUG ~ Process annotated classes
12 10 2010 16:08:59,797 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:08:59,797 DEBUG ~ processing extends queue
12 10 2010 16:08:59,797 DEBUG ~ processing collection mappings
12 10 2010 16:08:59,797 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:08:59,797 DEBUG ~ processing association property references
12 10 2010 16:08:59,797 DEBUG ~ processing foreign key constraints
12 10 2010 16:08:59,797 DEBUG ~ resolving reference to class: models.User
12 10 2010 16:08:59,799 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:08:59,799 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:08:59,799 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:08:59,799 DEBUG ~ Process hbm files
12 10 2010 16:08:59,799 DEBUG ~ Process annotated classes
12 10 2010 16:08:59,799 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:08:59,799 DEBUG ~ processing extends queue
12 10 2010 16:08:59,799 DEBUG ~ processing collection mappings
12 10 2010 16:08:59,799 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:08:59,799 DEBUG ~ processing association property references
12 10 2010 16:08:59,799 DEBUG ~ processing foreign key constraints
12 10 2010 16:08:59,799 DEBUG ~ resolving reference to class: models.User
12 10 2010 16:08:59,800 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:08:59,800 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:08:59,801 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:08:59,801 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:08:59,801 DEBUG ~ Checking 0 named HQL queries
12 10 2010 16:08:59,801 DEBUG ~ Checking 0 named SQL queries
12 10 2010 16:08:59,806 DEBUG ~ opened session at timestamp: 12868673398
12 10 2010 16:08:59,806 DEBUG ~ begin
12 10 2010 16:08:59,806 DEBUG ~ opening JDBC connection
12 10 2010 16:08:59,806 DEBUG ~ current autocommit status: true
12 10 2010 16:08:59,806 DEBUG ~ disabling autocommit
12 10 2010 16:08:59,857 DEBUG ~ commit
12 10 2010 16:08:59,858 DEBUG ~ re-enabling autocommit
12 10 2010 16:08:59,858 DEBUG ~ committed JDBC Connection
12 10 2010 16:08:59,858 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:08:59,858 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:09:01,858 DEBUG ~ opened session at timestamp: 12868673418
12 10 2010 16:09:01,858 DEBUG ~ begin
12 10 2010 16:09:01,858 DEBUG ~ opening JDBC connection
12 10 2010 16:09:01,858 DEBUG ~ current autocommit status: true
12 10 2010 16:09:01,858 DEBUG ~ disabling autocommit
12 10 2010 16:09:01,939 DEBUG ~ commit
12 10 2010 16:09:01,939 DEBUG ~ re-enabling autocommit
12 10 2010 16:09:01,939 DEBUG ~ committed JDBC Connection
12 10 2010 16:09:01,939 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:09:01,939 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:09:01,954 DEBUG ~ opened session at timestamp: 12868673419
12 10 2010 16:09:01,954 DEBUG ~ begin
12 10 2010 16:09:01,954 DEBUG ~ opening JDBC connection
12 10 2010 16:09:01,954 DEBUG ~ current autocommit status: true
12 10 2010 16:09:01,954 DEBUG ~ disabling autocommit
12 10 2010 16:09:02,220 DEBUG ~ executing identity-insert immediately
12 10 2010 16:09:02,220 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:02,220 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:02,220 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:02,220 DEBUG ~ Natively generated identity: 1
12 10 2010 16:09:02,220 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:02,220 DEBUG ~ processing flush-time cascades
12 10 2010 16:09:02,221 DEBUG ~ dirty checking collections
12 10 2010 16:09:02,221 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:09:02,221 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:09:02,221 DEBUG ~ listing entities:
12 10 2010 16:09:02,221 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:09:02,222 DEBUG ~ parse() - HQL: from models.User where email = ?
12 10 2010 16:09:02,224 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'email'
          \-[PARAM] Node: '?'

12 10 2010 16:09:02,224 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:09:02,224 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 16:09:02,224 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 16:09:02,224 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 16:09:02,225 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 16:09:02,225 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 16:09:02,225 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 16:09:02,225 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.email {synthetic-alias} email ) ? ) ) )
12 10 2010 16:09:02,225 DEBUG ~ Derived SELECT clause created.
12 10 2010 16:09:02,225 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 16:09:02,225 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 16:09:02,226 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id15_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email15_, user0_.fullname as fullname15_, user0_.isAdmin as isAdmin15_, user0_.password as password15_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'email' {originalText=email}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 16:09:02,226 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:09:02,226 DEBUG ~ HQL: from models.User where email = ?
12 10 2010 16:09:02,226 DEBUG ~ SQL: select user0_.id as id15_, user0_.email as email15_, user0_.fullname as fullname15_, user0_.isAdmin as isAdmin15_, user0_.password as password15_ from User user0_ where user0_.email=?
12 10 2010 16:09:02,226 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:09:02,226 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:02,227 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:09:02,227 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 16:09:02,227 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:09:02,227 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:02,227 DEBUG ~ initializing non-lazy collections
12 10 2010 16:09:02,228 DEBUG ~ executing identity-insert immediately
12 10 2010 16:09:02,228 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:02,228 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:02,228 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:02,228 DEBUG ~ Natively generated identity: 2
12 10 2010 16:09:02,228 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:02,228 DEBUG ~ processing flush-time cascades
12 10 2010 16:09:02,228 DEBUG ~ dirty checking collections
12 10 2010 16:09:02,229 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:09:02,229 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:09:02,229 DEBUG ~ listing entities:
12 10 2010 16:09:02,229 DEBUG ~ models.User{id=2, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:09:02,230 DEBUG ~ parse() - HQL: from models.User where email = ? AND password = ?
12 10 2010 16:09:02,232 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'AND'
          +-[EQ] Node: '='
          |  +-[IDENT] Node: 'email'
          |  \-[PARAM] Node: '?'
          \-[EQ] Node: '='
             +-[IDENT] Node: 'password'
             \-[PARAM] Node: '?'

12 10 2010 16:09:02,232 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:09:02,232 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 16:09:02,232 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 16:09:02,232 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 16:09:02,232 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 16:09:02,232 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 16:09:02,233 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 16:09:02,233 DEBUG ~ getDataType() : password -> org.hibernate.type.StringType@18b3c498
12 10 2010 16:09:02,233 DEBUG ~ Resolved :  {synthetic-alias}.password -> user0_.password
12 10 2010 16:09:02,233 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 16:09:02,233 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( AND ( = ( user0_.email {synthetic-alias} email ) ? ) ( = ( user0_.password {synthetic-alias} password ) ? ) ) ) )
12 10 2010 16:09:02,233 DEBUG ~ Derived SELECT clause created.
12 10 2010 16:09:02,233 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 16:09:02,233 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 16:09:02,234 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id15_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email15_, user0_.fullname as fullname15_, user0_.isAdmin as isAdmin15_, user0_.password as password15_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'AND'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  |  \-[IDENT] IdentNode: 'email' {originalText=email}
          |  \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'user0_.password' {propertyName=password,dereferenceType=ALL,propertyPath=password,path={synthetic-alias}.password,tableAlias=user0_,className=models.User,classAlias=null}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'password' {originalText=password}
             \-[PARAM] ParameterNode: '?' {ordinal=1, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 16:09:02,234 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:09:02,235 DEBUG ~ HQL: from models.User where email = ? AND password = ?
12 10 2010 16:09:02,235 DEBUG ~ SQL: select user0_.id as id15_, user0_.email as email15_, user0_.fullname as fullname15_, user0_.isAdmin as isAdmin15_, user0_.password as password15_ from User user0_ where user0_.email=? and user0_.password=?
12 10 2010 16:09:02,235 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:09:02,235 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:02,235 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:09:02,236 DEBUG ~ result row: EntityKey[models.User#2]
12 10 2010 16:09:02,236 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:09:02,236 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:02,236 DEBUG ~ initializing non-lazy collections
12 10 2010 16:09:02,236 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:02,236 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:09:02,236 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:09:02,237 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:02,237 DEBUG ~ initializing non-lazy collections
12 10 2010 16:09:02,237 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:02,237 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:09:02,237 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:09:02,237 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:02,237 DEBUG ~ initializing non-lazy collections
12 10 2010 16:09:02,260 DEBUG ~ commit
12 10 2010 16:09:02,260 DEBUG ~ processing flush-time cascades
12 10 2010 16:09:02,260 DEBUG ~ dirty checking collections
12 10 2010 16:09:02,260 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:09:02,260 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:09:02,260 DEBUG ~ listing entities:
12 10 2010 16:09:02,260 DEBUG ~ models.User{id=2, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:09:02,260 DEBUG ~ re-enabling autocommit
12 10 2010 16:09:02,261 DEBUG ~ committed JDBC Connection
12 10 2010 16:09:02,261 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:09:02,261 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:09:02,277 DEBUG ~ opened session at timestamp: 12868673422
12 10 2010 16:09:02,277 DEBUG ~ begin
12 10 2010 16:09:02,277 DEBUG ~ opening JDBC connection
12 10 2010 16:09:02,277 DEBUG ~ current autocommit status: true
12 10 2010 16:09:02,277 DEBUG ~ disabling autocommit
12 10 2010 16:09:02,283 DEBUG ~ commit
12 10 2010 16:09:02,283 DEBUG ~ re-enabling autocommit
12 10 2010 16:09:02,283 DEBUG ~ committed JDBC Connection
12 10 2010 16:09:02,283 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:09:02,283 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:09:28,555 DEBUG ~ opened session at timestamp: 12868673685
12 10 2010 16:09:28,555 DEBUG ~ begin
12 10 2010 16:09:28,555 DEBUG ~ opening JDBC connection
12 10 2010 16:09:28,555 DEBUG ~ current autocommit status: true
12 10 2010 16:09:28,556 DEBUG ~ disabling autocommit
12 10 2010 16:09:28,562 DEBUG ~ commit
12 10 2010 16:09:28,601 DEBUG ~ re-enabling autocommit
12 10 2010 16:09:28,602 DEBUG ~ committed JDBC Connection
12 10 2010 16:09:28,602 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:09:28,602 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:09:28,608 DEBUG ~ opened session at timestamp: 12868673686
12 10 2010 16:09:28,608 DEBUG ~ begin
12 10 2010 16:09:28,608 DEBUG ~ opening JDBC connection
12 10 2010 16:09:28,609 DEBUG ~ current autocommit status: true
12 10 2010 16:09:28,609 DEBUG ~ disabling autocommit
12 10 2010 16:09:28,861 DEBUG ~ executing identity-insert immediately
12 10 2010 16:09:28,861 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:28,861 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:28,861 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:28,861 DEBUG ~ Natively generated identity: 3
12 10 2010 16:09:28,861 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:28,861 DEBUG ~ processing flush-time cascades
12 10 2010 16:09:28,861 DEBUG ~ dirty checking collections
12 10 2010 16:09:28,862 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:09:28,862 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:09:28,862 DEBUG ~ listing entities:
12 10 2010 16:09:28,862 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:09:28,862 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:28,862 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:09:28,862 DEBUG ~ result row: EntityKey[models.User#3]
12 10 2010 16:09:28,862 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:09:28,862 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:28,863 DEBUG ~ initializing non-lazy collections
12 10 2010 16:09:28,863 DEBUG ~ executing identity-insert immediately
12 10 2010 16:09:28,864 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:28,864 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:28,864 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:28,864 DEBUG ~ Natively generated identity: 4
12 10 2010 16:09:28,864 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:28,864 DEBUG ~ processing flush-time cascades
12 10 2010 16:09:28,864 DEBUG ~ dirty checking collections
12 10 2010 16:09:28,864 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:09:28,864 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:09:28,864 DEBUG ~ listing entities:
12 10 2010 16:09:28,864 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:09:28,865 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:28,865 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:09:28,865 DEBUG ~ result row: EntityKey[models.User#4]
12 10 2010 16:09:28,865 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:09:28,865 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:28,865 DEBUG ~ initializing non-lazy collections
12 10 2010 16:09:28,865 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:28,866 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:09:28,866 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:09:28,866 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:28,866 DEBUG ~ initializing non-lazy collections
12 10 2010 16:09:28,866 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:28,866 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:09:28,866 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:09:28,866 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:28,866 DEBUG ~ initializing non-lazy collections
12 10 2010 16:09:28,872 DEBUG ~ commit
12 10 2010 16:09:28,872 DEBUG ~ processing flush-time cascades
12 10 2010 16:09:28,872 DEBUG ~ dirty checking collections
12 10 2010 16:09:28,872 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:09:28,872 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:09:28,872 DEBUG ~ listing entities:
12 10 2010 16:09:28,872 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:09:28,873 DEBUG ~ re-enabling autocommit
12 10 2010 16:09:28,873 DEBUG ~ committed JDBC Connection
12 10 2010 16:09:28,873 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:09:28,873 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:09:28,962 DEBUG ~ opened session at timestamp: 12868673689
12 10 2010 16:09:28,962 DEBUG ~ begin
12 10 2010 16:09:28,962 DEBUG ~ opening JDBC connection
12 10 2010 16:09:28,962 DEBUG ~ current autocommit status: true
12 10 2010 16:09:28,962 DEBUG ~ disabling autocommit
12 10 2010 16:09:28,966 DEBUG ~ commit
12 10 2010 16:09:28,966 DEBUG ~ re-enabling autocommit
12 10 2010 16:09:28,966 DEBUG ~ committed JDBC Connection
12 10 2010 16:09:28,966 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:09:28,966 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:09:53,265 INFO  ~ closing
12 10 2010 16:09:53,266 INFO  ~ Running hbm2ddl schema export
12 10 2010 16:09:53,266 DEBUG ~ import file not found: /import.sql
12 10 2010 16:09:53,267 INFO  ~ exporting generated schema to database
12 10 2010 16:09:53,267 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 16:09:53,267 DEBUG ~ drop table Post if exists
12 10 2010 16:09:53,267 DEBUG ~ drop table User if exists
12 10 2010 16:09:53,267 INFO  ~ schema export complete
12 10 2010 16:09:53,298 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 16:09:53,298 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
12 10 2010 16:09:53,298 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
12 10 2010 16:09:53,298 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
12 10 2010 16:09:53,299 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
12 10 2010 16:09:53,299 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
12 10 2010 16:09:53,299 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
12 10 2010 16:09:53,299 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
12 10 2010 16:09:53,299 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
12 10 2010 16:09:53,299 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
12 10 2010 16:09:53,299 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 16:09:53,299 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
12 10 2010 16:09:53,299 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
12 10 2010 16:09:53,299 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
12 10 2010 16:09:53,299 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:09:53,300 DEBUG ~ Process hbm files
12 10 2010 16:09:53,300 DEBUG ~ Process annotated classes
12 10 2010 16:09:53,300 INFO  ~ Binding entity from annotated class: models.Post
12 10 2010 16:09:53,300 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 16:09:53,300 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 16:09:53,300 DEBUG ~ Import with entity name Post
12 10 2010 16:09:53,300 INFO  ~ Bind entity models.Post on table Post
12 10 2010 16:09:53,305 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 16:09:53,305 DEBUG ~ binding property id with lazy=false
12 10 2010 16:09:53,305 DEBUG ~ building SimpleValue for id
12 10 2010 16:09:53,305 DEBUG ~ Building property id
12 10 2010 16:09:53,305 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
12 10 2010 16:09:53,305 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=author, insertable=true, updatable=true, unique=false}
12 10 2010 16:09:53,306 DEBUG ~ Building property author
12 10 2010 16:09:53,306 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=content, insertable=true, updatable=true, unique=false}
12 10 2010 16:09:53,306 DEBUG ~ binding property content with lazy=false
12 10 2010 16:09:53,306 DEBUG ~ building SimpleValue for content
12 10 2010 16:09:53,306 DEBUG ~ Building property content
12 10 2010 16:09:53,306 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
12 10 2010 16:09:53,306 DEBUG ~ binding property postedAt with lazy=false
12 10 2010 16:09:53,306 DEBUG ~ building SimpleValue for postedAt
12 10 2010 16:09:53,306 DEBUG ~ Building property postedAt
12 10 2010 16:09:53,306 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=title, insertable=true, updatable=true, unique=false}
12 10 2010 16:09:53,307 DEBUG ~ binding property title with lazy=false
12 10 2010 16:09:53,307 DEBUG ~ building SimpleValue for title
12 10 2010 16:09:53,307 DEBUG ~ Building property title
12 10 2010 16:09:53,307 INFO  ~ Binding entity from annotated class: models.User
12 10 2010 16:09:53,307 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 16:09:53,307 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 16:09:53,307 DEBUG ~ Import with entity name User
12 10 2010 16:09:53,307 INFO  ~ Bind entity models.User on table User
12 10 2010 16:09:53,309 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 16:09:53,309 DEBUG ~ binding property id with lazy=false
12 10 2010 16:09:53,310 DEBUG ~ building SimpleValue for id
12 10 2010 16:09:53,310 DEBUG ~ Building property id
12 10 2010 16:09:53,310 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
12 10 2010 16:09:53,310 DEBUG ~ binding property email with lazy=false
12 10 2010 16:09:53,310 DEBUG ~ building SimpleValue for email
12 10 2010 16:09:53,310 DEBUG ~ Building property email
12 10 2010 16:09:53,310 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
12 10 2010 16:09:53,310 DEBUG ~ binding property fullname with lazy=false
12 10 2010 16:09:53,310 DEBUG ~ building SimpleValue for fullname
12 10 2010 16:09:53,311 DEBUG ~ Building property fullname
12 10 2010 16:09:53,311 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
12 10 2010 16:09:53,311 DEBUG ~ binding property isAdmin with lazy=false
12 10 2010 16:09:53,311 DEBUG ~ building SimpleValue for isAdmin
12 10 2010 16:09:53,311 DEBUG ~ Building property isAdmin
12 10 2010 16:09:53,311 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
12 10 2010 16:09:53,311 DEBUG ~ binding property password with lazy=false
12 10 2010 16:09:53,312 DEBUG ~ building SimpleValue for password
12 10 2010 16:09:53,312 DEBUG ~ Building property password
12 10 2010 16:09:53,312 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 16:09:53,312 DEBUG ~ setting SimpleValue typeName for content
12 10 2010 16:09:53,312 DEBUG ~ setting SimpleValue typeName for postedAt
12 10 2010 16:09:53,312 DEBUG ~ setting SimpleValue typeName for title
12 10 2010 16:09:53,312 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 16:09:53,313 DEBUG ~ setting SimpleValue typeName for email
12 10 2010 16:09:53,313 DEBUG ~ setting SimpleValue typeName for fullname
12 10 2010 16:09:53,313 DEBUG ~ setting SimpleValue typeName for isAdmin
12 10 2010 16:09:53,313 DEBUG ~ setting SimpleValue typeName for password
12 10 2010 16:09:53,313 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:09:53,313 DEBUG ~ processing extends queue
12 10 2010 16:09:53,313 DEBUG ~ processing collection mappings
12 10 2010 16:09:53,313 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:09:53,313 DEBUG ~ processing association property references
12 10 2010 16:09:53,313 DEBUG ~ processing foreign key constraints
12 10 2010 16:09:53,314 DEBUG ~ resolving reference to class: models.User
12 10 2010 16:09:53,315 INFO  ~ Hibernate Validator not found: ignoring
12 10 2010 16:09:53,324 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
12 10 2010 16:09:53,325 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
12 10 2010 16:09:53,328 DEBUG ~ Search not present in classpath, ignoring event listener registration.
12 10 2010 16:09:53,328 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
12 10 2010 16:09:53,328 DEBUG ~ Preparing to build session factory with filters : {}
12 10 2010 16:09:53,328 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:09:53,328 DEBUG ~ Process hbm files
12 10 2010 16:09:53,328 DEBUG ~ Process annotated classes
12 10 2010 16:09:53,328 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:09:53,328 DEBUG ~ processing extends queue
12 10 2010 16:09:53,329 DEBUG ~ processing collection mappings
12 10 2010 16:09:53,329 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:09:53,329 DEBUG ~ processing association property references
12 10 2010 16:09:53,329 DEBUG ~ processing foreign key constraints
12 10 2010 16:09:53,329 DEBUG ~ resolving reference to class: models.User
12 10 2010 16:09:53,330 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
12 10 2010 16:09:53,331 INFO  ~ Using provided datasource
12 10 2010 16:09:53,331 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
12 10 2010 16:09:53,331 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
12 10 2010 16:09:53,331 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
12 10 2010 16:09:53,331 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
12 10 2010 16:09:53,332 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
12 10 2010 16:09:53,332 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
12 10 2010 16:09:53,332 INFO  ~ Automatic flush during beforeCompletion(): disabled
12 10 2010 16:09:53,332 INFO  ~ Automatic session close at end of transaction: disabled
12 10 2010 16:09:53,332 INFO  ~ JDBC batch size: 15
12 10 2010 16:09:53,332 INFO  ~ JDBC batch updates for versioned data: disabled
12 10 2010 16:09:53,332 INFO  ~ Scrollable result sets: enabled
12 10 2010 16:09:53,332 DEBUG ~ Wrap result sets: disabled
12 10 2010 16:09:53,332 INFO  ~ JDBC3 getGeneratedKeys(): disabled
12 10 2010 16:09:53,332 INFO  ~ Connection release mode: auto
12 10 2010 16:09:53,332 INFO  ~ Default batch fetch size: 1
12 10 2010 16:09:53,332 INFO  ~ Generate SQL with comments: disabled
12 10 2010 16:09:53,332 INFO  ~ Order SQL updates by primary key: disabled
12 10 2010 16:09:53,332 INFO  ~ Order SQL inserts for batching: disabled
12 10 2010 16:09:53,332 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
12 10 2010 16:09:53,332 INFO  ~ Using ASTQueryTranslatorFactory
12 10 2010 16:09:53,332 INFO  ~ Query language substitutions: {}
12 10 2010 16:09:53,332 INFO  ~ JPA-QL strict compliance: enabled
12 10 2010 16:09:53,332 INFO  ~ Second-level cache: enabled
12 10 2010 16:09:53,332 INFO  ~ Query cache: disabled
12 10 2010 16:09:53,333 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
12 10 2010 16:09:53,333 INFO  ~ Optimize cache for minimal puts: disabled
12 10 2010 16:09:53,333 INFO  ~ Structured second-level cache entries: disabled
12 10 2010 16:09:53,333 INFO  ~ Statistics: disabled
12 10 2010 16:09:53,333 INFO  ~ Deleted entity synthetic identifier rollback: disabled
12 10 2010 16:09:53,333 INFO  ~ Default entity-mode: pojo
12 10 2010 16:09:53,333 INFO  ~ Named query checking : enabled
12 10 2010 16:09:53,333 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
12 10 2010 16:09:53,337 INFO  ~ building session factory
12 10 2010 16:09:53,337 DEBUG ~ Session factory constructed with filter configurations : {}
12 10 2010 16:09:53,337 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
12 10 2010 16:09:53,338 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:09:53,338 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:09:53,345 DEBUG ~ Static SQL for entity: models.Post
12 10 2010 16:09:53,345 DEBUG ~  Version select: select id from Post where id =?
12 10 2010 16:09:53,345 DEBUG ~  Snapshot select: select post_.id, post_.author_id as author5_18_, post_.content as content18_, post_.postedAt as postedAt18_, post_.title as title18_ from Post post_ where post_.id=?
12 10 2010 16:09:53,345 DEBUG ~  Insert 0: insert into Post (author_id, content, postedAt, title, id) values (?, ?, ?, ?, ?)
12 10 2010 16:09:53,345 DEBUG ~  Update 0: update Post set author_id=?, content=?, postedAt=?, title=? where id=?
12 10 2010 16:09:53,345 DEBUG ~  Delete 0: delete from Post where id=?
12 10 2010 16:09:53,345 DEBUG ~  Identity insert: insert into Post (id, author_id, content, postedAt, title) values (null, ?, ?, ?, ?)
12 10 2010 16:09:53,352 DEBUG ~ Static SQL for entity: models.User
12 10 2010 16:09:53,352 DEBUG ~  Version select: select id from User where id =?
12 10 2010 16:09:53,352 DEBUG ~  Snapshot select: select user_.id, user_.email as email19_, user_.fullname as fullname19_, user_.isAdmin as isAdmin19_, user_.password as password19_ from User user_ where user_.id=?
12 10 2010 16:09:53,352 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
12 10 2010 16:09:53,352 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
12 10 2010 16:09:53,352 DEBUG ~  Delete 0: delete from User where id=?
12 10 2010 16:09:53,352 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
12 10 2010 16:09:53,353 DEBUG ~ Static select for entity models.Post [NONE]: select post0_.id as id18_1_, post0_.author_id as author5_18_1_, post0_.content as content18_1_, post0_.postedAt as postedAt18_1_, post0_.title as title18_1_, user1_.id as id19_0_, user1_.email as email19_0_, user1_.fullname as fullname19_0_, user1_.isAdmin as isAdmin19_0_, user1_.password as password19_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 16:09:53,353 DEBUG ~ Static select for entity models.Post [READ]: select post0_.id as id18_1_, post0_.author_id as author5_18_1_, post0_.content as content18_1_, post0_.postedAt as postedAt18_1_, post0_.title as title18_1_, user1_.id as id19_0_, user1_.email as email19_0_, user1_.fullname as fullname19_0_, user1_.isAdmin as isAdmin19_0_, user1_.password as password19_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 16:09:53,354 DEBUG ~ Static select for entity models.Post [UPGRADE]: select post0_.id as id18_0_, post0_.author_id as author5_18_0_, post0_.content as content18_0_, post0_.postedAt as postedAt18_0_, post0_.title as title18_0_ from Post post0_ where post0_.id=?
12 10 2010 16:09:53,354 DEBUG ~ Static select for entity models.Post [UPGRADE_NOWAIT]: select post0_.id as id18_0_, post0_.author_id as author5_18_0_, post0_.content as content18_0_, post0_.postedAt as postedAt18_0_, post0_.title as title18_0_ from Post post0_ where post0_.id=?
12 10 2010 16:09:53,354 DEBUG ~ Static select for entity models.Post [FORCE]: select post0_.id as id18_0_, post0_.author_id as author5_18_0_, post0_.content as content18_0_, post0_.postedAt as postedAt18_0_, post0_.title as title18_0_ from Post post0_ where post0_.id=?
12 10 2010 16:09:53,354 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_READ]: select post0_.id as id18_0_, post0_.author_id as author5_18_0_, post0_.content as content18_0_, post0_.postedAt as postedAt18_0_, post0_.title as title18_0_ from Post post0_ where post0_.id=?
12 10 2010 16:09:53,354 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_WRITE]: select post0_.id as id18_0_, post0_.author_id as author5_18_0_, post0_.content as content18_0_, post0_.postedAt as postedAt18_0_, post0_.title as title18_0_ from Post post0_ where post0_.id=?
12 10 2010 16:09:53,355 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_FORCE_INCREMENT]: select post0_.id as id18_0_, post0_.author_id as author5_18_0_, post0_.content as content18_0_, post0_.postedAt as postedAt18_0_, post0_.title as title18_0_ from Post post0_ where post0_.id=?
12 10 2010 16:09:53,355 DEBUG ~ Static select for entity models.Post [OPTIMISTIC]: select post0_.id as id18_1_, post0_.author_id as author5_18_1_, post0_.content as content18_1_, post0_.postedAt as postedAt18_1_, post0_.title as title18_1_, user1_.id as id19_0_, user1_.email as email19_0_, user1_.fullname as fullname19_0_, user1_.isAdmin as isAdmin19_0_, user1_.password as password19_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 16:09:53,355 DEBUG ~ Static select for entity models.Post [OPTIMISTIC_FORCE_INCREMENT]: select post0_.id as id18_1_, post0_.author_id as author5_18_1_, post0_.content as content18_1_, post0_.postedAt as postedAt18_1_, post0_.title as title18_1_, user1_.id as id19_0_, user1_.email as email19_0_, user1_.fullname as fullname19_0_, user1_.isAdmin as isAdmin19_0_, user1_.password as password19_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 16:09:53,355 DEBUG ~ Static select for action ACTION_MERGE on entity models.Post: select post0_.id as id18_0_, post0_.author_id as author5_18_0_, post0_.content as content18_0_, post0_.postedAt as postedAt18_0_, post0_.title as title18_0_ from Post post0_ where post0_.id=?
12 10 2010 16:09:53,355 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Post: select post0_.id as id18_0_, post0_.author_id as author5_18_0_, post0_.content as content18_0_, post0_.postedAt as postedAt18_0_, post0_.title as title18_0_ from Post post0_ where post0_.id=?
12 10 2010 16:09:53,356 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
12 10 2010 16:09:53,356 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
12 10 2010 16:09:53,356 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
12 10 2010 16:09:53,356 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
12 10 2010 16:09:53,356 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
12 10 2010 16:09:53,356 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
12 10 2010 16:09:53,356 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
12 10 2010 16:09:53,357 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
12 10 2010 16:09:53,357 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
12 10 2010 16:09:53,357 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
12 10 2010 16:09:53,357 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
12 10 2010 16:09:53,357 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
12 10 2010 16:09:53,357 DEBUG ~ registered: 2c9082cd2b9f0d81012b9f461b4d0008 (unnamed)
12 10 2010 16:09:53,357 INFO  ~ Not binding factory to JNDI, no JNDI name configured
12 10 2010 16:09:53,357 DEBUG ~ instantiated session factory
12 10 2010 16:09:53,357 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:09:53,357 DEBUG ~ Process hbm files
12 10 2010 16:09:53,357 DEBUG ~ Process annotated classes
12 10 2010 16:09:53,358 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:09:53,358 DEBUG ~ processing extends queue
12 10 2010 16:09:53,358 DEBUG ~ processing collection mappings
12 10 2010 16:09:53,358 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:09:53,358 DEBUG ~ processing association property references
12 10 2010 16:09:53,358 DEBUG ~ processing foreign key constraints
12 10 2010 16:09:53,358 DEBUG ~ resolving reference to class: models.User
12 10 2010 16:09:53,360 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:09:53,360 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:09:53,360 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:09:53,360 DEBUG ~ Process hbm files
12 10 2010 16:09:53,360 DEBUG ~ Process annotated classes
12 10 2010 16:09:53,360 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:09:53,360 DEBUG ~ processing extends queue
12 10 2010 16:09:53,360 DEBUG ~ processing collection mappings
12 10 2010 16:09:53,360 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:09:53,360 DEBUG ~ processing association property references
12 10 2010 16:09:53,360 DEBUG ~ processing foreign key constraints
12 10 2010 16:09:53,360 DEBUG ~ resolving reference to class: models.User
12 10 2010 16:09:53,362 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:09:53,362 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:09:53,362 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:09:53,362 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:09:53,362 INFO  ~ Running hbm2ddl schema export
12 10 2010 16:09:53,363 DEBUG ~ import file not found: /import.sql
12 10 2010 16:09:53,363 INFO  ~ exporting generated schema to database
12 10 2010 16:09:53,363 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 16:09:53,363 DEBUG ~ Unsuccessful: alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 16:09:53,363 DEBUG ~ Table not found: POST in statement [alter table Post]
12 10 2010 16:09:53,363 DEBUG ~ drop table Post if exists
12 10 2010 16:09:53,363 DEBUG ~ drop table User if exists
12 10 2010 16:09:53,363 DEBUG ~ create table Post (id bigint generated by default as identity (start with 1), content longvarchar, postedAt timestamp, title varchar(255), author_id bigint, primary key (id))
12 10 2010 16:09:53,364 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
12 10 2010 16:09:53,364 DEBUG ~ alter table Post add constraint FK260CC0A7CD013E foreign key (author_id) references User
12 10 2010 16:09:53,364 INFO  ~ schema export complete
12 10 2010 16:09:53,364 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:09:53,364 DEBUG ~ Process hbm files
12 10 2010 16:09:53,365 DEBUG ~ Process annotated classes
12 10 2010 16:09:53,365 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:09:53,365 DEBUG ~ processing extends queue
12 10 2010 16:09:53,365 DEBUG ~ processing collection mappings
12 10 2010 16:09:53,365 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:09:53,365 DEBUG ~ processing association property references
12 10 2010 16:09:53,365 DEBUG ~ processing foreign key constraints
12 10 2010 16:09:53,365 DEBUG ~ resolving reference to class: models.User
12 10 2010 16:09:53,366 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:09:53,366 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:09:53,366 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:09:53,366 DEBUG ~ Process hbm files
12 10 2010 16:09:53,366 DEBUG ~ Process annotated classes
12 10 2010 16:09:53,366 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:09:53,367 DEBUG ~ processing extends queue
12 10 2010 16:09:53,367 DEBUG ~ processing collection mappings
12 10 2010 16:09:53,367 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:09:53,367 DEBUG ~ processing association property references
12 10 2010 16:09:53,367 DEBUG ~ processing foreign key constraints
12 10 2010 16:09:53,367 DEBUG ~ resolving reference to class: models.User
12 10 2010 16:09:53,368 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:09:53,368 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:09:53,368 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:09:53,369 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:09:53,369 DEBUG ~ Checking 0 named HQL queries
12 10 2010 16:09:53,369 DEBUG ~ Checking 0 named SQL queries
12 10 2010 16:09:53,374 DEBUG ~ opened session at timestamp: 12868673933
12 10 2010 16:09:53,374 DEBUG ~ begin
12 10 2010 16:09:53,374 DEBUG ~ opening JDBC connection
12 10 2010 16:09:53,374 DEBUG ~ current autocommit status: true
12 10 2010 16:09:53,374 DEBUG ~ disabling autocommit
12 10 2010 16:09:53,384 DEBUG ~ commit
12 10 2010 16:09:53,384 DEBUG ~ re-enabling autocommit
12 10 2010 16:09:53,384 DEBUG ~ committed JDBC Connection
12 10 2010 16:09:53,384 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:09:53,384 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:09:53,406 DEBUG ~ opened session at timestamp: 12868673934
12 10 2010 16:09:53,406 DEBUG ~ begin
12 10 2010 16:09:53,406 DEBUG ~ opening JDBC connection
12 10 2010 16:09:53,406 DEBUG ~ current autocommit status: true
12 10 2010 16:09:53,406 DEBUG ~ disabling autocommit
12 10 2010 16:09:53,660 DEBUG ~ executing identity-insert immediately
12 10 2010 16:09:53,660 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:53,660 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:53,660 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:53,660 DEBUG ~ Natively generated identity: 1
12 10 2010 16:09:53,660 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:53,661 DEBUG ~ processing flush-time cascades
12 10 2010 16:09:53,661 DEBUG ~ dirty checking collections
12 10 2010 16:09:53,661 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:09:53,661 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:09:53,661 DEBUG ~ listing entities:
12 10 2010 16:09:53,661 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:09:53,662 DEBUG ~ parse() - HQL: from models.User where email = ?
12 10 2010 16:09:53,664 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'email'
          \-[PARAM] Node: '?'

12 10 2010 16:09:53,664 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:09:53,664 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 16:09:53,665 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 16:09:53,665 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 16:09:53,665 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 16:09:53,665 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 16:09:53,665 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 16:09:53,665 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.email {synthetic-alias} email ) ? ) ) )
12 10 2010 16:09:53,665 DEBUG ~ Derived SELECT clause created.
12 10 2010 16:09:53,665 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 16:09:53,665 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 16:09:53,666 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id19_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email19_, user0_.fullname as fullname19_, user0_.isAdmin as isAdmin19_, user0_.password as password19_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'email' {originalText=email}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 16:09:53,666 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:09:53,666 DEBUG ~ HQL: from models.User where email = ?
12 10 2010 16:09:53,666 DEBUG ~ SQL: select user0_.id as id19_, user0_.email as email19_, user0_.fullname as fullname19_, user0_.isAdmin as isAdmin19_, user0_.password as password19_ from User user0_ where user0_.email=?
12 10 2010 16:09:53,666 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:09:53,667 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:53,667 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:09:53,667 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 16:09:53,667 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:09:53,667 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:53,667 DEBUG ~ initializing non-lazy collections
12 10 2010 16:09:53,668 DEBUG ~ executing identity-insert immediately
12 10 2010 16:09:53,668 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:53,668 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:53,668 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:53,669 DEBUG ~ Natively generated identity: 2
12 10 2010 16:09:53,669 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:53,669 DEBUG ~ processing flush-time cascades
12 10 2010 16:09:53,669 DEBUG ~ dirty checking collections
12 10 2010 16:09:53,669 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:09:53,669 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:09:53,669 DEBUG ~ listing entities:
12 10 2010 16:09:53,669 DEBUG ~ models.User{id=2, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:09:53,670 DEBUG ~ parse() - HQL: from models.User where email = ? AND password = ?
12 10 2010 16:09:53,672 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'AND'
          +-[EQ] Node: '='
          |  +-[IDENT] Node: 'email'
          |  \-[PARAM] Node: '?'
          \-[EQ] Node: '='
             +-[IDENT] Node: 'password'
             \-[PARAM] Node: '?'

12 10 2010 16:09:53,672 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:09:53,672 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 16:09:53,672 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 16:09:53,673 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 16:09:53,673 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 16:09:53,673 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 16:09:53,673 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 16:09:53,673 DEBUG ~ getDataType() : password -> org.hibernate.type.StringType@18b3c498
12 10 2010 16:09:53,673 DEBUG ~ Resolved :  {synthetic-alias}.password -> user0_.password
12 10 2010 16:09:53,673 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 16:09:53,673 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( AND ( = ( user0_.email {synthetic-alias} email ) ? ) ( = ( user0_.password {synthetic-alias} password ) ? ) ) ) )
12 10 2010 16:09:53,673 DEBUG ~ Derived SELECT clause created.
12 10 2010 16:09:53,673 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 16:09:53,673 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 16:09:53,674 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id19_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email19_, user0_.fullname as fullname19_, user0_.isAdmin as isAdmin19_, user0_.password as password19_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'AND'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  |  \-[IDENT] IdentNode: 'email' {originalText=email}
          |  \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'user0_.password' {propertyName=password,dereferenceType=ALL,propertyPath=password,path={synthetic-alias}.password,tableAlias=user0_,className=models.User,classAlias=null}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'password' {originalText=password}
             \-[PARAM] ParameterNode: '?' {ordinal=1, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 16:09:53,674 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:09:53,674 DEBUG ~ HQL: from models.User where email = ? AND password = ?
12 10 2010 16:09:53,675 DEBUG ~ SQL: select user0_.id as id19_, user0_.email as email19_, user0_.fullname as fullname19_, user0_.isAdmin as isAdmin19_, user0_.password as password19_ from User user0_ where user0_.email=? and user0_.password=?
12 10 2010 16:09:53,675 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:09:53,675 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:53,675 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:09:53,675 DEBUG ~ result row: EntityKey[models.User#2]
12 10 2010 16:09:53,675 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:09:53,675 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:53,676 DEBUG ~ initializing non-lazy collections
12 10 2010 16:09:53,676 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:53,676 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:09:53,676 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:09:53,676 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:53,676 DEBUG ~ initializing non-lazy collections
12 10 2010 16:09:53,677 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:53,677 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:09:53,677 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:09:53,677 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:53,677 DEBUG ~ initializing non-lazy collections
12 10 2010 16:09:53,678 DEBUG ~ executing identity-insert immediately
12 10 2010 16:09:53,678 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:53,678 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:53,678 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:53,678 DEBUG ~ Natively generated identity: 3
12 10 2010 16:09:53,678 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:53,678 DEBUG ~ processing flush-time cascades
12 10 2010 16:09:53,678 DEBUG ~ dirty checking collections
12 10 2010 16:09:53,678 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:09:53,679 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:09:53,679 DEBUG ~ listing entities:
12 10 2010 16:09:53,679 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:09:53,679 DEBUG ~ executing identity-insert immediately
12 10 2010 16:09:53,679 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:53,679 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:53,679 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:53,680 DEBUG ~ Natively generated identity: 1
12 10 2010 16:09:53,680 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:53,680 DEBUG ~ processing flush-time cascades
12 10 2010 16:09:53,680 DEBUG ~ dirty checking collections
12 10 2010 16:09:53,680 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 16:09:53,680 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:09:53,680 DEBUG ~ listing entities:
12 10 2010 16:09:53,680 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:09:53,681 DEBUG ~ models.Post{content=hello world, id=1, author=models.User#3, title=first post, postedAt=2010-10-12 16:09:53}
12 10 2010 16:09:53,682 DEBUG ~ parse() - HQL: select count(e) from models.Post e
12 10 2010 16:09:53,684 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'Post'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

12 10 2010 16:09:53,684 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:09:53,684 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 16:09:53,684 DEBUG ~ FromClause{level=1} :  models.Post (e) -> post0_
12 10 2010 16:09:53,685 DEBUG ~ Resolved :  e -> post0_.id
12 10 2010 16:09:53,686 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 16:09:53,686 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count post0_.id ) ) ( FromClause{level=1} Post post0_ ) )
12 10 2010 16:09:53,687 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 16:09:53,687 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 16:09:53,687 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'post0_.id' {alias=e, className=models.Post, tableAlias=post0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}

12 10 2010 16:09:53,687 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:09:53,688 DEBUG ~ HQL: select count(e) from models.Post e
12 10 2010 16:09:53,688 DEBUG ~ SQL: select count(post0_.id) as col_0_0_ from Post post0_
12 10 2010 16:09:53,688 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:09:53,688 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:53,691 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:09:53,692 DEBUG ~ result row: 
12 10 2010 16:09:53,692 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:09:53,692 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:53,692 DEBUG ~ initializing non-lazy collections
12 10 2010 16:09:53,701 DEBUG ~ parse() - HQL: from models.Post where author = ?
12 10 2010 16:09:53,711 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'author'
          \-[PARAM] Node: '?'

12 10 2010 16:09:53,712 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:09:53,712 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 16:09:53,712 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
12 10 2010 16:09:53,712 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 16:09:53,712 DEBUG ~ getDataType() : author -> org.hibernate.type.ManyToOneType(models.User)
12 10 2010 16:09:53,712 DEBUG ~ dereferenceShortcut() : property author in models.Post does not require a join.
12 10 2010 16:09:53,712 DEBUG ~ terminal propertyPath = [author]
12 10 2010 16:09:53,712 DEBUG ~ Resolved :  {synthetic-alias}.author -> post0_.author_id
12 10 2010 16:09:53,712 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 16:09:53,712 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( = ( post0_.author_id {synthetic-alias} author ) ? ) ) )
12 10 2010 16:09:53,713 DEBUG ~ Derived SELECT clause created.
12 10 2010 16:09:53,713 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 16:09:53,713 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 16:09:53,713 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id18_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_18_, post0_.content as content18_, post0_.postedAt as postedAt18_, post0_.title as title18_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'post0_.author_id' {propertyName=author,dereferenceType=0,propertyPath=author,path={synthetic-alias}.author,tableAlias=post0_,className=models.Post,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'author' {originalText=author}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.ManyToOneType(models.User)}

12 10 2010 16:09:53,713 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:09:53,714 DEBUG ~ HQL: from models.Post where author = ?
12 10 2010 16:09:53,714 DEBUG ~ SQL: select post0_.id as id18_, post0_.author_id as author5_18_, post0_.content as content18_, post0_.postedAt as postedAt18_, post0_.title as title18_ from Post post0_ where post0_.author_id=?
12 10 2010 16:09:53,714 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:09:53,715 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:53,716 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:09:53,716 DEBUG ~ result row: EntityKey[models.Post#1]
12 10 2010 16:09:53,716 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:09:53,716 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:53,716 DEBUG ~ initializing non-lazy collections
12 10 2010 16:09:53,741 DEBUG ~ commit
12 10 2010 16:09:53,741 DEBUG ~ processing flush-time cascades
12 10 2010 16:09:53,741 DEBUG ~ dirty checking collections
12 10 2010 16:09:53,741 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 16:09:53,741 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:09:53,741 DEBUG ~ listing entities:
12 10 2010 16:09:53,742 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:09:53,742 DEBUG ~ models.Post{content=hello world, id=1, author=models.User#3, title=first post, postedAt=2010-10-12 16:09:53}
12 10 2010 16:09:53,742 DEBUG ~ re-enabling autocommit
12 10 2010 16:09:53,742 DEBUG ~ committed JDBC Connection
12 10 2010 16:09:53,742 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:09:53,742 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:09:53,753 DEBUG ~ opened session at timestamp: 12868673937
12 10 2010 16:09:53,753 DEBUG ~ begin
12 10 2010 16:09:53,753 DEBUG ~ opening JDBC connection
12 10 2010 16:09:53,753 DEBUG ~ current autocommit status: true
12 10 2010 16:09:53,753 DEBUG ~ disabling autocommit
12 10 2010 16:09:53,759 DEBUG ~ commit
12 10 2010 16:09:53,759 DEBUG ~ re-enabling autocommit
12 10 2010 16:09:53,759 DEBUG ~ committed JDBC Connection
12 10 2010 16:09:53,759 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:09:53,759 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:09:56,709 DEBUG ~ opened session at timestamp: 12868673967
12 10 2010 16:09:56,710 DEBUG ~ begin
12 10 2010 16:09:56,710 DEBUG ~ opening JDBC connection
12 10 2010 16:09:56,710 DEBUG ~ current autocommit status: true
12 10 2010 16:09:56,710 DEBUG ~ disabling autocommit
12 10 2010 16:09:56,745 DEBUG ~ commit
12 10 2010 16:09:56,746 DEBUG ~ re-enabling autocommit
12 10 2010 16:09:56,746 DEBUG ~ committed JDBC Connection
12 10 2010 16:09:56,746 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:09:56,746 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:09:56,759 DEBUG ~ opened session at timestamp: 12868673967
12 10 2010 16:09:56,759 DEBUG ~ begin
12 10 2010 16:09:56,759 DEBUG ~ opening JDBC connection
12 10 2010 16:09:56,759 DEBUG ~ current autocommit status: true
12 10 2010 16:09:56,759 DEBUG ~ disabling autocommit
12 10 2010 16:09:57,011 DEBUG ~ executing identity-insert immediately
12 10 2010 16:09:57,012 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:57,012 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:57,012 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:57,012 DEBUG ~ Natively generated identity: 4
12 10 2010 16:09:57,012 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:57,012 DEBUG ~ processing flush-time cascades
12 10 2010 16:09:57,012 DEBUG ~ dirty checking collections
12 10 2010 16:09:57,012 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:09:57,012 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:09:57,012 DEBUG ~ listing entities:
12 10 2010 16:09:57,012 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:09:57,013 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:57,013 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:09:57,013 DEBUG ~ result row: EntityKey[models.User#4]
12 10 2010 16:09:57,013 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:09:57,013 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:57,013 DEBUG ~ initializing non-lazy collections
12 10 2010 16:09:57,014 DEBUG ~ executing identity-insert immediately
12 10 2010 16:09:57,014 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:57,014 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:57,014 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:57,014 DEBUG ~ Natively generated identity: 5
12 10 2010 16:09:57,014 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:57,014 DEBUG ~ processing flush-time cascades
12 10 2010 16:09:57,014 DEBUG ~ dirty checking collections
12 10 2010 16:09:57,015 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:09:57,015 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:09:57,015 DEBUG ~ listing entities:
12 10 2010 16:09:57,015 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:09:57,015 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:57,015 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:09:57,015 DEBUG ~ result row: EntityKey[models.User#5]
12 10 2010 16:09:57,015 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:09:57,015 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:57,015 DEBUG ~ initializing non-lazy collections
12 10 2010 16:09:57,016 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:57,016 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:09:57,016 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:09:57,016 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:57,016 DEBUG ~ initializing non-lazy collections
12 10 2010 16:09:57,017 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:57,017 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:09:57,017 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:09:57,017 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:57,017 DEBUG ~ initializing non-lazy collections
12 10 2010 16:09:57,018 DEBUG ~ executing identity-insert immediately
12 10 2010 16:09:57,018 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:57,018 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:57,018 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:57,019 DEBUG ~ Natively generated identity: 6
12 10 2010 16:09:57,019 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:57,019 DEBUG ~ processing flush-time cascades
12 10 2010 16:09:57,019 DEBUG ~ dirty checking collections
12 10 2010 16:09:57,019 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:09:57,019 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:09:57,019 DEBUG ~ listing entities:
12 10 2010 16:09:57,019 DEBUG ~ models.User{id=6, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:09:57,019 DEBUG ~ executing identity-insert immediately
12 10 2010 16:09:57,020 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:57,020 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:57,020 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:57,020 DEBUG ~ Natively generated identity: 2
12 10 2010 16:09:57,020 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:57,020 DEBUG ~ processing flush-time cascades
12 10 2010 16:09:57,020 DEBUG ~ dirty checking collections
12 10 2010 16:09:57,021 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 16:09:57,021 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:09:57,021 DEBUG ~ listing entities:
12 10 2010 16:09:57,021 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#6, title=first post, postedAt=2010-10-12 16:09:57}
12 10 2010 16:09:57,021 DEBUG ~ models.User{id=6, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:09:57,021 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:57,022 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:09:57,022 DEBUG ~ result row: 
12 10 2010 16:09:57,022 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:09:57,022 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:57,022 DEBUG ~ initializing non-lazy collections
12 10 2010 16:09:57,022 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:09:57,022 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:09:57,022 DEBUG ~ result row: EntityKey[models.Post#2]
12 10 2010 16:09:57,022 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:09:57,022 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:09:57,022 DEBUG ~ initializing non-lazy collections
12 10 2010 16:09:57,030 DEBUG ~ commit
12 10 2010 16:09:57,030 DEBUG ~ processing flush-time cascades
12 10 2010 16:09:57,030 DEBUG ~ dirty checking collections
12 10 2010 16:09:57,030 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 16:09:57,030 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:09:57,031 DEBUG ~ listing entities:
12 10 2010 16:09:57,031 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#6, title=first post, postedAt=2010-10-12 16:09:57}
12 10 2010 16:09:57,031 DEBUG ~ models.User{id=6, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:09:57,031 DEBUG ~ re-enabling autocommit
12 10 2010 16:09:57,031 DEBUG ~ committed JDBC Connection
12 10 2010 16:09:57,031 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:09:57,031 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:09:57,054 DEBUG ~ opened session at timestamp: 12868673970
12 10 2010 16:09:57,054 DEBUG ~ begin
12 10 2010 16:09:57,055 DEBUG ~ opening JDBC connection
12 10 2010 16:09:57,055 DEBUG ~ current autocommit status: true
12 10 2010 16:09:57,055 DEBUG ~ disabling autocommit
12 10 2010 16:09:57,060 DEBUG ~ commit
12 10 2010 16:09:57,060 DEBUG ~ re-enabling autocommit
12 10 2010 16:09:57,060 DEBUG ~ committed JDBC Connection
12 10 2010 16:09:57,060 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:09:57,060 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:10:10,730 DEBUG ~ opened session at timestamp: 12868674107
12 10 2010 16:10:10,730 DEBUG ~ begin
12 10 2010 16:10:10,730 DEBUG ~ opening JDBC connection
12 10 2010 16:10:10,730 DEBUG ~ current autocommit status: true
12 10 2010 16:10:10,730 DEBUG ~ disabling autocommit
12 10 2010 16:10:10,735 DEBUG ~ commit
12 10 2010 16:10:10,735 DEBUG ~ re-enabling autocommit
12 10 2010 16:10:10,735 DEBUG ~ committed JDBC Connection
12 10 2010 16:10:10,735 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:10:10,735 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:10:10,749 DEBUG ~ opened session at timestamp: 12868674107
12 10 2010 16:10:10,749 DEBUG ~ begin
12 10 2010 16:10:10,749 DEBUG ~ opening JDBC connection
12 10 2010 16:10:10,749 DEBUG ~ current autocommit status: true
12 10 2010 16:10:10,749 DEBUG ~ disabling autocommit
12 10 2010 16:10:11,002 DEBUG ~ executing identity-insert immediately
12 10 2010 16:10:11,002 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:10:11,002 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:10:11,002 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:10:11,002 DEBUG ~ Natively generated identity: 7
12 10 2010 16:10:11,002 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:10:11,002 DEBUG ~ processing flush-time cascades
12 10 2010 16:10:11,002 DEBUG ~ dirty checking collections
12 10 2010 16:10:11,002 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:10:11,002 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:10:11,003 DEBUG ~ listing entities:
12 10 2010 16:10:11,003 DEBUG ~ models.User{id=7, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:10:11,003 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:10:11,003 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:10:11,003 DEBUG ~ result row: EntityKey[models.User#7]
12 10 2010 16:10:11,003 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:10:11,003 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:10:11,003 DEBUG ~ initializing non-lazy collections
12 10 2010 16:10:11,004 DEBUG ~ executing identity-insert immediately
12 10 2010 16:10:11,004 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:10:11,004 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:10:11,004 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:10:11,004 DEBUG ~ Natively generated identity: 8
12 10 2010 16:10:11,004 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:10:11,005 DEBUG ~ processing flush-time cascades
12 10 2010 16:10:11,005 DEBUG ~ dirty checking collections
12 10 2010 16:10:11,005 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:10:11,005 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:10:11,005 DEBUG ~ listing entities:
12 10 2010 16:10:11,005 DEBUG ~ models.User{id=8, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:10:11,005 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:10:11,005 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:10:11,005 DEBUG ~ result row: EntityKey[models.User#8]
12 10 2010 16:10:11,005 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:10:11,005 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:10:11,005 DEBUG ~ initializing non-lazy collections
12 10 2010 16:10:11,006 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:10:11,006 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:10:11,006 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:10:11,006 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:10:11,006 DEBUG ~ initializing non-lazy collections
12 10 2010 16:10:11,006 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:10:11,006 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:10:11,006 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:10:11,006 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:10:11,007 DEBUG ~ initializing non-lazy collections
12 10 2010 16:10:11,007 DEBUG ~ executing identity-insert immediately
12 10 2010 16:10:11,007 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:10:11,007 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:10:11,007 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:10:11,008 DEBUG ~ Natively generated identity: 9
12 10 2010 16:10:11,008 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:10:11,008 DEBUG ~ processing flush-time cascades
12 10 2010 16:10:11,008 DEBUG ~ dirty checking collections
12 10 2010 16:10:11,008 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:10:11,008 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:10:11,008 DEBUG ~ listing entities:
12 10 2010 16:10:11,008 DEBUG ~ models.User{id=9, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:10:11,008 DEBUG ~ executing identity-insert immediately
12 10 2010 16:10:11,009 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:10:11,009 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:10:11,009 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:10:11,009 DEBUG ~ Natively generated identity: 3
12 10 2010 16:10:11,009 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:10:11,009 DEBUG ~ processing flush-time cascades
12 10 2010 16:10:11,009 DEBUG ~ dirty checking collections
12 10 2010 16:10:11,010 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 16:10:11,010 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:10:11,010 DEBUG ~ listing entities:
12 10 2010 16:10:11,010 DEBUG ~ models.User{id=9, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:10:11,010 DEBUG ~ models.Post{content=hello world, id=3, author=models.User#9, title=first post, postedAt=2010-10-12 16:10:11}
12 10 2010 16:10:11,011 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:10:11,011 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:10:11,011 DEBUG ~ result row: 
12 10 2010 16:10:11,011 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:10:11,011 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:10:11,011 DEBUG ~ initializing non-lazy collections
12 10 2010 16:10:11,011 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:10:11,012 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:10:11,012 DEBUG ~ result row: EntityKey[models.Post#3]
12 10 2010 16:10:11,012 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:10:11,012 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:10:11,012 DEBUG ~ initializing non-lazy collections
12 10 2010 16:10:11,019 DEBUG ~ commit
12 10 2010 16:10:11,019 DEBUG ~ processing flush-time cascades
12 10 2010 16:10:11,019 DEBUG ~ dirty checking collections
12 10 2010 16:10:11,020 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 16:10:11,020 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:10:11,020 DEBUG ~ listing entities:
12 10 2010 16:10:11,020 DEBUG ~ models.User{id=9, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:10:11,020 DEBUG ~ models.Post{content=hello world, id=3, author=models.User#9, title=first post, postedAt=2010-10-12 16:10:11}
12 10 2010 16:10:11,020 DEBUG ~ re-enabling autocommit
12 10 2010 16:10:11,020 DEBUG ~ committed JDBC Connection
12 10 2010 16:10:11,021 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:10:11,021 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:10:11,041 DEBUG ~ opened session at timestamp: 12868674110
12 10 2010 16:10:11,041 DEBUG ~ begin
12 10 2010 16:10:11,041 DEBUG ~ opening JDBC connection
12 10 2010 16:10:11,041 DEBUG ~ current autocommit status: true
12 10 2010 16:10:11,041 DEBUG ~ disabling autocommit
12 10 2010 16:10:11,046 DEBUG ~ commit
12 10 2010 16:10:11,046 DEBUG ~ re-enabling autocommit
12 10 2010 16:10:11,046 DEBUG ~ committed JDBC Connection
12 10 2010 16:10:11,046 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:10:11,046 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:18:50,443 ERROR ~ 

@645j8gm9e
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 53)
The file /test/BasicTest.scala could not be compiled. Error raised is : not found: type Comment

play.exceptions.CompilationException: not found: type Comment
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 16:19:10,865 INFO  ~ closing
12 10 2010 16:19:10,865 INFO  ~ Running hbm2ddl schema export
12 10 2010 16:19:10,866 DEBUG ~ import file not found: /import.sql
12 10 2010 16:19:10,866 INFO  ~ exporting generated schema to database
12 10 2010 16:19:10,866 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 16:19:10,866 DEBUG ~ drop table Post if exists
12 10 2010 16:19:10,866 DEBUG ~ drop table User if exists
12 10 2010 16:19:10,866 INFO  ~ schema export complete
12 10 2010 16:19:11,951 ERROR ~ 

@645j8gm9f
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 53)
The file /test/BasicTest.scala could not be compiled. Error raised is : too many arguments for constructor Comment: ()models.Comment

play.exceptions.CompilationException: too many arguments for constructor Comment: ()models.Comment
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.compileAll(ScalaPlugin.scala:100)
	at play.classloading.ApplicationClassloader.getAllClasses(ApplicationClassloader.java:403)
	at play.Play.start(Play.java:385)
	at play.Play.detectChanges(Play.java:502)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 16:20:22,223 ERROR ~ 

@645j8gm9g
Internal Server Error (500) for request GET /@tests

Compilation error (In /app/models/Comment.scala around line 7)
The file /app/models/Comment.scala could not be compiled. Error raised is : ')' expected but 'var' found.

play.exceptions.CompilationException: ')' expected but 'var' found.
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.compileAll(ScalaPlugin.scala:100)
	at play.classloading.ApplicationClassloader.getAllClasses(ApplicationClassloader.java:403)
	at play.Play.start(Play.java:385)
	at play.Play.detectChanges(Play.java:502)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 16:20:28,845 ERROR ~ 

@645j8gm9h
Internal Server Error (500) for request GET /@tests

Compilation error (In /app/models/Comment.scala around line 11)
The file /app/models/Comment.scala could not be compiled. Error raised is : value update is not a member of models.Comment

play.exceptions.CompilationException: value update is not a member of models.Comment
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.compileAll(ScalaPlugin.scala:100)
	at play.classloading.ApplicationClassloader.getAllClasses(ApplicationClassloader.java:403)
	at play.Play.start(Play.java:385)
	at play.Play.detectChanges(Play.java:502)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 16:20:35,813 ERROR ~ 

@645j8gm9i
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 53)
The file /test/BasicTest.scala could not be compiled. Error raised is : value save is not a member of models.Comment

play.exceptions.CompilationException: value save is not a member of models.Comment
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.compileAll(ScalaPlugin.scala:100)
	at play.classloading.ApplicationClassloader.getAllClasses(ApplicationClassloader.java:403)
	at play.Play.start(Play.java:385)
	at play.Play.detectChanges(Play.java:502)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 16:21:07,819 ERROR ~ 

@645j8gm9j
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 56)
The file /test/BasicTest.scala could not be compiled. Error raised is : not found: value Comment

play.exceptions.CompilationException: not found: value Comment
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.compileAll(ScalaPlugin.scala:100)
	at play.classloading.ApplicationClassloader.getAllClasses(ApplicationClassloader.java:403)
	at play.Play.start(Play.java:385)
	at play.Play.detectChanges(Play.java:502)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 16:21:23,853 ERROR ~ 

@645j8gm9k
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 62)
The file /test/BasicTest.scala could not be compiled. Error raised is : value postedAt is not a member of models.Comment

play.exceptions.CompilationException: value postedAt is not a member of models.Comment
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.compileAll(ScalaPlugin.scala:100)
	at play.classloading.ApplicationClassloader.getAllClasses(ApplicationClassloader.java:403)
	at play.Play.start(Play.java:385)
	at play.Play.detectChanges(Play.java:502)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 16:21:45,993 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 16:21:45,993 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
12 10 2010 16:21:45,993 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
12 10 2010 16:21:45,993 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
12 10 2010 16:21:45,993 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
12 10 2010 16:21:45,993 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
12 10 2010 16:21:45,993 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
12 10 2010 16:21:45,993 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
12 10 2010 16:21:45,993 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
12 10 2010 16:21:45,993 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
12 10 2010 16:21:45,994 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 16:21:45,994 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
12 10 2010 16:21:45,994 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
12 10 2010 16:21:45,994 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
12 10 2010 16:21:45,994 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:21:45,994 DEBUG ~ Process hbm files
12 10 2010 16:21:45,994 DEBUG ~ Process annotated classes
12 10 2010 16:21:45,995 INFO  ~ Binding entity from annotated class: models.User
12 10 2010 16:21:45,995 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 16:21:45,995 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 16:21:45,995 DEBUG ~ Import with entity name User
12 10 2010 16:21:45,995 INFO  ~ Bind entity models.User on table User
12 10 2010 16:21:45,998 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 16:21:45,998 DEBUG ~ binding property id with lazy=false
12 10 2010 16:21:45,998 DEBUG ~ building SimpleValue for id
12 10 2010 16:21:45,998 DEBUG ~ Building property id
12 10 2010 16:21:45,998 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
12 10 2010 16:21:45,998 DEBUG ~ binding property email with lazy=false
12 10 2010 16:21:45,998 DEBUG ~ building SimpleValue for email
12 10 2010 16:21:45,998 DEBUG ~ Building property email
12 10 2010 16:21:45,998 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
12 10 2010 16:21:45,998 DEBUG ~ binding property fullname with lazy=false
12 10 2010 16:21:45,998 DEBUG ~ building SimpleValue for fullname
12 10 2010 16:21:45,998 DEBUG ~ Building property fullname
12 10 2010 16:21:45,998 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
12 10 2010 16:21:45,998 DEBUG ~ binding property isAdmin with lazy=false
12 10 2010 16:21:45,999 DEBUG ~ building SimpleValue for isAdmin
12 10 2010 16:21:45,999 DEBUG ~ Building property isAdmin
12 10 2010 16:21:45,999 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
12 10 2010 16:21:45,999 DEBUG ~ binding property password with lazy=false
12 10 2010 16:21:45,999 DEBUG ~ building SimpleValue for password
12 10 2010 16:21:45,999 DEBUG ~ Building property password
12 10 2010 16:21:45,999 INFO  ~ Binding entity from annotated class: models.Post
12 10 2010 16:21:45,999 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 16:21:45,999 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 16:21:45,999 DEBUG ~ Import with entity name Post
12 10 2010 16:21:45,999 INFO  ~ Bind entity models.Post on table Post
12 10 2010 16:21:46,001 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 16:21:46,001 DEBUG ~ binding property id with lazy=false
12 10 2010 16:21:46,001 DEBUG ~ building SimpleValue for id
12 10 2010 16:21:46,001 DEBUG ~ Building property id
12 10 2010 16:21:46,001 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
12 10 2010 16:21:46,001 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=author, insertable=true, updatable=true, unique=false}
12 10 2010 16:21:46,002 DEBUG ~ Building property author
12 10 2010 16:21:46,002 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=content, insertable=true, updatable=true, unique=false}
12 10 2010 16:21:46,003 DEBUG ~ binding property content with lazy=false
12 10 2010 16:21:46,003 DEBUG ~ building SimpleValue for content
12 10 2010 16:21:46,003 DEBUG ~ Building property content
12 10 2010 16:21:46,003 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
12 10 2010 16:21:46,003 DEBUG ~ binding property postedAt with lazy=false
12 10 2010 16:21:46,003 DEBUG ~ building SimpleValue for postedAt
12 10 2010 16:21:46,003 DEBUG ~ Building property postedAt
12 10 2010 16:21:46,003 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=title, insertable=true, updatable=true, unique=false}
12 10 2010 16:21:46,003 DEBUG ~ binding property title with lazy=false
12 10 2010 16:21:46,003 DEBUG ~ building SimpleValue for title
12 10 2010 16:21:46,003 DEBUG ~ Building property title
12 10 2010 16:21:46,003 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 16:21:46,003 DEBUG ~ setting SimpleValue typeName for email
12 10 2010 16:21:46,003 DEBUG ~ setting SimpleValue typeName for fullname
12 10 2010 16:21:46,003 DEBUG ~ setting SimpleValue typeName for isAdmin
12 10 2010 16:21:46,004 DEBUG ~ setting SimpleValue typeName for password
12 10 2010 16:21:46,004 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 16:21:46,004 DEBUG ~ setting SimpleValue typeName for content
12 10 2010 16:21:46,004 DEBUG ~ setting SimpleValue typeName for postedAt
12 10 2010 16:21:46,004 DEBUG ~ setting SimpleValue typeName for title
12 10 2010 16:21:46,004 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:21:46,004 DEBUG ~ processing extends queue
12 10 2010 16:21:46,004 DEBUG ~ processing collection mappings
12 10 2010 16:21:46,004 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:21:46,004 DEBUG ~ processing association property references
12 10 2010 16:21:46,004 DEBUG ~ processing foreign key constraints
12 10 2010 16:21:46,004 DEBUG ~ resolving reference to class: models.User
12 10 2010 16:21:46,005 INFO  ~ Hibernate Validator not found: ignoring
12 10 2010 16:21:46,016 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
12 10 2010 16:21:46,017 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
12 10 2010 16:21:46,019 DEBUG ~ Search not present in classpath, ignoring event listener registration.
12 10 2010 16:21:46,019 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
12 10 2010 16:21:46,019 DEBUG ~ Preparing to build session factory with filters : {}
12 10 2010 16:21:46,019 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:21:46,019 DEBUG ~ Process hbm files
12 10 2010 16:21:46,019 DEBUG ~ Process annotated classes
12 10 2010 16:21:46,019 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:21:46,019 DEBUG ~ processing extends queue
12 10 2010 16:21:46,019 DEBUG ~ processing collection mappings
12 10 2010 16:21:46,019 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:21:46,019 DEBUG ~ processing association property references
12 10 2010 16:21:46,019 DEBUG ~ processing foreign key constraints
12 10 2010 16:21:46,019 DEBUG ~ resolving reference to class: models.User
12 10 2010 16:21:46,021 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
12 10 2010 16:21:46,021 INFO  ~ Using provided datasource
12 10 2010 16:21:46,021 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
12 10 2010 16:21:46,021 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
12 10 2010 16:21:46,022 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
12 10 2010 16:21:46,022 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
12 10 2010 16:21:46,022 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
12 10 2010 16:21:46,022 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
12 10 2010 16:21:46,022 INFO  ~ Automatic flush during beforeCompletion(): disabled
12 10 2010 16:21:46,022 INFO  ~ Automatic session close at end of transaction: disabled
12 10 2010 16:21:46,022 INFO  ~ JDBC batch size: 15
12 10 2010 16:21:46,022 INFO  ~ JDBC batch updates for versioned data: disabled
12 10 2010 16:21:46,022 INFO  ~ Scrollable result sets: enabled
12 10 2010 16:21:46,022 DEBUG ~ Wrap result sets: disabled
12 10 2010 16:21:46,022 INFO  ~ JDBC3 getGeneratedKeys(): disabled
12 10 2010 16:21:46,022 INFO  ~ Connection release mode: auto
12 10 2010 16:21:46,022 INFO  ~ Default batch fetch size: 1
12 10 2010 16:21:46,022 INFO  ~ Generate SQL with comments: disabled
12 10 2010 16:21:46,022 INFO  ~ Order SQL updates by primary key: disabled
12 10 2010 16:21:46,022 INFO  ~ Order SQL inserts for batching: disabled
12 10 2010 16:21:46,022 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
12 10 2010 16:21:46,023 INFO  ~ Using ASTQueryTranslatorFactory
12 10 2010 16:21:46,023 INFO  ~ Query language substitutions: {}
12 10 2010 16:21:46,023 INFO  ~ JPA-QL strict compliance: enabled
12 10 2010 16:21:46,023 INFO  ~ Second-level cache: enabled
12 10 2010 16:21:46,023 INFO  ~ Query cache: disabled
12 10 2010 16:21:46,023 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
12 10 2010 16:21:46,023 INFO  ~ Optimize cache for minimal puts: disabled
12 10 2010 16:21:46,023 INFO  ~ Structured second-level cache entries: disabled
12 10 2010 16:21:46,023 INFO  ~ Statistics: disabled
12 10 2010 16:21:46,023 INFO  ~ Deleted entity synthetic identifier rollback: disabled
12 10 2010 16:21:46,023 INFO  ~ Default entity-mode: pojo
12 10 2010 16:21:46,023 INFO  ~ Named query checking : enabled
12 10 2010 16:21:46,023 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
12 10 2010 16:21:46,026 INFO  ~ building session factory
12 10 2010 16:21:46,027 DEBUG ~ Session factory constructed with filter configurations : {}
12 10 2010 16:21:46,027 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
12 10 2010 16:21:46,027 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:21:46,028 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:21:46,034 DEBUG ~ Static SQL for entity: models.Post
12 10 2010 16:21:46,035 DEBUG ~  Version select: select id from Post where id =?
12 10 2010 16:21:46,035 DEBUG ~  Snapshot select: select post_.id, post_.author_id as author5_23_, post_.content as content23_, post_.postedAt as postedAt23_, post_.title as title23_ from Post post_ where post_.id=?
12 10 2010 16:21:46,035 DEBUG ~  Insert 0: insert into Post (author_id, content, postedAt, title, id) values (?, ?, ?, ?, ?)
12 10 2010 16:21:46,035 DEBUG ~  Update 0: update Post set author_id=?, content=?, postedAt=?, title=? where id=?
12 10 2010 16:21:46,035 DEBUG ~  Delete 0: delete from Post where id=?
12 10 2010 16:21:46,035 DEBUG ~  Identity insert: insert into Post (id, author_id, content, postedAt, title) values (null, ?, ?, ?, ?)
12 10 2010 16:21:46,039 DEBUG ~ Static SQL for entity: models.User
12 10 2010 16:21:46,040 DEBUG ~  Version select: select id from User where id =?
12 10 2010 16:21:46,040 DEBUG ~  Snapshot select: select user_.id, user_.email as email22_, user_.fullname as fullname22_, user_.isAdmin as isAdmin22_, user_.password as password22_ from User user_ where user_.id=?
12 10 2010 16:21:46,040 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
12 10 2010 16:21:46,040 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
12 10 2010 16:21:46,040 DEBUG ~  Delete 0: delete from User where id=?
12 10 2010 16:21:46,040 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
12 10 2010 16:21:46,040 DEBUG ~ Static select for entity models.Post [NONE]: select post0_.id as id23_1_, post0_.author_id as author5_23_1_, post0_.content as content23_1_, post0_.postedAt as postedAt23_1_, post0_.title as title23_1_, user1_.id as id22_0_, user1_.email as email22_0_, user1_.fullname as fullname22_0_, user1_.isAdmin as isAdmin22_0_, user1_.password as password22_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 16:21:46,040 DEBUG ~ Static select for entity models.Post [READ]: select post0_.id as id23_1_, post0_.author_id as author5_23_1_, post0_.content as content23_1_, post0_.postedAt as postedAt23_1_, post0_.title as title23_1_, user1_.id as id22_0_, user1_.email as email22_0_, user1_.fullname as fullname22_0_, user1_.isAdmin as isAdmin22_0_, user1_.password as password22_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 16:21:46,040 DEBUG ~ Static select for entity models.Post [UPGRADE]: select post0_.id as id23_0_, post0_.author_id as author5_23_0_, post0_.content as content23_0_, post0_.postedAt as postedAt23_0_, post0_.title as title23_0_ from Post post0_ where post0_.id=?
12 10 2010 16:21:46,041 DEBUG ~ Static select for entity models.Post [UPGRADE_NOWAIT]: select post0_.id as id23_0_, post0_.author_id as author5_23_0_, post0_.content as content23_0_, post0_.postedAt as postedAt23_0_, post0_.title as title23_0_ from Post post0_ where post0_.id=?
12 10 2010 16:21:46,041 DEBUG ~ Static select for entity models.Post [FORCE]: select post0_.id as id23_0_, post0_.author_id as author5_23_0_, post0_.content as content23_0_, post0_.postedAt as postedAt23_0_, post0_.title as title23_0_ from Post post0_ where post0_.id=?
12 10 2010 16:21:46,041 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_READ]: select post0_.id as id23_0_, post0_.author_id as author5_23_0_, post0_.content as content23_0_, post0_.postedAt as postedAt23_0_, post0_.title as title23_0_ from Post post0_ where post0_.id=?
12 10 2010 16:21:46,041 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_WRITE]: select post0_.id as id23_0_, post0_.author_id as author5_23_0_, post0_.content as content23_0_, post0_.postedAt as postedAt23_0_, post0_.title as title23_0_ from Post post0_ where post0_.id=?
12 10 2010 16:21:46,041 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_FORCE_INCREMENT]: select post0_.id as id23_0_, post0_.author_id as author5_23_0_, post0_.content as content23_0_, post0_.postedAt as postedAt23_0_, post0_.title as title23_0_ from Post post0_ where post0_.id=?
12 10 2010 16:21:46,041 DEBUG ~ Static select for entity models.Post [OPTIMISTIC]: select post0_.id as id23_1_, post0_.author_id as author5_23_1_, post0_.content as content23_1_, post0_.postedAt as postedAt23_1_, post0_.title as title23_1_, user1_.id as id22_0_, user1_.email as email22_0_, user1_.fullname as fullname22_0_, user1_.isAdmin as isAdmin22_0_, user1_.password as password22_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 16:21:46,042 DEBUG ~ Static select for entity models.Post [OPTIMISTIC_FORCE_INCREMENT]: select post0_.id as id23_1_, post0_.author_id as author5_23_1_, post0_.content as content23_1_, post0_.postedAt as postedAt23_1_, post0_.title as title23_1_, user1_.id as id22_0_, user1_.email as email22_0_, user1_.fullname as fullname22_0_, user1_.isAdmin as isAdmin22_0_, user1_.password as password22_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 16:21:46,042 DEBUG ~ Static select for action ACTION_MERGE on entity models.Post: select post0_.id as id23_0_, post0_.author_id as author5_23_0_, post0_.content as content23_0_, post0_.postedAt as postedAt23_0_, post0_.title as title23_0_ from Post post0_ where post0_.id=?
12 10 2010 16:21:46,042 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Post: select post0_.id as id23_0_, post0_.author_id as author5_23_0_, post0_.content as content23_0_, post0_.postedAt as postedAt23_0_, post0_.title as title23_0_ from Post post0_ where post0_.id=?
12 10 2010 16:21:46,042 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id22_0_, user0_.email as email22_0_, user0_.fullname as fullname22_0_, user0_.isAdmin as isAdmin22_0_, user0_.password as password22_0_ from User user0_ where user0_.id=?
12 10 2010 16:21:46,042 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id22_0_, user0_.email as email22_0_, user0_.fullname as fullname22_0_, user0_.isAdmin as isAdmin22_0_, user0_.password as password22_0_ from User user0_ where user0_.id=?
12 10 2010 16:21:46,043 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id22_0_, user0_.email as email22_0_, user0_.fullname as fullname22_0_, user0_.isAdmin as isAdmin22_0_, user0_.password as password22_0_ from User user0_ where user0_.id=?
12 10 2010 16:21:46,043 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id22_0_, user0_.email as email22_0_, user0_.fullname as fullname22_0_, user0_.isAdmin as isAdmin22_0_, user0_.password as password22_0_ from User user0_ where user0_.id=?
12 10 2010 16:21:46,043 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id22_0_, user0_.email as email22_0_, user0_.fullname as fullname22_0_, user0_.isAdmin as isAdmin22_0_, user0_.password as password22_0_ from User user0_ where user0_.id=?
12 10 2010 16:21:46,043 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id22_0_, user0_.email as email22_0_, user0_.fullname as fullname22_0_, user0_.isAdmin as isAdmin22_0_, user0_.password as password22_0_ from User user0_ where user0_.id=?
12 10 2010 16:21:46,044 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id22_0_, user0_.email as email22_0_, user0_.fullname as fullname22_0_, user0_.isAdmin as isAdmin22_0_, user0_.password as password22_0_ from User user0_ where user0_.id=?
12 10 2010 16:21:46,044 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id22_0_, user0_.email as email22_0_, user0_.fullname as fullname22_0_, user0_.isAdmin as isAdmin22_0_, user0_.password as password22_0_ from User user0_ where user0_.id=?
12 10 2010 16:21:46,044 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id22_0_, user0_.email as email22_0_, user0_.fullname as fullname22_0_, user0_.isAdmin as isAdmin22_0_, user0_.password as password22_0_ from User user0_ where user0_.id=?
12 10 2010 16:21:46,044 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id22_0_, user0_.email as email22_0_, user0_.fullname as fullname22_0_, user0_.isAdmin as isAdmin22_0_, user0_.password as password22_0_ from User user0_ where user0_.id=?
12 10 2010 16:21:46,044 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id22_0_, user0_.email as email22_0_, user0_.fullname as fullname22_0_, user0_.isAdmin as isAdmin22_0_, user0_.password as password22_0_ from User user0_ where user0_.id=?
12 10 2010 16:21:46,044 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id22_0_, user0_.email as email22_0_, user0_.fullname as fullname22_0_, user0_.isAdmin as isAdmin22_0_, user0_.password as password22_0_ from User user0_ where user0_.id=?
12 10 2010 16:21:46,045 DEBUG ~ registered: 2c9082cd2b9f0d81012b9f50fb3d0009 (unnamed)
12 10 2010 16:21:46,045 INFO  ~ Not binding factory to JNDI, no JNDI name configured
12 10 2010 16:21:46,045 DEBUG ~ instantiated session factory
12 10 2010 16:21:46,045 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:21:46,045 DEBUG ~ Process hbm files
12 10 2010 16:21:46,045 DEBUG ~ Process annotated classes
12 10 2010 16:21:46,045 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:21:46,045 DEBUG ~ processing extends queue
12 10 2010 16:21:46,045 DEBUG ~ processing collection mappings
12 10 2010 16:21:46,045 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:21:46,045 DEBUG ~ processing association property references
12 10 2010 16:21:46,045 DEBUG ~ processing foreign key constraints
12 10 2010 16:21:46,045 DEBUG ~ resolving reference to class: models.User
12 10 2010 16:21:46,048 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:21:46,048 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:21:46,048 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:21:46,048 DEBUG ~ Process hbm files
12 10 2010 16:21:46,048 DEBUG ~ Process annotated classes
12 10 2010 16:21:46,048 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:21:46,048 DEBUG ~ processing extends queue
12 10 2010 16:21:46,048 DEBUG ~ processing collection mappings
12 10 2010 16:21:46,048 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:21:46,048 DEBUG ~ processing association property references
12 10 2010 16:21:46,048 DEBUG ~ processing foreign key constraints
12 10 2010 16:21:46,048 DEBUG ~ resolving reference to class: models.User
12 10 2010 16:21:46,050 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:21:46,051 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:21:46,051 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:21:46,051 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:21:46,051 INFO  ~ Running hbm2ddl schema export
12 10 2010 16:21:46,051 DEBUG ~ import file not found: /import.sql
12 10 2010 16:21:46,051 INFO  ~ exporting generated schema to database
12 10 2010 16:21:46,051 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 16:21:46,052 DEBUG ~ Unsuccessful: alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 16:21:46,052 DEBUG ~ Table not found: POST in statement [alter table Post]
12 10 2010 16:21:46,052 DEBUG ~ drop table Post if exists
12 10 2010 16:21:46,052 DEBUG ~ drop table User if exists
12 10 2010 16:21:46,052 DEBUG ~ create table Post (id bigint generated by default as identity (start with 1), content longvarchar, postedAt timestamp, title varchar(255), author_id bigint, primary key (id))
12 10 2010 16:21:46,052 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
12 10 2010 16:21:46,052 DEBUG ~ alter table Post add constraint FK260CC0A7CD013E foreign key (author_id) references User
12 10 2010 16:21:46,053 INFO  ~ schema export complete
12 10 2010 16:21:46,053 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:21:46,053 DEBUG ~ Process hbm files
12 10 2010 16:21:46,053 DEBUG ~ Process annotated classes
12 10 2010 16:21:46,053 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:21:46,053 DEBUG ~ processing extends queue
12 10 2010 16:21:46,053 DEBUG ~ processing collection mappings
12 10 2010 16:21:46,053 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:21:46,053 DEBUG ~ processing association property references
12 10 2010 16:21:46,053 DEBUG ~ processing foreign key constraints
12 10 2010 16:21:46,053 DEBUG ~ resolving reference to class: models.User
12 10 2010 16:21:46,055 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:21:46,055 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:21:46,055 DEBUG ~ Execute first pass mapping processing
12 10 2010 16:21:46,055 DEBUG ~ Process hbm files
12 10 2010 16:21:46,055 DEBUG ~ Process annotated classes
12 10 2010 16:21:46,055 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 16:21:46,055 DEBUG ~ processing extends queue
12 10 2010 16:21:46,055 DEBUG ~ processing collection mappings
12 10 2010 16:21:46,055 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 16:21:46,055 DEBUG ~ processing association property references
12 10 2010 16:21:46,055 DEBUG ~ processing foreign key constraints
12 10 2010 16:21:46,055 DEBUG ~ resolving reference to class: models.User
12 10 2010 16:21:46,057 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:21:46,057 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:21:46,057 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:21:46,057 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 16:21:46,057 DEBUG ~ Checking 0 named HQL queries
12 10 2010 16:21:46,057 DEBUG ~ Checking 0 named SQL queries
12 10 2010 16:21:46,063 DEBUG ~ opened session at timestamp: 12868681060
12 10 2010 16:21:46,064 DEBUG ~ begin
12 10 2010 16:21:46,064 DEBUG ~ opening JDBC connection
12 10 2010 16:21:46,064 DEBUG ~ current autocommit status: true
12 10 2010 16:21:46,064 DEBUG ~ disabling autocommit
12 10 2010 16:21:46,124 DEBUG ~ commit
12 10 2010 16:21:46,124 DEBUG ~ re-enabling autocommit
12 10 2010 16:21:46,124 DEBUG ~ committed JDBC Connection
12 10 2010 16:21:46,124 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:21:46,124 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:21:49,118 DEBUG ~ opened session at timestamp: 12868681091
12 10 2010 16:21:49,119 DEBUG ~ begin
12 10 2010 16:21:49,119 DEBUG ~ opening JDBC connection
12 10 2010 16:21:49,119 DEBUG ~ current autocommit status: true
12 10 2010 16:21:49,119 DEBUG ~ disabling autocommit
12 10 2010 16:21:49,147 DEBUG ~ commit
12 10 2010 16:21:49,147 DEBUG ~ re-enabling autocommit
12 10 2010 16:21:49,147 DEBUG ~ committed JDBC Connection
12 10 2010 16:21:49,147 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:21:49,147 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:21:49,162 DEBUG ~ opened session at timestamp: 12868681091
12 10 2010 16:21:49,162 DEBUG ~ begin
12 10 2010 16:21:49,162 DEBUG ~ opening JDBC connection
12 10 2010 16:21:49,162 DEBUG ~ current autocommit status: true
12 10 2010 16:21:49,162 DEBUG ~ disabling autocommit
12 10 2010 16:21:49,415 DEBUG ~ executing identity-insert immediately
12 10 2010 16:21:49,415 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:21:49,415 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:21:49,415 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:21:49,416 DEBUG ~ Natively generated identity: 1
12 10 2010 16:21:49,416 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:21:49,416 DEBUG ~ processing flush-time cascades
12 10 2010 16:21:49,416 DEBUG ~ dirty checking collections
12 10 2010 16:21:49,416 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:21:49,416 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:21:49,416 DEBUG ~ listing entities:
12 10 2010 16:21:49,416 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:21:49,418 DEBUG ~ parse() - HQL: from models.User where email = ?
12 10 2010 16:21:49,419 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'email'
          \-[PARAM] Node: '?'

12 10 2010 16:21:49,419 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:21:49,419 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 16:21:49,420 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 16:21:49,420 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 16:21:49,420 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 16:21:49,420 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 16:21:49,420 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 16:21:49,420 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.email {synthetic-alias} email ) ? ) ) )
12 10 2010 16:21:49,421 DEBUG ~ Derived SELECT clause created.
12 10 2010 16:21:49,421 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 16:21:49,421 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 16:21:49,421 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id22_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email22_, user0_.fullname as fullname22_, user0_.isAdmin as isAdmin22_, user0_.password as password22_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'email' {originalText=email}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 16:21:49,421 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:21:49,422 DEBUG ~ HQL: from models.User where email = ?
12 10 2010 16:21:49,422 DEBUG ~ SQL: select user0_.id as id22_, user0_.email as email22_, user0_.fullname as fullname22_, user0_.isAdmin as isAdmin22_, user0_.password as password22_ from User user0_ where user0_.email=?
12 10 2010 16:21:49,422 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:21:49,422 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:21:49,422 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:21:49,422 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 16:21:49,422 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:21:49,422 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:21:49,423 DEBUG ~ initializing non-lazy collections
12 10 2010 16:21:49,423 DEBUG ~ executing identity-insert immediately
12 10 2010 16:21:49,423 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:21:49,423 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:21:49,424 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:21:49,424 DEBUG ~ Natively generated identity: 2
12 10 2010 16:21:49,424 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:21:49,424 DEBUG ~ processing flush-time cascades
12 10 2010 16:21:49,424 DEBUG ~ dirty checking collections
12 10 2010 16:21:49,424 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:21:49,424 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:21:49,424 DEBUG ~ listing entities:
12 10 2010 16:21:49,424 DEBUG ~ models.User{id=2, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:21:49,425 DEBUG ~ parse() - HQL: from models.User where email = ? AND password = ?
12 10 2010 16:21:49,427 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'AND'
          +-[EQ] Node: '='
          |  +-[IDENT] Node: 'email'
          |  \-[PARAM] Node: '?'
          \-[EQ] Node: '='
             +-[IDENT] Node: 'password'
             \-[PARAM] Node: '?'

12 10 2010 16:21:49,427 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:21:49,427 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 16:21:49,427 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 16:21:49,427 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 16:21:49,427 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 16:21:49,427 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 16:21:49,428 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 16:21:49,428 DEBUG ~ getDataType() : password -> org.hibernate.type.StringType@18b3c498
12 10 2010 16:21:49,428 DEBUG ~ Resolved :  {synthetic-alias}.password -> user0_.password
12 10 2010 16:21:49,428 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 16:21:49,428 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( AND ( = ( user0_.email {synthetic-alias} email ) ? ) ( = ( user0_.password {synthetic-alias} password ) ? ) ) ) )
12 10 2010 16:21:49,428 DEBUG ~ Derived SELECT clause created.
12 10 2010 16:21:49,428 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 16:21:49,429 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 16:21:49,429 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id22_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email22_, user0_.fullname as fullname22_, user0_.isAdmin as isAdmin22_, user0_.password as password22_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'AND'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  |  \-[IDENT] IdentNode: 'email' {originalText=email}
          |  \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'user0_.password' {propertyName=password,dereferenceType=ALL,propertyPath=password,path={synthetic-alias}.password,tableAlias=user0_,className=models.User,classAlias=null}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'password' {originalText=password}
             \-[PARAM] ParameterNode: '?' {ordinal=1, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 16:21:49,429 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:21:49,430 DEBUG ~ HQL: from models.User where email = ? AND password = ?
12 10 2010 16:21:49,430 DEBUG ~ SQL: select user0_.id as id22_, user0_.email as email22_, user0_.fullname as fullname22_, user0_.isAdmin as isAdmin22_, user0_.password as password22_ from User user0_ where user0_.email=? and user0_.password=?
12 10 2010 16:21:49,430 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:21:49,430 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:21:49,430 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:21:49,431 DEBUG ~ result row: EntityKey[models.User#2]
12 10 2010 16:21:49,431 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:21:49,431 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:21:49,431 DEBUG ~ initializing non-lazy collections
12 10 2010 16:21:49,431 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:21:49,431 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:21:49,431 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:21:49,431 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:21:49,431 DEBUG ~ initializing non-lazy collections
12 10 2010 16:21:49,432 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:21:49,432 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:21:49,432 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:21:49,432 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:21:49,432 DEBUG ~ initializing non-lazy collections
12 10 2010 16:21:49,433 DEBUG ~ executing identity-insert immediately
12 10 2010 16:21:49,433 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:21:49,433 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:21:49,433 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:21:49,433 DEBUG ~ Natively generated identity: 3
12 10 2010 16:21:49,433 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:21:49,434 DEBUG ~ processing flush-time cascades
12 10 2010 16:21:49,434 DEBUG ~ dirty checking collections
12 10 2010 16:21:49,434 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:21:49,434 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:21:49,434 DEBUG ~ listing entities:
12 10 2010 16:21:49,434 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:21:49,434 DEBUG ~ executing identity-insert immediately
12 10 2010 16:21:49,434 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:21:49,434 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:21:49,434 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:21:49,435 DEBUG ~ Natively generated identity: 1
12 10 2010 16:21:49,435 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:21:49,435 DEBUG ~ processing flush-time cascades
12 10 2010 16:21:49,435 DEBUG ~ dirty checking collections
12 10 2010 16:21:49,435 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 16:21:49,435 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:21:49,435 DEBUG ~ listing entities:
12 10 2010 16:21:49,435 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:21:49,435 DEBUG ~ models.Post{content=hello world, id=1, author=models.User#3, title=first post, postedAt=2010-10-12 16:21:49}
12 10 2010 16:21:49,436 DEBUG ~ parse() - HQL: select count(e) from models.Post e
12 10 2010 16:21:49,438 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'Post'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

12 10 2010 16:21:49,438 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:21:49,438 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 16:21:49,438 DEBUG ~ FromClause{level=1} :  models.Post (e) -> post0_
12 10 2010 16:21:49,438 DEBUG ~ Resolved :  e -> post0_.id
12 10 2010 16:21:49,438 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 16:21:49,438 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count post0_.id ) ) ( FromClause{level=1} Post post0_ ) )
12 10 2010 16:21:49,439 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 16:21:49,439 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 16:21:49,439 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'post0_.id' {alias=e, className=models.Post, tableAlias=post0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}

12 10 2010 16:21:49,439 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:21:49,439 DEBUG ~ HQL: select count(e) from models.Post e
12 10 2010 16:21:49,439 DEBUG ~ SQL: select count(post0_.id) as col_0_0_ from Post post0_
12 10 2010 16:21:49,439 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:21:49,439 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:21:49,440 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:21:49,440 DEBUG ~ result row: 
12 10 2010 16:21:49,440 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:21:49,440 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:21:49,440 DEBUG ~ initializing non-lazy collections
12 10 2010 16:21:49,440 DEBUG ~ parse() - HQL: from models.Post where author = ?
12 10 2010 16:21:49,442 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'author'
          \-[PARAM] Node: '?'

12 10 2010 16:21:49,442 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:21:49,442 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 16:21:49,443 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
12 10 2010 16:21:49,443 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 16:21:49,443 DEBUG ~ getDataType() : author -> org.hibernate.type.ManyToOneType(models.User)
12 10 2010 16:21:49,443 DEBUG ~ dereferenceShortcut() : property author in models.Post does not require a join.
12 10 2010 16:21:49,443 DEBUG ~ terminal propertyPath = [author]
12 10 2010 16:21:49,443 DEBUG ~ Resolved :  {synthetic-alias}.author -> post0_.author_id
12 10 2010 16:21:49,443 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 16:21:49,443 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( = ( post0_.author_id {synthetic-alias} author ) ? ) ) )
12 10 2010 16:21:49,443 DEBUG ~ Derived SELECT clause created.
12 10 2010 16:21:49,443 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 16:21:49,443 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 16:21:49,444 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id23_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_23_, post0_.content as content23_, post0_.postedAt as postedAt23_, post0_.title as title23_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'post0_.author_id' {propertyName=author,dereferenceType=0,propertyPath=author,path={synthetic-alias}.author,tableAlias=post0_,className=models.Post,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'author' {originalText=author}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.ManyToOneType(models.User)}

12 10 2010 16:21:49,444 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:21:49,444 DEBUG ~ HQL: from models.Post where author = ?
12 10 2010 16:21:49,444 DEBUG ~ SQL: select post0_.id as id23_, post0_.author_id as author5_23_, post0_.content as content23_, post0_.postedAt as postedAt23_, post0_.title as title23_ from Post post0_ where post0_.author_id=?
12 10 2010 16:21:49,444 DEBUG ~ throwQueryException() : no errors
12 10 2010 16:21:49,444 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:21:49,445 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:21:49,445 DEBUG ~ result row: EntityKey[models.Post#1]
12 10 2010 16:21:49,445 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:21:49,445 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:21:49,445 DEBUG ~ initializing non-lazy collections
12 10 2010 16:21:49,472 DEBUG ~ commit
12 10 2010 16:21:49,472 DEBUG ~ processing flush-time cascades
12 10 2010 16:21:49,472 DEBUG ~ dirty checking collections
12 10 2010 16:21:49,473 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 16:21:49,473 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:21:49,473 DEBUG ~ listing entities:
12 10 2010 16:21:49,473 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:21:49,473 DEBUG ~ models.Post{content=hello world, id=1, author=models.User#3, title=first post, postedAt=2010-10-12 16:21:49}
12 10 2010 16:21:49,473 DEBUG ~ re-enabling autocommit
12 10 2010 16:21:49,473 DEBUG ~ committed JDBC Connection
12 10 2010 16:21:49,473 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:21:49,473 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:21:49,585 DEBUG ~ opened session at timestamp: 12868681095
12 10 2010 16:21:49,585 DEBUG ~ begin
12 10 2010 16:21:49,585 DEBUG ~ opening JDBC connection
12 10 2010 16:21:49,585 DEBUG ~ current autocommit status: true
12 10 2010 16:21:49,585 DEBUG ~ disabling autocommit
12 10 2010 16:21:49,591 DEBUG ~ commit
12 10 2010 16:21:49,591 DEBUG ~ re-enabling autocommit
12 10 2010 16:21:49,591 DEBUG ~ committed JDBC Connection
12 10 2010 16:21:49,591 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:21:49,591 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:22:16,171 DEBUG ~ opened session at timestamp: 12868681361
12 10 2010 16:22:16,171 DEBUG ~ begin
12 10 2010 16:22:16,171 DEBUG ~ opening JDBC connection
12 10 2010 16:22:16,171 DEBUG ~ current autocommit status: true
12 10 2010 16:22:16,171 DEBUG ~ disabling autocommit
12 10 2010 16:22:16,177 DEBUG ~ commit
12 10 2010 16:22:16,177 DEBUG ~ re-enabling autocommit
12 10 2010 16:22:16,177 DEBUG ~ committed JDBC Connection
12 10 2010 16:22:16,178 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:22:16,178 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:22:16,198 DEBUG ~ opened session at timestamp: 12868681361
12 10 2010 16:22:16,198 DEBUG ~ begin
12 10 2010 16:22:16,198 DEBUG ~ opening JDBC connection
12 10 2010 16:22:16,198 DEBUG ~ current autocommit status: true
12 10 2010 16:22:16,199 DEBUG ~ disabling autocommit
12 10 2010 16:22:16,450 DEBUG ~ executing identity-insert immediately
12 10 2010 16:22:16,451 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:22:16,451 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:22:16,451 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:22:16,451 DEBUG ~ Natively generated identity: 4
12 10 2010 16:22:16,451 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:22:16,451 DEBUG ~ processing flush-time cascades
12 10 2010 16:22:16,451 DEBUG ~ dirty checking collections
12 10 2010 16:22:16,451 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:22:16,451 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:22:16,452 DEBUG ~ listing entities:
12 10 2010 16:22:16,452 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:22:16,452 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:22:16,452 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:22:16,452 DEBUG ~ result row: EntityKey[models.User#4]
12 10 2010 16:22:16,452 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:22:16,452 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:22:16,452 DEBUG ~ initializing non-lazy collections
12 10 2010 16:22:16,453 DEBUG ~ executing identity-insert immediately
12 10 2010 16:22:16,453 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:22:16,453 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:22:16,453 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:22:16,453 DEBUG ~ Natively generated identity: 5
12 10 2010 16:22:16,453 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:22:16,454 DEBUG ~ processing flush-time cascades
12 10 2010 16:22:16,454 DEBUG ~ dirty checking collections
12 10 2010 16:22:16,454 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:22:16,454 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:22:16,454 DEBUG ~ listing entities:
12 10 2010 16:22:16,454 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:22:16,454 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:22:16,454 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:22:16,454 DEBUG ~ result row: EntityKey[models.User#5]
12 10 2010 16:22:16,454 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:22:16,454 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:22:16,455 DEBUG ~ initializing non-lazy collections
12 10 2010 16:22:16,455 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:22:16,455 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:22:16,455 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:22:16,455 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:22:16,455 DEBUG ~ initializing non-lazy collections
12 10 2010 16:22:16,455 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:22:16,456 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:22:16,456 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:22:16,456 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:22:16,456 DEBUG ~ initializing non-lazy collections
12 10 2010 16:22:16,456 DEBUG ~ executing identity-insert immediately
12 10 2010 16:22:16,456 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:22:16,457 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:22:16,457 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:22:16,457 DEBUG ~ Natively generated identity: 6
12 10 2010 16:22:16,457 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:22:16,457 DEBUG ~ processing flush-time cascades
12 10 2010 16:22:16,457 DEBUG ~ dirty checking collections
12 10 2010 16:22:16,458 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 16:22:16,458 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:22:16,458 DEBUG ~ listing entities:
12 10 2010 16:22:16,458 DEBUG ~ models.User{id=6, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:22:16,458 DEBUG ~ executing identity-insert immediately
12 10 2010 16:22:16,458 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:22:16,458 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:22:16,458 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:22:16,458 DEBUG ~ Natively generated identity: 2
12 10 2010 16:22:16,459 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:22:16,459 DEBUG ~ processing flush-time cascades
12 10 2010 16:22:16,459 DEBUG ~ dirty checking collections
12 10 2010 16:22:16,459 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 16:22:16,459 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:22:16,459 DEBUG ~ listing entities:
12 10 2010 16:22:16,460 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#6, title=first post, postedAt=2010-10-12 16:22:16}
12 10 2010 16:22:16,460 DEBUG ~ models.User{id=6, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:22:16,469 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:22:16,470 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:22:16,470 DEBUG ~ result row: 
12 10 2010 16:22:16,470 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:22:16,470 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:22:16,470 DEBUG ~ initializing non-lazy collections
12 10 2010 16:22:16,470 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 16:22:16,471 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 16:22:16,471 DEBUG ~ result row: EntityKey[models.Post#2]
12 10 2010 16:22:16,471 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 16:22:16,471 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 16:22:16,471 DEBUG ~ initializing non-lazy collections
12 10 2010 16:22:16,477 DEBUG ~ commit
12 10 2010 16:22:16,477 DEBUG ~ processing flush-time cascades
12 10 2010 16:22:16,477 DEBUG ~ dirty checking collections
12 10 2010 16:22:16,477 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 16:22:16,477 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 16:22:16,477 DEBUG ~ listing entities:
12 10 2010 16:22:16,478 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#6, title=first post, postedAt=2010-10-12 16:22:16}
12 10 2010 16:22:16,478 DEBUG ~ models.User{id=6, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 16:22:16,478 DEBUG ~ re-enabling autocommit
12 10 2010 16:22:16,478 DEBUG ~ committed JDBC Connection
12 10 2010 16:22:16,478 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:22:16,478 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 16:22:16,498 DEBUG ~ opened session at timestamp: 12868681364
12 10 2010 16:22:16,498 DEBUG ~ begin
12 10 2010 16:22:16,498 DEBUG ~ opening JDBC connection
12 10 2010 16:22:16,498 DEBUG ~ current autocommit status: true
12 10 2010 16:22:16,498 DEBUG ~ disabling autocommit
12 10 2010 16:22:16,504 DEBUG ~ commit
12 10 2010 16:22:16,504 DEBUG ~ re-enabling autocommit
12 10 2010 16:22:16,504 DEBUG ~ committed JDBC Connection
12 10 2010 16:22:16,504 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 16:22:16,504 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:34:05,876 INFO  ~ closing
12 10 2010 17:34:05,876 INFO  ~ Running hbm2ddl schema export
12 10 2010 17:34:05,877 DEBUG ~ import file not found: /import.sql
12 10 2010 17:34:05,877 INFO  ~ exporting generated schema to database
12 10 2010 17:34:05,877 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 17:34:05,877 DEBUG ~ drop table Post if exists
12 10 2010 17:34:05,877 DEBUG ~ drop table User if exists
12 10 2010 17:34:05,877 INFO  ~ schema export complete
12 10 2010 17:34:05,911 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 17:34:05,911 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
12 10 2010 17:34:05,911 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
12 10 2010 17:34:05,911 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
12 10 2010 17:34:05,911 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
12 10 2010 17:34:05,911 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
12 10 2010 17:34:05,911 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
12 10 2010 17:34:05,911 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
12 10 2010 17:34:05,911 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
12 10 2010 17:34:05,911 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
12 10 2010 17:34:05,911 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 17:34:05,911 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
12 10 2010 17:34:05,911 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
12 10 2010 17:34:05,912 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
12 10 2010 17:34:05,912 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:34:05,912 DEBUG ~ Process hbm files
12 10 2010 17:34:05,912 DEBUG ~ Process annotated classes
12 10 2010 17:34:05,912 INFO  ~ Binding entity from annotated class: models.User
12 10 2010 17:34:05,913 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 17:34:05,913 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 17:34:05,913 DEBUG ~ Import with entity name User
12 10 2010 17:34:05,913 INFO  ~ Bind entity models.User on table User
12 10 2010 17:34:05,918 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:05,918 DEBUG ~ binding property id with lazy=false
12 10 2010 17:34:05,918 DEBUG ~ building SimpleValue for id
12 10 2010 17:34:05,918 DEBUG ~ Building property id
12 10 2010 17:34:05,918 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:05,918 DEBUG ~ binding property email with lazy=false
12 10 2010 17:34:05,918 DEBUG ~ building SimpleValue for email
12 10 2010 17:34:05,918 DEBUG ~ Building property email
12 10 2010 17:34:05,918 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:05,918 DEBUG ~ binding property fullname with lazy=false
12 10 2010 17:34:05,918 DEBUG ~ building SimpleValue for fullname
12 10 2010 17:34:05,918 DEBUG ~ Building property fullname
12 10 2010 17:34:05,918 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:05,919 DEBUG ~ binding property isAdmin with lazy=false
12 10 2010 17:34:05,919 DEBUG ~ building SimpleValue for isAdmin
12 10 2010 17:34:05,919 DEBUG ~ Building property isAdmin
12 10 2010 17:34:05,919 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:05,919 DEBUG ~ binding property password with lazy=false
12 10 2010 17:34:05,919 DEBUG ~ building SimpleValue for password
12 10 2010 17:34:05,919 DEBUG ~ Building property password
12 10 2010 17:34:05,919 INFO  ~ Binding entity from annotated class: models.Post
12 10 2010 17:34:05,919 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 17:34:05,919 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 17:34:05,920 DEBUG ~ Import with entity name Post
12 10 2010 17:34:05,920 INFO  ~ Bind entity models.Post on table Post
12 10 2010 17:34:05,924 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:05,925 DEBUG ~ binding property id with lazy=false
12 10 2010 17:34:05,925 DEBUG ~ building SimpleValue for id
12 10 2010 17:34:05,925 DEBUG ~ Building property id
12 10 2010 17:34:05,926 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
12 10 2010 17:34:05,926 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=author, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:05,926 DEBUG ~ Building property author
12 10 2010 17:34:05,926 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=content, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:05,927 DEBUG ~ binding property content with lazy=false
12 10 2010 17:34:05,927 DEBUG ~ building SimpleValue for content
12 10 2010 17:34:05,927 DEBUG ~ Building property content
12 10 2010 17:34:05,927 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:05,927 DEBUG ~ binding property postedAt with lazy=false
12 10 2010 17:34:05,927 DEBUG ~ building SimpleValue for postedAt
12 10 2010 17:34:05,927 DEBUG ~ Building property postedAt
12 10 2010 17:34:05,927 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=title, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:05,927 DEBUG ~ binding property title with lazy=false
12 10 2010 17:34:05,928 DEBUG ~ building SimpleValue for title
12 10 2010 17:34:05,928 DEBUG ~ Building property title
12 10 2010 17:34:05,928 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 17:34:05,928 DEBUG ~ setting SimpleValue typeName for email
12 10 2010 17:34:05,928 DEBUG ~ setting SimpleValue typeName for fullname
12 10 2010 17:34:05,928 DEBUG ~ setting SimpleValue typeName for isAdmin
12 10 2010 17:34:05,928 DEBUG ~ setting SimpleValue typeName for password
12 10 2010 17:34:05,928 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 17:34:05,928 DEBUG ~ setting SimpleValue typeName for content
12 10 2010 17:34:05,928 DEBUG ~ setting SimpleValue typeName for postedAt
12 10 2010 17:34:05,928 DEBUG ~ setting SimpleValue typeName for title
12 10 2010 17:34:05,928 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:34:05,928 DEBUG ~ processing extends queue
12 10 2010 17:34:05,928 DEBUG ~ processing collection mappings
12 10 2010 17:34:05,928 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:34:05,928 DEBUG ~ processing association property references
12 10 2010 17:34:05,928 DEBUG ~ processing foreign key constraints
12 10 2010 17:34:05,928 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:34:05,930 INFO  ~ Hibernate Validator not found: ignoring
12 10 2010 17:34:05,939 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
12 10 2010 17:34:05,940 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
12 10 2010 17:34:05,943 DEBUG ~ Search not present in classpath, ignoring event listener registration.
12 10 2010 17:34:05,943 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
12 10 2010 17:34:05,943 DEBUG ~ Preparing to build session factory with filters : {}
12 10 2010 17:34:05,943 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:34:05,943 DEBUG ~ Process hbm files
12 10 2010 17:34:05,943 DEBUG ~ Process annotated classes
12 10 2010 17:34:05,943 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:34:05,943 DEBUG ~ processing extends queue
12 10 2010 17:34:05,943 DEBUG ~ processing collection mappings
12 10 2010 17:34:05,943 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:34:05,943 DEBUG ~ processing association property references
12 10 2010 17:34:05,943 DEBUG ~ processing foreign key constraints
12 10 2010 17:34:05,943 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:34:05,945 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
12 10 2010 17:34:05,945 INFO  ~ Using provided datasource
12 10 2010 17:34:05,945 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
12 10 2010 17:34:05,945 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
12 10 2010 17:34:05,945 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
12 10 2010 17:34:05,946 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
12 10 2010 17:34:05,946 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
12 10 2010 17:34:05,946 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
12 10 2010 17:34:05,946 INFO  ~ Automatic flush during beforeCompletion(): disabled
12 10 2010 17:34:05,946 INFO  ~ Automatic session close at end of transaction: disabled
12 10 2010 17:34:05,946 INFO  ~ JDBC batch size: 15
12 10 2010 17:34:05,946 INFO  ~ JDBC batch updates for versioned data: disabled
12 10 2010 17:34:05,946 INFO  ~ Scrollable result sets: enabled
12 10 2010 17:34:05,946 DEBUG ~ Wrap result sets: disabled
12 10 2010 17:34:05,946 INFO  ~ JDBC3 getGeneratedKeys(): disabled
12 10 2010 17:34:05,946 INFO  ~ Connection release mode: auto
12 10 2010 17:34:05,946 INFO  ~ Default batch fetch size: 1
12 10 2010 17:34:05,946 INFO  ~ Generate SQL with comments: disabled
12 10 2010 17:34:05,946 INFO  ~ Order SQL updates by primary key: disabled
12 10 2010 17:34:05,946 INFO  ~ Order SQL inserts for batching: disabled
12 10 2010 17:34:05,946 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
12 10 2010 17:34:05,946 INFO  ~ Using ASTQueryTranslatorFactory
12 10 2010 17:34:05,946 INFO  ~ Query language substitutions: {}
12 10 2010 17:34:05,946 INFO  ~ JPA-QL strict compliance: enabled
12 10 2010 17:34:05,946 INFO  ~ Second-level cache: enabled
12 10 2010 17:34:05,947 INFO  ~ Query cache: disabled
12 10 2010 17:34:05,947 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
12 10 2010 17:34:05,947 INFO  ~ Optimize cache for minimal puts: disabled
12 10 2010 17:34:05,947 INFO  ~ Structured second-level cache entries: disabled
12 10 2010 17:34:05,947 INFO  ~ Statistics: disabled
12 10 2010 17:34:05,947 INFO  ~ Deleted entity synthetic identifier rollback: disabled
12 10 2010 17:34:05,947 INFO  ~ Default entity-mode: pojo
12 10 2010 17:34:05,947 INFO  ~ Named query checking : enabled
12 10 2010 17:34:05,947 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
12 10 2010 17:34:05,950 INFO  ~ building session factory
12 10 2010 17:34:05,951 DEBUG ~ Session factory constructed with filter configurations : {}
12 10 2010 17:34:05,951 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
12 10 2010 17:34:05,951 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:05,951 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:05,959 DEBUG ~ Static SQL for entity: models.Post
12 10 2010 17:34:05,959 DEBUG ~  Version select: select id from Post where id =?
12 10 2010 17:34:05,959 DEBUG ~  Snapshot select: select post_.id, post_.author_id as author5_27_, post_.content as content27_, post_.postedAt as postedAt27_, post_.title as title27_ from Post post_ where post_.id=?
12 10 2010 17:34:05,959 DEBUG ~  Insert 0: insert into Post (author_id, content, postedAt, title, id) values (?, ?, ?, ?, ?)
12 10 2010 17:34:05,959 DEBUG ~  Update 0: update Post set author_id=?, content=?, postedAt=?, title=? where id=?
12 10 2010 17:34:05,959 DEBUG ~  Delete 0: delete from Post where id=?
12 10 2010 17:34:05,959 DEBUG ~  Identity insert: insert into Post (id, author_id, content, postedAt, title) values (null, ?, ?, ?, ?)
12 10 2010 17:34:05,963 DEBUG ~ Static SQL for entity: models.User
12 10 2010 17:34:05,963 DEBUG ~  Version select: select id from User where id =?
12 10 2010 17:34:05,963 DEBUG ~  Snapshot select: select user_.id, user_.email as email26_, user_.fullname as fullname26_, user_.isAdmin as isAdmin26_, user_.password as password26_ from User user_ where user_.id=?
12 10 2010 17:34:05,963 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
12 10 2010 17:34:05,963 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
12 10 2010 17:34:05,963 DEBUG ~  Delete 0: delete from User where id=?
12 10 2010 17:34:05,963 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
12 10 2010 17:34:05,964 DEBUG ~ Static select for entity models.Post [NONE]: select post0_.id as id27_1_, post0_.author_id as author5_27_1_, post0_.content as content27_1_, post0_.postedAt as postedAt27_1_, post0_.title as title27_1_, user1_.id as id26_0_, user1_.email as email26_0_, user1_.fullname as fullname26_0_, user1_.isAdmin as isAdmin26_0_, user1_.password as password26_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:34:05,964 DEBUG ~ Static select for entity models.Post [READ]: select post0_.id as id27_1_, post0_.author_id as author5_27_1_, post0_.content as content27_1_, post0_.postedAt as postedAt27_1_, post0_.title as title27_1_, user1_.id as id26_0_, user1_.email as email26_0_, user1_.fullname as fullname26_0_, user1_.isAdmin as isAdmin26_0_, user1_.password as password26_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:34:05,964 DEBUG ~ Static select for entity models.Post [UPGRADE]: select post0_.id as id27_0_, post0_.author_id as author5_27_0_, post0_.content as content27_0_, post0_.postedAt as postedAt27_0_, post0_.title as title27_0_ from Post post0_ where post0_.id=?
12 10 2010 17:34:05,964 DEBUG ~ Static select for entity models.Post [UPGRADE_NOWAIT]: select post0_.id as id27_0_, post0_.author_id as author5_27_0_, post0_.content as content27_0_, post0_.postedAt as postedAt27_0_, post0_.title as title27_0_ from Post post0_ where post0_.id=?
12 10 2010 17:34:05,964 DEBUG ~ Static select for entity models.Post [FORCE]: select post0_.id as id27_0_, post0_.author_id as author5_27_0_, post0_.content as content27_0_, post0_.postedAt as postedAt27_0_, post0_.title as title27_0_ from Post post0_ where post0_.id=?
12 10 2010 17:34:05,964 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_READ]: select post0_.id as id27_0_, post0_.author_id as author5_27_0_, post0_.content as content27_0_, post0_.postedAt as postedAt27_0_, post0_.title as title27_0_ from Post post0_ where post0_.id=?
12 10 2010 17:34:05,965 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_WRITE]: select post0_.id as id27_0_, post0_.author_id as author5_27_0_, post0_.content as content27_0_, post0_.postedAt as postedAt27_0_, post0_.title as title27_0_ from Post post0_ where post0_.id=?
12 10 2010 17:34:05,965 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_FORCE_INCREMENT]: select post0_.id as id27_0_, post0_.author_id as author5_27_0_, post0_.content as content27_0_, post0_.postedAt as postedAt27_0_, post0_.title as title27_0_ from Post post0_ where post0_.id=?
12 10 2010 17:34:05,965 DEBUG ~ Static select for entity models.Post [OPTIMISTIC]: select post0_.id as id27_1_, post0_.author_id as author5_27_1_, post0_.content as content27_1_, post0_.postedAt as postedAt27_1_, post0_.title as title27_1_, user1_.id as id26_0_, user1_.email as email26_0_, user1_.fullname as fullname26_0_, user1_.isAdmin as isAdmin26_0_, user1_.password as password26_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:34:05,965 DEBUG ~ Static select for entity models.Post [OPTIMISTIC_FORCE_INCREMENT]: select post0_.id as id27_1_, post0_.author_id as author5_27_1_, post0_.content as content27_1_, post0_.postedAt as postedAt27_1_, post0_.title as title27_1_, user1_.id as id26_0_, user1_.email as email26_0_, user1_.fullname as fullname26_0_, user1_.isAdmin as isAdmin26_0_, user1_.password as password26_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:34:05,965 DEBUG ~ Static select for action ACTION_MERGE on entity models.Post: select post0_.id as id27_0_, post0_.author_id as author5_27_0_, post0_.content as content27_0_, post0_.postedAt as postedAt27_0_, post0_.title as title27_0_ from Post post0_ where post0_.id=?
12 10 2010 17:34:05,965 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Post: select post0_.id as id27_0_, post0_.author_id as author5_27_0_, post0_.content as content27_0_, post0_.postedAt as postedAt27_0_, post0_.title as title27_0_ from Post post0_ where post0_.id=?
12 10 2010 17:34:05,966 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id26_0_, user0_.email as email26_0_, user0_.fullname as fullname26_0_, user0_.isAdmin as isAdmin26_0_, user0_.password as password26_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:05,966 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id26_0_, user0_.email as email26_0_, user0_.fullname as fullname26_0_, user0_.isAdmin as isAdmin26_0_, user0_.password as password26_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:05,966 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id26_0_, user0_.email as email26_0_, user0_.fullname as fullname26_0_, user0_.isAdmin as isAdmin26_0_, user0_.password as password26_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:05,966 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id26_0_, user0_.email as email26_0_, user0_.fullname as fullname26_0_, user0_.isAdmin as isAdmin26_0_, user0_.password as password26_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:05,966 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id26_0_, user0_.email as email26_0_, user0_.fullname as fullname26_0_, user0_.isAdmin as isAdmin26_0_, user0_.password as password26_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:05,966 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id26_0_, user0_.email as email26_0_, user0_.fullname as fullname26_0_, user0_.isAdmin as isAdmin26_0_, user0_.password as password26_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:05,966 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id26_0_, user0_.email as email26_0_, user0_.fullname as fullname26_0_, user0_.isAdmin as isAdmin26_0_, user0_.password as password26_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:05,967 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id26_0_, user0_.email as email26_0_, user0_.fullname as fullname26_0_, user0_.isAdmin as isAdmin26_0_, user0_.password as password26_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:05,967 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id26_0_, user0_.email as email26_0_, user0_.fullname as fullname26_0_, user0_.isAdmin as isAdmin26_0_, user0_.password as password26_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:05,967 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id26_0_, user0_.email as email26_0_, user0_.fullname as fullname26_0_, user0_.isAdmin as isAdmin26_0_, user0_.password as password26_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:05,967 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id26_0_, user0_.email as email26_0_, user0_.fullname as fullname26_0_, user0_.isAdmin as isAdmin26_0_, user0_.password as password26_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:05,967 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id26_0_, user0_.email as email26_0_, user0_.fullname as fullname26_0_, user0_.isAdmin as isAdmin26_0_, user0_.password as password26_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:05,967 DEBUG ~ registered: 2c9082cd2b9f0d81012b9f93340f000a (unnamed)
12 10 2010 17:34:05,967 INFO  ~ Not binding factory to JNDI, no JNDI name configured
12 10 2010 17:34:05,967 DEBUG ~ instantiated session factory
12 10 2010 17:34:05,967 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:34:05,967 DEBUG ~ Process hbm files
12 10 2010 17:34:05,967 DEBUG ~ Process annotated classes
12 10 2010 17:34:05,967 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:34:05,967 DEBUG ~ processing extends queue
12 10 2010 17:34:05,968 DEBUG ~ processing collection mappings
12 10 2010 17:34:05,968 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:34:05,968 DEBUG ~ processing association property references
12 10 2010 17:34:05,968 DEBUG ~ processing foreign key constraints
12 10 2010 17:34:05,968 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:34:05,970 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:05,970 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:05,970 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:34:05,970 DEBUG ~ Process hbm files
12 10 2010 17:34:05,970 DEBUG ~ Process annotated classes
12 10 2010 17:34:05,970 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:34:05,970 DEBUG ~ processing extends queue
12 10 2010 17:34:05,970 DEBUG ~ processing collection mappings
12 10 2010 17:34:05,970 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:34:05,970 DEBUG ~ processing association property references
12 10 2010 17:34:05,970 DEBUG ~ processing foreign key constraints
12 10 2010 17:34:05,970 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:34:05,972 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:05,972 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:05,972 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:05,972 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:05,972 INFO  ~ Running hbm2ddl schema export
12 10 2010 17:34:05,972 DEBUG ~ import file not found: /import.sql
12 10 2010 17:34:05,972 INFO  ~ exporting generated schema to database
12 10 2010 17:34:05,972 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 17:34:05,973 DEBUG ~ Unsuccessful: alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 17:34:05,973 DEBUG ~ Table not found: POST in statement [alter table Post]
12 10 2010 17:34:05,973 DEBUG ~ drop table Post if exists
12 10 2010 17:34:05,973 DEBUG ~ drop table User if exists
12 10 2010 17:34:05,973 DEBUG ~ create table Post (id bigint generated by default as identity (start with 1), content longvarchar, postedAt timestamp, title varchar(255), author_id bigint, primary key (id))
12 10 2010 17:34:05,973 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
12 10 2010 17:34:05,973 DEBUG ~ alter table Post add constraint FK260CC0A7CD013E foreign key (author_id) references User
12 10 2010 17:34:05,973 INFO  ~ schema export complete
12 10 2010 17:34:05,973 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:34:05,974 DEBUG ~ Process hbm files
12 10 2010 17:34:05,974 DEBUG ~ Process annotated classes
12 10 2010 17:34:05,974 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:34:05,974 DEBUG ~ processing extends queue
12 10 2010 17:34:05,974 DEBUG ~ processing collection mappings
12 10 2010 17:34:05,974 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:34:05,974 DEBUG ~ processing association property references
12 10 2010 17:34:05,974 DEBUG ~ processing foreign key constraints
12 10 2010 17:34:05,974 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:34:05,975 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:05,975 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:05,975 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:34:05,975 DEBUG ~ Process hbm files
12 10 2010 17:34:05,975 DEBUG ~ Process annotated classes
12 10 2010 17:34:05,975 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:34:05,975 DEBUG ~ processing extends queue
12 10 2010 17:34:05,976 DEBUG ~ processing collection mappings
12 10 2010 17:34:05,976 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:34:05,976 DEBUG ~ processing association property references
12 10 2010 17:34:05,976 DEBUG ~ processing foreign key constraints
12 10 2010 17:34:05,976 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:34:05,977 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:05,977 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:05,978 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:05,978 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:05,978 DEBUG ~ Checking 0 named HQL queries
12 10 2010 17:34:05,978 DEBUG ~ Checking 0 named SQL queries
12 10 2010 17:34:05,983 DEBUG ~ opened session at timestamp: 12868724459
12 10 2010 17:34:05,983 DEBUG ~ begin
12 10 2010 17:34:05,983 DEBUG ~ opening JDBC connection
12 10 2010 17:34:05,983 DEBUG ~ current autocommit status: true
12 10 2010 17:34:05,983 DEBUG ~ disabling autocommit
12 10 2010 17:34:06,048 DEBUG ~ commit
12 10 2010 17:34:06,049 DEBUG ~ re-enabling autocommit
12 10 2010 17:34:06,049 DEBUG ~ committed JDBC Connection
12 10 2010 17:34:06,049 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:34:06,049 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:34:07,599 DEBUG ~ opened session at timestamp: 12868724475
12 10 2010 17:34:07,599 DEBUG ~ begin
12 10 2010 17:34:07,599 DEBUG ~ opening JDBC connection
12 10 2010 17:34:07,599 DEBUG ~ current autocommit status: true
12 10 2010 17:34:07,599 DEBUG ~ disabling autocommit
12 10 2010 17:34:07,617 DEBUG ~ commit
12 10 2010 17:34:07,617 DEBUG ~ re-enabling autocommit
12 10 2010 17:34:07,617 DEBUG ~ committed JDBC Connection
12 10 2010 17:34:07,617 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:34:07,617 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:34:07,641 DEBUG ~ opened session at timestamp: 12868724476
12 10 2010 17:34:07,642 DEBUG ~ begin
12 10 2010 17:34:07,642 DEBUG ~ opening JDBC connection
12 10 2010 17:34:07,642 DEBUG ~ current autocommit status: true
12 10 2010 17:34:07,642 DEBUG ~ disabling autocommit
12 10 2010 17:34:07,895 DEBUG ~ executing identity-insert immediately
12 10 2010 17:34:07,895 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:07,895 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:07,896 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:07,896 DEBUG ~ Natively generated identity: 1
12 10 2010 17:34:07,896 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:07,896 DEBUG ~ processing flush-time cascades
12 10 2010 17:34:07,896 DEBUG ~ dirty checking collections
12 10 2010 17:34:07,896 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:34:07,896 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:34:07,896 DEBUG ~ listing entities:
12 10 2010 17:34:07,896 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:34:07,897 DEBUG ~ parse() - HQL: from models.User where email = ?
12 10 2010 17:34:07,900 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'email'
          \-[PARAM] Node: '?'

12 10 2010 17:34:07,900 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:07,900 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:34:07,901 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 17:34:07,901 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:34:07,901 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 17:34:07,901 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 17:34:07,901 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:34:07,901 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.email {synthetic-alias} email ) ? ) ) )
12 10 2010 17:34:07,901 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:34:07,902 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 17:34:07,902 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:34:07,902 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id26_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email26_, user0_.fullname as fullname26_, user0_.isAdmin as isAdmin26_, user0_.password as password26_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'email' {originalText=email}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 17:34:07,902 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:07,904 DEBUG ~ HQL: from models.User where email = ?
12 10 2010 17:34:07,904 DEBUG ~ SQL: select user0_.id as id26_, user0_.email as email26_, user0_.fullname as fullname26_, user0_.isAdmin as isAdmin26_, user0_.password as password26_ from User user0_ where user0_.email=?
12 10 2010 17:34:07,904 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:07,905 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:07,905 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:34:07,905 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 17:34:07,905 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:34:07,905 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:07,905 DEBUG ~ initializing non-lazy collections
12 10 2010 17:34:07,907 DEBUG ~ executing identity-insert immediately
12 10 2010 17:34:07,907 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:07,907 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:07,907 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:07,907 DEBUG ~ Natively generated identity: 2
12 10 2010 17:34:07,908 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:07,908 DEBUG ~ processing flush-time cascades
12 10 2010 17:34:07,908 DEBUG ~ dirty checking collections
12 10 2010 17:34:07,908 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:34:07,908 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:34:07,908 DEBUG ~ listing entities:
12 10 2010 17:34:07,908 DEBUG ~ models.User{id=2, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:34:07,909 DEBUG ~ parse() - HQL: from models.User where email = ? AND password = ?
12 10 2010 17:34:07,912 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'AND'
          +-[EQ] Node: '='
          |  +-[IDENT] Node: 'email'
          |  \-[PARAM] Node: '?'
          \-[EQ] Node: '='
             +-[IDENT] Node: 'password'
             \-[PARAM] Node: '?'

12 10 2010 17:34:07,912 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:07,912 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:34:07,912 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 17:34:07,912 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:34:07,912 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 17:34:07,912 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 17:34:07,913 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:34:07,913 DEBUG ~ getDataType() : password -> org.hibernate.type.StringType@18b3c498
12 10 2010 17:34:07,913 DEBUG ~ Resolved :  {synthetic-alias}.password -> user0_.password
12 10 2010 17:34:07,913 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:34:07,913 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( AND ( = ( user0_.email {synthetic-alias} email ) ? ) ( = ( user0_.password {synthetic-alias} password ) ? ) ) ) )
12 10 2010 17:34:07,913 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:34:07,913 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 17:34:07,913 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:34:07,914 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id26_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email26_, user0_.fullname as fullname26_, user0_.isAdmin as isAdmin26_, user0_.password as password26_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'AND'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  |  \-[IDENT] IdentNode: 'email' {originalText=email}
          |  \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'user0_.password' {propertyName=password,dereferenceType=ALL,propertyPath=password,path={synthetic-alias}.password,tableAlias=user0_,className=models.User,classAlias=null}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'password' {originalText=password}
             \-[PARAM] ParameterNode: '?' {ordinal=1, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 17:34:07,914 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:07,914 DEBUG ~ HQL: from models.User where email = ? AND password = ?
12 10 2010 17:34:07,914 DEBUG ~ SQL: select user0_.id as id26_, user0_.email as email26_, user0_.fullname as fullname26_, user0_.isAdmin as isAdmin26_, user0_.password as password26_ from User user0_ where user0_.email=? and user0_.password=?
12 10 2010 17:34:07,914 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:07,914 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:07,915 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:34:07,915 DEBUG ~ result row: EntityKey[models.User#2]
12 10 2010 17:34:07,915 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:34:07,915 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:07,915 DEBUG ~ initializing non-lazy collections
12 10 2010 17:34:07,916 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:07,916 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:34:07,916 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:34:07,916 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:07,916 DEBUG ~ initializing non-lazy collections
12 10 2010 17:34:07,916 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:07,916 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:34:07,916 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:34:07,916 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:07,916 DEBUG ~ initializing non-lazy collections
12 10 2010 17:34:07,917 DEBUG ~ executing identity-insert immediately
12 10 2010 17:34:07,917 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:07,917 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:07,917 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:07,917 DEBUG ~ Natively generated identity: 3
12 10 2010 17:34:07,918 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:07,918 DEBUG ~ processing flush-time cascades
12 10 2010 17:34:07,918 DEBUG ~ dirty checking collections
12 10 2010 17:34:07,918 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:34:07,918 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:34:07,918 DEBUG ~ listing entities:
12 10 2010 17:34:07,918 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:34:07,918 DEBUG ~ executing identity-insert immediately
12 10 2010 17:34:07,918 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:07,919 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:07,919 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:07,919 DEBUG ~ Natively generated identity: 1
12 10 2010 17:34:07,919 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:07,919 DEBUG ~ processing flush-time cascades
12 10 2010 17:34:07,919 DEBUG ~ dirty checking collections
12 10 2010 17:34:07,919 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 17:34:07,919 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:34:07,919 DEBUG ~ listing entities:
12 10 2010 17:34:07,919 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:34:07,920 DEBUG ~ models.Post{content=hello world, id=1, author=models.User#3, title=first post, postedAt=2010-10-12 17:34:07}
12 10 2010 17:34:07,921 DEBUG ~ parse() - HQL: select count(e) from models.Post e
12 10 2010 17:34:07,923 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'Post'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

12 10 2010 17:34:07,923 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:07,923 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:34:07,923 DEBUG ~ FromClause{level=1} :  models.Post (e) -> post0_
12 10 2010 17:34:07,924 DEBUG ~ Resolved :  e -> post0_.id
12 10 2010 17:34:07,924 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:34:07,924 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count post0_.id ) ) ( FromClause{level=1} Post post0_ ) )
12 10 2010 17:34:07,924 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 17:34:07,924 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:34:07,924 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'post0_.id' {alias=e, className=models.Post, tableAlias=post0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}

12 10 2010 17:34:07,924 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:07,924 DEBUG ~ HQL: select count(e) from models.Post e
12 10 2010 17:34:07,924 DEBUG ~ SQL: select count(post0_.id) as col_0_0_ from Post post0_
12 10 2010 17:34:07,925 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:07,925 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:07,925 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:34:07,925 DEBUG ~ result row: 
12 10 2010 17:34:07,925 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:34:07,925 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:07,925 DEBUG ~ initializing non-lazy collections
12 10 2010 17:34:07,926 DEBUG ~ parse() - HQL: from models.Post where author = ?
12 10 2010 17:34:07,928 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'author'
          \-[PARAM] Node: '?'

12 10 2010 17:34:07,928 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:07,928 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:34:07,928 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
12 10 2010 17:34:07,928 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:34:07,928 DEBUG ~ getDataType() : author -> org.hibernate.type.ManyToOneType(models.User)
12 10 2010 17:34:07,928 DEBUG ~ dereferenceShortcut() : property author in models.Post does not require a join.
12 10 2010 17:34:07,928 DEBUG ~ terminal propertyPath = [author]
12 10 2010 17:34:07,928 DEBUG ~ Resolved :  {synthetic-alias}.author -> post0_.author_id
12 10 2010 17:34:07,928 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:34:07,929 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( = ( post0_.author_id {synthetic-alias} author ) ? ) ) )
12 10 2010 17:34:07,929 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:34:07,929 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 17:34:07,929 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:34:07,929 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id27_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_27_, post0_.content as content27_, post0_.postedAt as postedAt27_, post0_.title as title27_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'post0_.author_id' {propertyName=author,dereferenceType=0,propertyPath=author,path={synthetic-alias}.author,tableAlias=post0_,className=models.Post,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'author' {originalText=author}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.ManyToOneType(models.User)}

12 10 2010 17:34:07,929 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:07,930 DEBUG ~ HQL: from models.Post where author = ?
12 10 2010 17:34:07,930 DEBUG ~ SQL: select post0_.id as id27_, post0_.author_id as author5_27_, post0_.content as content27_, post0_.postedAt as postedAt27_, post0_.title as title27_ from Post post0_ where post0_.author_id=?
12 10 2010 17:34:07,930 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:07,931 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:07,931 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:34:07,931 DEBUG ~ result row: EntityKey[models.Post#1]
12 10 2010 17:34:07,932 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:34:07,932 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:07,932 DEBUG ~ initializing non-lazy collections
12 10 2010 17:34:07,933 DEBUG ~ executing identity-insert immediately
12 10 2010 17:34:07,933 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:07,933 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:07,933 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:07,933 DEBUG ~ Natively generated identity: 4
12 10 2010 17:34:07,933 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:07,934 DEBUG ~ processing flush-time cascades
12 10 2010 17:34:07,934 DEBUG ~ dirty checking collections
12 10 2010 17:34:07,934 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:34:07,934 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:34:07,934 DEBUG ~ listing entities:
12 10 2010 17:34:07,934 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:34:07,934 DEBUG ~ executing identity-insert immediately
12 10 2010 17:34:07,935 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:07,935 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:07,935 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:07,935 DEBUG ~ Natively generated identity: 2
12 10 2010 17:34:07,935 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:07,935 DEBUG ~ processing flush-time cascades
12 10 2010 17:34:07,935 DEBUG ~ dirty checking collections
12 10 2010 17:34:07,935 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 17:34:07,935 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:34:07,935 DEBUG ~ listing entities:
12 10 2010 17:34:07,936 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, postedAt=2010-10-12 17:34:07}
12 10 2010 17:34:07,936 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:34:07,965 DEBUG ~ commit
12 10 2010 17:34:07,965 DEBUG ~ processing flush-time cascades
12 10 2010 17:34:07,965 DEBUG ~ dirty checking collections
12 10 2010 17:34:07,965 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 17:34:07,965 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:34:07,965 DEBUG ~ listing entities:
12 10 2010 17:34:07,965 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, postedAt=2010-10-12 17:34:07}
12 10 2010 17:34:07,965 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:34:07,965 DEBUG ~ re-enabling autocommit
12 10 2010 17:34:07,965 DEBUG ~ committed JDBC Connection
12 10 2010 17:34:07,966 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:34:07,966 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:34:08,007 DEBUG ~ opened session at timestamp: 12868724480
12 10 2010 17:34:08,007 DEBUG ~ begin
12 10 2010 17:34:08,007 DEBUG ~ opening JDBC connection
12 10 2010 17:34:08,007 DEBUG ~ current autocommit status: true
12 10 2010 17:34:08,007 DEBUG ~ disabling autocommit
12 10 2010 17:34:08,011 DEBUG ~ commit
12 10 2010 17:34:08,011 DEBUG ~ re-enabling autocommit
12 10 2010 17:34:08,011 DEBUG ~ committed JDBC Connection
12 10 2010 17:34:08,011 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:34:08,011 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:34:25,293 INFO  ~ closing
12 10 2010 17:34:25,293 INFO  ~ Running hbm2ddl schema export
12 10 2010 17:34:25,293 DEBUG ~ import file not found: /import.sql
12 10 2010 17:34:25,293 INFO  ~ exporting generated schema to database
12 10 2010 17:34:25,293 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 17:34:25,294 DEBUG ~ drop table Post if exists
12 10 2010 17:34:25,294 DEBUG ~ drop table User if exists
12 10 2010 17:34:25,294 INFO  ~ schema export complete
12 10 2010 17:34:25,324 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 17:34:25,324 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
12 10 2010 17:34:25,324 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
12 10 2010 17:34:25,324 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
12 10 2010 17:34:25,324 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
12 10 2010 17:34:25,324 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
12 10 2010 17:34:25,324 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
12 10 2010 17:34:25,324 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
12 10 2010 17:34:25,324 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
12 10 2010 17:34:25,324 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
12 10 2010 17:34:25,324 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 17:34:25,324 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
12 10 2010 17:34:25,324 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
12 10 2010 17:34:25,324 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
12 10 2010 17:34:25,325 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:34:25,325 DEBUG ~ Process hbm files
12 10 2010 17:34:25,325 DEBUG ~ Process annotated classes
12 10 2010 17:34:25,326 INFO  ~ Binding entity from annotated class: models.Comment
12 10 2010 17:34:25,326 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 17:34:25,326 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 17:34:25,326 DEBUG ~ Import with entity name Comment
12 10 2010 17:34:25,326 INFO  ~ Bind entity models.Comment on table Comment
12 10 2010 17:34:25,329 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:25,329 DEBUG ~ binding property id with lazy=false
12 10 2010 17:34:25,329 DEBUG ~ building SimpleValue for id
12 10 2010 17:34:25,330 DEBUG ~ Building property id
12 10 2010 17:34:25,330 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=author, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:25,330 DEBUG ~ binding property author with lazy=false
12 10 2010 17:34:25,330 DEBUG ~ building SimpleValue for author
12 10 2010 17:34:25,330 DEBUG ~ Building property author
12 10 2010 17:34:25,330 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=content, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:25,330 DEBUG ~ binding property content with lazy=false
12 10 2010 17:34:25,330 DEBUG ~ building SimpleValue for content
12 10 2010 17:34:25,330 DEBUG ~ Building property content
12 10 2010 17:34:25,330 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=post, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:25,331 DEBUG ~ binding property post with lazy=false
12 10 2010 17:34:25,331 DEBUG ~ building SimpleValue for post
12 10 2010 17:34:25,331 DEBUG ~ Building property post
12 10 2010 17:34:25,331 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:25,331 DEBUG ~ binding property postedAt with lazy=false
12 10 2010 17:34:25,331 DEBUG ~ building SimpleValue for postedAt
12 10 2010 17:34:25,331 DEBUG ~ Building property postedAt
12 10 2010 17:34:25,331 INFO  ~ Binding entity from annotated class: models.User
12 10 2010 17:34:25,331 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 17:34:25,331 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 17:34:25,331 DEBUG ~ Import with entity name User
12 10 2010 17:34:25,331 INFO  ~ Bind entity models.User on table User
12 10 2010 17:34:25,334 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:25,334 DEBUG ~ binding property id with lazy=false
12 10 2010 17:34:25,334 DEBUG ~ building SimpleValue for id
12 10 2010 17:34:25,334 DEBUG ~ Building property id
12 10 2010 17:34:25,334 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:25,334 DEBUG ~ binding property email with lazy=false
12 10 2010 17:34:25,334 DEBUG ~ building SimpleValue for email
12 10 2010 17:34:25,334 DEBUG ~ Building property email
12 10 2010 17:34:25,334 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:25,334 DEBUG ~ binding property fullname with lazy=false
12 10 2010 17:34:25,335 DEBUG ~ building SimpleValue for fullname
12 10 2010 17:34:25,335 DEBUG ~ Building property fullname
12 10 2010 17:34:25,335 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:25,335 DEBUG ~ binding property isAdmin with lazy=false
12 10 2010 17:34:25,335 DEBUG ~ building SimpleValue for isAdmin
12 10 2010 17:34:25,335 DEBUG ~ Building property isAdmin
12 10 2010 17:34:25,335 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:25,335 DEBUG ~ binding property password with lazy=false
12 10 2010 17:34:25,335 DEBUG ~ building SimpleValue for password
12 10 2010 17:34:25,336 DEBUG ~ Building property password
12 10 2010 17:34:25,336 INFO  ~ Binding entity from annotated class: models.Post
12 10 2010 17:34:25,336 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 17:34:25,336 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 17:34:25,336 DEBUG ~ Import with entity name Post
12 10 2010 17:34:25,336 INFO  ~ Bind entity models.Post on table Post
12 10 2010 17:34:25,338 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:25,338 DEBUG ~ binding property id with lazy=false
12 10 2010 17:34:25,338 DEBUG ~ building SimpleValue for id
12 10 2010 17:34:25,338 DEBUG ~ Building property id
12 10 2010 17:34:25,338 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
12 10 2010 17:34:25,338 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=author, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:25,338 DEBUG ~ Building property author
12 10 2010 17:34:25,339 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=content, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:25,339 DEBUG ~ binding property content with lazy=false
12 10 2010 17:34:25,339 DEBUG ~ building SimpleValue for content
12 10 2010 17:34:25,339 DEBUG ~ Building property content
12 10 2010 17:34:25,339 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:25,339 DEBUG ~ binding property postedAt with lazy=false
12 10 2010 17:34:25,339 DEBUG ~ building SimpleValue for postedAt
12 10 2010 17:34:25,339 DEBUG ~ Building property postedAt
12 10 2010 17:34:25,339 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=title, insertable=true, updatable=true, unique=false}
12 10 2010 17:34:25,339 DEBUG ~ binding property title with lazy=false
12 10 2010 17:34:25,339 DEBUG ~ building SimpleValue for title
12 10 2010 17:34:25,339 DEBUG ~ Building property title
12 10 2010 17:34:25,339 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 17:34:25,340 DEBUG ~ setting SimpleValue typeName for author
12 10 2010 17:34:25,340 DEBUG ~ setting SimpleValue typeName for content
12 10 2010 17:34:25,340 DEBUG ~ setting SimpleValue typeName for post
12 10 2010 17:34:25,340 DEBUG ~ setting SimpleValue typeName for postedAt
12 10 2010 17:34:25,340 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 17:34:25,340 DEBUG ~ setting SimpleValue typeName for email
12 10 2010 17:34:25,340 DEBUG ~ setting SimpleValue typeName for fullname
12 10 2010 17:34:25,340 DEBUG ~ setting SimpleValue typeName for isAdmin
12 10 2010 17:34:25,340 DEBUG ~ setting SimpleValue typeName for password
12 10 2010 17:34:25,340 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 17:34:25,340 DEBUG ~ setting SimpleValue typeName for content
12 10 2010 17:34:25,340 DEBUG ~ setting SimpleValue typeName for postedAt
12 10 2010 17:34:25,340 DEBUG ~ setting SimpleValue typeName for title
12 10 2010 17:34:25,340 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:34:25,340 DEBUG ~ processing extends queue
12 10 2010 17:34:25,340 DEBUG ~ processing collection mappings
12 10 2010 17:34:25,340 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:34:25,340 DEBUG ~ processing association property references
12 10 2010 17:34:25,340 DEBUG ~ processing foreign key constraints
12 10 2010 17:34:25,340 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:34:25,342 INFO  ~ Hibernate Validator not found: ignoring
12 10 2010 17:34:25,355 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
12 10 2010 17:34:25,356 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
12 10 2010 17:34:25,358 DEBUG ~ Search not present in classpath, ignoring event listener registration.
12 10 2010 17:34:25,358 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
12 10 2010 17:34:25,358 DEBUG ~ Preparing to build session factory with filters : {}
12 10 2010 17:34:25,358 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:34:25,358 DEBUG ~ Process hbm files
12 10 2010 17:34:25,358 DEBUG ~ Process annotated classes
12 10 2010 17:34:25,358 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:34:25,358 DEBUG ~ processing extends queue
12 10 2010 17:34:25,358 DEBUG ~ processing collection mappings
12 10 2010 17:34:25,358 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:34:25,358 DEBUG ~ processing association property references
12 10 2010 17:34:25,358 DEBUG ~ processing foreign key constraints
12 10 2010 17:34:25,358 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:34:25,362 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
12 10 2010 17:34:25,362 INFO  ~ Using provided datasource
12 10 2010 17:34:25,362 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
12 10 2010 17:34:25,362 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
12 10 2010 17:34:25,362 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
12 10 2010 17:34:25,363 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
12 10 2010 17:34:25,363 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
12 10 2010 17:34:25,363 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
12 10 2010 17:34:25,363 INFO  ~ Automatic flush during beforeCompletion(): disabled
12 10 2010 17:34:25,363 INFO  ~ Automatic session close at end of transaction: disabled
12 10 2010 17:34:25,363 INFO  ~ JDBC batch size: 15
12 10 2010 17:34:25,363 INFO  ~ JDBC batch updates for versioned data: disabled
12 10 2010 17:34:25,363 INFO  ~ Scrollable result sets: enabled
12 10 2010 17:34:25,363 DEBUG ~ Wrap result sets: disabled
12 10 2010 17:34:25,363 INFO  ~ JDBC3 getGeneratedKeys(): disabled
12 10 2010 17:34:25,363 INFO  ~ Connection release mode: auto
12 10 2010 17:34:25,363 INFO  ~ Default batch fetch size: 1
12 10 2010 17:34:25,363 INFO  ~ Generate SQL with comments: disabled
12 10 2010 17:34:25,363 INFO  ~ Order SQL updates by primary key: disabled
12 10 2010 17:34:25,363 INFO  ~ Order SQL inserts for batching: disabled
12 10 2010 17:34:25,363 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
12 10 2010 17:34:25,364 INFO  ~ Using ASTQueryTranslatorFactory
12 10 2010 17:34:25,364 INFO  ~ Query language substitutions: {}
12 10 2010 17:34:25,364 INFO  ~ JPA-QL strict compliance: enabled
12 10 2010 17:34:25,364 INFO  ~ Second-level cache: enabled
12 10 2010 17:34:25,364 INFO  ~ Query cache: disabled
12 10 2010 17:34:25,364 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
12 10 2010 17:34:25,364 INFO  ~ Optimize cache for minimal puts: disabled
12 10 2010 17:34:25,364 INFO  ~ Structured second-level cache entries: disabled
12 10 2010 17:34:25,364 INFO  ~ Statistics: disabled
12 10 2010 17:34:25,364 INFO  ~ Deleted entity synthetic identifier rollback: disabled
12 10 2010 17:34:25,364 INFO  ~ Default entity-mode: pojo
12 10 2010 17:34:25,364 INFO  ~ Named query checking : enabled
12 10 2010 17:34:25,364 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
12 10 2010 17:34:25,367 INFO  ~ building session factory
12 10 2010 17:34:25,368 DEBUG ~ Session factory constructed with filter configurations : {}
12 10 2010 17:34:25,368 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
12 10 2010 17:34:25,368 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:25,369 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:25,369 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:25,375 DEBUG ~ Static SQL for entity: models.Comment
12 10 2010 17:34:25,375 DEBUG ~  Version select: select id from Comment where id =?
12 10 2010 17:34:25,375 DEBUG ~  Snapshot select: select comment_.id, comment_.author as author30_, comment_.content as content30_, comment_.post as post30_, comment_.postedAt as postedAt30_ from Comment comment_ where comment_.id=?
12 10 2010 17:34:25,375 DEBUG ~  Insert 0: insert into Comment (author, content, post, postedAt, id) values (?, ?, ?, ?, ?)
12 10 2010 17:34:25,375 DEBUG ~  Update 0: update Comment set author=?, content=?, post=?, postedAt=? where id=?
12 10 2010 17:34:25,375 DEBUG ~  Delete 0: delete from Comment where id=?
12 10 2010 17:34:25,375 DEBUG ~  Identity insert: insert into Comment (id, author, content, post, postedAt) values (null, ?, ?, ?, ?)
12 10 2010 17:34:25,380 DEBUG ~ Static SQL for entity: models.Post
12 10 2010 17:34:25,380 DEBUG ~  Version select: select id from Post where id =?
12 10 2010 17:34:25,380 DEBUG ~  Snapshot select: select post_.id, post_.author_id as author5_32_, post_.content as content32_, post_.postedAt as postedAt32_, post_.title as title32_ from Post post_ where post_.id=?
12 10 2010 17:34:25,380 DEBUG ~  Insert 0: insert into Post (author_id, content, postedAt, title, id) values (?, ?, ?, ?, ?)
12 10 2010 17:34:25,380 DEBUG ~  Update 0: update Post set author_id=?, content=?, postedAt=?, title=? where id=?
12 10 2010 17:34:25,380 DEBUG ~  Delete 0: delete from Post where id=?
12 10 2010 17:34:25,380 DEBUG ~  Identity insert: insert into Post (id, author_id, content, postedAt, title) values (null, ?, ?, ?, ?)
12 10 2010 17:34:25,384 DEBUG ~ Static SQL for entity: models.User
12 10 2010 17:34:25,384 DEBUG ~  Version select: select id from User where id =?
12 10 2010 17:34:25,384 DEBUG ~  Snapshot select: select user_.id, user_.email as email31_, user_.fullname as fullname31_, user_.isAdmin as isAdmin31_, user_.password as password31_ from User user_ where user_.id=?
12 10 2010 17:34:25,384 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
12 10 2010 17:34:25,384 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
12 10 2010 17:34:25,384 DEBUG ~  Delete 0: delete from User where id=?
12 10 2010 17:34:25,384 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
12 10 2010 17:34:25,385 DEBUG ~ Static select for entity models.Comment [NONE]: select comment0_.id as id30_0_, comment0_.author as author30_0_, comment0_.content as content30_0_, comment0_.post as post30_0_, comment0_.postedAt as postedAt30_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:34:25,385 DEBUG ~ Static select for entity models.Comment [READ]: select comment0_.id as id30_0_, comment0_.author as author30_0_, comment0_.content as content30_0_, comment0_.post as post30_0_, comment0_.postedAt as postedAt30_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:34:25,385 DEBUG ~ Static select for entity models.Comment [UPGRADE]: select comment0_.id as id30_0_, comment0_.author as author30_0_, comment0_.content as content30_0_, comment0_.post as post30_0_, comment0_.postedAt as postedAt30_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:34:25,385 DEBUG ~ Static select for entity models.Comment [UPGRADE_NOWAIT]: select comment0_.id as id30_0_, comment0_.author as author30_0_, comment0_.content as content30_0_, comment0_.post as post30_0_, comment0_.postedAt as postedAt30_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:34:25,385 DEBUG ~ Static select for entity models.Comment [FORCE]: select comment0_.id as id30_0_, comment0_.author as author30_0_, comment0_.content as content30_0_, comment0_.post as post30_0_, comment0_.postedAt as postedAt30_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:34:25,385 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_READ]: select comment0_.id as id30_0_, comment0_.author as author30_0_, comment0_.content as content30_0_, comment0_.post as post30_0_, comment0_.postedAt as postedAt30_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:34:25,386 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_WRITE]: select comment0_.id as id30_0_, comment0_.author as author30_0_, comment0_.content as content30_0_, comment0_.post as post30_0_, comment0_.postedAt as postedAt30_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:34:25,386 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_FORCE_INCREMENT]: select comment0_.id as id30_0_, comment0_.author as author30_0_, comment0_.content as content30_0_, comment0_.post as post30_0_, comment0_.postedAt as postedAt30_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:34:25,386 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC]: select comment0_.id as id30_0_, comment0_.author as author30_0_, comment0_.content as content30_0_, comment0_.post as post30_0_, comment0_.postedAt as postedAt30_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:34:25,386 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC_FORCE_INCREMENT]: select comment0_.id as id30_0_, comment0_.author as author30_0_, comment0_.content as content30_0_, comment0_.post as post30_0_, comment0_.postedAt as postedAt30_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:34:25,386 DEBUG ~ Static select for action ACTION_MERGE on entity models.Comment: select comment0_.id as id30_0_, comment0_.author as author30_0_, comment0_.content as content30_0_, comment0_.post as post30_0_, comment0_.postedAt as postedAt30_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:34:25,386 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Comment: select comment0_.id as id30_0_, comment0_.author as author30_0_, comment0_.content as content30_0_, comment0_.post as post30_0_, comment0_.postedAt as postedAt30_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:34:25,387 DEBUG ~ Static select for entity models.Post [NONE]: select post0_.id as id32_1_, post0_.author_id as author5_32_1_, post0_.content as content32_1_, post0_.postedAt as postedAt32_1_, post0_.title as title32_1_, user1_.id as id31_0_, user1_.email as email31_0_, user1_.fullname as fullname31_0_, user1_.isAdmin as isAdmin31_0_, user1_.password as password31_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:34:25,387 DEBUG ~ Static select for entity models.Post [READ]: select post0_.id as id32_1_, post0_.author_id as author5_32_1_, post0_.content as content32_1_, post0_.postedAt as postedAt32_1_, post0_.title as title32_1_, user1_.id as id31_0_, user1_.email as email31_0_, user1_.fullname as fullname31_0_, user1_.isAdmin as isAdmin31_0_, user1_.password as password31_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:34:25,387 DEBUG ~ Static select for entity models.Post [UPGRADE]: select post0_.id as id32_0_, post0_.author_id as author5_32_0_, post0_.content as content32_0_, post0_.postedAt as postedAt32_0_, post0_.title as title32_0_ from Post post0_ where post0_.id=?
12 10 2010 17:34:25,387 DEBUG ~ Static select for entity models.Post [UPGRADE_NOWAIT]: select post0_.id as id32_0_, post0_.author_id as author5_32_0_, post0_.content as content32_0_, post0_.postedAt as postedAt32_0_, post0_.title as title32_0_ from Post post0_ where post0_.id=?
12 10 2010 17:34:25,387 DEBUG ~ Static select for entity models.Post [FORCE]: select post0_.id as id32_0_, post0_.author_id as author5_32_0_, post0_.content as content32_0_, post0_.postedAt as postedAt32_0_, post0_.title as title32_0_ from Post post0_ where post0_.id=?
12 10 2010 17:34:25,387 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_READ]: select post0_.id as id32_0_, post0_.author_id as author5_32_0_, post0_.content as content32_0_, post0_.postedAt as postedAt32_0_, post0_.title as title32_0_ from Post post0_ where post0_.id=?
12 10 2010 17:34:25,388 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_WRITE]: select post0_.id as id32_0_, post0_.author_id as author5_32_0_, post0_.content as content32_0_, post0_.postedAt as postedAt32_0_, post0_.title as title32_0_ from Post post0_ where post0_.id=?
12 10 2010 17:34:25,388 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_FORCE_INCREMENT]: select post0_.id as id32_0_, post0_.author_id as author5_32_0_, post0_.content as content32_0_, post0_.postedAt as postedAt32_0_, post0_.title as title32_0_ from Post post0_ where post0_.id=?
12 10 2010 17:34:25,388 DEBUG ~ Static select for entity models.Post [OPTIMISTIC]: select post0_.id as id32_1_, post0_.author_id as author5_32_1_, post0_.content as content32_1_, post0_.postedAt as postedAt32_1_, post0_.title as title32_1_, user1_.id as id31_0_, user1_.email as email31_0_, user1_.fullname as fullname31_0_, user1_.isAdmin as isAdmin31_0_, user1_.password as password31_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:34:25,388 DEBUG ~ Static select for entity models.Post [OPTIMISTIC_FORCE_INCREMENT]: select post0_.id as id32_1_, post0_.author_id as author5_32_1_, post0_.content as content32_1_, post0_.postedAt as postedAt32_1_, post0_.title as title32_1_, user1_.id as id31_0_, user1_.email as email31_0_, user1_.fullname as fullname31_0_, user1_.isAdmin as isAdmin31_0_, user1_.password as password31_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:34:25,388 DEBUG ~ Static select for action ACTION_MERGE on entity models.Post: select post0_.id as id32_0_, post0_.author_id as author5_32_0_, post0_.content as content32_0_, post0_.postedAt as postedAt32_0_, post0_.title as title32_0_ from Post post0_ where post0_.id=?
12 10 2010 17:34:25,389 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Post: select post0_.id as id32_0_, post0_.author_id as author5_32_0_, post0_.content as content32_0_, post0_.postedAt as postedAt32_0_, post0_.title as title32_0_ from Post post0_ where post0_.id=?
12 10 2010 17:34:25,389 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id31_0_, user0_.email as email31_0_, user0_.fullname as fullname31_0_, user0_.isAdmin as isAdmin31_0_, user0_.password as password31_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:25,389 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id31_0_, user0_.email as email31_0_, user0_.fullname as fullname31_0_, user0_.isAdmin as isAdmin31_0_, user0_.password as password31_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:25,389 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id31_0_, user0_.email as email31_0_, user0_.fullname as fullname31_0_, user0_.isAdmin as isAdmin31_0_, user0_.password as password31_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:25,389 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id31_0_, user0_.email as email31_0_, user0_.fullname as fullname31_0_, user0_.isAdmin as isAdmin31_0_, user0_.password as password31_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:25,389 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id31_0_, user0_.email as email31_0_, user0_.fullname as fullname31_0_, user0_.isAdmin as isAdmin31_0_, user0_.password as password31_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:25,389 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id31_0_, user0_.email as email31_0_, user0_.fullname as fullname31_0_, user0_.isAdmin as isAdmin31_0_, user0_.password as password31_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:25,389 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id31_0_, user0_.email as email31_0_, user0_.fullname as fullname31_0_, user0_.isAdmin as isAdmin31_0_, user0_.password as password31_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:25,390 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id31_0_, user0_.email as email31_0_, user0_.fullname as fullname31_0_, user0_.isAdmin as isAdmin31_0_, user0_.password as password31_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:25,390 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id31_0_, user0_.email as email31_0_, user0_.fullname as fullname31_0_, user0_.isAdmin as isAdmin31_0_, user0_.password as password31_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:25,390 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id31_0_, user0_.email as email31_0_, user0_.fullname as fullname31_0_, user0_.isAdmin as isAdmin31_0_, user0_.password as password31_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:25,390 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id31_0_, user0_.email as email31_0_, user0_.fullname as fullname31_0_, user0_.isAdmin as isAdmin31_0_, user0_.password as password31_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:25,390 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id31_0_, user0_.email as email31_0_, user0_.fullname as fullname31_0_, user0_.isAdmin as isAdmin31_0_, user0_.password as password31_0_ from User user0_ where user0_.id=?
12 10 2010 17:34:25,390 DEBUG ~ registered: 2c9082cd2b9f0d81012b9f937fee000b (unnamed)
12 10 2010 17:34:25,390 INFO  ~ Not binding factory to JNDI, no JNDI name configured
12 10 2010 17:34:25,390 DEBUG ~ instantiated session factory
12 10 2010 17:34:25,390 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:34:25,390 DEBUG ~ Process hbm files
12 10 2010 17:34:25,390 DEBUG ~ Process annotated classes
12 10 2010 17:34:25,390 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:34:25,391 DEBUG ~ processing extends queue
12 10 2010 17:34:25,391 DEBUG ~ processing collection mappings
12 10 2010 17:34:25,391 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:34:25,391 DEBUG ~ processing association property references
12 10 2010 17:34:25,391 DEBUG ~ processing foreign key constraints
12 10 2010 17:34:25,391 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:34:25,393 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:25,393 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:25,393 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:25,393 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:34:25,393 DEBUG ~ Process hbm files
12 10 2010 17:34:25,393 DEBUG ~ Process annotated classes
12 10 2010 17:34:25,393 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:34:25,394 DEBUG ~ processing extends queue
12 10 2010 17:34:25,394 DEBUG ~ processing collection mappings
12 10 2010 17:34:25,394 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:34:25,394 DEBUG ~ processing association property references
12 10 2010 17:34:25,394 DEBUG ~ processing foreign key constraints
12 10 2010 17:34:25,394 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:34:25,396 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:25,396 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:25,396 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:25,396 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:25,396 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:25,396 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:25,396 INFO  ~ Running hbm2ddl schema export
12 10 2010 17:34:25,397 DEBUG ~ import file not found: /import.sql
12 10 2010 17:34:25,397 INFO  ~ exporting generated schema to database
12 10 2010 17:34:25,397 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 17:34:25,398 DEBUG ~ Unsuccessful: alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 17:34:25,398 DEBUG ~ Table not found: POST in statement [alter table Post]
12 10 2010 17:34:25,398 DEBUG ~ drop table Comment if exists
12 10 2010 17:34:25,398 DEBUG ~ drop table Post if exists
12 10 2010 17:34:25,398 DEBUG ~ drop table User if exists
12 10 2010 17:34:25,398 DEBUG ~ create table Comment (id bigint generated by default as identity (start with 1), author varchar(255), content varchar(255), post varbinary(255), postedAt timestamp, primary key (id))
12 10 2010 17:34:25,398 DEBUG ~ create table Post (id bigint generated by default as identity (start with 1), content longvarchar, postedAt timestamp, title varchar(255), author_id bigint, primary key (id))
12 10 2010 17:34:25,398 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
12 10 2010 17:34:25,399 DEBUG ~ alter table Post add constraint FK260CC0A7CD013E foreign key (author_id) references User
12 10 2010 17:34:25,399 INFO  ~ schema export complete
12 10 2010 17:34:25,399 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:34:25,399 DEBUG ~ Process hbm files
12 10 2010 17:34:25,399 DEBUG ~ Process annotated classes
12 10 2010 17:34:25,399 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:34:25,399 DEBUG ~ processing extends queue
12 10 2010 17:34:25,399 DEBUG ~ processing collection mappings
12 10 2010 17:34:25,399 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:34:25,400 DEBUG ~ processing association property references
12 10 2010 17:34:25,400 DEBUG ~ processing foreign key constraints
12 10 2010 17:34:25,400 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:34:25,402 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:25,402 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:25,402 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:25,402 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:34:25,402 DEBUG ~ Process hbm files
12 10 2010 17:34:25,402 DEBUG ~ Process annotated classes
12 10 2010 17:34:25,402 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:34:25,402 DEBUG ~ processing extends queue
12 10 2010 17:34:25,402 DEBUG ~ processing collection mappings
12 10 2010 17:34:25,402 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:34:25,402 DEBUG ~ processing association property references
12 10 2010 17:34:25,402 DEBUG ~ processing foreign key constraints
12 10 2010 17:34:25,402 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:34:25,404 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:25,404 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:25,404 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:25,404 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:25,404 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:25,405 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:34:25,405 DEBUG ~ Checking 0 named HQL queries
12 10 2010 17:34:25,405 DEBUG ~ Checking 0 named SQL queries
12 10 2010 17:34:25,414 DEBUG ~ opened session at timestamp: 12868724654
12 10 2010 17:34:25,414 DEBUG ~ begin
12 10 2010 17:34:25,414 DEBUG ~ opening JDBC connection
12 10 2010 17:34:25,414 DEBUG ~ current autocommit status: true
12 10 2010 17:34:25,414 DEBUG ~ disabling autocommit
12 10 2010 17:34:25,476 DEBUG ~ commit
12 10 2010 17:34:25,476 DEBUG ~ re-enabling autocommit
12 10 2010 17:34:25,476 DEBUG ~ committed JDBC Connection
12 10 2010 17:34:25,476 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:34:25,476 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:34:26,799 DEBUG ~ opened session at timestamp: 12868724667
12 10 2010 17:34:26,800 DEBUG ~ begin
12 10 2010 17:34:26,800 DEBUG ~ opening JDBC connection
12 10 2010 17:34:26,800 DEBUG ~ current autocommit status: true
12 10 2010 17:34:26,800 DEBUG ~ disabling autocommit
12 10 2010 17:34:26,822 DEBUG ~ commit
12 10 2010 17:34:26,823 DEBUG ~ re-enabling autocommit
12 10 2010 17:34:26,823 DEBUG ~ committed JDBC Connection
12 10 2010 17:34:26,823 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:34:26,823 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:34:26,841 DEBUG ~ opened session at timestamp: 12868724668
12 10 2010 17:34:26,841 DEBUG ~ begin
12 10 2010 17:34:26,841 DEBUG ~ opening JDBC connection
12 10 2010 17:34:26,841 DEBUG ~ current autocommit status: true
12 10 2010 17:34:26,841 DEBUG ~ disabling autocommit
12 10 2010 17:34:27,094 DEBUG ~ executing identity-insert immediately
12 10 2010 17:34:27,094 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,095 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,095 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,095 DEBUG ~ Natively generated identity: 1
12 10 2010 17:34:27,095 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,095 DEBUG ~ processing flush-time cascades
12 10 2010 17:34:27,095 DEBUG ~ dirty checking collections
12 10 2010 17:34:27,095 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:34:27,095 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:34:27,095 DEBUG ~ listing entities:
12 10 2010 17:34:27,095 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:34:27,096 DEBUG ~ parse() - HQL: from models.User where email = ?
12 10 2010 17:34:27,098 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'email'
          \-[PARAM] Node: '?'

12 10 2010 17:34:27,098 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:27,098 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:34:27,098 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 17:34:27,099 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:34:27,099 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 17:34:27,099 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 17:34:27,099 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:34:27,099 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.email {synthetic-alias} email ) ? ) ) )
12 10 2010 17:34:27,099 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:34:27,099 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 17:34:27,099 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:34:27,099 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id31_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email31_, user0_.fullname as fullname31_, user0_.isAdmin as isAdmin31_, user0_.password as password31_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'email' {originalText=email}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 17:34:27,100 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:27,100 DEBUG ~ HQL: from models.User where email = ?
12 10 2010 17:34:27,100 DEBUG ~ SQL: select user0_.id as id31_, user0_.email as email31_, user0_.fullname as fullname31_, user0_.isAdmin as isAdmin31_, user0_.password as password31_ from User user0_ where user0_.email=?
12 10 2010 17:34:27,100 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:27,100 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,101 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:34:27,101 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 17:34:27,101 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:34:27,101 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,101 DEBUG ~ initializing non-lazy collections
12 10 2010 17:34:27,102 DEBUG ~ executing identity-insert immediately
12 10 2010 17:34:27,102 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,102 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,102 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,102 DEBUG ~ Natively generated identity: 2
12 10 2010 17:34:27,102 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,102 DEBUG ~ processing flush-time cascades
12 10 2010 17:34:27,103 DEBUG ~ dirty checking collections
12 10 2010 17:34:27,103 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:34:27,103 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:34:27,103 DEBUG ~ listing entities:
12 10 2010 17:34:27,103 DEBUG ~ models.User{id=2, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:34:27,103 DEBUG ~ parse() - HQL: from models.User where email = ? AND password = ?
12 10 2010 17:34:27,106 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'AND'
          +-[EQ] Node: '='
          |  +-[IDENT] Node: 'email'
          |  \-[PARAM] Node: '?'
          \-[EQ] Node: '='
             +-[IDENT] Node: 'password'
             \-[PARAM] Node: '?'

12 10 2010 17:34:27,106 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:27,106 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:34:27,106 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 17:34:27,106 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:34:27,106 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 17:34:27,106 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 17:34:27,106 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:34:27,106 DEBUG ~ getDataType() : password -> org.hibernate.type.StringType@18b3c498
12 10 2010 17:34:27,106 DEBUG ~ Resolved :  {synthetic-alias}.password -> user0_.password
12 10 2010 17:34:27,107 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:34:27,107 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( AND ( = ( user0_.email {synthetic-alias} email ) ? ) ( = ( user0_.password {synthetic-alias} password ) ? ) ) ) )
12 10 2010 17:34:27,107 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:34:27,107 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 17:34:27,107 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:34:27,107 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id31_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email31_, user0_.fullname as fullname31_, user0_.isAdmin as isAdmin31_, user0_.password as password31_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'AND'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  |  \-[IDENT] IdentNode: 'email' {originalText=email}
          |  \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'user0_.password' {propertyName=password,dereferenceType=ALL,propertyPath=password,path={synthetic-alias}.password,tableAlias=user0_,className=models.User,classAlias=null}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'password' {originalText=password}
             \-[PARAM] ParameterNode: '?' {ordinal=1, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 17:34:27,108 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:27,108 DEBUG ~ HQL: from models.User where email = ? AND password = ?
12 10 2010 17:34:27,108 DEBUG ~ SQL: select user0_.id as id31_, user0_.email as email31_, user0_.fullname as fullname31_, user0_.isAdmin as isAdmin31_, user0_.password as password31_ from User user0_ where user0_.email=? and user0_.password=?
12 10 2010 17:34:27,108 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:27,109 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,109 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:34:27,109 DEBUG ~ result row: EntityKey[models.User#2]
12 10 2010 17:34:27,109 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:34:27,109 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,109 DEBUG ~ initializing non-lazy collections
12 10 2010 17:34:27,110 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,110 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:34:27,110 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:34:27,110 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,110 DEBUG ~ initializing non-lazy collections
12 10 2010 17:34:27,110 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,110 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:34:27,110 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:34:27,110 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,110 DEBUG ~ initializing non-lazy collections
12 10 2010 17:34:27,111 DEBUG ~ executing identity-insert immediately
12 10 2010 17:34:27,111 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,111 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,111 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,112 DEBUG ~ Natively generated identity: 3
12 10 2010 17:34:27,112 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,112 DEBUG ~ processing flush-time cascades
12 10 2010 17:34:27,112 DEBUG ~ dirty checking collections
12 10 2010 17:34:27,112 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:34:27,112 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:34:27,112 DEBUG ~ listing entities:
12 10 2010 17:34:27,112 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:34:27,112 DEBUG ~ executing identity-insert immediately
12 10 2010 17:34:27,112 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,113 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,113 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,113 DEBUG ~ Natively generated identity: 1
12 10 2010 17:34:27,113 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,113 DEBUG ~ processing flush-time cascades
12 10 2010 17:34:27,113 DEBUG ~ dirty checking collections
12 10 2010 17:34:27,113 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 17:34:27,113 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:34:27,113 DEBUG ~ listing entities:
12 10 2010 17:34:27,113 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:34:27,114 DEBUG ~ models.Post{content=hello world, id=1, author=models.User#3, title=first post, postedAt=2010-10-12 17:34:27}
12 10 2010 17:34:27,116 DEBUG ~ parse() - HQL: select count(e) from models.Post e
12 10 2010 17:34:27,119 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'Post'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

12 10 2010 17:34:27,119 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:27,119 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:34:27,119 DEBUG ~ FromClause{level=1} :  models.Post (e) -> post0_
12 10 2010 17:34:27,119 DEBUG ~ Resolved :  e -> post0_.id
12 10 2010 17:34:27,119 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:34:27,119 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count post0_.id ) ) ( FromClause{level=1} Post post0_ ) )
12 10 2010 17:34:27,120 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 17:34:27,120 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:34:27,120 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'post0_.id' {alias=e, className=models.Post, tableAlias=post0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}

12 10 2010 17:34:27,120 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:27,120 DEBUG ~ HQL: select count(e) from models.Post e
12 10 2010 17:34:27,120 DEBUG ~ SQL: select count(post0_.id) as col_0_0_ from Post post0_
12 10 2010 17:34:27,120 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:27,120 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,121 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:34:27,121 DEBUG ~ result row: 
12 10 2010 17:34:27,121 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:34:27,121 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,121 DEBUG ~ initializing non-lazy collections
12 10 2010 17:34:27,122 DEBUG ~ parse() - HQL: from models.Post where author = ?
12 10 2010 17:34:27,124 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'author'
          \-[PARAM] Node: '?'

12 10 2010 17:34:27,124 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:27,124 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:34:27,124 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
12 10 2010 17:34:27,124 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:34:27,125 DEBUG ~ getDataType() : author -> org.hibernate.type.ManyToOneType(models.User)
12 10 2010 17:34:27,125 DEBUG ~ dereferenceShortcut() : property author in models.Post does not require a join.
12 10 2010 17:34:27,125 DEBUG ~ terminal propertyPath = [author]
12 10 2010 17:34:27,125 DEBUG ~ Resolved :  {synthetic-alias}.author -> post0_.author_id
12 10 2010 17:34:27,125 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:34:27,125 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( = ( post0_.author_id {synthetic-alias} author ) ? ) ) )
12 10 2010 17:34:27,125 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:34:27,125 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 17:34:27,125 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:34:27,126 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id32_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_32_, post0_.content as content32_, post0_.postedAt as postedAt32_, post0_.title as title32_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'post0_.author_id' {propertyName=author,dereferenceType=0,propertyPath=author,path={synthetic-alias}.author,tableAlias=post0_,className=models.Post,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'author' {originalText=author}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.ManyToOneType(models.User)}

12 10 2010 17:34:27,126 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:27,126 DEBUG ~ HQL: from models.Post where author = ?
12 10 2010 17:34:27,126 DEBUG ~ SQL: select post0_.id as id32_, post0_.author_id as author5_32_, post0_.content as content32_, post0_.postedAt as postedAt32_, post0_.title as title32_ from Post post0_ where post0_.author_id=?
12 10 2010 17:34:27,126 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:27,126 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,127 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:34:27,127 DEBUG ~ result row: EntityKey[models.Post#1]
12 10 2010 17:34:27,127 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:34:27,127 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,127 DEBUG ~ initializing non-lazy collections
12 10 2010 17:34:27,128 DEBUG ~ executing identity-insert immediately
12 10 2010 17:34:27,128 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,128 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,129 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,129 DEBUG ~ Natively generated identity: 4
12 10 2010 17:34:27,129 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,129 DEBUG ~ processing flush-time cascades
12 10 2010 17:34:27,129 DEBUG ~ dirty checking collections
12 10 2010 17:34:27,129 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:34:27,129 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:34:27,129 DEBUG ~ listing entities:
12 10 2010 17:34:27,129 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:34:27,130 DEBUG ~ executing identity-insert immediately
12 10 2010 17:34:27,130 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,130 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,130 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,130 DEBUG ~ Natively generated identity: 2
12 10 2010 17:34:27,130 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,131 DEBUG ~ processing flush-time cascades
12 10 2010 17:34:27,131 DEBUG ~ dirty checking collections
12 10 2010 17:34:27,131 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 17:34:27,131 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:34:27,131 DEBUG ~ listing entities:
12 10 2010 17:34:27,131 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, postedAt=2010-10-12 17:34:27}
12 10 2010 17:34:27,131 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:34:27,144 DEBUG ~ executing identity-insert immediately
12 10 2010 17:34:27,144 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,145 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,145 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,145 DEBUG ~ Natively generated identity: 1
12 10 2010 17:34:27,145 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,146 DEBUG ~ processing flush-time cascades
12 10 2010 17:34:27,146 DEBUG ~ dirty checking collections
12 10 2010 17:34:27,152 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 17:34:27,152 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:34:27,152 DEBUG ~ listing entities:
12 10 2010 17:34:27,152 DEBUG ~ models.Comment{content=nice post, id=1, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f4b5dc45521c2e2a83828084cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8082f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808082f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8082cc8088e6f5ececeee1ede5f180fe8082cc8088f0e1f3f3f7eff2e4f180fe8082f8f180fe8084808080808080808480f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f13063af8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:34:27}
12 10 2010 17:34:27,153 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, postedAt=2010-10-12 17:34:27}
12 10 2010 17:34:27,153 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:34:27,153 DEBUG ~ executing identity-insert immediately
12 10 2010 17:34:27,153 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,154 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,154 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,154 DEBUG ~ Natively generated identity: 2
12 10 2010 17:34:27,154 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,154 DEBUG ~ processing flush-time cascades
12 10 2010 17:34:27,155 DEBUG ~ dirty checking collections
12 10 2010 17:34:27,155 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 17:34:27,155 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:34:27,155 DEBUG ~ listing entities:
12 10 2010 17:34:27,156 DEBUG ~ models.Comment{content=nice post, id=1, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f4b5dc45521c2e2a83828084cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8082f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808082f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8082cc8088e6f5ececeee1ede5f180fe8082cc8088f0e1f3f3f7eff2e4f180fe8082f8f180fe8084808080808080808480f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f13063af8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:34:27}
12 10 2010 17:34:27,157 DEBUG ~ models.Comment{content=i knew that !, id=2, author=Tom, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f4b5dc45521c2e2a83828084cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8082f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808082f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8082cc8088e6f5ececeee1ede5f180fe8082cc8088f0e1f3f3f7eff2e4f180fe8082f8f180fe8084808080808080808480f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f13063af8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:34:27}
12 10 2010 17:34:27,157 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, postedAt=2010-10-12 17:34:27}
12 10 2010 17:34:27,157 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:34:27,158 DEBUG ~ parse() - HQL: from models.Comment where post = ?
12 10 2010 17:34:27,161 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Comment'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'post'
          \-[PARAM] Node: '?'

12 10 2010 17:34:27,161 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:27,161 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:34:27,161 DEBUG ~ FromClause{level=1} :  models.Comment (no alias) -> comment0_
12 10 2010 17:34:27,161 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:34:27,161 DEBUG ~ getDataType() : post -> org.hibernate.type.SerializableType@504c8a2
12 10 2010 17:34:27,161 DEBUG ~ Resolved :  {synthetic-alias}.post -> comment0_.post
12 10 2010 17:34:27,161 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:34:27,161 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Comment comment0_ ) ( where ( = ( comment0_.post {synthetic-alias} post ) ? ) ) )
12 10 2010 17:34:27,162 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:34:27,162 DEBUG ~ Using FROM fragment [Comment comment0_]
12 10 2010 17:34:27,162 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:34:27,162 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Comment)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'comment0_.id as id30_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Comment,tableAlias=comment0_,origin=null,columns={,className=models.Comment}}}
    |  \-[SQL_TOKEN] SqlFragment: 'comment0_.author as author30_, comment0_.content as content30_, comment0_.post as post30_, comment0_.postedAt as postedAt30_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[comment0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Comment comment0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Comment,tableAlias=comment0_,origin=null,columns={,className=models.Comment}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'comment0_.post' {propertyName=post,dereferenceType=ALL,propertyPath=post,path={synthetic-alias}.post,tableAlias=comment0_,className=models.Comment,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'post' {originalText=post}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.SerializableType@504c8a2}

12 10 2010 17:34:27,162 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:27,163 DEBUG ~ HQL: from models.Comment where post = ?
12 10 2010 17:34:27,163 DEBUG ~ SQL: select comment0_.id as id30_, comment0_.author as author30_, comment0_.content as content30_, comment0_.post as post30_, comment0_.postedAt as postedAt30_ from Comment comment0_ where comment0_.post=?
12 10 2010 17:34:27,163 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:34:27,163 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:34:27,164 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:34:27,164 DEBUG ~ result row: EntityKey[models.Comment#1]
12 10 2010 17:34:27,164 DEBUG ~ result row: EntityKey[models.Comment#2]
12 10 2010 17:34:27,164 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:34:27,164 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:34:27,164 DEBUG ~ initializing non-lazy collections
12 10 2010 17:34:27,192 DEBUG ~ commit
12 10 2010 17:34:27,192 DEBUG ~ processing flush-time cascades
12 10 2010 17:34:27,192 DEBUG ~ dirty checking collections
12 10 2010 17:34:27,192 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 17:34:27,192 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:34:27,192 DEBUG ~ listing entities:
12 10 2010 17:34:27,193 DEBUG ~ models.Comment{content=nice post, id=1, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f4b5dc45521c2e2a83828084cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8082f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808082f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8082cc8088e6f5ececeee1ede5f180fe8082cc8088f0e1f3f3f7eff2e4f180fe8082f8f180fe8084808080808080808480f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f13063af8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:34:27}
12 10 2010 17:34:27,194 DEBUG ~ models.Comment{content=i knew that !, id=2, author=Tom, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f4b5dc45521c2e2a83828084cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8082f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808082f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8082cc8088e6f5ececeee1ede5f180fe8082cc8088f0e1f3f3f7eff2e4f180fe8082f8f180fe8084808080808080808480f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f13063af8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:34:27}
12 10 2010 17:34:27,194 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, postedAt=2010-10-12 17:34:27}
12 10 2010 17:34:27,194 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:34:27,194 DEBUG ~ re-enabling autocommit
12 10 2010 17:34:27,194 DEBUG ~ committed JDBC Connection
12 10 2010 17:34:27,194 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:34:27,194 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:34:27,212 DEBUG ~ opened session at timestamp: 12868724672
12 10 2010 17:34:27,212 DEBUG ~ begin
12 10 2010 17:34:27,213 DEBUG ~ opening JDBC connection
12 10 2010 17:34:27,213 DEBUG ~ current autocommit status: true
12 10 2010 17:34:27,213 DEBUG ~ disabling autocommit
12 10 2010 17:34:27,226 DEBUG ~ commit
12 10 2010 17:34:27,226 DEBUG ~ re-enabling autocommit
12 10 2010 17:34:27,226 DEBUG ~ committed JDBC Connection
12 10 2010 17:34:27,226 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:34:27,226 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:36:52,708 ERROR ~ 

@645j8gm9l
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 66)
The file /test/BasicTest.scala could not be compiled. Error raised is : not found: value assertNotEqual

play.exceptions.CompilationException: not found: value assertNotEqual
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 17:38:17,174 ERROR ~ 

@645j8gm9m
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 83)
The file /test/BasicTest.scala could not be compiled. Error raised is : not found: value bobposts

play.exceptions.CompilationException: not found: value bobposts
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 17:38:31,241 ERROR ~ 

@645j8gm9n
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 86)
The file /test/BasicTest.scala could not be compiled. Error raised is : value comments is not a member of Option[models.Post]

play.exceptions.CompilationException: value comments is not a member of Option[models.Post]
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 17:39:40,755 ERROR ~ 

@645j8gm9o
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 86)
The file /test/BasicTest.scala could not be compiled. Error raised is : value comments is not a member of Option[models.Post]

play.exceptions.CompilationException: value comments is not a member of Option[models.Post]
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 17:39:42,905 ERROR ~ 

@645j8gm9p
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 86)
The file /test/BasicTest.scala could not be compiled. Error raised is : value comments is not a member of Option[models.Post]

play.exceptions.CompilationException: value comments is not a member of Option[models.Post]
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 17:41:44,206 ERROR ~ 

@645j8gma0
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 86)
The file /test/BasicTest.scala could not be compiled. Error raised is : value comments is not a member of Option[models.Post]

play.exceptions.CompilationException: value comments is not a member of Option[models.Post]
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 17:41:54,370 ERROR ~ 

@645j8gma1
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 86)
The file /test/BasicTest.scala could not be compiled. Error raised is : bobposts.comments.size of type Int does not take parameters

play.exceptions.CompilationException: bobposts.comments.size of type Int does not take parameters
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 17:45:35,771 ERROR ~ 

@645j8gma2
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 86)
The file /test/BasicTest.scala could not be compiled. Error raised is : bobposts.get.comments.size of type Int does not take parameters

play.exceptions.CompilationException: bobposts.get.comments.size of type Int does not take parameters
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 17:45:44,381 ERROR ~ 

@645j8gma3
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 86)
The file /test/BasicTest.scala could not be compiled. Error raised is : bobposts.get of type models.Post does not take parameters

play.exceptions.CompilationException: bobposts.get of type models.Post does not take parameters
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 17:46:10,647 ERROR ~ 

@645j8gma4
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 86)
The file /test/BasicTest.scala could not be compiled. Error raised is : value comments is not a member of Option[models.Post]

play.exceptions.CompilationException: value comments is not a member of Option[models.Post]
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 17:47:57,068 ERROR ~ 

@645j8gma5
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 86)
The file /test/BasicTest.scala could not be compiled. Error raised is : posts.comments.size of type Int does not take parameters

play.exceptions.CompilationException: posts.comments.size of type Int does not take parameters
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 17:48:00,029 ERROR ~ 

@645j8gma6
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 86)
The file /test/BasicTest.scala could not be compiled. Error raised is : posts.comments.size of type Int does not take parameters

play.exceptions.CompilationException: posts.comments.size of type Int does not take parameters
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 17:48:09,394 ERROR ~ 

@645j8gma7
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 86)
The file /test/BasicTest.scala could not be compiled. Error raised is : posts.comments.size of type Int does not take parameters

play.exceptions.CompilationException: posts.comments.size of type Int does not take parameters
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 17:48:23,559 ERROR ~ 

@645j8gma8
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 87)
The file /test/BasicTest.scala could not be compiled. Error raised is : value get is not a member of List[models.Comment]

play.exceptions.CompilationException: value get is not a member of List[models.Comment]
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 17:48:36,554 ERROR ~ 

@645j8gma9
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 92)
The file /test/BasicTest.scala could not be compiled. Error raised is : value delete is not a member of Option[models.Post]

play.exceptions.CompilationException: value delete is not a member of Option[models.Post]
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 17:48:50,141 ERROR ~ 

@645j8gmaa
Internal Server Error (500) for request GET /@tests

Compilation error (In /app/models/Post.scala around line 16)
The file /app/models/Post.scala could not be compiled. Error raised is : type mismatch;  found   : java.util.ArrayList[models.Comment]  required: List[models.Comment]

play.exceptions.CompilationException: type mismatch;
 found   : java.util.ArrayList[models.Comment]
 required: List[models.Comment]
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 17:49:08,691 ERROR ~ 

@645j8gmab
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 87)
The file /test/BasicTest.scala could not be compiled. Error raised is : posts.comments of type java.util.List[models.Comment] does not take parameters

play.exceptions.CompilationException: posts.comments of type java.util.List[models.Comment] does not take parameters
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 17:49:22,555 INFO  ~ closing
12 10 2010 17:49:22,555 INFO  ~ Running hbm2ddl schema export
12 10 2010 17:49:22,555 DEBUG ~ import file not found: /import.sql
12 10 2010 17:49:22,555 INFO  ~ exporting generated schema to database
12 10 2010 17:49:22,555 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 17:49:22,555 DEBUG ~ drop table Comment if exists
12 10 2010 17:49:22,556 DEBUG ~ drop table Post if exists
12 10 2010 17:49:22,556 DEBUG ~ drop table User if exists
12 10 2010 17:49:22,556 INFO  ~ schema export complete
12 10 2010 17:49:22,588 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 17:49:22,588 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
12 10 2010 17:49:22,588 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
12 10 2010 17:49:22,588 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
12 10 2010 17:49:22,588 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
12 10 2010 17:49:22,588 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
12 10 2010 17:49:22,588 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
12 10 2010 17:49:22,588 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
12 10 2010 17:49:22,588 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
12 10 2010 17:49:22,588 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
12 10 2010 17:49:22,588 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 17:49:22,588 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
12 10 2010 17:49:22,588 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
12 10 2010 17:49:22,588 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
12 10 2010 17:49:22,590 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:49:22,590 DEBUG ~ Process hbm files
12 10 2010 17:49:22,590 DEBUG ~ Process annotated classes
12 10 2010 17:49:22,590 INFO  ~ Binding entity from annotated class: models.Comment
12 10 2010 17:49:22,590 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 17:49:22,590 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 17:49:22,590 DEBUG ~ Import with entity name Comment
12 10 2010 17:49:22,591 INFO  ~ Bind entity models.Comment on table Comment
12 10 2010 17:49:22,594 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 17:49:22,594 DEBUG ~ binding property id with lazy=false
12 10 2010 17:49:22,594 DEBUG ~ building SimpleValue for id
12 10 2010 17:49:22,594 DEBUG ~ Building property id
12 10 2010 17:49:22,594 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=author, insertable=true, updatable=true, unique=false}
12 10 2010 17:49:22,594 DEBUG ~ binding property author with lazy=false
12 10 2010 17:49:22,594 DEBUG ~ building SimpleValue for author
12 10 2010 17:49:22,594 DEBUG ~ Building property author
12 10 2010 17:49:22,594 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=content, insertable=true, updatable=true, unique=false}
12 10 2010 17:49:22,594 DEBUG ~ binding property content with lazy=false
12 10 2010 17:49:22,594 DEBUG ~ building SimpleValue for content
12 10 2010 17:49:22,594 DEBUG ~ Building property content
12 10 2010 17:49:22,595 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=post, insertable=true, updatable=true, unique=false}
12 10 2010 17:49:22,595 DEBUG ~ binding property post with lazy=false
12 10 2010 17:49:22,595 DEBUG ~ building SimpleValue for post
12 10 2010 17:49:22,595 DEBUG ~ Building property post
12 10 2010 17:49:22,595 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
12 10 2010 17:49:22,595 DEBUG ~ binding property postedAt with lazy=false
12 10 2010 17:49:22,595 DEBUG ~ building SimpleValue for postedAt
12 10 2010 17:49:22,595 DEBUG ~ Building property postedAt
12 10 2010 17:49:22,595 INFO  ~ Binding entity from annotated class: models.User
12 10 2010 17:49:22,595 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 17:49:22,595 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 17:49:22,595 DEBUG ~ Import with entity name User
12 10 2010 17:49:22,595 INFO  ~ Bind entity models.User on table User
12 10 2010 17:49:22,597 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 17:49:22,597 DEBUG ~ binding property id with lazy=false
12 10 2010 17:49:22,597 DEBUG ~ building SimpleValue for id
12 10 2010 17:49:22,597 DEBUG ~ Building property id
12 10 2010 17:49:22,597 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
12 10 2010 17:49:22,597 DEBUG ~ binding property email with lazy=false
12 10 2010 17:49:22,597 DEBUG ~ building SimpleValue for email
12 10 2010 17:49:22,597 DEBUG ~ Building property email
12 10 2010 17:49:22,597 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
12 10 2010 17:49:22,597 DEBUG ~ binding property fullname with lazy=false
12 10 2010 17:49:22,597 DEBUG ~ building SimpleValue for fullname
12 10 2010 17:49:22,597 DEBUG ~ Building property fullname
12 10 2010 17:49:22,597 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
12 10 2010 17:49:22,598 DEBUG ~ binding property isAdmin with lazy=false
12 10 2010 17:49:22,598 DEBUG ~ building SimpleValue for isAdmin
12 10 2010 17:49:22,598 DEBUG ~ Building property isAdmin
12 10 2010 17:49:22,598 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
12 10 2010 17:49:22,598 DEBUG ~ binding property password with lazy=false
12 10 2010 17:49:22,598 DEBUG ~ building SimpleValue for password
12 10 2010 17:49:22,598 DEBUG ~ Building property password
12 10 2010 17:49:22,598 INFO  ~ Binding entity from annotated class: models.Post
12 10 2010 17:49:22,598 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 17:49:22,598 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 17:49:22,598 DEBUG ~ Import with entity name Post
12 10 2010 17:49:22,598 INFO  ~ Bind entity models.Post on table Post
12 10 2010 17:49:22,602 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 17:49:22,602 DEBUG ~ binding property id with lazy=false
12 10 2010 17:49:22,603 DEBUG ~ building SimpleValue for id
12 10 2010 17:49:22,603 DEBUG ~ Building property id
12 10 2010 17:49:22,603 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
12 10 2010 17:49:22,603 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=author, insertable=true, updatable=true, unique=false}
12 10 2010 17:49:22,603 DEBUG ~ Building property author
12 10 2010 17:49:22,603 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments, insertable=true, updatable=true, unique=false}
12 10 2010 17:49:22,603 DEBUG ~ binding property comments with lazy=false
12 10 2010 17:49:22,603 DEBUG ~ building SimpleValue for comments
12 10 2010 17:49:22,603 DEBUG ~ Building property comments
12 10 2010 17:49:22,603 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=content, insertable=true, updatable=true, unique=false}
12 10 2010 17:49:22,603 DEBUG ~ binding property content with lazy=false
12 10 2010 17:49:22,604 DEBUG ~ building SimpleValue for content
12 10 2010 17:49:22,604 DEBUG ~ Building property content
12 10 2010 17:49:22,604 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
12 10 2010 17:49:22,604 DEBUG ~ binding property postedAt with lazy=false
12 10 2010 17:49:22,604 DEBUG ~ building SimpleValue for postedAt
12 10 2010 17:49:22,604 DEBUG ~ Building property postedAt
12 10 2010 17:49:22,604 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=title, insertable=true, updatable=true, unique=false}
12 10 2010 17:49:22,604 DEBUG ~ binding property title with lazy=false
12 10 2010 17:49:22,604 DEBUG ~ building SimpleValue for title
12 10 2010 17:49:22,604 DEBUG ~ Building property title
12 10 2010 17:49:22,604 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 17:49:22,604 DEBUG ~ setting SimpleValue typeName for author
12 10 2010 17:49:22,604 DEBUG ~ setting SimpleValue typeName for content
12 10 2010 17:49:22,604 DEBUG ~ setting SimpleValue typeName for post
12 10 2010 17:49:22,604 DEBUG ~ setting SimpleValue typeName for postedAt
12 10 2010 17:49:22,604 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 17:49:22,605 DEBUG ~ setting SimpleValue typeName for email
12 10 2010 17:49:22,605 DEBUG ~ setting SimpleValue typeName for fullname
12 10 2010 17:49:22,605 DEBUG ~ setting SimpleValue typeName for isAdmin
12 10 2010 17:49:22,605 DEBUG ~ setting SimpleValue typeName for password
12 10 2010 17:49:22,605 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 17:49:22,605 DEBUG ~ setting SimpleValue typeName for comments
12 10 2010 17:49:22,605 DEBUG ~ setting SimpleValue typeName for content
12 10 2010 17:49:22,605 DEBUG ~ setting SimpleValue typeName for postedAt
12 10 2010 17:49:22,605 DEBUG ~ setting SimpleValue typeName for title
12 10 2010 17:49:22,605 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:49:22,605 DEBUG ~ processing extends queue
12 10 2010 17:49:22,605 DEBUG ~ processing collection mappings
12 10 2010 17:49:22,605 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:49:22,605 DEBUG ~ processing association property references
12 10 2010 17:49:22,605 DEBUG ~ processing foreign key constraints
12 10 2010 17:49:22,605 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:49:22,606 INFO  ~ Hibernate Validator not found: ignoring
12 10 2010 17:49:22,617 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
12 10 2010 17:49:22,617 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
12 10 2010 17:49:22,620 DEBUG ~ Search not present in classpath, ignoring event listener registration.
12 10 2010 17:49:22,620 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
12 10 2010 17:49:22,620 DEBUG ~ Preparing to build session factory with filters : {}
12 10 2010 17:49:22,620 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:49:22,620 DEBUG ~ Process hbm files
12 10 2010 17:49:22,620 DEBUG ~ Process annotated classes
12 10 2010 17:49:22,620 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:49:22,620 DEBUG ~ processing extends queue
12 10 2010 17:49:22,620 DEBUG ~ processing collection mappings
12 10 2010 17:49:22,620 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:49:22,620 DEBUG ~ processing association property references
12 10 2010 17:49:22,620 DEBUG ~ processing foreign key constraints
12 10 2010 17:49:22,620 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:49:22,662 ERROR ~ 

@645j8gmac
Internal Server Error (500) for request GET /@tests

JPA error
A JPA error occurred (Unable to build EntityManagerFactory): Could not determine type for: java.util.List, at table: Post, for columns: [org.hibernate.mapping.Column(comments)]

play.exceptions.JPAException: Unable to build EntityManagerFactory
	at play.db.jpa.JPAPlugin.onApplicationStart(JPAPlugin.java:218)
	at play.Play.start(Play.java:395)
	at play.Play.detectChanges(Play.java:502)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
Caused by: org.hibernate.MappingException: Could not determine type for: java.util.List, at table: Post, for columns: [org.hibernate.mapping.Column(comments)]
	at org.hibernate.mapping.SimpleValue.getType(SimpleValue.java:291)
	at org.hibernate.mapping.SimpleValue.isValid(SimpleValue.java:275)
	at org.hibernate.mapping.Property.isValid(Property.java:217)
	at org.hibernate.mapping.PersistentClass.validate(PersistentClass.java:464)
	at org.hibernate.mapping.RootClass.validate(RootClass.java:236)
	at org.hibernate.cfg.Configuration.validate(Configuration.java:1193)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1378)
	at org.hibernate.cfg.AnnotationConfiguration.buildSessionFactory(AnnotationConfiguration.java:954)
	at org.hibernate.ejb.Ejb3Configuration.buildEntityManagerFactory(Ejb3Configuration.java:891)
	at play.db.jpa.JPAPlugin.onApplicationStart(JPAPlugin.java:216)
	... 4 more
12 10 2010 17:50:11,388 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 17:50:11,389 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
12 10 2010 17:50:11,389 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
12 10 2010 17:50:11,389 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
12 10 2010 17:50:11,389 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
12 10 2010 17:50:11,389 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
12 10 2010 17:50:11,389 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
12 10 2010 17:50:11,389 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
12 10 2010 17:50:11,389 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
12 10 2010 17:50:11,389 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
12 10 2010 17:50:11,389 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 17:50:11,389 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
12 10 2010 17:50:11,389 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
12 10 2010 17:50:11,389 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
12 10 2010 17:50:11,390 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:50:11,390 DEBUG ~ Process hbm files
12 10 2010 17:50:11,390 DEBUG ~ Process annotated classes
12 10 2010 17:50:11,390 INFO  ~ Binding entity from annotated class: models.Comment
12 10 2010 17:50:11,390 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 17:50:11,390 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 17:50:11,391 DEBUG ~ Import with entity name Comment
12 10 2010 17:50:11,391 INFO  ~ Bind entity models.Comment on table Comment
12 10 2010 17:50:11,393 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:11,393 DEBUG ~ binding property id with lazy=false
12 10 2010 17:50:11,394 DEBUG ~ building SimpleValue for id
12 10 2010 17:50:11,394 DEBUG ~ Building property id
12 10 2010 17:50:11,394 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=author, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:11,394 DEBUG ~ binding property author with lazy=false
12 10 2010 17:50:11,394 DEBUG ~ building SimpleValue for author
12 10 2010 17:50:11,394 DEBUG ~ Building property author
12 10 2010 17:50:11,394 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=content, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:11,394 DEBUG ~ binding property content with lazy=false
12 10 2010 17:50:11,394 DEBUG ~ building SimpleValue for content
12 10 2010 17:50:11,394 DEBUG ~ Building property content
12 10 2010 17:50:11,394 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=post, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:11,394 DEBUG ~ binding property post with lazy=false
12 10 2010 17:50:11,394 DEBUG ~ building SimpleValue for post
12 10 2010 17:50:11,395 DEBUG ~ Building property post
12 10 2010 17:50:11,395 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:11,395 DEBUG ~ binding property postedAt with lazy=false
12 10 2010 17:50:11,395 DEBUG ~ building SimpleValue for postedAt
12 10 2010 17:50:11,395 DEBUG ~ Building property postedAt
12 10 2010 17:50:11,395 INFO  ~ Binding entity from annotated class: models.User
12 10 2010 17:50:11,395 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 17:50:11,395 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 17:50:11,395 DEBUG ~ Import with entity name User
12 10 2010 17:50:11,395 INFO  ~ Bind entity models.User on table User
12 10 2010 17:50:11,397 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:11,397 DEBUG ~ binding property id with lazy=false
12 10 2010 17:50:11,397 DEBUG ~ building SimpleValue for id
12 10 2010 17:50:11,397 DEBUG ~ Building property id
12 10 2010 17:50:11,397 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:11,397 DEBUG ~ binding property email with lazy=false
12 10 2010 17:50:11,397 DEBUG ~ building SimpleValue for email
12 10 2010 17:50:11,397 DEBUG ~ Building property email
12 10 2010 17:50:11,397 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:11,397 DEBUG ~ binding property fullname with lazy=false
12 10 2010 17:50:11,397 DEBUG ~ building SimpleValue for fullname
12 10 2010 17:50:11,397 DEBUG ~ Building property fullname
12 10 2010 17:50:11,397 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:11,398 DEBUG ~ binding property isAdmin with lazy=false
12 10 2010 17:50:11,398 DEBUG ~ building SimpleValue for isAdmin
12 10 2010 17:50:11,398 DEBUG ~ Building property isAdmin
12 10 2010 17:50:11,398 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:11,398 DEBUG ~ binding property password with lazy=false
12 10 2010 17:50:11,398 DEBUG ~ building SimpleValue for password
12 10 2010 17:50:11,398 DEBUG ~ Building property password
12 10 2010 17:50:11,398 INFO  ~ Binding entity from annotated class: models.Post
12 10 2010 17:50:11,398 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 17:50:11,398 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 17:50:11,398 DEBUG ~ Import with entity name Post
12 10 2010 17:50:11,398 INFO  ~ Bind entity models.Post on table Post
12 10 2010 17:50:11,404 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:11,404 DEBUG ~ binding property id with lazy=false
12 10 2010 17:50:11,404 DEBUG ~ building SimpleValue for id
12 10 2010 17:50:11,404 DEBUG ~ Building property id
12 10 2010 17:50:11,405 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
12 10 2010 17:50:11,405 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=author, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:11,406 DEBUG ~ Building property author
12 10 2010 17:50:11,406 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
12 10 2010 17:50:11,406 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:11,409 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=null, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:11,480 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=element, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:11,481 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments_KEY, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:11,482 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='comments_KEY', referencedColumn='null', mappedBy='null'}
12 10 2010 17:50:11,482 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
12 10 2010 17:50:11,482 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
12 10 2010 17:50:11,482 DEBUG ~ Collection role: models.Post.comments
12 10 2010 17:50:11,485 DEBUG ~ Building property comments
12 10 2010 17:50:11,485 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=content, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:11,485 DEBUG ~ binding property content with lazy=false
12 10 2010 17:50:11,485 DEBUG ~ building SimpleValue for content
12 10 2010 17:50:11,485 DEBUG ~ Building property content
12 10 2010 17:50:11,485 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:11,485 DEBUG ~ binding property postedAt with lazy=false
12 10 2010 17:50:11,485 DEBUG ~ building SimpleValue for postedAt
12 10 2010 17:50:11,485 DEBUG ~ Building property postedAt
12 10 2010 17:50:11,485 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=title, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:11,485 DEBUG ~ binding property title with lazy=false
12 10 2010 17:50:11,485 DEBUG ~ building SimpleValue for title
12 10 2010 17:50:11,485 DEBUG ~ Building property title
12 10 2010 17:50:11,485 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 17:50:11,486 DEBUG ~ setting SimpleValue typeName for author
12 10 2010 17:50:11,486 DEBUG ~ setting SimpleValue typeName for content
12 10 2010 17:50:11,486 DEBUG ~ setting SimpleValue typeName for post
12 10 2010 17:50:11,486 DEBUG ~ setting SimpleValue typeName for postedAt
12 10 2010 17:50:11,486 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 17:50:11,486 DEBUG ~ setting SimpleValue typeName for email
12 10 2010 17:50:11,486 DEBUG ~ setting SimpleValue typeName for fullname
12 10 2010 17:50:11,486 DEBUG ~ setting SimpleValue typeName for isAdmin
12 10 2010 17:50:11,486 DEBUG ~ setting SimpleValue typeName for password
12 10 2010 17:50:11,486 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 17:50:11,486 DEBUG ~ setting SimpleValue typeName for content
12 10 2010 17:50:11,486 DEBUG ~ setting SimpleValue typeName for postedAt
12 10 2010 17:50:11,486 DEBUG ~ setting SimpleValue typeName for title
12 10 2010 17:50:11,486 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:50:11,486 DEBUG ~ processing extends queue
12 10 2010 17:50:11,486 DEBUG ~ processing collection mappings
12 10 2010 17:50:11,486 DEBUG ~ Second pass for collection: models.Post.comments
12 10 2010 17:50:11,486 DEBUG ~ Binding a OneToMany: models.Post.comments through a foreign key
12 10 2010 17:50:11,487 INFO  ~ Mapping collection: models.Post.comments -> Comment
12 10 2010 17:50:11,488 DEBUG ~ Retrieving property models.Comment.post
12 10 2010 17:50:11,489 DEBUG ~ Mapped collection key: post, one-to-many: models.Comment
12 10 2010 17:50:11,489 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:50:11,489 DEBUG ~ processing association property references
12 10 2010 17:50:11,489 DEBUG ~ processing foreign key constraints
12 10 2010 17:50:11,489 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:50:11,489 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:50:11,490 INFO  ~ Hibernate Validator not found: ignoring
12 10 2010 17:50:11,505 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
12 10 2010 17:50:11,505 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
12 10 2010 17:50:11,507 DEBUG ~ Search not present in classpath, ignoring event listener registration.
12 10 2010 17:50:11,508 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
12 10 2010 17:50:11,508 DEBUG ~ Preparing to build session factory with filters : {}
12 10 2010 17:50:11,508 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:50:11,508 DEBUG ~ Process hbm files
12 10 2010 17:50:11,508 DEBUG ~ Process annotated classes
12 10 2010 17:50:11,508 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:50:11,508 DEBUG ~ processing extends queue
12 10 2010 17:50:11,508 DEBUG ~ processing collection mappings
12 10 2010 17:50:11,508 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:50:11,508 DEBUG ~ processing association property references
12 10 2010 17:50:11,508 DEBUG ~ processing foreign key constraints
12 10 2010 17:50:11,508 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:50:11,508 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:50:11,510 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
12 10 2010 17:50:11,510 INFO  ~ Using provided datasource
12 10 2010 17:50:11,511 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
12 10 2010 17:50:11,511 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
12 10 2010 17:50:11,511 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
12 10 2010 17:50:11,512 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
12 10 2010 17:50:11,512 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
12 10 2010 17:50:11,513 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
12 10 2010 17:50:11,513 INFO  ~ Automatic flush during beforeCompletion(): disabled
12 10 2010 17:50:11,513 INFO  ~ Automatic session close at end of transaction: disabled
12 10 2010 17:50:11,513 INFO  ~ JDBC batch size: 15
12 10 2010 17:50:11,513 INFO  ~ JDBC batch updates for versioned data: disabled
12 10 2010 17:50:11,513 INFO  ~ Scrollable result sets: enabled
12 10 2010 17:50:11,513 DEBUG ~ Wrap result sets: disabled
12 10 2010 17:50:11,513 INFO  ~ JDBC3 getGeneratedKeys(): disabled
12 10 2010 17:50:11,513 INFO  ~ Connection release mode: auto
12 10 2010 17:50:11,513 INFO  ~ Default batch fetch size: 1
12 10 2010 17:50:11,513 INFO  ~ Generate SQL with comments: disabled
12 10 2010 17:50:11,513 INFO  ~ Order SQL updates by primary key: disabled
12 10 2010 17:50:11,513 INFO  ~ Order SQL inserts for batching: disabled
12 10 2010 17:50:11,513 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
12 10 2010 17:50:11,513 INFO  ~ Using ASTQueryTranslatorFactory
12 10 2010 17:50:11,513 INFO  ~ Query language substitutions: {}
12 10 2010 17:50:11,513 INFO  ~ JPA-QL strict compliance: enabled
12 10 2010 17:50:11,513 INFO  ~ Second-level cache: enabled
12 10 2010 17:50:11,513 INFO  ~ Query cache: disabled
12 10 2010 17:50:11,513 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
12 10 2010 17:50:11,513 INFO  ~ Optimize cache for minimal puts: disabled
12 10 2010 17:50:11,514 INFO  ~ Structured second-level cache entries: disabled
12 10 2010 17:50:11,514 INFO  ~ Statistics: disabled
12 10 2010 17:50:11,514 INFO  ~ Deleted entity synthetic identifier rollback: disabled
12 10 2010 17:50:11,514 INFO  ~ Default entity-mode: pojo
12 10 2010 17:50:11,514 INFO  ~ Named query checking : enabled
12 10 2010 17:50:11,514 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
12 10 2010 17:50:11,517 INFO  ~ building session factory
12 10 2010 17:50:11,518 DEBUG ~ Session factory constructed with filter configurations : {}
12 10 2010 17:50:11,518 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
12 10 2010 17:50:11,519 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:11,519 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:11,519 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:11,526 DEBUG ~ Static SQL for entity: models.Comment
12 10 2010 17:50:11,526 DEBUG ~  Version select: select id from Comment where id =?
12 10 2010 17:50:11,526 DEBUG ~  Snapshot select: select comment_.id, comment_.author as author39_, comment_.content as content39_, comment_.post as post39_, comment_.postedAt as postedAt39_ from Comment comment_ where comment_.id=?
12 10 2010 17:50:11,526 DEBUG ~  Insert 0: insert into Comment (author, content, post, postedAt, id) values (?, ?, ?, ?, ?)
12 10 2010 17:50:11,526 DEBUG ~  Update 0: update Comment set author=?, content=?, post=?, postedAt=? where id=?
12 10 2010 17:50:11,526 DEBUG ~  Delete 0: delete from Comment where id=?
12 10 2010 17:50:11,526 DEBUG ~  Identity insert: insert into Comment (id, author, content, post, postedAt) values (null, ?, ?, ?, ?)
12 10 2010 17:50:11,545 DEBUG ~ Static SQL for entity: models.Post
12 10 2010 17:50:11,545 DEBUG ~  Version select: select id from Post where id =?
12 10 2010 17:50:11,545 DEBUG ~  Snapshot select: select post_.id, post_.author_id as author5_41_, post_.content as content41_, post_.postedAt as postedAt41_, post_.title as title41_ from Post post_ where post_.id=?
12 10 2010 17:50:11,545 DEBUG ~  Insert 0: insert into Post (author_id, content, postedAt, title, id) values (?, ?, ?, ?, ?)
12 10 2010 17:50:11,545 DEBUG ~  Update 0: update Post set author_id=?, content=?, postedAt=?, title=? where id=?
12 10 2010 17:50:11,545 DEBUG ~  Delete 0: delete from Post where id=?
12 10 2010 17:50:11,545 DEBUG ~  Identity insert: insert into Post (id, author_id, content, postedAt, title) values (null, ?, ?, ?, ?)
12 10 2010 17:50:11,549 DEBUG ~ Static SQL for entity: models.User
12 10 2010 17:50:11,549 DEBUG ~  Version select: select id from User where id =?
12 10 2010 17:50:11,549 DEBUG ~  Snapshot select: select user_.id, user_.email as email40_, user_.fullname as fullname40_, user_.isAdmin as isAdmin40_, user_.password as password40_ from User user_ where user_.id=?
12 10 2010 17:50:11,549 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
12 10 2010 17:50:11,549 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
12 10 2010 17:50:11,549 DEBUG ~  Delete 0: delete from User where id=?
12 10 2010 17:50:11,549 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
12 10 2010 17:50:11,555 DEBUG ~ Static SQL for collection: models.Post.comments
12 10 2010 17:50:11,555 DEBUG ~  Row insert: update Comment set post=? where id=?
12 10 2010 17:50:11,555 DEBUG ~  Row delete: update Comment set post=null where post=? and id=?
12 10 2010 17:50:11,555 DEBUG ~  One-shot delete: update Comment set post=null where post=?
12 10 2010 17:50:11,556 DEBUG ~ Static select for entity models.Comment [NONE]: select comment0_.id as id39_0_, comment0_.author as author39_0_, comment0_.content as content39_0_, comment0_.post as post39_0_, comment0_.postedAt as postedAt39_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:11,556 DEBUG ~ Static select for entity models.Comment [READ]: select comment0_.id as id39_0_, comment0_.author as author39_0_, comment0_.content as content39_0_, comment0_.post as post39_0_, comment0_.postedAt as postedAt39_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:11,556 DEBUG ~ Static select for entity models.Comment [UPGRADE]: select comment0_.id as id39_0_, comment0_.author as author39_0_, comment0_.content as content39_0_, comment0_.post as post39_0_, comment0_.postedAt as postedAt39_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:11,556 DEBUG ~ Static select for entity models.Comment [UPGRADE_NOWAIT]: select comment0_.id as id39_0_, comment0_.author as author39_0_, comment0_.content as content39_0_, comment0_.post as post39_0_, comment0_.postedAt as postedAt39_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:11,556 DEBUG ~ Static select for entity models.Comment [FORCE]: select comment0_.id as id39_0_, comment0_.author as author39_0_, comment0_.content as content39_0_, comment0_.post as post39_0_, comment0_.postedAt as postedAt39_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:11,557 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_READ]: select comment0_.id as id39_0_, comment0_.author as author39_0_, comment0_.content as content39_0_, comment0_.post as post39_0_, comment0_.postedAt as postedAt39_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:11,557 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_WRITE]: select comment0_.id as id39_0_, comment0_.author as author39_0_, comment0_.content as content39_0_, comment0_.post as post39_0_, comment0_.postedAt as postedAt39_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:11,557 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_FORCE_INCREMENT]: select comment0_.id as id39_0_, comment0_.author as author39_0_, comment0_.content as content39_0_, comment0_.post as post39_0_, comment0_.postedAt as postedAt39_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:11,557 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC]: select comment0_.id as id39_0_, comment0_.author as author39_0_, comment0_.content as content39_0_, comment0_.post as post39_0_, comment0_.postedAt as postedAt39_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:11,557 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC_FORCE_INCREMENT]: select comment0_.id as id39_0_, comment0_.author as author39_0_, comment0_.content as content39_0_, comment0_.post as post39_0_, comment0_.postedAt as postedAt39_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:11,557 DEBUG ~ Static select for action ACTION_MERGE on entity models.Comment: select comment0_.id as id39_0_, comment0_.author as author39_0_, comment0_.content as content39_0_, comment0_.post as post39_0_, comment0_.postedAt as postedAt39_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:11,557 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Comment: select comment0_.id as id39_0_, comment0_.author as author39_0_, comment0_.content as content39_0_, comment0_.post as post39_0_, comment0_.postedAt as postedAt39_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:11,558 DEBUG ~ Static select for entity models.Post [NONE]: select post0_.id as id41_1_, post0_.author_id as author5_41_1_, post0_.content as content41_1_, post0_.postedAt as postedAt41_1_, post0_.title as title41_1_, user1_.id as id40_0_, user1_.email as email40_0_, user1_.fullname as fullname40_0_, user1_.isAdmin as isAdmin40_0_, user1_.password as password40_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:50:11,558 DEBUG ~ Static select for entity models.Post [READ]: select post0_.id as id41_1_, post0_.author_id as author5_41_1_, post0_.content as content41_1_, post0_.postedAt as postedAt41_1_, post0_.title as title41_1_, user1_.id as id40_0_, user1_.email as email40_0_, user1_.fullname as fullname40_0_, user1_.isAdmin as isAdmin40_0_, user1_.password as password40_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:50:11,558 DEBUG ~ Static select for entity models.Post [UPGRADE]: select post0_.id as id41_0_, post0_.author_id as author5_41_0_, post0_.content as content41_0_, post0_.postedAt as postedAt41_0_, post0_.title as title41_0_ from Post post0_ where post0_.id=?
12 10 2010 17:50:11,558 DEBUG ~ Static select for entity models.Post [UPGRADE_NOWAIT]: select post0_.id as id41_0_, post0_.author_id as author5_41_0_, post0_.content as content41_0_, post0_.postedAt as postedAt41_0_, post0_.title as title41_0_ from Post post0_ where post0_.id=?
12 10 2010 17:50:11,559 DEBUG ~ Static select for entity models.Post [FORCE]: select post0_.id as id41_0_, post0_.author_id as author5_41_0_, post0_.content as content41_0_, post0_.postedAt as postedAt41_0_, post0_.title as title41_0_ from Post post0_ where post0_.id=?
12 10 2010 17:50:11,559 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_READ]: select post0_.id as id41_0_, post0_.author_id as author5_41_0_, post0_.content as content41_0_, post0_.postedAt as postedAt41_0_, post0_.title as title41_0_ from Post post0_ where post0_.id=?
12 10 2010 17:50:11,559 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_WRITE]: select post0_.id as id41_0_, post0_.author_id as author5_41_0_, post0_.content as content41_0_, post0_.postedAt as postedAt41_0_, post0_.title as title41_0_ from Post post0_ where post0_.id=?
12 10 2010 17:50:11,559 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_FORCE_INCREMENT]: select post0_.id as id41_0_, post0_.author_id as author5_41_0_, post0_.content as content41_0_, post0_.postedAt as postedAt41_0_, post0_.title as title41_0_ from Post post0_ where post0_.id=?
12 10 2010 17:50:11,559 DEBUG ~ Static select for entity models.Post [OPTIMISTIC]: select post0_.id as id41_1_, post0_.author_id as author5_41_1_, post0_.content as content41_1_, post0_.postedAt as postedAt41_1_, post0_.title as title41_1_, user1_.id as id40_0_, user1_.email as email40_0_, user1_.fullname as fullname40_0_, user1_.isAdmin as isAdmin40_0_, user1_.password as password40_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:50:11,559 DEBUG ~ Static select for entity models.Post [OPTIMISTIC_FORCE_INCREMENT]: select post0_.id as id41_1_, post0_.author_id as author5_41_1_, post0_.content as content41_1_, post0_.postedAt as postedAt41_1_, post0_.title as title41_1_, user1_.id as id40_0_, user1_.email as email40_0_, user1_.fullname as fullname40_0_, user1_.isAdmin as isAdmin40_0_, user1_.password as password40_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:50:11,561 DEBUG ~ Static select for action ACTION_MERGE on entity models.Post: select post0_.id as id41_1_, post0_.author_id as author5_41_1_, post0_.content as content41_1_, post0_.postedAt as postedAt41_1_, post0_.title as title41_1_, comments1_.post as post41_3_, comments1_.id as id3_, comments1_.id as id39_0_, comments1_.author as author39_0_, comments1_.content as content39_0_, comments1_.post as post39_0_, comments1_.postedAt as postedAt39_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post where post0_.id=?
12 10 2010 17:50:11,561 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Post: select post0_.id as id41_1_, post0_.author_id as author5_41_1_, post0_.content as content41_1_, post0_.postedAt as postedAt41_1_, post0_.title as title41_1_, comments1_.post as post41_3_, comments1_.id as id3_, comments1_.id as id39_0_, comments1_.author as author39_0_, comments1_.content as content39_0_, comments1_.post as post39_0_, comments1_.postedAt as postedAt39_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post where post0_.id=?
12 10 2010 17:50:11,562 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id40_0_, user0_.email as email40_0_, user0_.fullname as fullname40_0_, user0_.isAdmin as isAdmin40_0_, user0_.password as password40_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:11,562 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id40_0_, user0_.email as email40_0_, user0_.fullname as fullname40_0_, user0_.isAdmin as isAdmin40_0_, user0_.password as password40_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:11,562 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id40_0_, user0_.email as email40_0_, user0_.fullname as fullname40_0_, user0_.isAdmin as isAdmin40_0_, user0_.password as password40_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:11,562 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id40_0_, user0_.email as email40_0_, user0_.fullname as fullname40_0_, user0_.isAdmin as isAdmin40_0_, user0_.password as password40_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:11,562 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id40_0_, user0_.email as email40_0_, user0_.fullname as fullname40_0_, user0_.isAdmin as isAdmin40_0_, user0_.password as password40_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:11,562 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id40_0_, user0_.email as email40_0_, user0_.fullname as fullname40_0_, user0_.isAdmin as isAdmin40_0_, user0_.password as password40_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:11,562 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id40_0_, user0_.email as email40_0_, user0_.fullname as fullname40_0_, user0_.isAdmin as isAdmin40_0_, user0_.password as password40_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:11,563 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id40_0_, user0_.email as email40_0_, user0_.fullname as fullname40_0_, user0_.isAdmin as isAdmin40_0_, user0_.password as password40_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:11,563 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id40_0_, user0_.email as email40_0_, user0_.fullname as fullname40_0_, user0_.isAdmin as isAdmin40_0_, user0_.password as password40_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:11,563 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id40_0_, user0_.email as email40_0_, user0_.fullname as fullname40_0_, user0_.isAdmin as isAdmin40_0_, user0_.password as password40_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:11,563 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id40_0_, user0_.email as email40_0_, user0_.fullname as fullname40_0_, user0_.isAdmin as isAdmin40_0_, user0_.password as password40_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:11,563 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id40_0_, user0_.email as email40_0_, user0_.fullname as fullname40_0_, user0_.isAdmin as isAdmin40_0_, user0_.password as password40_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:11,566 DEBUG ~ Static select for one-to-many models.Post.comments: select comments0_.post as post41_1_, comments0_.id as id1_, comments0_.id as id39_0_, comments0_.author as author39_0_, comments0_.content as content39_0_, comments0_.post as post39_0_, comments0_.postedAt as postedAt39_0_ from Comment comments0_ where comments0_.post=?
12 10 2010 17:50:11,567 DEBUG ~ registered: 2c9082cd2b9f0d81012b9fa1efef000c (unnamed)
12 10 2010 17:50:11,567 INFO  ~ Not binding factory to JNDI, no JNDI name configured
12 10 2010 17:50:11,567 DEBUG ~ instantiated session factory
12 10 2010 17:50:11,567 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:50:11,567 DEBUG ~ Process hbm files
12 10 2010 17:50:11,567 DEBUG ~ Process annotated classes
12 10 2010 17:50:11,567 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:50:11,567 DEBUG ~ processing extends queue
12 10 2010 17:50:11,567 DEBUG ~ processing collection mappings
12 10 2010 17:50:11,567 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:50:11,567 DEBUG ~ processing association property references
12 10 2010 17:50:11,567 DEBUG ~ processing foreign key constraints
12 10 2010 17:50:11,567 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:50:11,567 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:50:11,569 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:11,569 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:11,569 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:11,569 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:50:11,569 DEBUG ~ Process hbm files
12 10 2010 17:50:11,569 DEBUG ~ Process annotated classes
12 10 2010 17:50:11,569 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:50:11,569 DEBUG ~ processing extends queue
12 10 2010 17:50:11,569 DEBUG ~ processing collection mappings
12 10 2010 17:50:11,569 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:50:11,569 DEBUG ~ processing association property references
12 10 2010 17:50:11,569 DEBUG ~ processing foreign key constraints
12 10 2010 17:50:11,569 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:50:11,569 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:50:11,570 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:11,571 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:11,571 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:11,571 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:11,571 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:11,571 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:11,571 INFO  ~ Running hbm2ddl schema export
12 10 2010 17:50:11,571 DEBUG ~ import file not found: /import.sql
12 10 2010 17:50:11,571 INFO  ~ exporting generated schema to database
12 10 2010 17:50:11,571 DEBUG ~ alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 17:50:11,572 DEBUG ~ Unsuccessful: alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 17:50:11,572 DEBUG ~ Table not found: COMMENT in statement [alter table Comment]
12 10 2010 17:50:11,572 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 17:50:11,572 DEBUG ~ Unsuccessful: alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 17:50:11,572 DEBUG ~ Table not found: POST in statement [alter table Post]
12 10 2010 17:50:11,572 DEBUG ~ drop table Comment if exists
12 10 2010 17:50:11,572 DEBUG ~ drop table Post if exists
12 10 2010 17:50:11,572 DEBUG ~ drop table User if exists
12 10 2010 17:50:11,572 DEBUG ~ create table Comment (id bigint generated by default as identity (start with 1), author varchar(255), content varchar(255), post varbinary(255), postedAt timestamp, primary key (id))
12 10 2010 17:50:11,572 DEBUG ~ create table Post (id bigint generated by default as identity (start with 1), content longvarchar, postedAt timestamp, title varchar(255), author_id bigint, primary key (id))
12 10 2010 17:50:11,573 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
12 10 2010 17:50:11,573 DEBUG ~ alter table Comment add constraint FK9BDE863F500B6664 foreign key (post) references Post
12 10 2010 17:50:11,574 ERROR ~ Unsuccessful: alter table Comment add constraint FK9BDE863F500B6664 foreign key (post) references Post
12 10 2010 17:50:11,574 ERROR ~ Column types do not match in statement [alter table Comment add constraint FK9BDE863F500B6664 foreign key (post) references Post]
12 10 2010 17:50:11,574 DEBUG ~ alter table Post add constraint FK260CC0A7CD013E foreign key (author_id) references User
12 10 2010 17:50:11,574 INFO  ~ schema export complete
12 10 2010 17:50:11,574 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:50:11,575 DEBUG ~ Process hbm files
12 10 2010 17:50:11,575 DEBUG ~ Process annotated classes
12 10 2010 17:50:11,575 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:50:11,575 DEBUG ~ processing extends queue
12 10 2010 17:50:11,575 DEBUG ~ processing collection mappings
12 10 2010 17:50:11,575 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:50:11,575 DEBUG ~ processing association property references
12 10 2010 17:50:11,575 DEBUG ~ processing foreign key constraints
12 10 2010 17:50:11,575 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:50:11,575 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:50:11,576 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:11,576 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:11,577 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:11,577 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:50:11,577 DEBUG ~ Process hbm files
12 10 2010 17:50:11,577 DEBUG ~ Process annotated classes
12 10 2010 17:50:11,577 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:50:11,577 DEBUG ~ processing extends queue
12 10 2010 17:50:11,577 DEBUG ~ processing collection mappings
12 10 2010 17:50:11,577 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:50:11,577 DEBUG ~ processing association property references
12 10 2010 17:50:11,577 DEBUG ~ processing foreign key constraints
12 10 2010 17:50:11,577 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:50:11,577 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:50:11,578 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:11,579 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:11,579 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:11,579 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:11,579 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:11,579 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:11,579 DEBUG ~ Checking 0 named HQL queries
12 10 2010 17:50:11,579 DEBUG ~ Checking 0 named SQL queries
12 10 2010 17:50:11,596 DEBUG ~ opened session at timestamp: 12868734115
12 10 2010 17:50:11,596 DEBUG ~ begin
12 10 2010 17:50:11,596 DEBUG ~ opening JDBC connection
12 10 2010 17:50:11,596 DEBUG ~ current autocommit status: true
12 10 2010 17:50:11,597 DEBUG ~ disabling autocommit
12 10 2010 17:50:11,676 DEBUG ~ commit
12 10 2010 17:50:11,676 DEBUG ~ re-enabling autocommit
12 10 2010 17:50:11,676 DEBUG ~ committed JDBC Connection
12 10 2010 17:50:11,676 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:50:11,676 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:50:13,792 DEBUG ~ opened session at timestamp: 12868734137
12 10 2010 17:50:13,792 DEBUG ~ begin
12 10 2010 17:50:13,792 DEBUG ~ opening JDBC connection
12 10 2010 17:50:13,792 DEBUG ~ current autocommit status: true
12 10 2010 17:50:13,792 DEBUG ~ disabling autocommit
12 10 2010 17:50:13,818 DEBUG ~ commit
12 10 2010 17:50:13,819 DEBUG ~ re-enabling autocommit
12 10 2010 17:50:13,819 DEBUG ~ committed JDBC Connection
12 10 2010 17:50:13,819 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:50:13,819 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:50:13,833 DEBUG ~ opened session at timestamp: 12868734138
12 10 2010 17:50:13,833 DEBUG ~ begin
12 10 2010 17:50:13,833 DEBUG ~ opening JDBC connection
12 10 2010 17:50:13,833 DEBUG ~ current autocommit status: true
12 10 2010 17:50:13,833 DEBUG ~ disabling autocommit
12 10 2010 17:50:14,086 DEBUG ~ executing identity-insert immediately
12 10 2010 17:50:14,086 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,087 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,087 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,087 DEBUG ~ Natively generated identity: 1
12 10 2010 17:50:14,087 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,087 DEBUG ~ processing flush-time cascades
12 10 2010 17:50:14,087 DEBUG ~ dirty checking collections
12 10 2010 17:50:14,087 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:50:14,087 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:50:14,087 DEBUG ~ listing entities:
12 10 2010 17:50:14,087 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:50:14,089 DEBUG ~ parse() - HQL: from models.User where email = ?
12 10 2010 17:50:14,091 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'email'
          \-[PARAM] Node: '?'

12 10 2010 17:50:14,091 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:14,091 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:50:14,091 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 17:50:14,091 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:50:14,092 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 17:50:14,092 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 17:50:14,092 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:50:14,092 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.email {synthetic-alias} email ) ? ) ) )
12 10 2010 17:50:14,092 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:50:14,092 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 17:50:14,092 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:50:14,093 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id40_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email40_, user0_.fullname as fullname40_, user0_.isAdmin as isAdmin40_, user0_.password as password40_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'email' {originalText=email}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 17:50:14,093 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:14,093 DEBUG ~ HQL: from models.User where email = ?
12 10 2010 17:50:14,093 DEBUG ~ SQL: select user0_.id as id40_, user0_.email as email40_, user0_.fullname as fullname40_, user0_.isAdmin as isAdmin40_, user0_.password as password40_ from User user0_ where user0_.email=?
12 10 2010 17:50:14,093 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:14,093 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,094 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:50:14,094 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 17:50:14,094 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:50:14,094 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,094 DEBUG ~ initializing non-lazy collections
12 10 2010 17:50:14,095 DEBUG ~ executing identity-insert immediately
12 10 2010 17:50:14,095 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,095 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,095 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,095 DEBUG ~ Natively generated identity: 2
12 10 2010 17:50:14,095 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,095 DEBUG ~ processing flush-time cascades
12 10 2010 17:50:14,095 DEBUG ~ dirty checking collections
12 10 2010 17:50:14,096 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:50:14,096 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:50:14,096 DEBUG ~ listing entities:
12 10 2010 17:50:14,096 DEBUG ~ models.User{id=2, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:50:14,096 DEBUG ~ parse() - HQL: from models.User where email = ? AND password = ?
12 10 2010 17:50:14,098 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'AND'
          +-[EQ] Node: '='
          |  +-[IDENT] Node: 'email'
          |  \-[PARAM] Node: '?'
          \-[EQ] Node: '='
             +-[IDENT] Node: 'password'
             \-[PARAM] Node: '?'

12 10 2010 17:50:14,098 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:14,098 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:50:14,098 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 17:50:14,099 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:50:14,099 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 17:50:14,099 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 17:50:14,099 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:50:14,099 DEBUG ~ getDataType() : password -> org.hibernate.type.StringType@18b3c498
12 10 2010 17:50:14,099 DEBUG ~ Resolved :  {synthetic-alias}.password -> user0_.password
12 10 2010 17:50:14,099 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:50:14,099 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( AND ( = ( user0_.email {synthetic-alias} email ) ? ) ( = ( user0_.password {synthetic-alias} password ) ? ) ) ) )
12 10 2010 17:50:14,099 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:50:14,099 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 17:50:14,099 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:50:14,100 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id40_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email40_, user0_.fullname as fullname40_, user0_.isAdmin as isAdmin40_, user0_.password as password40_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'AND'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  |  \-[IDENT] IdentNode: 'email' {originalText=email}
          |  \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'user0_.password' {propertyName=password,dereferenceType=ALL,propertyPath=password,path={synthetic-alias}.password,tableAlias=user0_,className=models.User,classAlias=null}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'password' {originalText=password}
             \-[PARAM] ParameterNode: '?' {ordinal=1, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 17:50:14,100 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:14,100 DEBUG ~ HQL: from models.User where email = ? AND password = ?
12 10 2010 17:50:14,100 DEBUG ~ SQL: select user0_.id as id40_, user0_.email as email40_, user0_.fullname as fullname40_, user0_.isAdmin as isAdmin40_, user0_.password as password40_ from User user0_ where user0_.email=? and user0_.password=?
12 10 2010 17:50:14,100 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:14,101 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,101 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:50:14,101 DEBUG ~ result row: EntityKey[models.User#2]
12 10 2010 17:50:14,101 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:50:14,101 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,101 DEBUG ~ initializing non-lazy collections
12 10 2010 17:50:14,102 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,102 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:50:14,102 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:50:14,102 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,102 DEBUG ~ initializing non-lazy collections
12 10 2010 17:50:14,102 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,103 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:50:14,103 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:50:14,103 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,103 DEBUG ~ initializing non-lazy collections
12 10 2010 17:50:14,103 DEBUG ~ executing identity-insert immediately
12 10 2010 17:50:14,103 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,104 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,104 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,104 DEBUG ~ Natively generated identity: 3
12 10 2010 17:50:14,104 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,104 DEBUG ~ processing flush-time cascades
12 10 2010 17:50:14,104 DEBUG ~ dirty checking collections
12 10 2010 17:50:14,104 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:50:14,104 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:50:14,104 DEBUG ~ listing entities:
12 10 2010 17:50:14,104 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:50:14,120 DEBUG ~ executing identity-insert immediately
12 10 2010 17:50:14,120 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,120 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,121 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,121 DEBUG ~ Natively generated identity: 1
12 10 2010 17:50:14,121 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,126 DEBUG ~ processing flush-time cascades
12 10 2010 17:50:14,126 DEBUG ~ dirty checking collections
12 10 2010 17:50:14,128 DEBUG ~ Collection found: [models.Post.comments#1], was: [<unreferenced>] (initialized)
12 10 2010 17:50:14,131 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 17:50:14,131 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:50:14,131 DEBUG ~ listing entities:
12 10 2010 17:50:14,131 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:50:14,131 DEBUG ~ models.Post{content=hello world, id=1, author=models.User#3, title=first post, comments=[], postedAt=2010-10-12 17:50:14}
12 10 2010 17:50:14,133 DEBUG ~ parse() - HQL: select count(e) from models.Post e
12 10 2010 17:50:14,135 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'Post'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

12 10 2010 17:50:14,135 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:14,135 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:50:14,135 DEBUG ~ FromClause{level=1} :  models.Post (e) -> post0_
12 10 2010 17:50:14,135 DEBUG ~ Resolved :  e -> post0_.id
12 10 2010 17:50:14,135 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:50:14,135 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count post0_.id ) ) ( FromClause{level=1} Post post0_ ) )
12 10 2010 17:50:14,135 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 17:50:14,135 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:50:14,136 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'post0_.id' {alias=e, className=models.Post, tableAlias=post0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}

12 10 2010 17:50:14,136 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:14,136 DEBUG ~ HQL: select count(e) from models.Post e
12 10 2010 17:50:14,136 DEBUG ~ SQL: select count(post0_.id) as col_0_0_ from Post post0_
12 10 2010 17:50:14,136 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:14,136 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,136 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:50:14,137 DEBUG ~ result row: 
12 10 2010 17:50:14,137 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:50:14,137 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,137 DEBUG ~ initializing non-lazy collections
12 10 2010 17:50:14,137 DEBUG ~ parse() - HQL: from models.Post where author = ?
12 10 2010 17:50:14,139 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'author'
          \-[PARAM] Node: '?'

12 10 2010 17:50:14,139 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:14,139 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:50:14,139 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
12 10 2010 17:50:14,139 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:50:14,139 DEBUG ~ getDataType() : author -> org.hibernate.type.ManyToOneType(models.User)
12 10 2010 17:50:14,139 DEBUG ~ dereferenceShortcut() : property author in models.Post does not require a join.
12 10 2010 17:50:14,139 DEBUG ~ terminal propertyPath = [author]
12 10 2010 17:50:14,139 DEBUG ~ Resolved :  {synthetic-alias}.author -> post0_.author_id
12 10 2010 17:50:14,139 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:50:14,139 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( = ( post0_.author_id {synthetic-alias} author ) ? ) ) )
12 10 2010 17:50:14,140 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:50:14,140 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 17:50:14,140 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:50:14,140 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id41_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_41_, post0_.content as content41_, post0_.postedAt as postedAt41_, post0_.title as title41_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'post0_.author_id' {propertyName=author,dereferenceType=0,propertyPath=author,path={synthetic-alias}.author,tableAlias=post0_,className=models.Post,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'author' {originalText=author}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.ManyToOneType(models.User)}

12 10 2010 17:50:14,140 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:14,141 DEBUG ~ HQL: from models.Post where author = ?
12 10 2010 17:50:14,141 DEBUG ~ SQL: select post0_.id as id41_, post0_.author_id as author5_41_, post0_.content as content41_, post0_.postedAt as postedAt41_, post0_.title as title41_ from Post post0_ where post0_.author_id=?
12 10 2010 17:50:14,141 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:14,141 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,141 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:50:14,141 DEBUG ~ result row: EntityKey[models.Post#1]
12 10 2010 17:50:14,141 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:50:14,141 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,141 DEBUG ~ initializing non-lazy collections
12 10 2010 17:50:14,142 DEBUG ~ executing identity-insert immediately
12 10 2010 17:50:14,142 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,142 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,143 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,143 DEBUG ~ Natively generated identity: 4
12 10 2010 17:50:14,143 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,143 DEBUG ~ processing flush-time cascades
12 10 2010 17:50:14,143 DEBUG ~ dirty checking collections
12 10 2010 17:50:14,143 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:50:14,143 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:50:14,143 DEBUG ~ listing entities:
12 10 2010 17:50:14,143 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:50:14,144 DEBUG ~ executing identity-insert immediately
12 10 2010 17:50:14,144 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,144 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,144 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,144 DEBUG ~ Natively generated identity: 2
12 10 2010 17:50:14,144 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,144 DEBUG ~ processing flush-time cascades
12 10 2010 17:50:14,144 DEBUG ~ dirty checking collections
12 10 2010 17:50:14,145 DEBUG ~ Collection found: [models.Post.comments#2], was: [<unreferenced>] (initialized)
12 10 2010 17:50:14,145 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 17:50:14,145 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:50:14,145 DEBUG ~ listing entities:
12 10 2010 17:50:14,145 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, comments=[], postedAt=2010-10-12 17:50:14}
12 10 2010 17:50:14,145 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:50:14,155 DEBUG ~ executing identity-insert immediately
12 10 2010 17:50:14,155 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,156 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,156 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,156 DEBUG ~ Natively generated identity: 1
12 10 2010 17:50:14,156 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,157 DEBUG ~ processing flush-time cascades
12 10 2010 17:50:14,157 DEBUG ~ dirty checking collections
12 10 2010 17:50:14,157 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
12 10 2010 17:50:14,159 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 17:50:14,159 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:50:14,159 DEBUG ~ listing entities:
12 10 2010 17:50:14,159 DEBUG ~ models.Comment{content=nice post, id=1, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f4542a90be0e4af224828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808082f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808480f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808082f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f21797ff8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:50:14}
12 10 2010 17:50:14,160 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, comments=[], postedAt=2010-10-12 17:50:14}
12 10 2010 17:50:14,160 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:50:14,161 DEBUG ~ executing identity-insert immediately
12 10 2010 17:50:14,161 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,161 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,162 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,162 DEBUG ~ Natively generated identity: 2
12 10 2010 17:50:14,162 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,162 DEBUG ~ processing flush-time cascades
12 10 2010 17:50:14,162 DEBUG ~ dirty checking collections
12 10 2010 17:50:14,162 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
12 10 2010 17:50:14,163 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 17:50:14,163 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:50:14,164 DEBUG ~ listing entities:
12 10 2010 17:50:14,165 DEBUG ~ models.Comment{content=nice post, id=1, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f4542a90be0e4af224828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808082f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808480f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808082f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f21797ff8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:50:14}
12 10 2010 17:50:14,166 DEBUG ~ models.Comment{content=i knew that !, id=2, author=Tom, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f4542a90be0e4af224828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808082f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808480f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808082f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f21797ff8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:50:14}
12 10 2010 17:50:14,166 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, comments=[], postedAt=2010-10-12 17:50:14}
12 10 2010 17:50:14,166 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:50:14,167 DEBUG ~ parse() - HQL: from models.Comment where post = ?
12 10 2010 17:50:14,182 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Comment'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'post'
          \-[PARAM] Node: '?'

12 10 2010 17:50:14,182 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:14,182 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:50:14,183 DEBUG ~ FromClause{level=1} :  models.Comment (no alias) -> comment0_
12 10 2010 17:50:14,183 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:50:14,183 DEBUG ~ getDataType() : post -> org.hibernate.type.SerializableType@654e030d
12 10 2010 17:50:14,183 DEBUG ~ Resolved :  {synthetic-alias}.post -> comment0_.post
12 10 2010 17:50:14,183 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:50:14,183 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Comment comment0_ ) ( where ( = ( comment0_.post {synthetic-alias} post ) ? ) ) )
12 10 2010 17:50:14,183 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:50:14,183 DEBUG ~ Using FROM fragment [Comment comment0_]
12 10 2010 17:50:14,183 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:50:14,184 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Comment)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'comment0_.id as id39_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Comment,tableAlias=comment0_,origin=null,columns={,className=models.Comment}}}
    |  \-[SQL_TOKEN] SqlFragment: 'comment0_.author as author39_, comment0_.content as content39_, comment0_.post as post39_, comment0_.postedAt as postedAt39_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[comment0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Comment comment0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Comment,tableAlias=comment0_,origin=null,columns={,className=models.Comment}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'comment0_.post' {propertyName=post,dereferenceType=ALL,propertyPath=post,path={synthetic-alias}.post,tableAlias=comment0_,className=models.Comment,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'post' {originalText=post}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.SerializableType@654e030d}

12 10 2010 17:50:14,184 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:14,184 DEBUG ~ HQL: from models.Comment where post = ?
12 10 2010 17:50:14,184 DEBUG ~ SQL: select comment0_.id as id39_, comment0_.author as author39_, comment0_.content as content39_, comment0_.post as post39_, comment0_.postedAt as postedAt39_ from Comment comment0_ where comment0_.post=?
12 10 2010 17:50:14,184 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:14,185 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:14,186 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:50:14,186 DEBUG ~ result row: EntityKey[models.Comment#1]
12 10 2010 17:50:14,187 DEBUG ~ result row: EntityKey[models.Comment#2]
12 10 2010 17:50:14,187 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:50:14,187 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:14,187 DEBUG ~ initializing non-lazy collections
12 10 2010 17:50:14,213 DEBUG ~ commit
12 10 2010 17:50:14,213 DEBUG ~ processing flush-time cascades
12 10 2010 17:50:14,213 DEBUG ~ dirty checking collections
12 10 2010 17:50:14,213 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
12 10 2010 17:50:14,213 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 17:50:14,213 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:50:14,214 DEBUG ~ listing entities:
12 10 2010 17:50:14,214 DEBUG ~ models.Comment{content=nice post, id=1, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f4542a90be0e4af224828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808082f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808480f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808082f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f21797ff8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:50:14}
12 10 2010 17:50:14,215 DEBUG ~ models.Comment{content=i knew that !, id=2, author=Tom, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f4542a90be0e4af224828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808082f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808480f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808082f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f21797ff8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:50:14}
12 10 2010 17:50:14,217 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, comments=[], postedAt=2010-10-12 17:50:14}
12 10 2010 17:50:14,217 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:50:14,217 DEBUG ~ re-enabling autocommit
12 10 2010 17:50:14,217 DEBUG ~ committed JDBC Connection
12 10 2010 17:50:14,217 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:50:14,217 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:50:14,234 DEBUG ~ opened session at timestamp: 12868734142
12 10 2010 17:50:14,234 DEBUG ~ begin
12 10 2010 17:50:14,234 DEBUG ~ opening JDBC connection
12 10 2010 17:50:14,234 DEBUG ~ current autocommit status: true
12 10 2010 17:50:14,234 DEBUG ~ disabling autocommit
12 10 2010 17:50:14,254 DEBUG ~ commit
12 10 2010 17:50:14,254 DEBUG ~ re-enabling autocommit
12 10 2010 17:50:14,254 DEBUG ~ committed JDBC Connection
12 10 2010 17:50:14,254 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:50:14,254 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:50:25,563 INFO  ~ closing
12 10 2010 17:50:25,563 INFO  ~ Running hbm2ddl schema export
12 10 2010 17:50:25,564 DEBUG ~ import file not found: /import.sql
12 10 2010 17:50:25,564 INFO  ~ exporting generated schema to database
12 10 2010 17:50:25,564 DEBUG ~ alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 17:50:25,565 DEBUG ~ Unsuccessful: alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 17:50:25,565 DEBUG ~ Constraint not found FK9BDE863F500B6664 in table: COMMENT in statement [alter table Comment drop constraint FK9BDE863F500B6664]
12 10 2010 17:50:25,565 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 17:50:25,565 DEBUG ~ drop table Comment if exists
12 10 2010 17:50:25,565 DEBUG ~ drop table Post if exists
12 10 2010 17:50:25,565 DEBUG ~ drop table User if exists
12 10 2010 17:50:25,565 INFO  ~ schema export complete
12 10 2010 17:50:25,597 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 17:50:25,597 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
12 10 2010 17:50:25,597 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
12 10 2010 17:50:25,597 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
12 10 2010 17:50:25,598 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
12 10 2010 17:50:25,598 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
12 10 2010 17:50:25,598 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
12 10 2010 17:50:25,598 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
12 10 2010 17:50:25,598 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
12 10 2010 17:50:25,598 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
12 10 2010 17:50:25,598 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 17:50:25,598 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
12 10 2010 17:50:25,598 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
12 10 2010 17:50:25,598 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
12 10 2010 17:50:25,598 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:50:25,599 DEBUG ~ Process hbm files
12 10 2010 17:50:25,599 DEBUG ~ Process annotated classes
12 10 2010 17:50:25,599 INFO  ~ Binding entity from annotated class: models.Comment
12 10 2010 17:50:25,599 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 17:50:25,599 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 17:50:25,599 DEBUG ~ Import with entity name Comment
12 10 2010 17:50:25,599 INFO  ~ Bind entity models.Comment on table Comment
12 10 2010 17:50:25,602 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:25,602 DEBUG ~ binding property id with lazy=false
12 10 2010 17:50:25,602 DEBUG ~ building SimpleValue for id
12 10 2010 17:50:25,602 DEBUG ~ Building property id
12 10 2010 17:50:25,602 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=author, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:25,603 DEBUG ~ binding property author with lazy=false
12 10 2010 17:50:25,603 DEBUG ~ building SimpleValue for author
12 10 2010 17:50:25,603 DEBUG ~ Building property author
12 10 2010 17:50:25,603 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=content, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:25,603 DEBUG ~ binding property content with lazy=false
12 10 2010 17:50:25,603 DEBUG ~ building SimpleValue for content
12 10 2010 17:50:25,603 DEBUG ~ Building property content
12 10 2010 17:50:25,603 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=post, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:25,603 DEBUG ~ binding property post with lazy=false
12 10 2010 17:50:25,603 DEBUG ~ building SimpleValue for post
12 10 2010 17:50:25,603 DEBUG ~ Building property post
12 10 2010 17:50:25,603 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:25,603 DEBUG ~ binding property postedAt with lazy=false
12 10 2010 17:50:25,603 DEBUG ~ building SimpleValue for postedAt
12 10 2010 17:50:25,603 DEBUG ~ Building property postedAt
12 10 2010 17:50:25,604 INFO  ~ Binding entity from annotated class: models.User
12 10 2010 17:50:25,604 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 17:50:25,604 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 17:50:25,604 DEBUG ~ Import with entity name User
12 10 2010 17:50:25,604 INFO  ~ Bind entity models.User on table User
12 10 2010 17:50:25,605 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:25,605 DEBUG ~ binding property id with lazy=false
12 10 2010 17:50:25,605 DEBUG ~ building SimpleValue for id
12 10 2010 17:50:25,605 DEBUG ~ Building property id
12 10 2010 17:50:25,605 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:25,605 DEBUG ~ binding property email with lazy=false
12 10 2010 17:50:25,606 DEBUG ~ building SimpleValue for email
12 10 2010 17:50:25,606 DEBUG ~ Building property email
12 10 2010 17:50:25,606 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:25,606 DEBUG ~ binding property fullname with lazy=false
12 10 2010 17:50:25,606 DEBUG ~ building SimpleValue for fullname
12 10 2010 17:50:25,606 DEBUG ~ Building property fullname
12 10 2010 17:50:25,606 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:25,606 DEBUG ~ binding property isAdmin with lazy=false
12 10 2010 17:50:25,606 DEBUG ~ building SimpleValue for isAdmin
12 10 2010 17:50:25,606 DEBUG ~ Building property isAdmin
12 10 2010 17:50:25,606 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:25,606 DEBUG ~ binding property password with lazy=false
12 10 2010 17:50:25,606 DEBUG ~ building SimpleValue for password
12 10 2010 17:50:25,606 DEBUG ~ Building property password
12 10 2010 17:50:25,606 INFO  ~ Binding entity from annotated class: models.Post
12 10 2010 17:50:25,606 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 17:50:25,606 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 17:50:25,607 DEBUG ~ Import with entity name Post
12 10 2010 17:50:25,607 INFO  ~ Bind entity models.Post on table Post
12 10 2010 17:50:25,609 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:25,609 DEBUG ~ binding property id with lazy=false
12 10 2010 17:50:25,609 DEBUG ~ building SimpleValue for id
12 10 2010 17:50:25,609 DEBUG ~ Building property id
12 10 2010 17:50:25,609 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
12 10 2010 17:50:25,609 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=author, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:25,609 DEBUG ~ Building property author
12 10 2010 17:50:25,609 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
12 10 2010 17:50:25,609 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:25,609 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=null, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:25,609 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=element, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:25,610 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments_KEY, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:25,610 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='comments_KEY', referencedColumn='null', mappedBy='null'}
12 10 2010 17:50:25,610 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
12 10 2010 17:50:25,610 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
12 10 2010 17:50:25,610 DEBUG ~ Collection role: models.Post.comments
12 10 2010 17:50:25,610 DEBUG ~ Building property comments
12 10 2010 17:50:25,610 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=content, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:25,610 DEBUG ~ binding property content with lazy=false
12 10 2010 17:50:25,610 DEBUG ~ building SimpleValue for content
12 10 2010 17:50:25,610 DEBUG ~ Building property content
12 10 2010 17:50:25,610 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:25,610 DEBUG ~ binding property postedAt with lazy=false
12 10 2010 17:50:25,610 DEBUG ~ building SimpleValue for postedAt
12 10 2010 17:50:25,610 DEBUG ~ Building property postedAt
12 10 2010 17:50:25,610 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=title, insertable=true, updatable=true, unique=false}
12 10 2010 17:50:25,610 DEBUG ~ binding property title with lazy=false
12 10 2010 17:50:25,610 DEBUG ~ building SimpleValue for title
12 10 2010 17:50:25,611 DEBUG ~ Building property title
12 10 2010 17:50:25,611 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 17:50:25,611 DEBUG ~ setting SimpleValue typeName for author
12 10 2010 17:50:25,611 DEBUG ~ setting SimpleValue typeName for content
12 10 2010 17:50:25,611 DEBUG ~ setting SimpleValue typeName for post
12 10 2010 17:50:25,611 DEBUG ~ setting SimpleValue typeName for postedAt
12 10 2010 17:50:25,611 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 17:50:25,613 DEBUG ~ setting SimpleValue typeName for email
12 10 2010 17:50:25,613 DEBUG ~ setting SimpleValue typeName for fullname
12 10 2010 17:50:25,613 DEBUG ~ setting SimpleValue typeName for isAdmin
12 10 2010 17:50:25,613 DEBUG ~ setting SimpleValue typeName for password
12 10 2010 17:50:25,613 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 17:50:25,613 DEBUG ~ setting SimpleValue typeName for content
12 10 2010 17:50:25,613 DEBUG ~ setting SimpleValue typeName for postedAt
12 10 2010 17:50:25,613 DEBUG ~ setting SimpleValue typeName for title
12 10 2010 17:50:25,613 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:50:25,614 DEBUG ~ processing extends queue
12 10 2010 17:50:25,614 DEBUG ~ processing collection mappings
12 10 2010 17:50:25,614 DEBUG ~ Second pass for collection: models.Post.comments
12 10 2010 17:50:25,614 DEBUG ~ Binding a OneToMany: models.Post.comments through a foreign key
12 10 2010 17:50:25,614 INFO  ~ Mapping collection: models.Post.comments -> Comment
12 10 2010 17:50:25,615 DEBUG ~ Retrieving property models.Comment.post
12 10 2010 17:50:25,615 DEBUG ~ Mapped collection key: post, one-to-many: models.Comment
12 10 2010 17:50:25,615 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:50:25,615 DEBUG ~ processing association property references
12 10 2010 17:50:25,615 DEBUG ~ processing foreign key constraints
12 10 2010 17:50:25,615 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:50:25,615 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:50:25,616 INFO  ~ Hibernate Validator not found: ignoring
12 10 2010 17:50:25,630 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
12 10 2010 17:50:25,634 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
12 10 2010 17:50:25,637 DEBUG ~ Search not present in classpath, ignoring event listener registration.
12 10 2010 17:50:25,637 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
12 10 2010 17:50:25,637 DEBUG ~ Preparing to build session factory with filters : {}
12 10 2010 17:50:25,637 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:50:25,637 DEBUG ~ Process hbm files
12 10 2010 17:50:25,637 DEBUG ~ Process annotated classes
12 10 2010 17:50:25,637 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:50:25,637 DEBUG ~ processing extends queue
12 10 2010 17:50:25,637 DEBUG ~ processing collection mappings
12 10 2010 17:50:25,637 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:50:25,637 DEBUG ~ processing association property references
12 10 2010 17:50:25,637 DEBUG ~ processing foreign key constraints
12 10 2010 17:50:25,637 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:50:25,637 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:50:25,639 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
12 10 2010 17:50:25,639 INFO  ~ Using provided datasource
12 10 2010 17:50:25,640 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
12 10 2010 17:50:25,640 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
12 10 2010 17:50:25,640 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
12 10 2010 17:50:25,640 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
12 10 2010 17:50:25,640 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
12 10 2010 17:50:25,640 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
12 10 2010 17:50:25,640 INFO  ~ Automatic flush during beforeCompletion(): disabled
12 10 2010 17:50:25,640 INFO  ~ Automatic session close at end of transaction: disabled
12 10 2010 17:50:25,640 INFO  ~ JDBC batch size: 15
12 10 2010 17:50:25,641 INFO  ~ JDBC batch updates for versioned data: disabled
12 10 2010 17:50:25,641 INFO  ~ Scrollable result sets: enabled
12 10 2010 17:50:25,641 DEBUG ~ Wrap result sets: disabled
12 10 2010 17:50:25,641 INFO  ~ JDBC3 getGeneratedKeys(): disabled
12 10 2010 17:50:25,641 INFO  ~ Connection release mode: auto
12 10 2010 17:50:25,641 INFO  ~ Default batch fetch size: 1
12 10 2010 17:50:25,641 INFO  ~ Generate SQL with comments: disabled
12 10 2010 17:50:25,641 INFO  ~ Order SQL updates by primary key: disabled
12 10 2010 17:50:25,641 INFO  ~ Order SQL inserts for batching: disabled
12 10 2010 17:50:25,641 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
12 10 2010 17:50:25,641 INFO  ~ Using ASTQueryTranslatorFactory
12 10 2010 17:50:25,641 INFO  ~ Query language substitutions: {}
12 10 2010 17:50:25,641 INFO  ~ JPA-QL strict compliance: enabled
12 10 2010 17:50:25,641 INFO  ~ Second-level cache: enabled
12 10 2010 17:50:25,641 INFO  ~ Query cache: disabled
12 10 2010 17:50:25,641 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
12 10 2010 17:50:25,641 INFO  ~ Optimize cache for minimal puts: disabled
12 10 2010 17:50:25,641 INFO  ~ Structured second-level cache entries: disabled
12 10 2010 17:50:25,641 INFO  ~ Statistics: disabled
12 10 2010 17:50:25,641 INFO  ~ Deleted entity synthetic identifier rollback: disabled
12 10 2010 17:50:25,641 INFO  ~ Default entity-mode: pojo
12 10 2010 17:50:25,641 INFO  ~ Named query checking : enabled
12 10 2010 17:50:25,642 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
12 10 2010 17:50:25,647 INFO  ~ building session factory
12 10 2010 17:50:25,647 DEBUG ~ Session factory constructed with filter configurations : {}
12 10 2010 17:50:25,647 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
12 10 2010 17:50:25,648 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:25,648 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:25,648 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:25,656 DEBUG ~ Static SQL for entity: models.Comment
12 10 2010 17:50:25,656 DEBUG ~  Version select: select id from Comment where id =?
12 10 2010 17:50:25,656 DEBUG ~  Snapshot select: select comment_.id, comment_.author as author45_, comment_.content as content45_, comment_.post as post45_, comment_.postedAt as postedAt45_ from Comment comment_ where comment_.id=?
12 10 2010 17:50:25,656 DEBUG ~  Insert 0: insert into Comment (author, content, post, postedAt, id) values (?, ?, ?, ?, ?)
12 10 2010 17:50:25,656 DEBUG ~  Update 0: update Comment set author=?, content=?, post=?, postedAt=? where id=?
12 10 2010 17:50:25,656 DEBUG ~  Delete 0: delete from Comment where id=?
12 10 2010 17:50:25,656 DEBUG ~  Identity insert: insert into Comment (id, author, content, post, postedAt) values (null, ?, ?, ?, ?)
12 10 2010 17:50:25,663 DEBUG ~ Static SQL for entity: models.Post
12 10 2010 17:50:25,663 DEBUG ~  Version select: select id from Post where id =?
12 10 2010 17:50:25,663 DEBUG ~  Snapshot select: select post_.id, post_.author_id as author5_47_, post_.content as content47_, post_.postedAt as postedAt47_, post_.title as title47_ from Post post_ where post_.id=?
12 10 2010 17:50:25,663 DEBUG ~  Insert 0: insert into Post (author_id, content, postedAt, title, id) values (?, ?, ?, ?, ?)
12 10 2010 17:50:25,663 DEBUG ~  Update 0: update Post set author_id=?, content=?, postedAt=?, title=? where id=?
12 10 2010 17:50:25,663 DEBUG ~  Delete 0: delete from Post where id=?
12 10 2010 17:50:25,663 DEBUG ~  Identity insert: insert into Post (id, author_id, content, postedAt, title) values (null, ?, ?, ?, ?)
12 10 2010 17:50:25,672 DEBUG ~ Static SQL for entity: models.User
12 10 2010 17:50:25,672 DEBUG ~  Version select: select id from User where id =?
12 10 2010 17:50:25,672 DEBUG ~  Snapshot select: select user_.id, user_.email as email46_, user_.fullname as fullname46_, user_.isAdmin as isAdmin46_, user_.password as password46_ from User user_ where user_.id=?
12 10 2010 17:50:25,672 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
12 10 2010 17:50:25,672 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
12 10 2010 17:50:25,672 DEBUG ~  Delete 0: delete from User where id=?
12 10 2010 17:50:25,672 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
12 10 2010 17:50:25,672 DEBUG ~ Static SQL for collection: models.Post.comments
12 10 2010 17:50:25,672 DEBUG ~  Row insert: update Comment set post=? where id=?
12 10 2010 17:50:25,672 DEBUG ~  Row delete: update Comment set post=null where post=? and id=?
12 10 2010 17:50:25,672 DEBUG ~  One-shot delete: update Comment set post=null where post=?
12 10 2010 17:50:25,672 DEBUG ~ Static select for entity models.Comment [NONE]: select comment0_.id as id45_0_, comment0_.author as author45_0_, comment0_.content as content45_0_, comment0_.post as post45_0_, comment0_.postedAt as postedAt45_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:25,673 DEBUG ~ Static select for entity models.Comment [READ]: select comment0_.id as id45_0_, comment0_.author as author45_0_, comment0_.content as content45_0_, comment0_.post as post45_0_, comment0_.postedAt as postedAt45_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:25,673 DEBUG ~ Static select for entity models.Comment [UPGRADE]: select comment0_.id as id45_0_, comment0_.author as author45_0_, comment0_.content as content45_0_, comment0_.post as post45_0_, comment0_.postedAt as postedAt45_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:25,673 DEBUG ~ Static select for entity models.Comment [UPGRADE_NOWAIT]: select comment0_.id as id45_0_, comment0_.author as author45_0_, comment0_.content as content45_0_, comment0_.post as post45_0_, comment0_.postedAt as postedAt45_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:25,673 DEBUG ~ Static select for entity models.Comment [FORCE]: select comment0_.id as id45_0_, comment0_.author as author45_0_, comment0_.content as content45_0_, comment0_.post as post45_0_, comment0_.postedAt as postedAt45_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:25,673 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_READ]: select comment0_.id as id45_0_, comment0_.author as author45_0_, comment0_.content as content45_0_, comment0_.post as post45_0_, comment0_.postedAt as postedAt45_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:25,673 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_WRITE]: select comment0_.id as id45_0_, comment0_.author as author45_0_, comment0_.content as content45_0_, comment0_.post as post45_0_, comment0_.postedAt as postedAt45_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:25,674 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_FORCE_INCREMENT]: select comment0_.id as id45_0_, comment0_.author as author45_0_, comment0_.content as content45_0_, comment0_.post as post45_0_, comment0_.postedAt as postedAt45_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:25,675 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC]: select comment0_.id as id45_0_, comment0_.author as author45_0_, comment0_.content as content45_0_, comment0_.post as post45_0_, comment0_.postedAt as postedAt45_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:25,675 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC_FORCE_INCREMENT]: select comment0_.id as id45_0_, comment0_.author as author45_0_, comment0_.content as content45_0_, comment0_.post as post45_0_, comment0_.postedAt as postedAt45_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:25,675 DEBUG ~ Static select for action ACTION_MERGE on entity models.Comment: select comment0_.id as id45_0_, comment0_.author as author45_0_, comment0_.content as content45_0_, comment0_.post as post45_0_, comment0_.postedAt as postedAt45_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:25,675 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Comment: select comment0_.id as id45_0_, comment0_.author as author45_0_, comment0_.content as content45_0_, comment0_.post as post45_0_, comment0_.postedAt as postedAt45_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:50:25,676 DEBUG ~ Static select for entity models.Post [NONE]: select post0_.id as id47_1_, post0_.author_id as author5_47_1_, post0_.content as content47_1_, post0_.postedAt as postedAt47_1_, post0_.title as title47_1_, user1_.id as id46_0_, user1_.email as email46_0_, user1_.fullname as fullname46_0_, user1_.isAdmin as isAdmin46_0_, user1_.password as password46_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:50:25,676 DEBUG ~ Static select for entity models.Post [READ]: select post0_.id as id47_1_, post0_.author_id as author5_47_1_, post0_.content as content47_1_, post0_.postedAt as postedAt47_1_, post0_.title as title47_1_, user1_.id as id46_0_, user1_.email as email46_0_, user1_.fullname as fullname46_0_, user1_.isAdmin as isAdmin46_0_, user1_.password as password46_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:50:25,676 DEBUG ~ Static select for entity models.Post [UPGRADE]: select post0_.id as id47_0_, post0_.author_id as author5_47_0_, post0_.content as content47_0_, post0_.postedAt as postedAt47_0_, post0_.title as title47_0_ from Post post0_ where post0_.id=?
12 10 2010 17:50:25,676 DEBUG ~ Static select for entity models.Post [UPGRADE_NOWAIT]: select post0_.id as id47_0_, post0_.author_id as author5_47_0_, post0_.content as content47_0_, post0_.postedAt as postedAt47_0_, post0_.title as title47_0_ from Post post0_ where post0_.id=?
12 10 2010 17:50:25,676 DEBUG ~ Static select for entity models.Post [FORCE]: select post0_.id as id47_0_, post0_.author_id as author5_47_0_, post0_.content as content47_0_, post0_.postedAt as postedAt47_0_, post0_.title as title47_0_ from Post post0_ where post0_.id=?
12 10 2010 17:50:25,677 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_READ]: select post0_.id as id47_0_, post0_.author_id as author5_47_0_, post0_.content as content47_0_, post0_.postedAt as postedAt47_0_, post0_.title as title47_0_ from Post post0_ where post0_.id=?
12 10 2010 17:50:25,677 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_WRITE]: select post0_.id as id47_0_, post0_.author_id as author5_47_0_, post0_.content as content47_0_, post0_.postedAt as postedAt47_0_, post0_.title as title47_0_ from Post post0_ where post0_.id=?
12 10 2010 17:50:25,677 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_FORCE_INCREMENT]: select post0_.id as id47_0_, post0_.author_id as author5_47_0_, post0_.content as content47_0_, post0_.postedAt as postedAt47_0_, post0_.title as title47_0_ from Post post0_ where post0_.id=?
12 10 2010 17:50:25,677 DEBUG ~ Static select for entity models.Post [OPTIMISTIC]: select post0_.id as id47_1_, post0_.author_id as author5_47_1_, post0_.content as content47_1_, post0_.postedAt as postedAt47_1_, post0_.title as title47_1_, user1_.id as id46_0_, user1_.email as email46_0_, user1_.fullname as fullname46_0_, user1_.isAdmin as isAdmin46_0_, user1_.password as password46_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:50:25,677 DEBUG ~ Static select for entity models.Post [OPTIMISTIC_FORCE_INCREMENT]: select post0_.id as id47_1_, post0_.author_id as author5_47_1_, post0_.content as content47_1_, post0_.postedAt as postedAt47_1_, post0_.title as title47_1_, user1_.id as id46_0_, user1_.email as email46_0_, user1_.fullname as fullname46_0_, user1_.isAdmin as isAdmin46_0_, user1_.password as password46_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:50:25,678 DEBUG ~ Static select for action ACTION_MERGE on entity models.Post: select post0_.id as id47_1_, post0_.author_id as author5_47_1_, post0_.content as content47_1_, post0_.postedAt as postedAt47_1_, post0_.title as title47_1_, comments1_.post as post47_3_, comments1_.id as id3_, comments1_.id as id45_0_, comments1_.author as author45_0_, comments1_.content as content45_0_, comments1_.post as post45_0_, comments1_.postedAt as postedAt45_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post where post0_.id=?
12 10 2010 17:50:25,678 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Post: select post0_.id as id47_1_, post0_.author_id as author5_47_1_, post0_.content as content47_1_, post0_.postedAt as postedAt47_1_, post0_.title as title47_1_, comments1_.post as post47_3_, comments1_.id as id3_, comments1_.id as id45_0_, comments1_.author as author45_0_, comments1_.content as content45_0_, comments1_.post as post45_0_, comments1_.postedAt as postedAt45_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post where post0_.id=?
12 10 2010 17:50:25,678 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id46_0_, user0_.email as email46_0_, user0_.fullname as fullname46_0_, user0_.isAdmin as isAdmin46_0_, user0_.password as password46_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:25,678 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id46_0_, user0_.email as email46_0_, user0_.fullname as fullname46_0_, user0_.isAdmin as isAdmin46_0_, user0_.password as password46_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:25,679 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id46_0_, user0_.email as email46_0_, user0_.fullname as fullname46_0_, user0_.isAdmin as isAdmin46_0_, user0_.password as password46_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:25,679 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id46_0_, user0_.email as email46_0_, user0_.fullname as fullname46_0_, user0_.isAdmin as isAdmin46_0_, user0_.password as password46_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:25,679 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id46_0_, user0_.email as email46_0_, user0_.fullname as fullname46_0_, user0_.isAdmin as isAdmin46_0_, user0_.password as password46_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:25,679 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id46_0_, user0_.email as email46_0_, user0_.fullname as fullname46_0_, user0_.isAdmin as isAdmin46_0_, user0_.password as password46_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:25,679 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id46_0_, user0_.email as email46_0_, user0_.fullname as fullname46_0_, user0_.isAdmin as isAdmin46_0_, user0_.password as password46_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:25,679 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id46_0_, user0_.email as email46_0_, user0_.fullname as fullname46_0_, user0_.isAdmin as isAdmin46_0_, user0_.password as password46_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:25,679 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id46_0_, user0_.email as email46_0_, user0_.fullname as fullname46_0_, user0_.isAdmin as isAdmin46_0_, user0_.password as password46_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:25,679 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id46_0_, user0_.email as email46_0_, user0_.fullname as fullname46_0_, user0_.isAdmin as isAdmin46_0_, user0_.password as password46_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:25,680 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id46_0_, user0_.email as email46_0_, user0_.fullname as fullname46_0_, user0_.isAdmin as isAdmin46_0_, user0_.password as password46_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:25,680 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id46_0_, user0_.email as email46_0_, user0_.fullname as fullname46_0_, user0_.isAdmin as isAdmin46_0_, user0_.password as password46_0_ from User user0_ where user0_.id=?
12 10 2010 17:50:25,680 DEBUG ~ Static select for one-to-many models.Post.comments: select comments0_.post as post47_1_, comments0_.id as id1_, comments0_.id as id45_0_, comments0_.author as author45_0_, comments0_.content as content45_0_, comments0_.post as post45_0_, comments0_.postedAt as postedAt45_0_ from Comment comments0_ where comments0_.post=?
12 10 2010 17:50:25,680 DEBUG ~ registered: 2c9082cd2b9f0d81012b9fa22710000d (unnamed)
12 10 2010 17:50:25,680 INFO  ~ Not binding factory to JNDI, no JNDI name configured
12 10 2010 17:50:25,680 DEBUG ~ instantiated session factory
12 10 2010 17:50:25,680 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:50:25,680 DEBUG ~ Process hbm files
12 10 2010 17:50:25,680 DEBUG ~ Process annotated classes
12 10 2010 17:50:25,680 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:50:25,680 DEBUG ~ processing extends queue
12 10 2010 17:50:25,680 DEBUG ~ processing collection mappings
12 10 2010 17:50:25,680 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:50:25,680 DEBUG ~ processing association property references
12 10 2010 17:50:25,680 DEBUG ~ processing foreign key constraints
12 10 2010 17:50:25,680 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:50:25,680 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:50:25,682 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:25,682 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:25,682 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:25,682 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:50:25,682 DEBUG ~ Process hbm files
12 10 2010 17:50:25,682 DEBUG ~ Process annotated classes
12 10 2010 17:50:25,682 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:50:25,683 DEBUG ~ processing extends queue
12 10 2010 17:50:25,683 DEBUG ~ processing collection mappings
12 10 2010 17:50:25,683 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:50:25,683 DEBUG ~ processing association property references
12 10 2010 17:50:25,683 DEBUG ~ processing foreign key constraints
12 10 2010 17:50:25,683 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:50:25,683 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:50:25,684 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:25,685 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:25,685 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:25,685 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:25,685 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:25,685 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:25,685 INFO  ~ Running hbm2ddl schema export
12 10 2010 17:50:25,685 DEBUG ~ import file not found: /import.sql
12 10 2010 17:50:25,685 INFO  ~ exporting generated schema to database
12 10 2010 17:50:25,685 DEBUG ~ alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 17:50:25,686 DEBUG ~ Unsuccessful: alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 17:50:25,686 DEBUG ~ Table not found: COMMENT in statement [alter table Comment]
12 10 2010 17:50:25,686 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 17:50:25,686 DEBUG ~ Unsuccessful: alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 17:50:25,686 DEBUG ~ Table not found: POST in statement [alter table Post]
12 10 2010 17:50:25,686 DEBUG ~ drop table Comment if exists
12 10 2010 17:50:25,686 DEBUG ~ drop table Post if exists
12 10 2010 17:50:25,686 DEBUG ~ drop table User if exists
12 10 2010 17:50:25,686 DEBUG ~ create table Comment (id bigint generated by default as identity (start with 1), author varchar(255), content varchar(255), post varbinary(255), postedAt timestamp, primary key (id))
12 10 2010 17:50:25,686 DEBUG ~ create table Post (id bigint generated by default as identity (start with 1), content longvarchar, postedAt timestamp, title varchar(255), author_id bigint, primary key (id))
12 10 2010 17:50:25,686 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
12 10 2010 17:50:25,687 DEBUG ~ alter table Comment add constraint FK9BDE863F500B6664 foreign key (post) references Post
12 10 2010 17:50:25,687 ERROR ~ Unsuccessful: alter table Comment add constraint FK9BDE863F500B6664 foreign key (post) references Post
12 10 2010 17:50:25,687 ERROR ~ Column types do not match in statement [alter table Comment add constraint FK9BDE863F500B6664 foreign key (post) references Post]
12 10 2010 17:50:25,687 DEBUG ~ alter table Post add constraint FK260CC0A7CD013E foreign key (author_id) references User
12 10 2010 17:50:25,687 INFO  ~ schema export complete
12 10 2010 17:50:25,688 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:50:25,688 DEBUG ~ Process hbm files
12 10 2010 17:50:25,688 DEBUG ~ Process annotated classes
12 10 2010 17:50:25,688 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:50:25,688 DEBUG ~ processing extends queue
12 10 2010 17:50:25,688 DEBUG ~ processing collection mappings
12 10 2010 17:50:25,688 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:50:25,688 DEBUG ~ processing association property references
12 10 2010 17:50:25,688 DEBUG ~ processing foreign key constraints
12 10 2010 17:50:25,688 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:50:25,688 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:50:25,690 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:25,690 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:25,690 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:25,690 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:50:25,690 DEBUG ~ Process hbm files
12 10 2010 17:50:25,690 DEBUG ~ Process annotated classes
12 10 2010 17:50:25,690 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:50:25,690 DEBUG ~ processing extends queue
12 10 2010 17:50:25,690 DEBUG ~ processing collection mappings
12 10 2010 17:50:25,690 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:50:25,690 DEBUG ~ processing association property references
12 10 2010 17:50:25,690 DEBUG ~ processing foreign key constraints
12 10 2010 17:50:25,690 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:50:25,690 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:50:25,692 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:25,692 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:25,692 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:25,692 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:25,692 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:25,692 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:50:25,692 DEBUG ~ Checking 0 named HQL queries
12 10 2010 17:50:25,693 DEBUG ~ Checking 0 named SQL queries
12 10 2010 17:50:25,700 DEBUG ~ opened session at timestamp: 12868734257
12 10 2010 17:50:25,700 DEBUG ~ begin
12 10 2010 17:50:25,700 DEBUG ~ opening JDBC connection
12 10 2010 17:50:25,700 DEBUG ~ current autocommit status: true
12 10 2010 17:50:25,700 DEBUG ~ disabling autocommit
12 10 2010 17:50:25,775 DEBUG ~ commit
12 10 2010 17:50:25,775 DEBUG ~ re-enabling autocommit
12 10 2010 17:50:25,775 DEBUG ~ committed JDBC Connection
12 10 2010 17:50:25,775 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:50:25,775 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:50:27,382 DEBUG ~ opened session at timestamp: 12868734273
12 10 2010 17:50:27,382 DEBUG ~ begin
12 10 2010 17:50:27,382 DEBUG ~ opening JDBC connection
12 10 2010 17:50:27,382 DEBUG ~ current autocommit status: true
12 10 2010 17:50:27,382 DEBUG ~ disabling autocommit
12 10 2010 17:50:27,391 DEBUG ~ commit
12 10 2010 17:50:27,391 DEBUG ~ re-enabling autocommit
12 10 2010 17:50:27,392 DEBUG ~ committed JDBC Connection
12 10 2010 17:50:27,392 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:50:27,392 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:50:27,410 DEBUG ~ opened session at timestamp: 12868734274
12 10 2010 17:50:27,410 DEBUG ~ begin
12 10 2010 17:50:27,410 DEBUG ~ opening JDBC connection
12 10 2010 17:50:27,410 DEBUG ~ current autocommit status: true
12 10 2010 17:50:27,410 DEBUG ~ disabling autocommit
12 10 2010 17:50:27,663 DEBUG ~ executing identity-insert immediately
12 10 2010 17:50:27,663 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,664 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,664 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,664 DEBUG ~ Natively generated identity: 1
12 10 2010 17:50:27,664 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,664 DEBUG ~ processing flush-time cascades
12 10 2010 17:50:27,664 DEBUG ~ dirty checking collections
12 10 2010 17:50:27,664 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:50:27,664 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:50:27,664 DEBUG ~ listing entities:
12 10 2010 17:50:27,664 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:50:27,666 DEBUG ~ parse() - HQL: from models.User where email = ?
12 10 2010 17:50:27,667 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'email'
          \-[PARAM] Node: '?'

12 10 2010 17:50:27,667 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:27,667 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:50:27,667 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 17:50:27,668 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:50:27,668 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 17:50:27,668 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 17:50:27,668 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:50:27,668 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.email {synthetic-alias} email ) ? ) ) )
12 10 2010 17:50:27,668 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:50:27,668 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 17:50:27,668 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:50:27,669 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id46_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email46_, user0_.fullname as fullname46_, user0_.isAdmin as isAdmin46_, user0_.password as password46_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'email' {originalText=email}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 17:50:27,669 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:27,669 DEBUG ~ HQL: from models.User where email = ?
12 10 2010 17:50:27,669 DEBUG ~ SQL: select user0_.id as id46_, user0_.email as email46_, user0_.fullname as fullname46_, user0_.isAdmin as isAdmin46_, user0_.password as password46_ from User user0_ where user0_.email=?
12 10 2010 17:50:27,669 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:27,669 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,669 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:50:27,670 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 17:50:27,670 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:50:27,670 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,670 DEBUG ~ initializing non-lazy collections
12 10 2010 17:50:27,671 DEBUG ~ executing identity-insert immediately
12 10 2010 17:50:27,671 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,671 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,671 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,671 DEBUG ~ Natively generated identity: 2
12 10 2010 17:50:27,671 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,671 DEBUG ~ processing flush-time cascades
12 10 2010 17:50:27,671 DEBUG ~ dirty checking collections
12 10 2010 17:50:27,671 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:50:27,671 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:50:27,671 DEBUG ~ listing entities:
12 10 2010 17:50:27,671 DEBUG ~ models.User{id=2, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:50:27,672 DEBUG ~ parse() - HQL: from models.User where email = ? AND password = ?
12 10 2010 17:50:27,674 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'AND'
          +-[EQ] Node: '='
          |  +-[IDENT] Node: 'email'
          |  \-[PARAM] Node: '?'
          \-[EQ] Node: '='
             +-[IDENT] Node: 'password'
             \-[PARAM] Node: '?'

12 10 2010 17:50:27,674 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:27,674 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:50:27,674 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 17:50:27,675 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:50:27,675 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 17:50:27,675 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 17:50:27,675 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:50:27,675 DEBUG ~ getDataType() : password -> org.hibernate.type.StringType@18b3c498
12 10 2010 17:50:27,675 DEBUG ~ Resolved :  {synthetic-alias}.password -> user0_.password
12 10 2010 17:50:27,675 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:50:27,675 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( AND ( = ( user0_.email {synthetic-alias} email ) ? ) ( = ( user0_.password {synthetic-alias} password ) ? ) ) ) )
12 10 2010 17:50:27,675 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:50:27,675 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 17:50:27,675 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:50:27,676 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id46_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email46_, user0_.fullname as fullname46_, user0_.isAdmin as isAdmin46_, user0_.password as password46_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'AND'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  |  \-[IDENT] IdentNode: 'email' {originalText=email}
          |  \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'user0_.password' {propertyName=password,dereferenceType=ALL,propertyPath=password,path={synthetic-alias}.password,tableAlias=user0_,className=models.User,classAlias=null}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'password' {originalText=password}
             \-[PARAM] ParameterNode: '?' {ordinal=1, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 17:50:27,676 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:27,676 DEBUG ~ HQL: from models.User where email = ? AND password = ?
12 10 2010 17:50:27,676 DEBUG ~ SQL: select user0_.id as id46_, user0_.email as email46_, user0_.fullname as fullname46_, user0_.isAdmin as isAdmin46_, user0_.password as password46_ from User user0_ where user0_.email=? and user0_.password=?
12 10 2010 17:50:27,676 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:27,677 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,677 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:50:27,677 DEBUG ~ result row: EntityKey[models.User#2]
12 10 2010 17:50:27,677 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:50:27,677 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,677 DEBUG ~ initializing non-lazy collections
12 10 2010 17:50:27,677 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,678 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:50:27,678 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:50:27,678 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,678 DEBUG ~ initializing non-lazy collections
12 10 2010 17:50:27,678 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,678 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:50:27,678 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:50:27,678 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,678 DEBUG ~ initializing non-lazy collections
12 10 2010 17:50:27,679 DEBUG ~ executing identity-insert immediately
12 10 2010 17:50:27,679 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,679 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,679 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,679 DEBUG ~ Natively generated identity: 3
12 10 2010 17:50:27,679 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,680 DEBUG ~ processing flush-time cascades
12 10 2010 17:50:27,680 DEBUG ~ dirty checking collections
12 10 2010 17:50:27,680 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:50:27,680 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:50:27,680 DEBUG ~ listing entities:
12 10 2010 17:50:27,680 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:50:27,680 DEBUG ~ executing identity-insert immediately
12 10 2010 17:50:27,680 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,681 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,681 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,681 DEBUG ~ Natively generated identity: 1
12 10 2010 17:50:27,681 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,682 DEBUG ~ processing flush-time cascades
12 10 2010 17:50:27,682 DEBUG ~ dirty checking collections
12 10 2010 17:50:27,682 DEBUG ~ Collection found: [models.Post.comments#1], was: [<unreferenced>] (initialized)
12 10 2010 17:50:27,682 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 17:50:27,682 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:50:27,682 DEBUG ~ listing entities:
12 10 2010 17:50:27,682 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:50:27,682 DEBUG ~ models.Post{content=hello world, id=1, author=models.User#3, title=first post, comments=[], postedAt=2010-10-12 17:50:27}
12 10 2010 17:50:27,683 DEBUG ~ parse() - HQL: select count(e) from models.Post e
12 10 2010 17:50:27,686 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'Post'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

12 10 2010 17:50:27,686 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:27,686 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:50:27,686 DEBUG ~ FromClause{level=1} :  models.Post (e) -> post0_
12 10 2010 17:50:27,686 DEBUG ~ Resolved :  e -> post0_.id
12 10 2010 17:50:27,686 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:50:27,686 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count post0_.id ) ) ( FromClause{level=1} Post post0_ ) )
12 10 2010 17:50:27,686 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 17:50:27,686 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:50:27,687 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'post0_.id' {alias=e, className=models.Post, tableAlias=post0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}

12 10 2010 17:50:27,687 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:27,687 DEBUG ~ HQL: select count(e) from models.Post e
12 10 2010 17:50:27,687 DEBUG ~ SQL: select count(post0_.id) as col_0_0_ from Post post0_
12 10 2010 17:50:27,687 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:27,687 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,687 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:50:27,687 DEBUG ~ result row: 
12 10 2010 17:50:27,687 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:50:27,687 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,688 DEBUG ~ initializing non-lazy collections
12 10 2010 17:50:27,688 DEBUG ~ parse() - HQL: from models.Post where author = ?
12 10 2010 17:50:27,690 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'author'
          \-[PARAM] Node: '?'

12 10 2010 17:50:27,690 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:27,690 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:50:27,690 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
12 10 2010 17:50:27,690 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:50:27,690 DEBUG ~ getDataType() : author -> org.hibernate.type.ManyToOneType(models.User)
12 10 2010 17:50:27,690 DEBUG ~ dereferenceShortcut() : property author in models.Post does not require a join.
12 10 2010 17:50:27,690 DEBUG ~ terminal propertyPath = [author]
12 10 2010 17:50:27,690 DEBUG ~ Resolved :  {synthetic-alias}.author -> post0_.author_id
12 10 2010 17:50:27,690 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:50:27,690 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( = ( post0_.author_id {synthetic-alias} author ) ? ) ) )
12 10 2010 17:50:27,690 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:50:27,691 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 17:50:27,691 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:50:27,691 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id47_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_47_, post0_.content as content47_, post0_.postedAt as postedAt47_, post0_.title as title47_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'post0_.author_id' {propertyName=author,dereferenceType=0,propertyPath=author,path={synthetic-alias}.author,tableAlias=post0_,className=models.Post,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'author' {originalText=author}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.ManyToOneType(models.User)}

12 10 2010 17:50:27,691 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:27,691 DEBUG ~ HQL: from models.Post where author = ?
12 10 2010 17:50:27,691 DEBUG ~ SQL: select post0_.id as id47_, post0_.author_id as author5_47_, post0_.content as content47_, post0_.postedAt as postedAt47_, post0_.title as title47_ from Post post0_ where post0_.author_id=?
12 10 2010 17:50:27,692 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:27,692 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,692 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:50:27,692 DEBUG ~ result row: EntityKey[models.Post#1]
12 10 2010 17:50:27,692 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:50:27,692 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,692 DEBUG ~ initializing non-lazy collections
12 10 2010 17:50:27,693 DEBUG ~ executing identity-insert immediately
12 10 2010 17:50:27,693 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,693 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,693 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,694 DEBUG ~ Natively generated identity: 4
12 10 2010 17:50:27,694 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,694 DEBUG ~ processing flush-time cascades
12 10 2010 17:50:27,694 DEBUG ~ dirty checking collections
12 10 2010 17:50:27,694 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:50:27,694 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:50:27,694 DEBUG ~ listing entities:
12 10 2010 17:50:27,694 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:50:27,694 DEBUG ~ executing identity-insert immediately
12 10 2010 17:50:27,695 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,695 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,695 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,695 DEBUG ~ Natively generated identity: 2
12 10 2010 17:50:27,695 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,696 DEBUG ~ processing flush-time cascades
12 10 2010 17:50:27,696 DEBUG ~ dirty checking collections
12 10 2010 17:50:27,696 DEBUG ~ Collection found: [models.Post.comments#2], was: [<unreferenced>] (initialized)
12 10 2010 17:50:27,696 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 17:50:27,696 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:50:27,696 DEBUG ~ listing entities:
12 10 2010 17:50:27,696 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, comments=[], postedAt=2010-10-12 17:50:27}
12 10 2010 17:50:27,697 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:50:27,707 DEBUG ~ executing identity-insert immediately
12 10 2010 17:50:27,707 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,708 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,708 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,708 DEBUG ~ Natively generated identity: 1
12 10 2010 17:50:27,708 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,709 DEBUG ~ processing flush-time cascades
12 10 2010 17:50:27,709 DEBUG ~ dirty checking collections
12 10 2010 17:50:27,709 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
12 10 2010 17:50:27,710 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 17:50:27,710 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:50:27,710 DEBUG ~ listing entities:
12 10 2010 17:50:27,711 DEBUG ~ models.Comment{content=nice post, id=1, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f4542a90be0e4af224828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808082f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808480f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808082f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f22ae6ef8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:50:27}
12 10 2010 17:50:27,711 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, comments=[], postedAt=2010-10-12 17:50:27}
12 10 2010 17:50:27,711 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:50:27,712 DEBUG ~ executing identity-insert immediately
12 10 2010 17:50:27,712 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,713 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,713 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,713 DEBUG ~ Natively generated identity: 2
12 10 2010 17:50:27,713 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,713 DEBUG ~ processing flush-time cascades
12 10 2010 17:50:27,713 DEBUG ~ dirty checking collections
12 10 2010 17:50:27,714 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
12 10 2010 17:50:27,714 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 17:50:27,715 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:50:27,715 DEBUG ~ listing entities:
12 10 2010 17:50:27,716 DEBUG ~ models.Comment{content=nice post, id=1, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f4542a90be0e4af224828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808082f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808480f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808082f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f22ae6ef8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:50:27}
12 10 2010 17:50:27,717 DEBUG ~ models.Comment{content=i knew that !, id=2, author=Tom, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f4542a90be0e4af224828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808082f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808480f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808082f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f22ae6ef8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:50:27}
12 10 2010 17:50:27,717 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, comments=[], postedAt=2010-10-12 17:50:27}
12 10 2010 17:50:27,717 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:50:27,718 DEBUG ~ parse() - HQL: from models.Comment where post = ?
12 10 2010 17:50:27,720 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Comment'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'post'
          \-[PARAM] Node: '?'

12 10 2010 17:50:27,720 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:27,720 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:50:27,720 DEBUG ~ FromClause{level=1} :  models.Comment (no alias) -> comment0_
12 10 2010 17:50:27,720 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:50:27,720 DEBUG ~ getDataType() : post -> org.hibernate.type.SerializableType@772da887
12 10 2010 17:50:27,720 DEBUG ~ Resolved :  {synthetic-alias}.post -> comment0_.post
12 10 2010 17:50:27,721 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:50:27,721 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Comment comment0_ ) ( where ( = ( comment0_.post {synthetic-alias} post ) ? ) ) )
12 10 2010 17:50:27,721 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:50:27,721 DEBUG ~ Using FROM fragment [Comment comment0_]
12 10 2010 17:50:27,721 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:50:27,721 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Comment)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'comment0_.id as id45_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Comment,tableAlias=comment0_,origin=null,columns={,className=models.Comment}}}
    |  \-[SQL_TOKEN] SqlFragment: 'comment0_.author as author45_, comment0_.content as content45_, comment0_.post as post45_, comment0_.postedAt as postedAt45_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[comment0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Comment comment0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Comment,tableAlias=comment0_,origin=null,columns={,className=models.Comment}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'comment0_.post' {propertyName=post,dereferenceType=ALL,propertyPath=post,path={synthetic-alias}.post,tableAlias=comment0_,className=models.Comment,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'post' {originalText=post}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.SerializableType@772da887}

12 10 2010 17:50:27,722 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:27,722 DEBUG ~ HQL: from models.Comment where post = ?
12 10 2010 17:50:27,722 DEBUG ~ SQL: select comment0_.id as id45_, comment0_.author as author45_, comment0_.content as content45_, comment0_.post as post45_, comment0_.postedAt as postedAt45_ from Comment comment0_ where comment0_.post=?
12 10 2010 17:50:27,722 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:27,722 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,723 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:50:27,723 DEBUG ~ result row: EntityKey[models.Comment#1]
12 10 2010 17:50:27,723 DEBUG ~ result row: EntityKey[models.Comment#2]
12 10 2010 17:50:27,723 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:50:27,723 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,723 DEBUG ~ initializing non-lazy collections
12 10 2010 17:50:27,724 DEBUG ~ executing identity-insert immediately
12 10 2010 17:50:27,724 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,724 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,724 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,724 DEBUG ~ Natively generated identity: 5
12 10 2010 17:50:27,724 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,725 DEBUG ~ processing flush-time cascades
12 10 2010 17:50:27,725 DEBUG ~ dirty checking collections
12 10 2010 17:50:27,725 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:50:27,725 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:50:27,725 DEBUG ~ listing entities:
12 10 2010 17:50:27,725 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:50:27,725 DEBUG ~ executing identity-insert immediately
12 10 2010 17:50:27,725 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,726 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,726 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,726 DEBUG ~ Natively generated identity: 3
12 10 2010 17:50:27,726 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,726 DEBUG ~ processing flush-time cascades
12 10 2010 17:50:27,726 DEBUG ~ dirty checking collections
12 10 2010 17:50:27,726 DEBUG ~ Collection found: [models.Post.comments#3], was: [<unreferenced>] (initialized)
12 10 2010 17:50:27,726 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 17:50:27,726 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:50:27,727 DEBUG ~ listing entities:
12 10 2010 17:50:27,727 DEBUG ~ models.Post{content=hello world, id=3, author=models.User#5, title=first post, comments=[], postedAt=2010-10-12 17:50:27}
12 10 2010 17:50:27,727 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:50:27,728 DEBUG ~ executing identity-insert immediately
12 10 2010 17:50:27,728 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,729 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,729 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,729 DEBUG ~ Natively generated identity: 3
12 10 2010 17:50:27,729 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,729 DEBUG ~ processing flush-time cascades
12 10 2010 17:50:27,729 DEBUG ~ dirty checking collections
12 10 2010 17:50:27,729 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
12 10 2010 17:50:27,730 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 17:50:27,730 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:50:27,730 DEBUG ~ listing entities:
12 10 2010 17:50:27,731 DEBUG ~ models.Comment{content=nice post, id=3, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f4542a90be0e4af224828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808083f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808580f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808083f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f22af8df8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:50:27}
12 10 2010 17:50:27,731 DEBUG ~ models.Post{content=hello world, id=3, author=models.User#5, title=first post, comments=[], postedAt=2010-10-12 17:50:27}
12 10 2010 17:50:27,731 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:50:27,732 DEBUG ~ executing identity-insert immediately
12 10 2010 17:50:27,732 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,732 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,733 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,733 DEBUG ~ Natively generated identity: 4
12 10 2010 17:50:27,733 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,733 DEBUG ~ processing flush-time cascades
12 10 2010 17:50:27,733 DEBUG ~ dirty checking collections
12 10 2010 17:50:27,733 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
12 10 2010 17:50:27,735 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 17:50:27,735 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:50:27,735 DEBUG ~ listing entities:
12 10 2010 17:50:27,735 DEBUG ~ models.Comment{content=nice post, id=3, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f4542a90be0e4af224828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808083f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808580f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808083f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f22af8df8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:50:27}
12 10 2010 17:50:27,736 DEBUG ~ models.Post{content=hello world, id=3, author=models.User#5, title=first post, comments=[], postedAt=2010-10-12 17:50:27}
12 10 2010 17:50:27,737 DEBUG ~ models.Comment{content=i knew that !, id=4, author=Tom, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f4542a90be0e4af224828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808083f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808580f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808083f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f22af8df8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:50:27}
12 10 2010 17:50:27,737 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:50:27,737 DEBUG ~ parse() - HQL: select count(e) from models.User e
12 10 2010 17:50:27,739 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'User'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

12 10 2010 17:50:27,739 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:27,739 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:50:27,740 DEBUG ~ FromClause{level=1} :  models.User (e) -> user0_
12 10 2010 17:50:27,740 DEBUG ~ Resolved :  e -> user0_.id
12 10 2010 17:50:27,740 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:50:27,740 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count user0_.id ) ) ( FromClause{level=1} User user0_ ) )
12 10 2010 17:50:27,740 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 17:50:27,740 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:50:27,741 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'user0_.id' {alias=e, className=models.User, tableAlias=user0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}

12 10 2010 17:50:27,741 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:27,741 DEBUG ~ HQL: select count(e) from models.User e
12 10 2010 17:50:27,741 DEBUG ~ SQL: select count(user0_.id) as col_0_0_ from User user0_
12 10 2010 17:50:27,741 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:27,741 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,742 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:50:27,742 DEBUG ~ result row: 
12 10 2010 17:50:27,742 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:50:27,742 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,742 DEBUG ~ initializing non-lazy collections
12 10 2010 17:50:27,742 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,742 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:50:27,742 DEBUG ~ result row: 
12 10 2010 17:50:27,742 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:50:27,742 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,742 DEBUG ~ initializing non-lazy collections
12 10 2010 17:50:27,743 DEBUG ~ parse() - HQL: select count(e) from models.Comment e
12 10 2010 17:50:27,745 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'Comment'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

12 10 2010 17:50:27,745 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:27,745 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:50:27,745 DEBUG ~ FromClause{level=1} :  models.Comment (e) -> comment0_
12 10 2010 17:50:27,745 DEBUG ~ Resolved :  e -> comment0_.id
12 10 2010 17:50:27,746 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:50:27,746 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count comment0_.id ) ) ( FromClause{level=1} Comment comment0_ ) )
12 10 2010 17:50:27,746 DEBUG ~ Using FROM fragment [Comment comment0_]
12 10 2010 17:50:27,746 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:50:27,746 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Comment)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'comment0_.id' {alias=e, className=models.Comment, tableAlias=comment0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[comment0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Comment comment0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=Comment,tableAlias=comment0_,origin=null,columns={,className=models.Comment}}

12 10 2010 17:50:27,746 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:27,746 DEBUG ~ HQL: select count(e) from models.Comment e
12 10 2010 17:50:27,747 DEBUG ~ SQL: select count(comment0_.id) as col_0_0_ from Comment comment0_
12 10 2010 17:50:27,747 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:50:27,747 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,747 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:50:27,747 DEBUG ~ result row: 
12 10 2010 17:50:27,747 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:50:27,747 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,747 DEBUG ~ initializing non-lazy collections
12 10 2010 17:50:27,748 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:50:27,748 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:50:27,748 DEBUG ~ result row: EntityKey[models.Post#3]
12 10 2010 17:50:27,748 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:50:27,748 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:50:27,748 DEBUG ~ initializing non-lazy collections
12 10 2010 17:50:27,782 DEBUG ~ commit
12 10 2010 17:50:27,782 DEBUG ~ processing flush-time cascades
12 10 2010 17:50:27,783 DEBUG ~ dirty checking collections
12 10 2010 17:50:27,783 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
12 10 2010 17:50:27,783 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 17:50:27,783 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:50:27,783 DEBUG ~ listing entities:
12 10 2010 17:50:27,784 DEBUG ~ models.Comment{content=nice post, id=3, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f4542a90be0e4af224828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808083f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808580f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808083f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f22af8df8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:50:27}
12 10 2010 17:50:27,784 DEBUG ~ models.Post{content=hello world, id=3, author=models.User#5, title=first post, comments=[], postedAt=2010-10-12 17:50:27}
12 10 2010 17:50:27,785 DEBUG ~ models.Comment{content=i knew that !, id=4, author=Tom, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f4542a90be0e4af224828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808083f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808580f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808083f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f22af8df8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:50:27}
12 10 2010 17:50:27,785 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:50:27,785 DEBUG ~ re-enabling autocommit
12 10 2010 17:50:27,785 DEBUG ~ committed JDBC Connection
12 10 2010 17:50:27,785 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:50:27,785 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:50:27,842 DEBUG ~ opened session at timestamp: 12868734278
12 10 2010 17:50:27,842 DEBUG ~ begin
12 10 2010 17:50:27,842 DEBUG ~ opening JDBC connection
12 10 2010 17:50:27,843 DEBUG ~ current autocommit status: true
12 10 2010 17:50:27,843 DEBUG ~ disabling autocommit
12 10 2010 17:50:27,851 DEBUG ~ commit
12 10 2010 17:50:27,851 DEBUG ~ re-enabling autocommit
12 10 2010 17:50:27,851 DEBUG ~ committed JDBC Connection
12 10 2010 17:50:27,851 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:50:27,851 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:51:58,247 ERROR ~ 

@645j8gmad
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 77)
The file /test/BasicTest.scala could not be compiled. Error raised is : value addComment is not a member of models.Post

play.exceptions.CompilationException: value addComment is not a member of models.Post
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 17:53:22,664 ERROR ~ 

@645j8gmae
Internal Server Error (500) for request GET /@tests

Compilation error (In /app/models/Post.scala around line 22)
The file /app/models/Post.scala could not be compiled. Error raised is : not found: type Comments

play.exceptions.CompilationException: not found: type Comments
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 17:53:36,709 INFO  ~ closing
12 10 2010 17:53:36,710 INFO  ~ Running hbm2ddl schema export
12 10 2010 17:53:36,710 DEBUG ~ import file not found: /import.sql
12 10 2010 17:53:36,710 INFO  ~ exporting generated schema to database
12 10 2010 17:53:36,710 DEBUG ~ alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 17:53:36,711 DEBUG ~ Unsuccessful: alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 17:53:36,711 DEBUG ~ Constraint not found FK9BDE863F500B6664 in table: COMMENT in statement [alter table Comment drop constraint FK9BDE863F500B6664]
12 10 2010 17:53:36,711 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 17:53:36,711 DEBUG ~ drop table Comment if exists
12 10 2010 17:53:36,711 DEBUG ~ drop table Post if exists
12 10 2010 17:53:36,711 DEBUG ~ drop table User if exists
12 10 2010 17:53:36,711 INFO  ~ schema export complete
12 10 2010 17:53:36,752 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 17:53:36,752 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
12 10 2010 17:53:36,752 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
12 10 2010 17:53:36,752 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
12 10 2010 17:53:36,752 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
12 10 2010 17:53:36,752 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
12 10 2010 17:53:36,753 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
12 10 2010 17:53:36,753 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
12 10 2010 17:53:36,753 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
12 10 2010 17:53:36,753 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
12 10 2010 17:53:36,753 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 17:53:36,753 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
12 10 2010 17:53:36,753 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
12 10 2010 17:53:36,753 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
12 10 2010 17:53:36,754 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:53:36,754 DEBUG ~ Process hbm files
12 10 2010 17:53:36,754 DEBUG ~ Process annotated classes
12 10 2010 17:53:36,754 INFO  ~ Binding entity from annotated class: models.Comment
12 10 2010 17:53:36,754 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 17:53:36,754 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 17:53:36,754 DEBUG ~ Import with entity name Comment
12 10 2010 17:53:36,754 INFO  ~ Bind entity models.Comment on table Comment
12 10 2010 17:53:36,757 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 17:53:36,757 DEBUG ~ binding property id with lazy=false
12 10 2010 17:53:36,757 DEBUG ~ building SimpleValue for id
12 10 2010 17:53:36,758 DEBUG ~ Building property id
12 10 2010 17:53:36,758 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=author, insertable=true, updatable=true, unique=false}
12 10 2010 17:53:36,758 DEBUG ~ binding property author with lazy=false
12 10 2010 17:53:36,758 DEBUG ~ building SimpleValue for author
12 10 2010 17:53:36,758 DEBUG ~ Building property author
12 10 2010 17:53:36,758 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=content, insertable=true, updatable=true, unique=false}
12 10 2010 17:53:36,758 DEBUG ~ binding property content with lazy=false
12 10 2010 17:53:36,758 DEBUG ~ building SimpleValue for content
12 10 2010 17:53:36,758 DEBUG ~ Building property content
12 10 2010 17:53:36,758 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=post, insertable=true, updatable=true, unique=false}
12 10 2010 17:53:36,758 DEBUG ~ binding property post with lazy=false
12 10 2010 17:53:36,758 DEBUG ~ building SimpleValue for post
12 10 2010 17:53:36,758 DEBUG ~ Building property post
12 10 2010 17:53:36,758 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
12 10 2010 17:53:36,758 DEBUG ~ binding property postedAt with lazy=false
12 10 2010 17:53:36,758 DEBUG ~ building SimpleValue for postedAt
12 10 2010 17:53:36,759 DEBUG ~ Building property postedAt
12 10 2010 17:53:36,759 INFO  ~ Binding entity from annotated class: models.User
12 10 2010 17:53:36,759 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 17:53:36,759 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 17:53:36,759 DEBUG ~ Import with entity name User
12 10 2010 17:53:36,759 INFO  ~ Bind entity models.User on table User
12 10 2010 17:53:36,760 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 17:53:36,760 DEBUG ~ binding property id with lazy=false
12 10 2010 17:53:36,760 DEBUG ~ building SimpleValue for id
12 10 2010 17:53:36,760 DEBUG ~ Building property id
12 10 2010 17:53:36,760 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
12 10 2010 17:53:36,760 DEBUG ~ binding property email with lazy=false
12 10 2010 17:53:36,761 DEBUG ~ building SimpleValue for email
12 10 2010 17:53:36,761 DEBUG ~ Building property email
12 10 2010 17:53:36,761 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
12 10 2010 17:53:36,761 DEBUG ~ binding property fullname with lazy=false
12 10 2010 17:53:36,761 DEBUG ~ building SimpleValue for fullname
12 10 2010 17:53:36,761 DEBUG ~ Building property fullname
12 10 2010 17:53:36,761 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
12 10 2010 17:53:36,761 DEBUG ~ binding property isAdmin with lazy=false
12 10 2010 17:53:36,761 DEBUG ~ building SimpleValue for isAdmin
12 10 2010 17:53:36,761 DEBUG ~ Building property isAdmin
12 10 2010 17:53:36,761 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
12 10 2010 17:53:36,761 DEBUG ~ binding property password with lazy=false
12 10 2010 17:53:36,761 DEBUG ~ building SimpleValue for password
12 10 2010 17:53:36,761 DEBUG ~ Building property password
12 10 2010 17:53:36,761 INFO  ~ Binding entity from annotated class: models.Post
12 10 2010 17:53:36,761 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 17:53:36,762 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 17:53:36,762 DEBUG ~ Import with entity name Post
12 10 2010 17:53:36,762 INFO  ~ Bind entity models.Post on table Post
12 10 2010 17:53:36,765 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 17:53:36,765 DEBUG ~ binding property id with lazy=false
12 10 2010 17:53:36,765 DEBUG ~ building SimpleValue for id
12 10 2010 17:53:36,765 DEBUG ~ Building property id
12 10 2010 17:53:36,766 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
12 10 2010 17:53:36,766 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=author, insertable=true, updatable=true, unique=false}
12 10 2010 17:53:36,766 DEBUG ~ Building property author
12 10 2010 17:53:36,766 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
12 10 2010 17:53:36,766 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments, insertable=true, updatable=true, unique=false}
12 10 2010 17:53:36,766 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=null, insertable=true, updatable=true, unique=false}
12 10 2010 17:53:36,766 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=element, insertable=true, updatable=true, unique=false}
12 10 2010 17:53:36,766 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments_KEY, insertable=true, updatable=true, unique=false}
12 10 2010 17:53:36,766 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='comments_KEY', referencedColumn='null', mappedBy='null'}
12 10 2010 17:53:36,766 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
12 10 2010 17:53:36,767 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
12 10 2010 17:53:36,767 DEBUG ~ Collection role: models.Post.comments
12 10 2010 17:53:36,767 DEBUG ~ Building property comments
12 10 2010 17:53:36,767 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=content, insertable=true, updatable=true, unique=false}
12 10 2010 17:53:36,767 DEBUG ~ binding property content with lazy=false
12 10 2010 17:53:36,767 DEBUG ~ building SimpleValue for content
12 10 2010 17:53:36,767 DEBUG ~ Building property content
12 10 2010 17:53:36,767 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
12 10 2010 17:53:36,767 DEBUG ~ binding property postedAt with lazy=false
12 10 2010 17:53:36,767 DEBUG ~ building SimpleValue for postedAt
12 10 2010 17:53:36,767 DEBUG ~ Building property postedAt
12 10 2010 17:53:36,767 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=title, insertable=true, updatable=true, unique=false}
12 10 2010 17:53:36,767 DEBUG ~ binding property title with lazy=false
12 10 2010 17:53:36,767 DEBUG ~ building SimpleValue for title
12 10 2010 17:53:36,768 DEBUG ~ Building property title
12 10 2010 17:53:36,768 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 17:53:36,768 DEBUG ~ setting SimpleValue typeName for author
12 10 2010 17:53:36,768 DEBUG ~ setting SimpleValue typeName for content
12 10 2010 17:53:36,768 DEBUG ~ setting SimpleValue typeName for post
12 10 2010 17:53:36,768 DEBUG ~ setting SimpleValue typeName for postedAt
12 10 2010 17:53:36,768 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 17:53:36,768 DEBUG ~ setting SimpleValue typeName for email
12 10 2010 17:53:36,768 DEBUG ~ setting SimpleValue typeName for fullname
12 10 2010 17:53:36,768 DEBUG ~ setting SimpleValue typeName for isAdmin
12 10 2010 17:53:36,768 DEBUG ~ setting SimpleValue typeName for password
12 10 2010 17:53:36,768 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 17:53:36,768 DEBUG ~ setting SimpleValue typeName for content
12 10 2010 17:53:36,768 DEBUG ~ setting SimpleValue typeName for postedAt
12 10 2010 17:53:36,768 DEBUG ~ setting SimpleValue typeName for title
12 10 2010 17:53:36,768 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:53:36,768 DEBUG ~ processing extends queue
12 10 2010 17:53:36,768 DEBUG ~ processing collection mappings
12 10 2010 17:53:36,768 DEBUG ~ Second pass for collection: models.Post.comments
12 10 2010 17:53:36,769 DEBUG ~ Binding a OneToMany: models.Post.comments through a foreign key
12 10 2010 17:53:36,769 INFO  ~ Mapping collection: models.Post.comments -> Comment
12 10 2010 17:53:36,769 DEBUG ~ Retrieving property models.Comment.post
12 10 2010 17:53:36,769 DEBUG ~ Mapped collection key: post, one-to-many: models.Comment
12 10 2010 17:53:36,769 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:53:36,769 DEBUG ~ processing association property references
12 10 2010 17:53:36,769 DEBUG ~ processing foreign key constraints
12 10 2010 17:53:36,769 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:53:36,769 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:53:36,770 INFO  ~ Hibernate Validator not found: ignoring
12 10 2010 17:53:36,806 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
12 10 2010 17:53:36,807 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
12 10 2010 17:53:36,810 DEBUG ~ Search not present in classpath, ignoring event listener registration.
12 10 2010 17:53:36,810 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
12 10 2010 17:53:36,810 DEBUG ~ Preparing to build session factory with filters : {}
12 10 2010 17:53:36,810 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:53:36,810 DEBUG ~ Process hbm files
12 10 2010 17:53:36,810 DEBUG ~ Process annotated classes
12 10 2010 17:53:36,810 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:53:36,810 DEBUG ~ processing extends queue
12 10 2010 17:53:36,811 DEBUG ~ processing collection mappings
12 10 2010 17:53:36,811 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:53:36,811 DEBUG ~ processing association property references
12 10 2010 17:53:36,811 DEBUG ~ processing foreign key constraints
12 10 2010 17:53:36,811 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:53:36,811 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:53:36,813 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
12 10 2010 17:53:36,813 INFO  ~ Using provided datasource
12 10 2010 17:53:36,813 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
12 10 2010 17:53:36,813 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
12 10 2010 17:53:36,813 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
12 10 2010 17:53:36,814 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
12 10 2010 17:53:36,814 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
12 10 2010 17:53:36,814 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
12 10 2010 17:53:36,814 INFO  ~ Automatic flush during beforeCompletion(): disabled
12 10 2010 17:53:36,814 INFO  ~ Automatic session close at end of transaction: disabled
12 10 2010 17:53:36,814 INFO  ~ JDBC batch size: 15
12 10 2010 17:53:36,814 INFO  ~ JDBC batch updates for versioned data: disabled
12 10 2010 17:53:36,814 INFO  ~ Scrollable result sets: enabled
12 10 2010 17:53:36,814 DEBUG ~ Wrap result sets: disabled
12 10 2010 17:53:36,814 INFO  ~ JDBC3 getGeneratedKeys(): disabled
12 10 2010 17:53:36,814 INFO  ~ Connection release mode: auto
12 10 2010 17:53:36,814 INFO  ~ Default batch fetch size: 1
12 10 2010 17:53:36,814 INFO  ~ Generate SQL with comments: disabled
12 10 2010 17:53:36,815 INFO  ~ Order SQL updates by primary key: disabled
12 10 2010 17:53:36,815 INFO  ~ Order SQL inserts for batching: disabled
12 10 2010 17:53:36,815 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
12 10 2010 17:53:36,815 INFO  ~ Using ASTQueryTranslatorFactory
12 10 2010 17:53:36,815 INFO  ~ Query language substitutions: {}
12 10 2010 17:53:36,815 INFO  ~ JPA-QL strict compliance: enabled
12 10 2010 17:53:36,815 INFO  ~ Second-level cache: enabled
12 10 2010 17:53:36,815 INFO  ~ Query cache: disabled
12 10 2010 17:53:36,815 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
12 10 2010 17:53:36,815 INFO  ~ Optimize cache for minimal puts: disabled
12 10 2010 17:53:36,815 INFO  ~ Structured second-level cache entries: disabled
12 10 2010 17:53:36,815 INFO  ~ Statistics: disabled
12 10 2010 17:53:36,815 INFO  ~ Deleted entity synthetic identifier rollback: disabled
12 10 2010 17:53:36,815 INFO  ~ Default entity-mode: pojo
12 10 2010 17:53:36,815 INFO  ~ Named query checking : enabled
12 10 2010 17:53:36,815 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
12 10 2010 17:53:36,819 INFO  ~ building session factory
12 10 2010 17:53:36,819 DEBUG ~ Session factory constructed with filter configurations : {}
12 10 2010 17:53:36,819 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
12 10 2010 17:53:36,820 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:53:36,820 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:53:36,820 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:53:36,834 DEBUG ~ Static SQL for entity: models.Comment
12 10 2010 17:53:36,834 DEBUG ~  Version select: select id from Comment where id =?
12 10 2010 17:53:36,834 DEBUG ~  Snapshot select: select comment_.id, comment_.author as author51_, comment_.content as content51_, comment_.post as post51_, comment_.postedAt as postedAt51_ from Comment comment_ where comment_.id=?
12 10 2010 17:53:36,834 DEBUG ~  Insert 0: insert into Comment (author, content, post, postedAt, id) values (?, ?, ?, ?, ?)
12 10 2010 17:53:36,834 DEBUG ~  Update 0: update Comment set author=?, content=?, post=?, postedAt=? where id=?
12 10 2010 17:53:36,834 DEBUG ~  Delete 0: delete from Comment where id=?
12 10 2010 17:53:36,834 DEBUG ~  Identity insert: insert into Comment (id, author, content, post, postedAt) values (null, ?, ?, ?, ?)
12 10 2010 17:53:36,839 DEBUG ~ Static SQL for entity: models.Post
12 10 2010 17:53:36,839 DEBUG ~  Version select: select id from Post where id =?
12 10 2010 17:53:36,839 DEBUG ~  Snapshot select: select post_.id, post_.author_id as author5_53_, post_.content as content53_, post_.postedAt as postedAt53_, post_.title as title53_ from Post post_ where post_.id=?
12 10 2010 17:53:36,839 DEBUG ~  Insert 0: insert into Post (author_id, content, postedAt, title, id) values (?, ?, ?, ?, ?)
12 10 2010 17:53:36,839 DEBUG ~  Update 0: update Post set author_id=?, content=?, postedAt=?, title=? where id=?
12 10 2010 17:53:36,839 DEBUG ~  Delete 0: delete from Post where id=?
12 10 2010 17:53:36,839 DEBUG ~  Identity insert: insert into Post (id, author_id, content, postedAt, title) values (null, ?, ?, ?, ?)
12 10 2010 17:53:36,847 DEBUG ~ Static SQL for entity: models.User
12 10 2010 17:53:36,847 DEBUG ~  Version select: select id from User where id =?
12 10 2010 17:53:36,847 DEBUG ~  Snapshot select: select user_.id, user_.email as email52_, user_.fullname as fullname52_, user_.isAdmin as isAdmin52_, user_.password as password52_ from User user_ where user_.id=?
12 10 2010 17:53:36,847 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
12 10 2010 17:53:36,847 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
12 10 2010 17:53:36,847 DEBUG ~  Delete 0: delete from User where id=?
12 10 2010 17:53:36,847 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
12 10 2010 17:53:36,847 DEBUG ~ Static SQL for collection: models.Post.comments
12 10 2010 17:53:36,847 DEBUG ~  Row insert: update Comment set post=? where id=?
12 10 2010 17:53:36,847 DEBUG ~  Row delete: update Comment set post=null where post=? and id=?
12 10 2010 17:53:36,847 DEBUG ~  One-shot delete: update Comment set post=null where post=?
12 10 2010 17:53:36,847 DEBUG ~ Static select for entity models.Comment [NONE]: select comment0_.id as id51_0_, comment0_.author as author51_0_, comment0_.content as content51_0_, comment0_.post as post51_0_, comment0_.postedAt as postedAt51_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:53:36,848 DEBUG ~ Static select for entity models.Comment [READ]: select comment0_.id as id51_0_, comment0_.author as author51_0_, comment0_.content as content51_0_, comment0_.post as post51_0_, comment0_.postedAt as postedAt51_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:53:36,848 DEBUG ~ Static select for entity models.Comment [UPGRADE]: select comment0_.id as id51_0_, comment0_.author as author51_0_, comment0_.content as content51_0_, comment0_.post as post51_0_, comment0_.postedAt as postedAt51_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:53:36,848 DEBUG ~ Static select for entity models.Comment [UPGRADE_NOWAIT]: select comment0_.id as id51_0_, comment0_.author as author51_0_, comment0_.content as content51_0_, comment0_.post as post51_0_, comment0_.postedAt as postedAt51_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:53:36,848 DEBUG ~ Static select for entity models.Comment [FORCE]: select comment0_.id as id51_0_, comment0_.author as author51_0_, comment0_.content as content51_0_, comment0_.post as post51_0_, comment0_.postedAt as postedAt51_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:53:36,848 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_READ]: select comment0_.id as id51_0_, comment0_.author as author51_0_, comment0_.content as content51_0_, comment0_.post as post51_0_, comment0_.postedAt as postedAt51_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:53:36,848 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_WRITE]: select comment0_.id as id51_0_, comment0_.author as author51_0_, comment0_.content as content51_0_, comment0_.post as post51_0_, comment0_.postedAt as postedAt51_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:53:36,848 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_FORCE_INCREMENT]: select comment0_.id as id51_0_, comment0_.author as author51_0_, comment0_.content as content51_0_, comment0_.post as post51_0_, comment0_.postedAt as postedAt51_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:53:36,849 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC]: select comment0_.id as id51_0_, comment0_.author as author51_0_, comment0_.content as content51_0_, comment0_.post as post51_0_, comment0_.postedAt as postedAt51_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:53:36,849 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC_FORCE_INCREMENT]: select comment0_.id as id51_0_, comment0_.author as author51_0_, comment0_.content as content51_0_, comment0_.post as post51_0_, comment0_.postedAt as postedAt51_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:53:36,849 DEBUG ~ Static select for action ACTION_MERGE on entity models.Comment: select comment0_.id as id51_0_, comment0_.author as author51_0_, comment0_.content as content51_0_, comment0_.post as post51_0_, comment0_.postedAt as postedAt51_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:53:36,849 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Comment: select comment0_.id as id51_0_, comment0_.author as author51_0_, comment0_.content as content51_0_, comment0_.post as post51_0_, comment0_.postedAt as postedAt51_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:53:36,849 DEBUG ~ Static select for entity models.Post [NONE]: select post0_.id as id53_1_, post0_.author_id as author5_53_1_, post0_.content as content53_1_, post0_.postedAt as postedAt53_1_, post0_.title as title53_1_, user1_.id as id52_0_, user1_.email as email52_0_, user1_.fullname as fullname52_0_, user1_.isAdmin as isAdmin52_0_, user1_.password as password52_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:53:36,849 DEBUG ~ Static select for entity models.Post [READ]: select post0_.id as id53_1_, post0_.author_id as author5_53_1_, post0_.content as content53_1_, post0_.postedAt as postedAt53_1_, post0_.title as title53_1_, user1_.id as id52_0_, user1_.email as email52_0_, user1_.fullname as fullname52_0_, user1_.isAdmin as isAdmin52_0_, user1_.password as password52_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:53:36,850 DEBUG ~ Static select for entity models.Post [UPGRADE]: select post0_.id as id53_0_, post0_.author_id as author5_53_0_, post0_.content as content53_0_, post0_.postedAt as postedAt53_0_, post0_.title as title53_0_ from Post post0_ where post0_.id=?
12 10 2010 17:53:36,850 DEBUG ~ Static select for entity models.Post [UPGRADE_NOWAIT]: select post0_.id as id53_0_, post0_.author_id as author5_53_0_, post0_.content as content53_0_, post0_.postedAt as postedAt53_0_, post0_.title as title53_0_ from Post post0_ where post0_.id=?
12 10 2010 17:53:36,850 DEBUG ~ Static select for entity models.Post [FORCE]: select post0_.id as id53_0_, post0_.author_id as author5_53_0_, post0_.content as content53_0_, post0_.postedAt as postedAt53_0_, post0_.title as title53_0_ from Post post0_ where post0_.id=?
12 10 2010 17:53:36,850 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_READ]: select post0_.id as id53_0_, post0_.author_id as author5_53_0_, post0_.content as content53_0_, post0_.postedAt as postedAt53_0_, post0_.title as title53_0_ from Post post0_ where post0_.id=?
12 10 2010 17:53:36,850 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_WRITE]: select post0_.id as id53_0_, post0_.author_id as author5_53_0_, post0_.content as content53_0_, post0_.postedAt as postedAt53_0_, post0_.title as title53_0_ from Post post0_ where post0_.id=?
12 10 2010 17:53:36,850 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_FORCE_INCREMENT]: select post0_.id as id53_0_, post0_.author_id as author5_53_0_, post0_.content as content53_0_, post0_.postedAt as postedAt53_0_, post0_.title as title53_0_ from Post post0_ where post0_.id=?
12 10 2010 17:53:36,851 DEBUG ~ Static select for entity models.Post [OPTIMISTIC]: select post0_.id as id53_1_, post0_.author_id as author5_53_1_, post0_.content as content53_1_, post0_.postedAt as postedAt53_1_, post0_.title as title53_1_, user1_.id as id52_0_, user1_.email as email52_0_, user1_.fullname as fullname52_0_, user1_.isAdmin as isAdmin52_0_, user1_.password as password52_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:53:36,851 DEBUG ~ Static select for entity models.Post [OPTIMISTIC_FORCE_INCREMENT]: select post0_.id as id53_1_, post0_.author_id as author5_53_1_, post0_.content as content53_1_, post0_.postedAt as postedAt53_1_, post0_.title as title53_1_, user1_.id as id52_0_, user1_.email as email52_0_, user1_.fullname as fullname52_0_, user1_.isAdmin as isAdmin52_0_, user1_.password as password52_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:53:36,851 DEBUG ~ Static select for action ACTION_MERGE on entity models.Post: select post0_.id as id53_1_, post0_.author_id as author5_53_1_, post0_.content as content53_1_, post0_.postedAt as postedAt53_1_, post0_.title as title53_1_, comments1_.post as post53_3_, comments1_.id as id3_, comments1_.id as id51_0_, comments1_.author as author51_0_, comments1_.content as content51_0_, comments1_.post as post51_0_, comments1_.postedAt as postedAt51_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post where post0_.id=?
12 10 2010 17:53:36,851 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Post: select post0_.id as id53_1_, post0_.author_id as author5_53_1_, post0_.content as content53_1_, post0_.postedAt as postedAt53_1_, post0_.title as title53_1_, comments1_.post as post53_3_, comments1_.id as id3_, comments1_.id as id51_0_, comments1_.author as author51_0_, comments1_.content as content51_0_, comments1_.post as post51_0_, comments1_.postedAt as postedAt51_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post where post0_.id=?
12 10 2010 17:53:36,851 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id52_0_, user0_.email as email52_0_, user0_.fullname as fullname52_0_, user0_.isAdmin as isAdmin52_0_, user0_.password as password52_0_ from User user0_ where user0_.id=?
12 10 2010 17:53:36,852 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id52_0_, user0_.email as email52_0_, user0_.fullname as fullname52_0_, user0_.isAdmin as isAdmin52_0_, user0_.password as password52_0_ from User user0_ where user0_.id=?
12 10 2010 17:53:36,852 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id52_0_, user0_.email as email52_0_, user0_.fullname as fullname52_0_, user0_.isAdmin as isAdmin52_0_, user0_.password as password52_0_ from User user0_ where user0_.id=?
12 10 2010 17:53:36,852 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id52_0_, user0_.email as email52_0_, user0_.fullname as fullname52_0_, user0_.isAdmin as isAdmin52_0_, user0_.password as password52_0_ from User user0_ where user0_.id=?
12 10 2010 17:53:36,852 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id52_0_, user0_.email as email52_0_, user0_.fullname as fullname52_0_, user0_.isAdmin as isAdmin52_0_, user0_.password as password52_0_ from User user0_ where user0_.id=?
12 10 2010 17:53:36,852 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id52_0_, user0_.email as email52_0_, user0_.fullname as fullname52_0_, user0_.isAdmin as isAdmin52_0_, user0_.password as password52_0_ from User user0_ where user0_.id=?
12 10 2010 17:53:36,852 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id52_0_, user0_.email as email52_0_, user0_.fullname as fullname52_0_, user0_.isAdmin as isAdmin52_0_, user0_.password as password52_0_ from User user0_ where user0_.id=?
12 10 2010 17:53:36,852 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id52_0_, user0_.email as email52_0_, user0_.fullname as fullname52_0_, user0_.isAdmin as isAdmin52_0_, user0_.password as password52_0_ from User user0_ where user0_.id=?
12 10 2010 17:53:36,852 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id52_0_, user0_.email as email52_0_, user0_.fullname as fullname52_0_, user0_.isAdmin as isAdmin52_0_, user0_.password as password52_0_ from User user0_ where user0_.id=?
12 10 2010 17:53:36,853 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id52_0_, user0_.email as email52_0_, user0_.fullname as fullname52_0_, user0_.isAdmin as isAdmin52_0_, user0_.password as password52_0_ from User user0_ where user0_.id=?
12 10 2010 17:53:36,853 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id52_0_, user0_.email as email52_0_, user0_.fullname as fullname52_0_, user0_.isAdmin as isAdmin52_0_, user0_.password as password52_0_ from User user0_ where user0_.id=?
12 10 2010 17:53:36,853 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id52_0_, user0_.email as email52_0_, user0_.fullname as fullname52_0_, user0_.isAdmin as isAdmin52_0_, user0_.password as password52_0_ from User user0_ where user0_.id=?
12 10 2010 17:53:36,853 DEBUG ~ Static select for one-to-many models.Post.comments: select comments0_.post as post53_1_, comments0_.id as id1_, comments0_.id as id51_0_, comments0_.author as author51_0_, comments0_.content as content51_0_, comments0_.post as post51_0_, comments0_.postedAt as postedAt51_0_ from Comment comments0_ where comments0_.post=?
12 10 2010 17:53:36,853 DEBUG ~ registered: 2c9082cd2b9f0d81012b9fa511d5000e (unnamed)
12 10 2010 17:53:36,853 INFO  ~ Not binding factory to JNDI, no JNDI name configured
12 10 2010 17:53:36,853 DEBUG ~ instantiated session factory
12 10 2010 17:53:36,853 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:53:36,853 DEBUG ~ Process hbm files
12 10 2010 17:53:36,853 DEBUG ~ Process annotated classes
12 10 2010 17:53:36,853 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:53:36,853 DEBUG ~ processing extends queue
12 10 2010 17:53:36,853 DEBUG ~ processing collection mappings
12 10 2010 17:53:36,853 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:53:36,853 DEBUG ~ processing association property references
12 10 2010 17:53:36,854 DEBUG ~ processing foreign key constraints
12 10 2010 17:53:36,854 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:53:36,854 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:53:36,856 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:53:36,856 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:53:36,856 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:53:36,856 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:53:36,856 DEBUG ~ Process hbm files
12 10 2010 17:53:36,856 DEBUG ~ Process annotated classes
12 10 2010 17:53:36,856 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:53:36,856 DEBUG ~ processing extends queue
12 10 2010 17:53:36,856 DEBUG ~ processing collection mappings
12 10 2010 17:53:36,856 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:53:36,856 DEBUG ~ processing association property references
12 10 2010 17:53:36,856 DEBUG ~ processing foreign key constraints
12 10 2010 17:53:36,856 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:53:36,856 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:53:36,858 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:53:36,858 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:53:36,858 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:53:36,858 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:53:36,858 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:53:36,858 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:53:36,858 INFO  ~ Running hbm2ddl schema export
12 10 2010 17:53:36,859 DEBUG ~ import file not found: /import.sql
12 10 2010 17:53:36,859 INFO  ~ exporting generated schema to database
12 10 2010 17:53:36,859 DEBUG ~ alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 17:53:36,859 DEBUG ~ Unsuccessful: alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 17:53:36,859 DEBUG ~ Table not found: COMMENT in statement [alter table Comment]
12 10 2010 17:53:36,859 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 17:53:36,859 DEBUG ~ Unsuccessful: alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 17:53:36,859 DEBUG ~ Table not found: POST in statement [alter table Post]
12 10 2010 17:53:36,859 DEBUG ~ drop table Comment if exists
12 10 2010 17:53:36,859 DEBUG ~ drop table Post if exists
12 10 2010 17:53:36,860 DEBUG ~ drop table User if exists
12 10 2010 17:53:36,860 DEBUG ~ create table Comment (id bigint generated by default as identity (start with 1), author varchar(255), content varchar(255), post varbinary(255), postedAt timestamp, primary key (id))
12 10 2010 17:53:36,860 DEBUG ~ create table Post (id bigint generated by default as identity (start with 1), content longvarchar, postedAt timestamp, title varchar(255), author_id bigint, primary key (id))
12 10 2010 17:53:36,860 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
12 10 2010 17:53:36,860 DEBUG ~ alter table Comment add constraint FK9BDE863F500B6664 foreign key (post) references Post
12 10 2010 17:53:36,861 ERROR ~ Unsuccessful: alter table Comment add constraint FK9BDE863F500B6664 foreign key (post) references Post
12 10 2010 17:53:36,861 ERROR ~ Column types do not match in statement [alter table Comment add constraint FK9BDE863F500B6664 foreign key (post) references Post]
12 10 2010 17:53:36,861 DEBUG ~ alter table Post add constraint FK260CC0A7CD013E foreign key (author_id) references User
12 10 2010 17:53:36,861 INFO  ~ schema export complete
12 10 2010 17:53:36,861 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:53:36,861 DEBUG ~ Process hbm files
12 10 2010 17:53:36,861 DEBUG ~ Process annotated classes
12 10 2010 17:53:36,861 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:53:36,861 DEBUG ~ processing extends queue
12 10 2010 17:53:36,861 DEBUG ~ processing collection mappings
12 10 2010 17:53:36,861 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:53:36,861 DEBUG ~ processing association property references
12 10 2010 17:53:36,861 DEBUG ~ processing foreign key constraints
12 10 2010 17:53:36,861 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:53:36,862 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:53:36,863 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:53:36,863 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:53:36,863 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:53:36,863 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:53:36,863 DEBUG ~ Process hbm files
12 10 2010 17:53:36,863 DEBUG ~ Process annotated classes
12 10 2010 17:53:36,864 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:53:36,864 DEBUG ~ processing extends queue
12 10 2010 17:53:36,864 DEBUG ~ processing collection mappings
12 10 2010 17:53:36,864 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:53:36,864 DEBUG ~ processing association property references
12 10 2010 17:53:36,864 DEBUG ~ processing foreign key constraints
12 10 2010 17:53:36,864 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:53:36,864 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:53:36,865 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:53:36,865 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:53:36,865 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:53:36,866 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:53:36,866 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:53:36,866 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:53:36,866 DEBUG ~ Checking 0 named HQL queries
12 10 2010 17:53:36,866 DEBUG ~ Checking 0 named SQL queries
12 10 2010 17:53:36,872 DEBUG ~ opened session at timestamp: 12868736168
12 10 2010 17:53:36,872 DEBUG ~ begin
12 10 2010 17:53:36,872 DEBUG ~ opening JDBC connection
12 10 2010 17:53:36,872 DEBUG ~ current autocommit status: true
12 10 2010 17:53:36,872 DEBUG ~ disabling autocommit
12 10 2010 17:53:36,930 DEBUG ~ commit
12 10 2010 17:53:36,930 DEBUG ~ re-enabling autocommit
12 10 2010 17:53:36,930 DEBUG ~ committed JDBC Connection
12 10 2010 17:53:36,930 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:53:36,930 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:53:38,985 DEBUG ~ opened session at timestamp: 12868736189
12 10 2010 17:53:38,985 DEBUG ~ begin
12 10 2010 17:53:38,985 DEBUG ~ opening JDBC connection
12 10 2010 17:53:38,985 DEBUG ~ current autocommit status: true
12 10 2010 17:53:38,985 DEBUG ~ disabling autocommit
12 10 2010 17:53:39,073 DEBUG ~ commit
12 10 2010 17:53:39,073 DEBUG ~ re-enabling autocommit
12 10 2010 17:53:39,073 DEBUG ~ committed JDBC Connection
12 10 2010 17:53:39,073 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:53:39,073 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:53:39,095 DEBUG ~ opened session at timestamp: 12868736190
12 10 2010 17:53:39,095 DEBUG ~ begin
12 10 2010 17:53:39,095 DEBUG ~ opening JDBC connection
12 10 2010 17:53:39,095 DEBUG ~ current autocommit status: true
12 10 2010 17:53:39,095 DEBUG ~ disabling autocommit
12 10 2010 17:53:39,349 DEBUG ~ executing identity-insert immediately
12 10 2010 17:53:39,349 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,349 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,349 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,349 DEBUG ~ Natively generated identity: 1
12 10 2010 17:53:39,349 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,349 DEBUG ~ processing flush-time cascades
12 10 2010 17:53:39,349 DEBUG ~ dirty checking collections
12 10 2010 17:53:39,350 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:53:39,350 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:53:39,350 DEBUG ~ listing entities:
12 10 2010 17:53:39,350 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:53:39,351 DEBUG ~ parse() - HQL: from models.User where email = ?
12 10 2010 17:53:39,353 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'email'
          \-[PARAM] Node: '?'

12 10 2010 17:53:39,353 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:53:39,353 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:53:39,353 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 17:53:39,353 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:53:39,354 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 17:53:39,354 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 17:53:39,354 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:53:39,354 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.email {synthetic-alias} email ) ? ) ) )
12 10 2010 17:53:39,354 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:53:39,354 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 17:53:39,354 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:53:39,355 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id52_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email52_, user0_.fullname as fullname52_, user0_.isAdmin as isAdmin52_, user0_.password as password52_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'email' {originalText=email}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 17:53:39,355 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:53:39,355 DEBUG ~ HQL: from models.User where email = ?
12 10 2010 17:53:39,355 DEBUG ~ SQL: select user0_.id as id52_, user0_.email as email52_, user0_.fullname as fullname52_, user0_.isAdmin as isAdmin52_, user0_.password as password52_ from User user0_ where user0_.email=?
12 10 2010 17:53:39,355 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:53:39,356 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,356 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:53:39,356 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 17:53:39,356 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:53:39,356 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,356 DEBUG ~ initializing non-lazy collections
12 10 2010 17:53:39,357 DEBUG ~ executing identity-insert immediately
12 10 2010 17:53:39,357 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,358 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,358 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,358 DEBUG ~ Natively generated identity: 2
12 10 2010 17:53:39,358 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,359 DEBUG ~ processing flush-time cascades
12 10 2010 17:53:39,359 DEBUG ~ dirty checking collections
12 10 2010 17:53:39,359 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:53:39,359 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:53:39,359 DEBUG ~ listing entities:
12 10 2010 17:53:39,359 DEBUG ~ models.User{id=2, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:53:39,360 DEBUG ~ parse() - HQL: from models.User where email = ? AND password = ?
12 10 2010 17:53:39,363 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'AND'
          +-[EQ] Node: '='
          |  +-[IDENT] Node: 'email'
          |  \-[PARAM] Node: '?'
          \-[EQ] Node: '='
             +-[IDENT] Node: 'password'
             \-[PARAM] Node: '?'

12 10 2010 17:53:39,363 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:53:39,363 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:53:39,363 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 17:53:39,363 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:53:39,363 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 17:53:39,363 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 17:53:39,363 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:53:39,364 DEBUG ~ getDataType() : password -> org.hibernate.type.StringType@18b3c498
12 10 2010 17:53:39,364 DEBUG ~ Resolved :  {synthetic-alias}.password -> user0_.password
12 10 2010 17:53:39,364 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:53:39,364 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( AND ( = ( user0_.email {synthetic-alias} email ) ? ) ( = ( user0_.password {synthetic-alias} password ) ? ) ) ) )
12 10 2010 17:53:39,364 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:53:39,364 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 17:53:39,364 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:53:39,365 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id52_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email52_, user0_.fullname as fullname52_, user0_.isAdmin as isAdmin52_, user0_.password as password52_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'AND'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  |  \-[IDENT] IdentNode: 'email' {originalText=email}
          |  \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'user0_.password' {propertyName=password,dereferenceType=ALL,propertyPath=password,path={synthetic-alias}.password,tableAlias=user0_,className=models.User,classAlias=null}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'password' {originalText=password}
             \-[PARAM] ParameterNode: '?' {ordinal=1, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 17:53:39,365 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:53:39,365 DEBUG ~ HQL: from models.User where email = ? AND password = ?
12 10 2010 17:53:39,365 DEBUG ~ SQL: select user0_.id as id52_, user0_.email as email52_, user0_.fullname as fullname52_, user0_.isAdmin as isAdmin52_, user0_.password as password52_ from User user0_ where user0_.email=? and user0_.password=?
12 10 2010 17:53:39,365 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:53:39,365 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,366 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:53:39,366 DEBUG ~ result row: EntityKey[models.User#2]
12 10 2010 17:53:39,366 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:53:39,366 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,367 DEBUG ~ initializing non-lazy collections
12 10 2010 17:53:39,369 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,369 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:53:39,369 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:53:39,369 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,370 DEBUG ~ initializing non-lazy collections
12 10 2010 17:53:39,370 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,370 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:53:39,370 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:53:39,370 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,371 DEBUG ~ initializing non-lazy collections
12 10 2010 17:53:39,371 DEBUG ~ executing identity-insert immediately
12 10 2010 17:53:39,372 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,372 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,372 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,372 DEBUG ~ Natively generated identity: 3
12 10 2010 17:53:39,372 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,372 DEBUG ~ processing flush-time cascades
12 10 2010 17:53:39,373 DEBUG ~ dirty checking collections
12 10 2010 17:53:39,373 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:53:39,373 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:53:39,373 DEBUG ~ listing entities:
12 10 2010 17:53:39,373 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:53:39,373 DEBUG ~ executing identity-insert immediately
12 10 2010 17:53:39,373 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,374 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,374 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,374 DEBUG ~ Natively generated identity: 1
12 10 2010 17:53:39,374 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,375 DEBUG ~ processing flush-time cascades
12 10 2010 17:53:39,375 DEBUG ~ dirty checking collections
12 10 2010 17:53:39,375 DEBUG ~ Collection found: [models.Post.comments#1], was: [<unreferenced>] (initialized)
12 10 2010 17:53:39,376 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 17:53:39,376 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:53:39,376 DEBUG ~ listing entities:
12 10 2010 17:53:39,376 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:53:39,376 DEBUG ~ models.Post{content=hello world, id=1, author=models.User#3, title=first post, comments=[], postedAt=2010-10-12 17:53:39}
12 10 2010 17:53:39,377 DEBUG ~ parse() - HQL: select count(e) from models.Post e
12 10 2010 17:53:39,379 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'Post'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

12 10 2010 17:53:39,379 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:53:39,379 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:53:39,380 DEBUG ~ FromClause{level=1} :  models.Post (e) -> post0_
12 10 2010 17:53:39,380 DEBUG ~ Resolved :  e -> post0_.id
12 10 2010 17:53:39,380 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:53:39,380 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count post0_.id ) ) ( FromClause{level=1} Post post0_ ) )
12 10 2010 17:53:39,380 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 17:53:39,380 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:53:39,380 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'post0_.id' {alias=e, className=models.Post, tableAlias=post0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}

12 10 2010 17:53:39,380 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:53:39,381 DEBUG ~ HQL: select count(e) from models.Post e
12 10 2010 17:53:39,381 DEBUG ~ SQL: select count(post0_.id) as col_0_0_ from Post post0_
12 10 2010 17:53:39,381 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:53:39,381 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,381 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:53:39,381 DEBUG ~ result row: 
12 10 2010 17:53:39,381 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:53:39,381 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,381 DEBUG ~ initializing non-lazy collections
12 10 2010 17:53:39,382 DEBUG ~ parse() - HQL: from models.Post where author = ?
12 10 2010 17:53:39,383 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'author'
          \-[PARAM] Node: '?'

12 10 2010 17:53:39,383 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:53:39,384 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:53:39,384 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
12 10 2010 17:53:39,384 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:53:39,384 DEBUG ~ getDataType() : author -> org.hibernate.type.ManyToOneType(models.User)
12 10 2010 17:53:39,384 DEBUG ~ dereferenceShortcut() : property author in models.Post does not require a join.
12 10 2010 17:53:39,384 DEBUG ~ terminal propertyPath = [author]
12 10 2010 17:53:39,384 DEBUG ~ Resolved :  {synthetic-alias}.author -> post0_.author_id
12 10 2010 17:53:39,384 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:53:39,384 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( = ( post0_.author_id {synthetic-alias} author ) ? ) ) )
12 10 2010 17:53:39,384 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:53:39,384 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 17:53:39,385 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:53:39,385 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id53_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_53_, post0_.content as content53_, post0_.postedAt as postedAt53_, post0_.title as title53_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'post0_.author_id' {propertyName=author,dereferenceType=0,propertyPath=author,path={synthetic-alias}.author,tableAlias=post0_,className=models.Post,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'author' {originalText=author}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.ManyToOneType(models.User)}

12 10 2010 17:53:39,385 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:53:39,385 DEBUG ~ HQL: from models.Post where author = ?
12 10 2010 17:53:39,385 DEBUG ~ SQL: select post0_.id as id53_, post0_.author_id as author5_53_, post0_.content as content53_, post0_.postedAt as postedAt53_, post0_.title as title53_ from Post post0_ where post0_.author_id=?
12 10 2010 17:53:39,386 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:53:39,386 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,386 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:53:39,386 DEBUG ~ result row: EntityKey[models.Post#1]
12 10 2010 17:53:39,386 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:53:39,386 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,386 DEBUG ~ initializing non-lazy collections
12 10 2010 17:53:39,387 DEBUG ~ executing identity-insert immediately
12 10 2010 17:53:39,387 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,387 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,388 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,388 DEBUG ~ Natively generated identity: 4
12 10 2010 17:53:39,388 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,388 DEBUG ~ processing flush-time cascades
12 10 2010 17:53:39,388 DEBUG ~ dirty checking collections
12 10 2010 17:53:39,388 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:53:39,388 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:53:39,388 DEBUG ~ listing entities:
12 10 2010 17:53:39,388 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:53:39,389 DEBUG ~ executing identity-insert immediately
12 10 2010 17:53:39,389 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,389 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,389 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,389 DEBUG ~ Natively generated identity: 2
12 10 2010 17:53:39,389 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,390 DEBUG ~ processing flush-time cascades
12 10 2010 17:53:39,390 DEBUG ~ dirty checking collections
12 10 2010 17:53:39,390 DEBUG ~ Collection found: [models.Post.comments#2], was: [<unreferenced>] (initialized)
12 10 2010 17:53:39,390 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 17:53:39,390 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:53:39,390 DEBUG ~ listing entities:
12 10 2010 17:53:39,391 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, comments=[], postedAt=2010-10-12 17:53:39}
12 10 2010 17:53:39,391 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:53:39,399 DEBUG ~ executing identity-insert immediately
12 10 2010 17:53:39,400 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,400 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,400 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,400 DEBUG ~ Natively generated identity: 1
12 10 2010 17:53:39,400 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,401 DEBUG ~ processing flush-time cascades
12 10 2010 17:53:39,401 DEBUG ~ dirty checking collections
12 10 2010 17:53:39,401 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
12 10 2010 17:53:39,402 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 17:53:39,402 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:53:39,402 DEBUG ~ listing entities:
12 10 2010 17:53:39,403 DEBUG ~ models.Comment{content=nice post, id=1, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808082f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808480f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808082f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f259b3df8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:53:39}
12 10 2010 17:53:39,403 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, comments=[], postedAt=2010-10-12 17:53:39}
12 10 2010 17:53:39,403 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:53:39,405 DEBUG ~ executing identity-insert immediately
12 10 2010 17:53:39,405 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,405 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,405 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,406 DEBUG ~ Natively generated identity: 2
12 10 2010 17:53:39,406 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,406 DEBUG ~ processing flush-time cascades
12 10 2010 17:53:39,406 DEBUG ~ dirty checking collections
12 10 2010 17:53:39,407 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
12 10 2010 17:53:39,408 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 17:53:39,408 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:53:39,408 DEBUG ~ listing entities:
12 10 2010 17:53:39,409 DEBUG ~ models.Comment{content=nice post, id=1, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808082f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808480f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808082f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f259b3df8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:53:39}
12 10 2010 17:53:39,409 DEBUG ~ models.Comment{content=i knew that !, id=2, author=Tom, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808082f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808480f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808082f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f259b3df8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:53:39}
12 10 2010 17:53:39,410 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, comments=[], postedAt=2010-10-12 17:53:39}
12 10 2010 17:53:39,410 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:53:39,411 DEBUG ~ parse() - HQL: from models.Comment where post = ?
12 10 2010 17:53:39,413 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Comment'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'post'
          \-[PARAM] Node: '?'

12 10 2010 17:53:39,413 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:53:39,413 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:53:39,413 DEBUG ~ FromClause{level=1} :  models.Comment (no alias) -> comment0_
12 10 2010 17:53:39,413 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:53:39,414 DEBUG ~ getDataType() : post -> org.hibernate.type.SerializableType@1efe2349
12 10 2010 17:53:39,414 DEBUG ~ Resolved :  {synthetic-alias}.post -> comment0_.post
12 10 2010 17:53:39,414 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:53:39,414 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Comment comment0_ ) ( where ( = ( comment0_.post {synthetic-alias} post ) ? ) ) )
12 10 2010 17:53:39,414 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:53:39,414 DEBUG ~ Using FROM fragment [Comment comment0_]
12 10 2010 17:53:39,414 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:53:39,416 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Comment)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'comment0_.id as id51_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Comment,tableAlias=comment0_,origin=null,columns={,className=models.Comment}}}
    |  \-[SQL_TOKEN] SqlFragment: 'comment0_.author as author51_, comment0_.content as content51_, comment0_.post as post51_, comment0_.postedAt as postedAt51_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[comment0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Comment comment0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Comment,tableAlias=comment0_,origin=null,columns={,className=models.Comment}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'comment0_.post' {propertyName=post,dereferenceType=ALL,propertyPath=post,path={synthetic-alias}.post,tableAlias=comment0_,className=models.Comment,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'post' {originalText=post}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.SerializableType@1efe2349}

12 10 2010 17:53:39,416 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:53:39,417 DEBUG ~ HQL: from models.Comment where post = ?
12 10 2010 17:53:39,418 DEBUG ~ SQL: select comment0_.id as id51_, comment0_.author as author51_, comment0_.content as content51_, comment0_.post as post51_, comment0_.postedAt as postedAt51_ from Comment comment0_ where comment0_.post=?
12 10 2010 17:53:39,418 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:53:39,419 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,420 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:53:39,420 DEBUG ~ result row: EntityKey[models.Comment#1]
12 10 2010 17:53:39,420 DEBUG ~ result row: EntityKey[models.Comment#2]
12 10 2010 17:53:39,420 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:53:39,420 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,420 DEBUG ~ initializing non-lazy collections
12 10 2010 17:53:39,421 DEBUG ~ executing identity-insert immediately
12 10 2010 17:53:39,421 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,421 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,422 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,422 DEBUG ~ Natively generated identity: 5
12 10 2010 17:53:39,422 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,422 DEBUG ~ processing flush-time cascades
12 10 2010 17:53:39,422 DEBUG ~ dirty checking collections
12 10 2010 17:53:39,422 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:53:39,423 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:53:39,423 DEBUG ~ listing entities:
12 10 2010 17:53:39,423 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:53:39,423 DEBUG ~ executing identity-insert immediately
12 10 2010 17:53:39,423 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,423 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,423 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,423 DEBUG ~ Natively generated identity: 3
12 10 2010 17:53:39,424 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,424 DEBUG ~ processing flush-time cascades
12 10 2010 17:53:39,424 DEBUG ~ dirty checking collections
12 10 2010 17:53:39,424 DEBUG ~ Collection found: [models.Post.comments#3], was: [<unreferenced>] (initialized)
12 10 2010 17:53:39,424 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 17:53:39,424 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:53:39,424 DEBUG ~ listing entities:
12 10 2010 17:53:39,425 DEBUG ~ models.Post{content=hello world, id=3, author=models.User#5, title=first post, comments=[], postedAt=2010-10-12 17:53:39}
12 10 2010 17:53:39,425 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:53:39,425 DEBUG ~ parse() - HQL: select count(e) from models.User e
12 10 2010 17:53:39,428 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'User'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

12 10 2010 17:53:39,428 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:53:39,428 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:53:39,428 DEBUG ~ FromClause{level=1} :  models.User (e) -> user0_
12 10 2010 17:53:39,428 DEBUG ~ Resolved :  e -> user0_.id
12 10 2010 17:53:39,428 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:53:39,428 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count user0_.id ) ) ( FromClause{level=1} User user0_ ) )
12 10 2010 17:53:39,429 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 17:53:39,429 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:53:39,429 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'user0_.id' {alias=e, className=models.User, tableAlias=user0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}

12 10 2010 17:53:39,429 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:53:39,429 DEBUG ~ HQL: select count(e) from models.User e
12 10 2010 17:53:39,429 DEBUG ~ SQL: select count(user0_.id) as col_0_0_ from User user0_
12 10 2010 17:53:39,429 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:53:39,430 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,430 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:53:39,430 DEBUG ~ result row: 
12 10 2010 17:53:39,430 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:53:39,430 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,430 DEBUG ~ initializing non-lazy collections
12 10 2010 17:53:39,430 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,430 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:53:39,430 DEBUG ~ result row: 
12 10 2010 17:53:39,431 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:53:39,431 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,431 DEBUG ~ initializing non-lazy collections
12 10 2010 17:53:39,431 DEBUG ~ parse() - HQL: select count(e) from models.Comment e
12 10 2010 17:53:39,433 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'Comment'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

12 10 2010 17:53:39,433 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:53:39,433 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:53:39,434 DEBUG ~ FromClause{level=1} :  models.Comment (e) -> comment0_
12 10 2010 17:53:39,434 DEBUG ~ Resolved :  e -> comment0_.id
12 10 2010 17:53:39,434 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:53:39,434 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count comment0_.id ) ) ( FromClause{level=1} Comment comment0_ ) )
12 10 2010 17:53:39,434 DEBUG ~ Using FROM fragment [Comment comment0_]
12 10 2010 17:53:39,434 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:53:39,434 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Comment)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'comment0_.id' {alias=e, className=models.Comment, tableAlias=comment0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[comment0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Comment comment0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=Comment,tableAlias=comment0_,origin=null,columns={,className=models.Comment}}

12 10 2010 17:53:39,434 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:53:39,435 DEBUG ~ HQL: select count(e) from models.Comment e
12 10 2010 17:53:39,435 DEBUG ~ SQL: select count(comment0_.id) as col_0_0_ from Comment comment0_
12 10 2010 17:53:39,435 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:53:39,435 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,435 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:53:39,435 DEBUG ~ result row: 
12 10 2010 17:53:39,436 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:53:39,436 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,436 DEBUG ~ initializing non-lazy collections
12 10 2010 17:53:39,467 DEBUG ~ commit
12 10 2010 17:53:39,467 DEBUG ~ processing flush-time cascades
12 10 2010 17:53:39,469 DEBUG ~ executing identity-insert immediately
12 10 2010 17:53:39,470 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,471 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,471 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,471 DEBUG ~ Natively generated identity: 3
12 10 2010 17:53:39,471 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,472 DEBUG ~ executing identity-insert immediately
12 10 2010 17:53:39,472 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,473 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,473 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:53:39,473 DEBUG ~ Natively generated identity: 4
12 10 2010 17:53:39,473 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:53:39,473 DEBUG ~ dirty checking collections
12 10 2010 17:53:39,473 DEBUG ~ Collection dirty: [models.Post.comments#3]
12 10 2010 17:53:39,473 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
12 10 2010 17:53:39,473 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 17:53:39,473 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:53:39,474 DEBUG ~ listing entities:
12 10 2010 17:53:39,474 DEBUG ~ models.Comment{content=nice post, id=3, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808083f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808580f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8181f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808083f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808082f7848080808af3f2808eedefe4e5ecf3aec3efedede5eef4e30c6cb88a748959828084cc8086e1f5f4e8eff2f180fe8083cc8087e3efeef4e5eef4f180fe8083cc8084f0eff3f4f4808dccedefe4e5ecf3afd0eff3f4bbcc8088f0eff3f4e5e4c1f4f180fe8084f8f180fe80858080808080808083f48084cae5e6e6f48089eee9e3e5a0f0eff3f4f180fe8087f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f259b61f8f3f180fe80998080808080808084f48083d4efedf4808de9a0ebeee5f7a0f4e8e1f4a0a1f180fe8087f3f180fe809ef788808081ab1f259b61f8f8f4808be8e5ececefa0f7eff2ece4f3f180fe809ef788808081ab1f259b5ff8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:53:39}
12 10 2010 17:53:39,488 DEBUG ~ models.Post{content=hello world, id=3, author=models.User#5, title=first post, comments=[models.Comment#3, models.Comment#4], postedAt=2010-10-12 17:53:39}
12 10 2010 17:53:39,489 DEBUG ~ models.Comment{content=i knew that !, id=4, author=Tom, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808083f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808580f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8181f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808083f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808082f7848080808af3f2808eedefe4e5ecf3aec3efedede5eef4e30c6cb88a748959828084cc8086e1f5f4e8eff2f180fe8083cc8087e3efeef4e5eef4f180fe8083cc8084f0eff3f4f4808dccedefe4e5ecf3afd0eff3f4bbcc8088f0eff3f4e5e4c1f4f180fe8084f8f180fe80858080808080808083f48084cae5e6e6f48089eee9e3e5a0f0eff3f4f180fe8087f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f259b61f8f3f180fe80998080808080808084f48083d4efedf4808de9a0ebeee5f7a0f4e8e1f4a0a1f180fe8087f3f180fe809ef788808081ab1f259b61f8f8f4808be8e5ececefa0f7eff2ece4f3f180fe809ef788808081ab1f259b5ff8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:53:39}
12 10 2010 17:53:39,489 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:53:39,493 DEBUG ~ re-enabling autocommit
12 10 2010 17:53:39,493 DEBUG ~ committed JDBC Connection
12 10 2010 17:53:39,494 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:53:39,494 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:53:39,514 DEBUG ~ opened session at timestamp: 12868736195
12 10 2010 17:53:39,514 DEBUG ~ begin
12 10 2010 17:53:39,514 DEBUG ~ opening JDBC connection
12 10 2010 17:53:39,514 DEBUG ~ current autocommit status: true
12 10 2010 17:53:39,514 DEBUG ~ disabling autocommit
12 10 2010 17:53:39,518 DEBUG ~ commit
12 10 2010 17:53:39,518 DEBUG ~ re-enabling autocommit
12 10 2010 17:53:39,519 DEBUG ~ committed JDBC Connection
12 10 2010 17:53:39,519 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:53:39,519 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:54:15,286 ERROR ~ 

@645j8gmaf
Internal Server Error (500) for request GET /@tests

Compilation error (In /app/models/Post.scala around line 22)
The file /app/models/Post.scala could not be compiled. Error raised is : not found: value newComment

play.exceptions.CompilationException: not found: value newComment
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 17:54:23,045 INFO  ~ closing
12 10 2010 17:54:23,045 INFO  ~ Running hbm2ddl schema export
12 10 2010 17:54:23,046 DEBUG ~ import file not found: /import.sql
12 10 2010 17:54:23,046 INFO  ~ exporting generated schema to database
12 10 2010 17:54:23,046 DEBUG ~ alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 17:54:23,047 DEBUG ~ Unsuccessful: alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 17:54:23,047 DEBUG ~ Constraint not found FK9BDE863F500B6664 in table: COMMENT in statement [alter table Comment drop constraint FK9BDE863F500B6664]
12 10 2010 17:54:23,047 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 17:54:23,047 DEBUG ~ drop table Comment if exists
12 10 2010 17:54:23,047 DEBUG ~ drop table Post if exists
12 10 2010 17:54:23,047 DEBUG ~ drop table User if exists
12 10 2010 17:54:23,047 INFO  ~ schema export complete
12 10 2010 17:54:23,088 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 17:54:23,088 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
12 10 2010 17:54:23,088 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
12 10 2010 17:54:23,088 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
12 10 2010 17:54:23,088 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
12 10 2010 17:54:23,088 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
12 10 2010 17:54:23,088 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
12 10 2010 17:54:23,088 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
12 10 2010 17:54:23,089 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
12 10 2010 17:54:23,089 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
12 10 2010 17:54:23,089 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 17:54:23,089 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
12 10 2010 17:54:23,089 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
12 10 2010 17:54:23,089 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
12 10 2010 17:54:23,089 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:54:23,089 DEBUG ~ Process hbm files
12 10 2010 17:54:23,089 DEBUG ~ Process annotated classes
12 10 2010 17:54:23,090 INFO  ~ Binding entity from annotated class: models.Comment
12 10 2010 17:54:23,090 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 17:54:23,090 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 17:54:23,090 DEBUG ~ Import with entity name Comment
12 10 2010 17:54:23,090 INFO  ~ Bind entity models.Comment on table Comment
12 10 2010 17:54:23,095 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 17:54:23,095 DEBUG ~ binding property id with lazy=false
12 10 2010 17:54:23,095 DEBUG ~ building SimpleValue for id
12 10 2010 17:54:23,095 DEBUG ~ Building property id
12 10 2010 17:54:23,095 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=author, insertable=true, updatable=true, unique=false}
12 10 2010 17:54:23,095 DEBUG ~ binding property author with lazy=false
12 10 2010 17:54:23,096 DEBUG ~ building SimpleValue for author
12 10 2010 17:54:23,096 DEBUG ~ Building property author
12 10 2010 17:54:23,096 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=content, insertable=true, updatable=true, unique=false}
12 10 2010 17:54:23,096 DEBUG ~ binding property content with lazy=false
12 10 2010 17:54:23,096 DEBUG ~ building SimpleValue for content
12 10 2010 17:54:23,096 DEBUG ~ Building property content
12 10 2010 17:54:23,096 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=post, insertable=true, updatable=true, unique=false}
12 10 2010 17:54:23,096 DEBUG ~ binding property post with lazy=false
12 10 2010 17:54:23,096 DEBUG ~ building SimpleValue for post
12 10 2010 17:54:23,096 DEBUG ~ Building property post
12 10 2010 17:54:23,096 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
12 10 2010 17:54:23,096 DEBUG ~ binding property postedAt with lazy=false
12 10 2010 17:54:23,096 DEBUG ~ building SimpleValue for postedAt
12 10 2010 17:54:23,096 DEBUG ~ Building property postedAt
12 10 2010 17:54:23,096 INFO  ~ Binding entity from annotated class: models.User
12 10 2010 17:54:23,096 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 17:54:23,096 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 17:54:23,097 DEBUG ~ Import with entity name User
12 10 2010 17:54:23,097 INFO  ~ Bind entity models.User on table User
12 10 2010 17:54:23,098 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 17:54:23,099 DEBUG ~ binding property id with lazy=false
12 10 2010 17:54:23,099 DEBUG ~ building SimpleValue for id
12 10 2010 17:54:23,099 DEBUG ~ Building property id
12 10 2010 17:54:23,099 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
12 10 2010 17:54:23,099 DEBUG ~ binding property email with lazy=false
12 10 2010 17:54:23,099 DEBUG ~ building SimpleValue for email
12 10 2010 17:54:23,099 DEBUG ~ Building property email
12 10 2010 17:54:23,099 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
12 10 2010 17:54:23,099 DEBUG ~ binding property fullname with lazy=false
12 10 2010 17:54:23,099 DEBUG ~ building SimpleValue for fullname
12 10 2010 17:54:23,099 DEBUG ~ Building property fullname
12 10 2010 17:54:23,099 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
12 10 2010 17:54:23,099 DEBUG ~ binding property isAdmin with lazy=false
12 10 2010 17:54:23,099 DEBUG ~ building SimpleValue for isAdmin
12 10 2010 17:54:23,099 DEBUG ~ Building property isAdmin
12 10 2010 17:54:23,100 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
12 10 2010 17:54:23,100 DEBUG ~ binding property password with lazy=false
12 10 2010 17:54:23,100 DEBUG ~ building SimpleValue for password
12 10 2010 17:54:23,100 DEBUG ~ Building property password
12 10 2010 17:54:23,103 INFO  ~ Binding entity from annotated class: models.Post
12 10 2010 17:54:23,103 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 17:54:23,103 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 17:54:23,103 DEBUG ~ Import with entity name Post
12 10 2010 17:54:23,103 INFO  ~ Bind entity models.Post on table Post
12 10 2010 17:54:23,106 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 17:54:23,106 DEBUG ~ binding property id with lazy=false
12 10 2010 17:54:23,106 DEBUG ~ building SimpleValue for id
12 10 2010 17:54:23,106 DEBUG ~ Building property id
12 10 2010 17:54:23,106 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
12 10 2010 17:54:23,107 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=author, insertable=true, updatable=true, unique=false}
12 10 2010 17:54:23,107 DEBUG ~ Building property author
12 10 2010 17:54:23,107 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
12 10 2010 17:54:23,107 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments, insertable=true, updatable=true, unique=false}
12 10 2010 17:54:23,107 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=null, insertable=true, updatable=true, unique=false}
12 10 2010 17:54:23,107 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=element, insertable=true, updatable=true, unique=false}
12 10 2010 17:54:23,107 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments_KEY, insertable=true, updatable=true, unique=false}
12 10 2010 17:54:23,107 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='comments_KEY', referencedColumn='null', mappedBy='null'}
12 10 2010 17:54:23,107 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
12 10 2010 17:54:23,107 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
12 10 2010 17:54:23,107 DEBUG ~ Collection role: models.Post.comments
12 10 2010 17:54:23,108 DEBUG ~ Building property comments
12 10 2010 17:54:23,108 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=content, insertable=true, updatable=true, unique=false}
12 10 2010 17:54:23,108 DEBUG ~ binding property content with lazy=false
12 10 2010 17:54:23,108 DEBUG ~ building SimpleValue for content
12 10 2010 17:54:23,108 DEBUG ~ Building property content
12 10 2010 17:54:23,108 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
12 10 2010 17:54:23,108 DEBUG ~ binding property postedAt with lazy=false
12 10 2010 17:54:23,108 DEBUG ~ building SimpleValue for postedAt
12 10 2010 17:54:23,108 DEBUG ~ Building property postedAt
12 10 2010 17:54:23,108 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=title, insertable=true, updatable=true, unique=false}
12 10 2010 17:54:23,108 DEBUG ~ binding property title with lazy=false
12 10 2010 17:54:23,108 DEBUG ~ building SimpleValue for title
12 10 2010 17:54:23,108 DEBUG ~ Building property title
12 10 2010 17:54:23,109 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 17:54:23,109 DEBUG ~ setting SimpleValue typeName for author
12 10 2010 17:54:23,109 DEBUG ~ setting SimpleValue typeName for content
12 10 2010 17:54:23,109 DEBUG ~ setting SimpleValue typeName for post
12 10 2010 17:54:23,109 DEBUG ~ setting SimpleValue typeName for postedAt
12 10 2010 17:54:23,109 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 17:54:23,109 DEBUG ~ setting SimpleValue typeName for email
12 10 2010 17:54:23,109 DEBUG ~ setting SimpleValue typeName for fullname
12 10 2010 17:54:23,109 DEBUG ~ setting SimpleValue typeName for isAdmin
12 10 2010 17:54:23,109 DEBUG ~ setting SimpleValue typeName for password
12 10 2010 17:54:23,109 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 17:54:23,109 DEBUG ~ setting SimpleValue typeName for content
12 10 2010 17:54:23,109 DEBUG ~ setting SimpleValue typeName for postedAt
12 10 2010 17:54:23,109 DEBUG ~ setting SimpleValue typeName for title
12 10 2010 17:54:23,109 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:54:23,109 DEBUG ~ processing extends queue
12 10 2010 17:54:23,110 DEBUG ~ processing collection mappings
12 10 2010 17:54:23,110 DEBUG ~ Second pass for collection: models.Post.comments
12 10 2010 17:54:23,110 DEBUG ~ Binding a OneToMany: models.Post.comments through a foreign key
12 10 2010 17:54:23,111 INFO  ~ Mapping collection: models.Post.comments -> Comment
12 10 2010 17:54:23,111 DEBUG ~ Retrieving property models.Comment.post
12 10 2010 17:54:23,111 DEBUG ~ Mapped collection key: post, one-to-many: models.Comment
12 10 2010 17:54:23,111 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:54:23,111 DEBUG ~ processing association property references
12 10 2010 17:54:23,111 DEBUG ~ processing foreign key constraints
12 10 2010 17:54:23,111 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:54:23,111 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:54:23,112 INFO  ~ Hibernate Validator not found: ignoring
12 10 2010 17:54:23,137 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
12 10 2010 17:54:23,138 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
12 10 2010 17:54:23,141 DEBUG ~ Search not present in classpath, ignoring event listener registration.
12 10 2010 17:54:23,141 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
12 10 2010 17:54:23,141 DEBUG ~ Preparing to build session factory with filters : {}
12 10 2010 17:54:23,141 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:54:23,141 DEBUG ~ Process hbm files
12 10 2010 17:54:23,141 DEBUG ~ Process annotated classes
12 10 2010 17:54:23,141 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:54:23,141 DEBUG ~ processing extends queue
12 10 2010 17:54:23,141 DEBUG ~ processing collection mappings
12 10 2010 17:54:23,141 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:54:23,141 DEBUG ~ processing association property references
12 10 2010 17:54:23,141 DEBUG ~ processing foreign key constraints
12 10 2010 17:54:23,141 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:54:23,141 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:54:23,143 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
12 10 2010 17:54:23,143 INFO  ~ Using provided datasource
12 10 2010 17:54:23,144 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
12 10 2010 17:54:23,144 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
12 10 2010 17:54:23,144 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
12 10 2010 17:54:23,144 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
12 10 2010 17:54:23,144 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
12 10 2010 17:54:23,145 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
12 10 2010 17:54:23,145 INFO  ~ Automatic flush during beforeCompletion(): disabled
12 10 2010 17:54:23,145 INFO  ~ Automatic session close at end of transaction: disabled
12 10 2010 17:54:23,145 INFO  ~ JDBC batch size: 15
12 10 2010 17:54:23,145 INFO  ~ JDBC batch updates for versioned data: disabled
12 10 2010 17:54:23,145 INFO  ~ Scrollable result sets: enabled
12 10 2010 17:54:23,145 DEBUG ~ Wrap result sets: disabled
12 10 2010 17:54:23,146 INFO  ~ JDBC3 getGeneratedKeys(): disabled
12 10 2010 17:54:23,146 INFO  ~ Connection release mode: auto
12 10 2010 17:54:23,146 INFO  ~ Default batch fetch size: 1
12 10 2010 17:54:23,146 INFO  ~ Generate SQL with comments: disabled
12 10 2010 17:54:23,146 INFO  ~ Order SQL updates by primary key: disabled
12 10 2010 17:54:23,146 INFO  ~ Order SQL inserts for batching: disabled
12 10 2010 17:54:23,146 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
12 10 2010 17:54:23,146 INFO  ~ Using ASTQueryTranslatorFactory
12 10 2010 17:54:23,146 INFO  ~ Query language substitutions: {}
12 10 2010 17:54:23,146 INFO  ~ JPA-QL strict compliance: enabled
12 10 2010 17:54:23,146 INFO  ~ Second-level cache: enabled
12 10 2010 17:54:23,146 INFO  ~ Query cache: disabled
12 10 2010 17:54:23,146 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
12 10 2010 17:54:23,147 INFO  ~ Optimize cache for minimal puts: disabled
12 10 2010 17:54:23,147 INFO  ~ Structured second-level cache entries: disabled
12 10 2010 17:54:23,147 INFO  ~ Statistics: disabled
12 10 2010 17:54:23,147 INFO  ~ Deleted entity synthetic identifier rollback: disabled
12 10 2010 17:54:23,147 INFO  ~ Default entity-mode: pojo
12 10 2010 17:54:23,147 INFO  ~ Named query checking : enabled
12 10 2010 17:54:23,147 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
12 10 2010 17:54:23,150 INFO  ~ building session factory
12 10 2010 17:54:23,151 DEBUG ~ Session factory constructed with filter configurations : {}
12 10 2010 17:54:23,151 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
12 10 2010 17:54:23,152 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:54:23,152 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:54:23,152 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:54:23,157 DEBUG ~ Static SQL for entity: models.Comment
12 10 2010 17:54:23,157 DEBUG ~  Version select: select id from Comment where id =?
12 10 2010 17:54:23,157 DEBUG ~  Snapshot select: select comment_.id, comment_.author as author57_, comment_.content as content57_, comment_.post as post57_, comment_.postedAt as postedAt57_ from Comment comment_ where comment_.id=?
12 10 2010 17:54:23,157 DEBUG ~  Insert 0: insert into Comment (author, content, post, postedAt, id) values (?, ?, ?, ?, ?)
12 10 2010 17:54:23,157 DEBUG ~  Update 0: update Comment set author=?, content=?, post=?, postedAt=? where id=?
12 10 2010 17:54:23,157 DEBUG ~  Delete 0: delete from Comment where id=?
12 10 2010 17:54:23,157 DEBUG ~  Identity insert: insert into Comment (id, author, content, post, postedAt) values (null, ?, ?, ?, ?)
12 10 2010 17:54:23,162 DEBUG ~ Static SQL for entity: models.Post
12 10 2010 17:54:23,162 DEBUG ~  Version select: select id from Post where id =?
12 10 2010 17:54:23,162 DEBUG ~  Snapshot select: select post_.id, post_.author_id as author5_59_, post_.content as content59_, post_.postedAt as postedAt59_, post_.title as title59_ from Post post_ where post_.id=?
12 10 2010 17:54:23,162 DEBUG ~  Insert 0: insert into Post (author_id, content, postedAt, title, id) values (?, ?, ?, ?, ?)
12 10 2010 17:54:23,162 DEBUG ~  Update 0: update Post set author_id=?, content=?, postedAt=?, title=? where id=?
12 10 2010 17:54:23,162 DEBUG ~  Delete 0: delete from Post where id=?
12 10 2010 17:54:23,162 DEBUG ~  Identity insert: insert into Post (id, author_id, content, postedAt, title) values (null, ?, ?, ?, ?)
12 10 2010 17:54:23,167 DEBUG ~ Static SQL for entity: models.User
12 10 2010 17:54:23,167 DEBUG ~  Version select: select id from User where id =?
12 10 2010 17:54:23,167 DEBUG ~  Snapshot select: select user_.id, user_.email as email58_, user_.fullname as fullname58_, user_.isAdmin as isAdmin58_, user_.password as password58_ from User user_ where user_.id=?
12 10 2010 17:54:23,167 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
12 10 2010 17:54:23,167 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
12 10 2010 17:54:23,167 DEBUG ~  Delete 0: delete from User where id=?
12 10 2010 17:54:23,167 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
12 10 2010 17:54:23,167 DEBUG ~ Static SQL for collection: models.Post.comments
12 10 2010 17:54:23,167 DEBUG ~  Row insert: update Comment set post=? where id=?
12 10 2010 17:54:23,167 DEBUG ~  Row delete: update Comment set post=null where post=? and id=?
12 10 2010 17:54:23,167 DEBUG ~  One-shot delete: update Comment set post=null where post=?
12 10 2010 17:54:23,167 DEBUG ~ Static select for entity models.Comment [NONE]: select comment0_.id as id57_0_, comment0_.author as author57_0_, comment0_.content as content57_0_, comment0_.post as post57_0_, comment0_.postedAt as postedAt57_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:54:23,167 DEBUG ~ Static select for entity models.Comment [READ]: select comment0_.id as id57_0_, comment0_.author as author57_0_, comment0_.content as content57_0_, comment0_.post as post57_0_, comment0_.postedAt as postedAt57_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:54:23,168 DEBUG ~ Static select for entity models.Comment [UPGRADE]: select comment0_.id as id57_0_, comment0_.author as author57_0_, comment0_.content as content57_0_, comment0_.post as post57_0_, comment0_.postedAt as postedAt57_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:54:23,168 DEBUG ~ Static select for entity models.Comment [UPGRADE_NOWAIT]: select comment0_.id as id57_0_, comment0_.author as author57_0_, comment0_.content as content57_0_, comment0_.post as post57_0_, comment0_.postedAt as postedAt57_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:54:23,168 DEBUG ~ Static select for entity models.Comment [FORCE]: select comment0_.id as id57_0_, comment0_.author as author57_0_, comment0_.content as content57_0_, comment0_.post as post57_0_, comment0_.postedAt as postedAt57_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:54:23,168 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_READ]: select comment0_.id as id57_0_, comment0_.author as author57_0_, comment0_.content as content57_0_, comment0_.post as post57_0_, comment0_.postedAt as postedAt57_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:54:23,168 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_WRITE]: select comment0_.id as id57_0_, comment0_.author as author57_0_, comment0_.content as content57_0_, comment0_.post as post57_0_, comment0_.postedAt as postedAt57_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:54:23,168 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_FORCE_INCREMENT]: select comment0_.id as id57_0_, comment0_.author as author57_0_, comment0_.content as content57_0_, comment0_.post as post57_0_, comment0_.postedAt as postedAt57_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:54:23,168 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC]: select comment0_.id as id57_0_, comment0_.author as author57_0_, comment0_.content as content57_0_, comment0_.post as post57_0_, comment0_.postedAt as postedAt57_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:54:23,169 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC_FORCE_INCREMENT]: select comment0_.id as id57_0_, comment0_.author as author57_0_, comment0_.content as content57_0_, comment0_.post as post57_0_, comment0_.postedAt as postedAt57_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:54:23,169 DEBUG ~ Static select for action ACTION_MERGE on entity models.Comment: select comment0_.id as id57_0_, comment0_.author as author57_0_, comment0_.content as content57_0_, comment0_.post as post57_0_, comment0_.postedAt as postedAt57_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:54:23,169 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Comment: select comment0_.id as id57_0_, comment0_.author as author57_0_, comment0_.content as content57_0_, comment0_.post as post57_0_, comment0_.postedAt as postedAt57_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 17:54:23,170 DEBUG ~ Static select for entity models.Post [NONE]: select post0_.id as id59_1_, post0_.author_id as author5_59_1_, post0_.content as content59_1_, post0_.postedAt as postedAt59_1_, post0_.title as title59_1_, user1_.id as id58_0_, user1_.email as email58_0_, user1_.fullname as fullname58_0_, user1_.isAdmin as isAdmin58_0_, user1_.password as password58_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:54:23,171 DEBUG ~ Static select for entity models.Post [READ]: select post0_.id as id59_1_, post0_.author_id as author5_59_1_, post0_.content as content59_1_, post0_.postedAt as postedAt59_1_, post0_.title as title59_1_, user1_.id as id58_0_, user1_.email as email58_0_, user1_.fullname as fullname58_0_, user1_.isAdmin as isAdmin58_0_, user1_.password as password58_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:54:23,171 DEBUG ~ Static select for entity models.Post [UPGRADE]: select post0_.id as id59_0_, post0_.author_id as author5_59_0_, post0_.content as content59_0_, post0_.postedAt as postedAt59_0_, post0_.title as title59_0_ from Post post0_ where post0_.id=?
12 10 2010 17:54:23,171 DEBUG ~ Static select for entity models.Post [UPGRADE_NOWAIT]: select post0_.id as id59_0_, post0_.author_id as author5_59_0_, post0_.content as content59_0_, post0_.postedAt as postedAt59_0_, post0_.title as title59_0_ from Post post0_ where post0_.id=?
12 10 2010 17:54:23,171 DEBUG ~ Static select for entity models.Post [FORCE]: select post0_.id as id59_0_, post0_.author_id as author5_59_0_, post0_.content as content59_0_, post0_.postedAt as postedAt59_0_, post0_.title as title59_0_ from Post post0_ where post0_.id=?
12 10 2010 17:54:23,171 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_READ]: select post0_.id as id59_0_, post0_.author_id as author5_59_0_, post0_.content as content59_0_, post0_.postedAt as postedAt59_0_, post0_.title as title59_0_ from Post post0_ where post0_.id=?
12 10 2010 17:54:23,171 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_WRITE]: select post0_.id as id59_0_, post0_.author_id as author5_59_0_, post0_.content as content59_0_, post0_.postedAt as postedAt59_0_, post0_.title as title59_0_ from Post post0_ where post0_.id=?
12 10 2010 17:54:23,172 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_FORCE_INCREMENT]: select post0_.id as id59_0_, post0_.author_id as author5_59_0_, post0_.content as content59_0_, post0_.postedAt as postedAt59_0_, post0_.title as title59_0_ from Post post0_ where post0_.id=?
12 10 2010 17:54:23,172 DEBUG ~ Static select for entity models.Post [OPTIMISTIC]: select post0_.id as id59_1_, post0_.author_id as author5_59_1_, post0_.content as content59_1_, post0_.postedAt as postedAt59_1_, post0_.title as title59_1_, user1_.id as id58_0_, user1_.email as email58_0_, user1_.fullname as fullname58_0_, user1_.isAdmin as isAdmin58_0_, user1_.password as password58_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:54:23,172 DEBUG ~ Static select for entity models.Post [OPTIMISTIC_FORCE_INCREMENT]: select post0_.id as id59_1_, post0_.author_id as author5_59_1_, post0_.content as content59_1_, post0_.postedAt as postedAt59_1_, post0_.title as title59_1_, user1_.id as id58_0_, user1_.email as email58_0_, user1_.fullname as fullname58_0_, user1_.isAdmin as isAdmin58_0_, user1_.password as password58_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 17:54:23,172 DEBUG ~ Static select for action ACTION_MERGE on entity models.Post: select post0_.id as id59_1_, post0_.author_id as author5_59_1_, post0_.content as content59_1_, post0_.postedAt as postedAt59_1_, post0_.title as title59_1_, comments1_.post as post59_3_, comments1_.id as id3_, comments1_.id as id57_0_, comments1_.author as author57_0_, comments1_.content as content57_0_, comments1_.post as post57_0_, comments1_.postedAt as postedAt57_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post where post0_.id=?
12 10 2010 17:54:23,173 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Post: select post0_.id as id59_1_, post0_.author_id as author5_59_1_, post0_.content as content59_1_, post0_.postedAt as postedAt59_1_, post0_.title as title59_1_, comments1_.post as post59_3_, comments1_.id as id3_, comments1_.id as id57_0_, comments1_.author as author57_0_, comments1_.content as content57_0_, comments1_.post as post57_0_, comments1_.postedAt as postedAt57_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post where post0_.id=?
12 10 2010 17:54:23,173 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id58_0_, user0_.email as email58_0_, user0_.fullname as fullname58_0_, user0_.isAdmin as isAdmin58_0_, user0_.password as password58_0_ from User user0_ where user0_.id=?
12 10 2010 17:54:23,173 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id58_0_, user0_.email as email58_0_, user0_.fullname as fullname58_0_, user0_.isAdmin as isAdmin58_0_, user0_.password as password58_0_ from User user0_ where user0_.id=?
12 10 2010 17:54:23,173 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id58_0_, user0_.email as email58_0_, user0_.fullname as fullname58_0_, user0_.isAdmin as isAdmin58_0_, user0_.password as password58_0_ from User user0_ where user0_.id=?
12 10 2010 17:54:23,173 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id58_0_, user0_.email as email58_0_, user0_.fullname as fullname58_0_, user0_.isAdmin as isAdmin58_0_, user0_.password as password58_0_ from User user0_ where user0_.id=?
12 10 2010 17:54:23,173 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id58_0_, user0_.email as email58_0_, user0_.fullname as fullname58_0_, user0_.isAdmin as isAdmin58_0_, user0_.password as password58_0_ from User user0_ where user0_.id=?
12 10 2010 17:54:23,173 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id58_0_, user0_.email as email58_0_, user0_.fullname as fullname58_0_, user0_.isAdmin as isAdmin58_0_, user0_.password as password58_0_ from User user0_ where user0_.id=?
12 10 2010 17:54:23,174 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id58_0_, user0_.email as email58_0_, user0_.fullname as fullname58_0_, user0_.isAdmin as isAdmin58_0_, user0_.password as password58_0_ from User user0_ where user0_.id=?
12 10 2010 17:54:23,174 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id58_0_, user0_.email as email58_0_, user0_.fullname as fullname58_0_, user0_.isAdmin as isAdmin58_0_, user0_.password as password58_0_ from User user0_ where user0_.id=?
12 10 2010 17:54:23,174 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id58_0_, user0_.email as email58_0_, user0_.fullname as fullname58_0_, user0_.isAdmin as isAdmin58_0_, user0_.password as password58_0_ from User user0_ where user0_.id=?
12 10 2010 17:54:23,174 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id58_0_, user0_.email as email58_0_, user0_.fullname as fullname58_0_, user0_.isAdmin as isAdmin58_0_, user0_.password as password58_0_ from User user0_ where user0_.id=?
12 10 2010 17:54:23,174 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id58_0_, user0_.email as email58_0_, user0_.fullname as fullname58_0_, user0_.isAdmin as isAdmin58_0_, user0_.password as password58_0_ from User user0_ where user0_.id=?
12 10 2010 17:54:23,174 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id58_0_, user0_.email as email58_0_, user0_.fullname as fullname58_0_, user0_.isAdmin as isAdmin58_0_, user0_.password as password58_0_ from User user0_ where user0_.id=?
12 10 2010 17:54:23,174 DEBUG ~ Static select for one-to-many models.Post.comments: select comments0_.post as post59_1_, comments0_.id as id1_, comments0_.id as id57_0_, comments0_.author as author57_0_, comments0_.content as content57_0_, comments0_.post as post57_0_, comments0_.postedAt as postedAt57_0_ from Comment comments0_ where comments0_.post=?
12 10 2010 17:54:23,174 DEBUG ~ registered: 2c9082cd2b9f0d81012b9fa5c6c6000f (unnamed)
12 10 2010 17:54:23,174 INFO  ~ Not binding factory to JNDI, no JNDI name configured
12 10 2010 17:54:23,175 DEBUG ~ instantiated session factory
12 10 2010 17:54:23,175 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:54:23,175 DEBUG ~ Process hbm files
12 10 2010 17:54:23,175 DEBUG ~ Process annotated classes
12 10 2010 17:54:23,175 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:54:23,175 DEBUG ~ processing extends queue
12 10 2010 17:54:23,175 DEBUG ~ processing collection mappings
12 10 2010 17:54:23,175 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:54:23,175 DEBUG ~ processing association property references
12 10 2010 17:54:23,175 DEBUG ~ processing foreign key constraints
12 10 2010 17:54:23,175 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:54:23,175 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:54:23,177 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:54:23,177 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:54:23,177 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:54:23,177 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:54:23,177 DEBUG ~ Process hbm files
12 10 2010 17:54:23,177 DEBUG ~ Process annotated classes
12 10 2010 17:54:23,177 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:54:23,177 DEBUG ~ processing extends queue
12 10 2010 17:54:23,177 DEBUG ~ processing collection mappings
12 10 2010 17:54:23,177 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:54:23,177 DEBUG ~ processing association property references
12 10 2010 17:54:23,177 DEBUG ~ processing foreign key constraints
12 10 2010 17:54:23,177 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:54:23,177 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:54:23,179 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:54:23,179 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:54:23,179 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:54:23,179 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:54:23,179 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:54:23,179 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:54:23,179 INFO  ~ Running hbm2ddl schema export
12 10 2010 17:54:23,180 DEBUG ~ import file not found: /import.sql
12 10 2010 17:54:23,180 INFO  ~ exporting generated schema to database
12 10 2010 17:54:23,180 DEBUG ~ alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 17:54:23,180 DEBUG ~ Unsuccessful: alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 17:54:23,180 DEBUG ~ Table not found: COMMENT in statement [alter table Comment]
12 10 2010 17:54:23,180 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 17:54:23,180 DEBUG ~ Unsuccessful: alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 17:54:23,180 DEBUG ~ Table not found: POST in statement [alter table Post]
12 10 2010 17:54:23,180 DEBUG ~ drop table Comment if exists
12 10 2010 17:54:23,180 DEBUG ~ drop table Post if exists
12 10 2010 17:54:23,181 DEBUG ~ drop table User if exists
12 10 2010 17:54:23,181 DEBUG ~ create table Comment (id bigint generated by default as identity (start with 1), author varchar(255), content varchar(255), post varbinary(255), postedAt timestamp, primary key (id))
12 10 2010 17:54:23,181 DEBUG ~ create table Post (id bigint generated by default as identity (start with 1), content longvarchar, postedAt timestamp, title varchar(255), author_id bigint, primary key (id))
12 10 2010 17:54:23,181 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
12 10 2010 17:54:23,181 DEBUG ~ alter table Comment add constraint FK9BDE863F500B6664 foreign key (post) references Post
12 10 2010 17:54:23,181 ERROR ~ Unsuccessful: alter table Comment add constraint FK9BDE863F500B6664 foreign key (post) references Post
12 10 2010 17:54:23,181 ERROR ~ Column types do not match in statement [alter table Comment add constraint FK9BDE863F500B6664 foreign key (post) references Post]
12 10 2010 17:54:23,182 DEBUG ~ alter table Post add constraint FK260CC0A7CD013E foreign key (author_id) references User
12 10 2010 17:54:23,182 INFO  ~ schema export complete
12 10 2010 17:54:23,182 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:54:23,182 DEBUG ~ Process hbm files
12 10 2010 17:54:23,182 DEBUG ~ Process annotated classes
12 10 2010 17:54:23,182 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:54:23,182 DEBUG ~ processing extends queue
12 10 2010 17:54:23,182 DEBUG ~ processing collection mappings
12 10 2010 17:54:23,182 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:54:23,182 DEBUG ~ processing association property references
12 10 2010 17:54:23,182 DEBUG ~ processing foreign key constraints
12 10 2010 17:54:23,182 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:54:23,182 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:54:23,184 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:54:23,184 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:54:23,184 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:54:23,184 DEBUG ~ Execute first pass mapping processing
12 10 2010 17:54:23,184 DEBUG ~ Process hbm files
12 10 2010 17:54:23,184 DEBUG ~ Process annotated classes
12 10 2010 17:54:23,184 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 17:54:23,184 DEBUG ~ processing extends queue
12 10 2010 17:54:23,184 DEBUG ~ processing collection mappings
12 10 2010 17:54:23,184 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 17:54:23,184 DEBUG ~ processing association property references
12 10 2010 17:54:23,184 DEBUG ~ processing foreign key constraints
12 10 2010 17:54:23,185 DEBUG ~ resolving reference to class: models.Post
12 10 2010 17:54:23,185 DEBUG ~ resolving reference to class: models.User
12 10 2010 17:54:23,186 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:54:23,186 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:54:23,186 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:54:23,186 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:54:23,186 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:54:23,187 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 17:54:23,187 DEBUG ~ Checking 0 named HQL queries
12 10 2010 17:54:23,187 DEBUG ~ Checking 0 named SQL queries
12 10 2010 17:54:23,194 DEBUG ~ opened session at timestamp: 12868736631
12 10 2010 17:54:23,194 DEBUG ~ begin
12 10 2010 17:54:23,194 DEBUG ~ opening JDBC connection
12 10 2010 17:54:23,194 DEBUG ~ current autocommit status: true
12 10 2010 17:54:23,194 DEBUG ~ disabling autocommit
12 10 2010 17:54:23,291 DEBUG ~ commit
12 10 2010 17:54:23,291 DEBUG ~ re-enabling autocommit
12 10 2010 17:54:23,291 DEBUG ~ committed JDBC Connection
12 10 2010 17:54:23,291 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:54:23,291 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:54:25,254 DEBUG ~ opened session at timestamp: 12868736652
12 10 2010 17:54:25,255 DEBUG ~ begin
12 10 2010 17:54:25,255 DEBUG ~ opening JDBC connection
12 10 2010 17:54:25,255 DEBUG ~ current autocommit status: true
12 10 2010 17:54:25,255 DEBUG ~ disabling autocommit
12 10 2010 17:54:25,283 DEBUG ~ commit
12 10 2010 17:54:25,283 DEBUG ~ re-enabling autocommit
12 10 2010 17:54:25,283 DEBUG ~ committed JDBC Connection
12 10 2010 17:54:25,283 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:54:25,283 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:54:25,299 DEBUG ~ opened session at timestamp: 12868736652
12 10 2010 17:54:25,299 DEBUG ~ begin
12 10 2010 17:54:25,299 DEBUG ~ opening JDBC connection
12 10 2010 17:54:25,299 DEBUG ~ current autocommit status: true
12 10 2010 17:54:25,299 DEBUG ~ disabling autocommit
12 10 2010 17:54:25,553 DEBUG ~ executing identity-insert immediately
12 10 2010 17:54:25,554 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,554 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,554 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,554 DEBUG ~ Natively generated identity: 1
12 10 2010 17:54:25,554 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,554 DEBUG ~ processing flush-time cascades
12 10 2010 17:54:25,554 DEBUG ~ dirty checking collections
12 10 2010 17:54:25,554 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:54:25,555 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:54:25,555 DEBUG ~ listing entities:
12 10 2010 17:54:25,555 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:54:25,556 DEBUG ~ parse() - HQL: from models.User where email = ?
12 10 2010 17:54:25,558 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'email'
          \-[PARAM] Node: '?'

12 10 2010 17:54:25,558 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:54:25,558 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:54:25,558 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 17:54:25,559 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:54:25,559 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 17:54:25,559 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 17:54:25,559 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:54:25,559 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.email {synthetic-alias} email ) ? ) ) )
12 10 2010 17:54:25,559 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:54:25,559 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 17:54:25,559 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:54:25,559 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id58_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email58_, user0_.fullname as fullname58_, user0_.isAdmin as isAdmin58_, user0_.password as password58_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'email' {originalText=email}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 17:54:25,559 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:54:25,560 DEBUG ~ HQL: from models.User where email = ?
12 10 2010 17:54:25,560 DEBUG ~ SQL: select user0_.id as id58_, user0_.email as email58_, user0_.fullname as fullname58_, user0_.isAdmin as isAdmin58_, user0_.password as password58_ from User user0_ where user0_.email=?
12 10 2010 17:54:25,560 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:54:25,560 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,560 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:54:25,560 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 17:54:25,561 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:54:25,561 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,561 DEBUG ~ initializing non-lazy collections
12 10 2010 17:54:25,561 DEBUG ~ executing identity-insert immediately
12 10 2010 17:54:25,561 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,562 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,562 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,562 DEBUG ~ Natively generated identity: 2
12 10 2010 17:54:25,562 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,562 DEBUG ~ processing flush-time cascades
12 10 2010 17:54:25,562 DEBUG ~ dirty checking collections
12 10 2010 17:54:25,562 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:54:25,562 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:54:25,562 DEBUG ~ listing entities:
12 10 2010 17:54:25,562 DEBUG ~ models.User{id=2, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:54:25,563 DEBUG ~ parse() - HQL: from models.User where email = ? AND password = ?
12 10 2010 17:54:25,565 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'AND'
          +-[EQ] Node: '='
          |  +-[IDENT] Node: 'email'
          |  \-[PARAM] Node: '?'
          \-[EQ] Node: '='
             +-[IDENT] Node: 'password'
             \-[PARAM] Node: '?'

12 10 2010 17:54:25,565 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:54:25,565 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:54:25,565 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 17:54:25,565 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:54:25,565 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 17:54:25,565 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 17:54:25,565 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:54:25,565 DEBUG ~ getDataType() : password -> org.hibernate.type.StringType@18b3c498
12 10 2010 17:54:25,566 DEBUG ~ Resolved :  {synthetic-alias}.password -> user0_.password
12 10 2010 17:54:25,566 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:54:25,566 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( AND ( = ( user0_.email {synthetic-alias} email ) ? ) ( = ( user0_.password {synthetic-alias} password ) ? ) ) ) )
12 10 2010 17:54:25,566 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:54:25,566 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 17:54:25,566 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:54:25,566 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id58_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email58_, user0_.fullname as fullname58_, user0_.isAdmin as isAdmin58_, user0_.password as password58_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'AND'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  |  \-[IDENT] IdentNode: 'email' {originalText=email}
          |  \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'user0_.password' {propertyName=password,dereferenceType=ALL,propertyPath=password,path={synthetic-alias}.password,tableAlias=user0_,className=models.User,classAlias=null}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'password' {originalText=password}
             \-[PARAM] ParameterNode: '?' {ordinal=1, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 17:54:25,566 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:54:25,567 DEBUG ~ HQL: from models.User where email = ? AND password = ?
12 10 2010 17:54:25,567 DEBUG ~ SQL: select user0_.id as id58_, user0_.email as email58_, user0_.fullname as fullname58_, user0_.isAdmin as isAdmin58_, user0_.password as password58_ from User user0_ where user0_.email=? and user0_.password=?
12 10 2010 17:54:25,567 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:54:25,567 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,567 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:54:25,568 DEBUG ~ result row: EntityKey[models.User#2]
12 10 2010 17:54:25,568 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:54:25,568 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,568 DEBUG ~ initializing non-lazy collections
12 10 2010 17:54:25,568 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,568 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:54:25,568 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:54:25,568 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,568 DEBUG ~ initializing non-lazy collections
12 10 2010 17:54:25,569 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,569 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:54:25,569 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:54:25,569 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,569 DEBUG ~ initializing non-lazy collections
12 10 2010 17:54:25,570 DEBUG ~ executing identity-insert immediately
12 10 2010 17:54:25,570 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,570 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,570 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,570 DEBUG ~ Natively generated identity: 3
12 10 2010 17:54:25,570 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,570 DEBUG ~ processing flush-time cascades
12 10 2010 17:54:25,570 DEBUG ~ dirty checking collections
12 10 2010 17:54:25,570 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:54:25,570 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:54:25,570 DEBUG ~ listing entities:
12 10 2010 17:54:25,570 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:54:25,571 DEBUG ~ executing identity-insert immediately
12 10 2010 17:54:25,571 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,571 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,571 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,571 DEBUG ~ Natively generated identity: 1
12 10 2010 17:54:25,571 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,572 DEBUG ~ processing flush-time cascades
12 10 2010 17:54:25,572 DEBUG ~ dirty checking collections
12 10 2010 17:54:25,572 DEBUG ~ Collection found: [models.Post.comments#1], was: [<unreferenced>] (initialized)
12 10 2010 17:54:25,572 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 17:54:25,572 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:54:25,572 DEBUG ~ listing entities:
12 10 2010 17:54:25,572 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:54:25,572 DEBUG ~ models.Post{content=hello world, id=1, author=models.User#3, title=first post, comments=[], postedAt=2010-10-12 17:54:25}
12 10 2010 17:54:25,573 DEBUG ~ parse() - HQL: select count(e) from models.Post e
12 10 2010 17:54:25,575 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'Post'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

12 10 2010 17:54:25,575 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:54:25,575 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:54:25,575 DEBUG ~ FromClause{level=1} :  models.Post (e) -> post0_
12 10 2010 17:54:25,575 DEBUG ~ Resolved :  e -> post0_.id
12 10 2010 17:54:25,575 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:54:25,576 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count post0_.id ) ) ( FromClause{level=1} Post post0_ ) )
12 10 2010 17:54:25,576 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 17:54:25,576 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:54:25,576 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'post0_.id' {alias=e, className=models.Post, tableAlias=post0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}

12 10 2010 17:54:25,576 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:54:25,576 DEBUG ~ HQL: select count(e) from models.Post e
12 10 2010 17:54:25,576 DEBUG ~ SQL: select count(post0_.id) as col_0_0_ from Post post0_
12 10 2010 17:54:25,576 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:54:25,576 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,577 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:54:25,577 DEBUG ~ result row: 
12 10 2010 17:54:25,577 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:54:25,577 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,577 DEBUG ~ initializing non-lazy collections
12 10 2010 17:54:25,577 DEBUG ~ parse() - HQL: from models.Post where author = ?
12 10 2010 17:54:25,579 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'author'
          \-[PARAM] Node: '?'

12 10 2010 17:54:25,579 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:54:25,579 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:54:25,579 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
12 10 2010 17:54:25,579 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:54:25,580 DEBUG ~ getDataType() : author -> org.hibernate.type.ManyToOneType(models.User)
12 10 2010 17:54:25,580 DEBUG ~ dereferenceShortcut() : property author in models.Post does not require a join.
12 10 2010 17:54:25,580 DEBUG ~ terminal propertyPath = [author]
12 10 2010 17:54:25,580 DEBUG ~ Resolved :  {synthetic-alias}.author -> post0_.author_id
12 10 2010 17:54:25,580 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:54:25,580 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( = ( post0_.author_id {synthetic-alias} author ) ? ) ) )
12 10 2010 17:54:25,580 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:54:25,580 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 17:54:25,580 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:54:25,580 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id59_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_59_, post0_.content as content59_, post0_.postedAt as postedAt59_, post0_.title as title59_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'post0_.author_id' {propertyName=author,dereferenceType=0,propertyPath=author,path={synthetic-alias}.author,tableAlias=post0_,className=models.Post,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'author' {originalText=author}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.ManyToOneType(models.User)}

12 10 2010 17:54:25,581 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:54:25,581 DEBUG ~ HQL: from models.Post where author = ?
12 10 2010 17:54:25,581 DEBUG ~ SQL: select post0_.id as id59_, post0_.author_id as author5_59_, post0_.content as content59_, post0_.postedAt as postedAt59_, post0_.title as title59_ from Post post0_ where post0_.author_id=?
12 10 2010 17:54:25,581 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:54:25,581 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,581 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:54:25,581 DEBUG ~ result row: EntityKey[models.Post#1]
12 10 2010 17:54:25,584 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:54:25,584 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,584 DEBUG ~ initializing non-lazy collections
12 10 2010 17:54:25,585 DEBUG ~ executing identity-insert immediately
12 10 2010 17:54:25,585 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,585 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,585 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,585 DEBUG ~ Natively generated identity: 4
12 10 2010 17:54:25,585 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,585 DEBUG ~ processing flush-time cascades
12 10 2010 17:54:25,585 DEBUG ~ dirty checking collections
12 10 2010 17:54:25,585 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:54:25,585 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:54:25,585 DEBUG ~ listing entities:
12 10 2010 17:54:25,585 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:54:25,586 DEBUG ~ executing identity-insert immediately
12 10 2010 17:54:25,586 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,586 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,586 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,586 DEBUG ~ Natively generated identity: 2
12 10 2010 17:54:25,586 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,587 DEBUG ~ processing flush-time cascades
12 10 2010 17:54:25,587 DEBUG ~ dirty checking collections
12 10 2010 17:54:25,587 DEBUG ~ Collection found: [models.Post.comments#2], was: [<unreferenced>] (initialized)
12 10 2010 17:54:25,587 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 17:54:25,587 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:54:25,587 DEBUG ~ listing entities:
12 10 2010 17:54:25,587 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, comments=[], postedAt=2010-10-12 17:54:25}
12 10 2010 17:54:25,587 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:54:25,592 DEBUG ~ executing identity-insert immediately
12 10 2010 17:54:25,593 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,593 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,593 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,593 DEBUG ~ Natively generated identity: 1
12 10 2010 17:54:25,594 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,594 DEBUG ~ processing flush-time cascades
12 10 2010 17:54:25,594 DEBUG ~ dirty checking collections
12 10 2010 17:54:25,594 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
12 10 2010 17:54:25,595 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 17:54:25,595 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:54:25,595 DEBUG ~ listing entities:
12 10 2010 17:54:25,596 DEBUG ~ models.Comment{content=nice post, id=1, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808082f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808480f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808082f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2550b2f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:54:25}
12 10 2010 17:54:25,596 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, comments=[], postedAt=2010-10-12 17:54:25}
12 10 2010 17:54:25,596 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:54:25,597 DEBUG ~ executing identity-insert immediately
12 10 2010 17:54:25,597 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,598 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,598 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,598 DEBUG ~ Natively generated identity: 2
12 10 2010 17:54:25,598 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,598 DEBUG ~ processing flush-time cascades
12 10 2010 17:54:25,599 DEBUG ~ dirty checking collections
12 10 2010 17:54:25,599 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
12 10 2010 17:54:25,600 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 17:54:25,600 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:54:25,600 DEBUG ~ listing entities:
12 10 2010 17:54:25,600 DEBUG ~ models.Comment{content=nice post, id=1, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808082f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808480f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808082f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2550b2f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:54:25}
12 10 2010 17:54:25,601 DEBUG ~ models.Comment{content=i knew that !, id=2, author=Tom, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808082f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808480f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808082f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2550b2f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:54:25}
12 10 2010 17:54:25,602 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, comments=[], postedAt=2010-10-12 17:54:25}
12 10 2010 17:54:25,602 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:54:25,603 DEBUG ~ parse() - HQL: from models.Comment where post = ?
12 10 2010 17:54:25,605 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Comment'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'post'
          \-[PARAM] Node: '?'

12 10 2010 17:54:25,606 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:54:25,606 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:54:25,606 DEBUG ~ FromClause{level=1} :  models.Comment (no alias) -> comment0_
12 10 2010 17:54:25,606 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 17:54:25,606 DEBUG ~ getDataType() : post -> org.hibernate.type.SerializableType@23d6ec9c
12 10 2010 17:54:25,606 DEBUG ~ Resolved :  {synthetic-alias}.post -> comment0_.post
12 10 2010 17:54:25,606 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:54:25,606 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Comment comment0_ ) ( where ( = ( comment0_.post {synthetic-alias} post ) ? ) ) )
12 10 2010 17:54:25,607 DEBUG ~ Derived SELECT clause created.
12 10 2010 17:54:25,607 DEBUG ~ Using FROM fragment [Comment comment0_]
12 10 2010 17:54:25,607 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:54:25,607 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Comment)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'comment0_.id as id57_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Comment,tableAlias=comment0_,origin=null,columns={,className=models.Comment}}}
    |  \-[SQL_TOKEN] SqlFragment: 'comment0_.author as author57_, comment0_.content as content57_, comment0_.post as post57_, comment0_.postedAt as postedAt57_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[comment0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Comment comment0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Comment,tableAlias=comment0_,origin=null,columns={,className=models.Comment}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'comment0_.post' {propertyName=post,dereferenceType=ALL,propertyPath=post,path={synthetic-alias}.post,tableAlias=comment0_,className=models.Comment,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'post' {originalText=post}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.SerializableType@23d6ec9c}

12 10 2010 17:54:25,607 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:54:25,608 DEBUG ~ HQL: from models.Comment where post = ?
12 10 2010 17:54:25,608 DEBUG ~ SQL: select comment0_.id as id57_, comment0_.author as author57_, comment0_.content as content57_, comment0_.post as post57_, comment0_.postedAt as postedAt57_ from Comment comment0_ where comment0_.post=?
12 10 2010 17:54:25,608 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:54:25,608 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,609 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:54:25,609 DEBUG ~ result row: EntityKey[models.Comment#1]
12 10 2010 17:54:25,609 DEBUG ~ result row: EntityKey[models.Comment#2]
12 10 2010 17:54:25,609 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:54:25,609 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,609 DEBUG ~ initializing non-lazy collections
12 10 2010 17:54:25,610 DEBUG ~ executing identity-insert immediately
12 10 2010 17:54:25,610 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,610 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,610 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,610 DEBUG ~ Natively generated identity: 5
12 10 2010 17:54:25,610 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,611 DEBUG ~ processing flush-time cascades
12 10 2010 17:54:25,611 DEBUG ~ dirty checking collections
12 10 2010 17:54:25,611 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:54:25,611 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:54:25,611 DEBUG ~ listing entities:
12 10 2010 17:54:25,611 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:54:25,611 DEBUG ~ executing identity-insert immediately
12 10 2010 17:54:25,611 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,611 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,611 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,612 DEBUG ~ Natively generated identity: 3
12 10 2010 17:54:25,612 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,612 DEBUG ~ processing flush-time cascades
12 10 2010 17:54:25,612 DEBUG ~ dirty checking collections
12 10 2010 17:54:25,612 DEBUG ~ Collection found: [models.Post.comments#3], was: [<unreferenced>] (initialized)
12 10 2010 17:54:25,612 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 17:54:25,612 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:54:25,612 DEBUG ~ listing entities:
12 10 2010 17:54:25,613 DEBUG ~ models.Post{content=hello world, id=3, author=models.User#5, title=first post, comments=[], postedAt=2010-10-12 17:54:25}
12 10 2010 17:54:25,613 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:54:25,614 DEBUG ~ executing identity-insert immediately
12 10 2010 17:54:25,614 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,614 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,615 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,615 DEBUG ~ Natively generated identity: 3
12 10 2010 17:54:25,615 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,615 DEBUG ~ processing flush-time cascades
12 10 2010 17:54:25,615 DEBUG ~ dirty checking collections
12 10 2010 17:54:25,615 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
12 10 2010 17:54:25,616 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 17:54:25,616 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:54:25,616 DEBUG ~ listing entities:
12 10 2010 17:54:25,617 DEBUG ~ models.Comment{content=nice post, id=3, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808083f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808580f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808083f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2550cbf8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:54:25}
12 10 2010 17:54:25,617 DEBUG ~ models.Post{content=hello world, id=3, author=models.User#5, title=first post, comments=[], postedAt=2010-10-12 17:54:25}
12 10 2010 17:54:25,617 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:54:25,620 DEBUG ~ executing identity-insert immediately
12 10 2010 17:54:25,620 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,621 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,621 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,621 DEBUG ~ Natively generated identity: 4
12 10 2010 17:54:25,621 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,622 DEBUG ~ processing flush-time cascades
12 10 2010 17:54:25,622 DEBUG ~ dirty checking collections
12 10 2010 17:54:25,622 DEBUG ~ Collection dirty: [models.Post.comments#3]
12 10 2010 17:54:25,622 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
12 10 2010 17:54:25,623 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 17:54:25,623 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 17:54:25,623 DEBUG ~ listing entities:
12 10 2010 17:54:25,624 DEBUG ~ models.Comment{content=nice post, id=3, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808083f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808580f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8181f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808083f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808081f7848080808af3f2808eedefe4e5ecf3aec3efedede5eef4e30c6cb88a748959828084cc8086e1f5f4e8eff2f180fe8083cc8087e3efeef4e5eef4f180fe8083cc8084f0eff3f4f4808dccedefe4e5ecf3afd0eff3f4bbcc8088f0eff3f4e5e4c1f4f180fe8084f8f180fe80858080808080808083f48084cae5e6e6f48089eee9e3e5a0f0eff3f4f180fe8087f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2550cdf8f8f4808be8e5ececefa0f7eff2ece4f3f180fe809ef788808081ab1f2550cbf8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:54:25}
12 10 2010 17:54:25,624 DEBUG ~ models.Post{content=hello world, id=3, author=models.User#5, title=first post, comments=[models.Comment#3], postedAt=2010-10-12 17:54:25}
12 10 2010 17:54:25,625 DEBUG ~ models.Comment{content=i knew that !, id=4, author=Tom, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808083f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808580f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8181f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808083f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808081f7848080808af3f2808eedefe4e5ecf3aec3efedede5eef4e30c6cb88a748959828084cc8086e1f5f4e8eff2f180fe8083cc8087e3efeef4e5eef4f180fe8083cc8084f0eff3f4f4808dccedefe4e5ecf3afd0eff3f4bbcc8088f0eff3f4e5e4c1f4f180fe8084f8f180fe80858080808080808083f48084cae5e6e6f48089eee9e3e5a0f0eff3f4f180fe8087f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2550cdf8f8f4808be8e5ececefa0f7eff2ece4f3f180fe809ef788808081ab1f2550cbf8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:54:25}
12 10 2010 17:54:25,625 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:54:25,626 DEBUG ~ parse() - HQL: select count(e) from models.User e
12 10 2010 17:54:25,628 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'User'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

12 10 2010 17:54:25,628 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:54:25,628 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:54:25,628 DEBUG ~ FromClause{level=1} :  models.User (e) -> user0_
12 10 2010 17:54:25,628 DEBUG ~ Resolved :  e -> user0_.id
12 10 2010 17:54:25,628 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:54:25,628 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count user0_.id ) ) ( FromClause{level=1} User user0_ ) )
12 10 2010 17:54:25,629 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 17:54:25,629 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:54:25,629 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'user0_.id' {alias=e, className=models.User, tableAlias=user0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}

12 10 2010 17:54:25,629 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:54:25,629 DEBUG ~ HQL: select count(e) from models.User e
12 10 2010 17:54:25,629 DEBUG ~ SQL: select count(user0_.id) as col_0_0_ from User user0_
12 10 2010 17:54:25,629 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:54:25,630 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,630 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:54:25,630 DEBUG ~ result row: 
12 10 2010 17:54:25,630 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:54:25,630 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,630 DEBUG ~ initializing non-lazy collections
12 10 2010 17:54:25,630 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,631 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:54:25,631 DEBUG ~ result row: 
12 10 2010 17:54:25,631 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:54:25,631 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,631 DEBUG ~ initializing non-lazy collections
12 10 2010 17:54:25,631 DEBUG ~ parse() - HQL: select count(e) from models.Comment e
12 10 2010 17:54:25,634 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'Comment'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

12 10 2010 17:54:25,634 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:54:25,635 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 17:54:25,635 DEBUG ~ FromClause{level=1} :  models.Comment (e) -> comment0_
12 10 2010 17:54:25,635 DEBUG ~ Resolved :  e -> comment0_.id
12 10 2010 17:54:25,635 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 17:54:25,635 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count comment0_.id ) ) ( FromClause{level=1} Comment comment0_ ) )
12 10 2010 17:54:25,635 DEBUG ~ Using FROM fragment [Comment comment0_]
12 10 2010 17:54:25,636 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 17:54:25,637 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Comment)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'comment0_.id' {alias=e, className=models.Comment, tableAlias=comment0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[comment0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Comment comment0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=Comment,tableAlias=comment0_,origin=null,columns={,className=models.Comment}}

12 10 2010 17:54:25,637 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:54:25,637 DEBUG ~ HQL: select count(e) from models.Comment e
12 10 2010 17:54:25,637 DEBUG ~ SQL: select count(comment0_.id) as col_0_0_ from Comment comment0_
12 10 2010 17:54:25,637 DEBUG ~ throwQueryException() : no errors
12 10 2010 17:54:25,637 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,638 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:54:25,638 DEBUG ~ result row: 
12 10 2010 17:54:25,638 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:54:25,638 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,638 DEBUG ~ initializing non-lazy collections
12 10 2010 17:54:25,638 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,638 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:54:25,638 DEBUG ~ result row: EntityKey[models.Post#3]
12 10 2010 17:54:25,638 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:54:25,638 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,639 DEBUG ~ initializing non-lazy collections
12 10 2010 17:54:25,644 DEBUG ~ processing flush-time cascades
12 10 2010 17:54:25,644 DEBUG ~ dirty checking collections
12 10 2010 17:54:25,644 DEBUG ~ Collection dirty: [models.Post.comments#3]
12 10 2010 17:54:25,646 DEBUG ~ Collection dereferenced: [models.Post.comments#3]
12 10 2010 17:54:25,647 DEBUG ~ Flushed: 0 insertions, 0 updates, 3 deletions to 4 objects
12 10 2010 17:54:25,647 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 1 removals to 1 collections
12 10 2010 17:54:25,648 DEBUG ~ listing entities:
12 10 2010 17:54:25,648 DEBUG ~ models.Comment{content=nice post, id=3, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808083f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808580f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8181f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808083f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808082f7848080808af3f2808eedefe4e5ecf3aec3efedede5eef4e30c6cb88a748959828084cc8086e1f5f4e8eff2f180fe8083cc8087e3efeef4e5eef4f180fe8083cc8084f0eff3f4f4808dccedefe4e5ecf3afd0eff3f4bbcc8088f0eff3f4e5e4c1f4f180fe8084f8f180fe80858080808080808083f48084cae5e6e6f48089eee9e3e5a0f0eff3f4f180fe8087f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2550cdf8f3f180fe80998080808080808084f48083d4efedf4808de9a0ebeee5f7a0f4e8e1f4a0a1f180fe8087f3f180fe809ef788808081ab1f2550d2f8f8f4808be8e5ececefa0f7eff2ece4f3f180fe809ef788808081ab1f2550cbf8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:54:25}
12 10 2010 17:54:25,649 DEBUG ~ models.Post{content=hello world, id=3, author=models.User#5, title=first post, comments=[models.Comment#3, models.Comment#4], postedAt=2010-10-12 17:54:25}
12 10 2010 17:54:25,649 DEBUG ~ models.Comment{content=i knew that !, id=4, author=Tom, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808083f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808580f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8181f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808083f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808082f7848080808af3f2808eedefe4e5ecf3aec3efedede5eef4e30c6cb88a748959828084cc8086e1f5f4e8eff2f180fe8083cc8087e3efeef4e5eef4f180fe8083cc8084f0eff3f4f4808dccedefe4e5ecf3afd0eff3f4bbcc8088f0eff3f4e5e4c1f4f180fe8084f8f180fe80858080808080808083f48084cae5e6e6f48089eee9e3e5a0f0eff3f4f180fe8087f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2550cdf8f3f180fe80998080808080808084f48083d4efedf4808de9a0ebeee5f7a0f4e8e1f4a0a1f180fe8087f3f180fe809ef788808081ab1f2550d2f8f8f4808be8e5ececefa0f7eff2ece4f3f180fe809ef788808081ab1f2550cbf8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 17:54:25}
12 10 2010 17:54:25,650 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:54:25,654 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,655 DEBUG ~ reusing prepared statement
12 10 2010 17:54:25,655 DEBUG ~ Executing batch size: 2
12 10 2010 17:54:25,655 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,655 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,655 DEBUG ~ Executing batch size: 1
12 10 2010 17:54:25,655 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,656 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,657 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:54:25,657 DEBUG ~ result row: 
12 10 2010 17:54:25,657 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:54:25,657 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,657 DEBUG ~ initializing non-lazy collections
12 10 2010 17:54:25,657 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,657 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:54:25,657 DEBUG ~ result row: 
12 10 2010 17:54:25,657 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:54:25,657 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,657 DEBUG ~ initializing non-lazy collections
12 10 2010 17:54:25,658 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 17:54:25,658 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 17:54:25,658 DEBUG ~ result row: 
12 10 2010 17:54:25,658 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 17:54:25,658 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 17:54:25,658 DEBUG ~ initializing non-lazy collections
12 10 2010 17:54:25,696 DEBUG ~ commit
12 10 2010 17:54:25,697 DEBUG ~ processing flush-time cascades
12 10 2010 17:54:25,697 DEBUG ~ dirty checking collections
12 10 2010 17:54:25,698 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 17:54:25,698 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 17:54:25,698 DEBUG ~ listing entities:
12 10 2010 17:54:25,698 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 17:54:25,698 DEBUG ~ re-enabling autocommit
12 10 2010 17:54:25,698 DEBUG ~ committed JDBC Connection
12 10 2010 17:54:25,698 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:54:25,698 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 17:54:25,739 DEBUG ~ opened session at timestamp: 12868736657
12 10 2010 17:54:25,739 DEBUG ~ begin
12 10 2010 17:54:25,739 DEBUG ~ opening JDBC connection
12 10 2010 17:54:25,739 DEBUG ~ current autocommit status: true
12 10 2010 17:54:25,739 DEBUG ~ disabling autocommit
12 10 2010 17:54:25,744 DEBUG ~ commit
12 10 2010 17:54:25,744 DEBUG ~ re-enabling autocommit
12 10 2010 17:54:25,744 DEBUG ~ committed JDBC Connection
12 10 2010 17:54:25,744 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 17:54:25,744 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 18:01:10,098 ERROR ~ 

@645j8gmag
Internal Server Error (500) for request GET /@tests

Compilation error (In /test/BasicTest.scala around line 121)
The file /test/BasicTest.scala could not be compiled. Error raised is : not found: value post

play.exceptions.CompilationException: not found: value post
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
12 10 2010 18:01:22,758 INFO  ~ closing
12 10 2010 18:01:22,758 INFO  ~ Running hbm2ddl schema export
12 10 2010 18:01:22,759 DEBUG ~ import file not found: /import.sql
12 10 2010 18:01:22,759 INFO  ~ exporting generated schema to database
12 10 2010 18:01:22,759 DEBUG ~ alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 18:01:22,759 DEBUG ~ Unsuccessful: alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 18:01:22,759 DEBUG ~ Constraint not found FK9BDE863F500B6664 in table: COMMENT in statement [alter table Comment drop constraint FK9BDE863F500B6664]
12 10 2010 18:01:22,759 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 18:01:22,759 DEBUG ~ drop table Comment if exists
12 10 2010 18:01:22,759 DEBUG ~ drop table Post if exists
12 10 2010 18:01:22,759 DEBUG ~ drop table User if exists
12 10 2010 18:01:22,760 INFO  ~ schema export complete
12 10 2010 18:01:22,792 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 18:01:22,792 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
12 10 2010 18:01:22,792 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
12 10 2010 18:01:22,792 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
12 10 2010 18:01:22,792 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
12 10 2010 18:01:22,792 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
12 10 2010 18:01:22,792 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
12 10 2010 18:01:22,792 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
12 10 2010 18:01:22,792 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
12 10 2010 18:01:22,792 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
12 10 2010 18:01:22,793 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 18:01:22,793 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
12 10 2010 18:01:22,793 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
12 10 2010 18:01:22,793 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
12 10 2010 18:01:22,794 DEBUG ~ Execute first pass mapping processing
12 10 2010 18:01:22,794 DEBUG ~ Process hbm files
12 10 2010 18:01:22,794 DEBUG ~ Process annotated classes
12 10 2010 18:01:22,795 INFO  ~ Binding entity from annotated class: models.Comment
12 10 2010 18:01:22,795 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 18:01:22,795 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 18:01:22,796 DEBUG ~ Import with entity name Comment
12 10 2010 18:01:22,796 INFO  ~ Bind entity models.Comment on table Comment
12 10 2010 18:01:22,799 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:22,799 DEBUG ~ binding property id with lazy=false
12 10 2010 18:01:22,799 DEBUG ~ building SimpleValue for id
12 10 2010 18:01:22,799 DEBUG ~ Building property id
12 10 2010 18:01:22,799 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=author, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:22,799 DEBUG ~ binding property author with lazy=false
12 10 2010 18:01:22,800 DEBUG ~ building SimpleValue for author
12 10 2010 18:01:22,800 DEBUG ~ Building property author
12 10 2010 18:01:22,800 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=content, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:22,800 DEBUG ~ binding property content with lazy=false
12 10 2010 18:01:22,800 DEBUG ~ building SimpleValue for content
12 10 2010 18:01:22,800 DEBUG ~ Building property content
12 10 2010 18:01:22,800 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=post, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:22,800 DEBUG ~ binding property post with lazy=false
12 10 2010 18:01:22,800 DEBUG ~ building SimpleValue for post
12 10 2010 18:01:22,800 DEBUG ~ Building property post
12 10 2010 18:01:22,800 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:22,800 DEBUG ~ binding property postedAt with lazy=false
12 10 2010 18:01:22,800 DEBUG ~ building SimpleValue for postedAt
12 10 2010 18:01:22,800 DEBUG ~ Building property postedAt
12 10 2010 18:01:22,800 INFO  ~ Binding entity from annotated class: models.User
12 10 2010 18:01:22,800 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 18:01:22,801 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 18:01:22,801 DEBUG ~ Import with entity name User
12 10 2010 18:01:22,802 INFO  ~ Bind entity models.User on table User
12 10 2010 18:01:22,804 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:22,804 DEBUG ~ binding property id with lazy=false
12 10 2010 18:01:22,804 DEBUG ~ building SimpleValue for id
12 10 2010 18:01:22,804 DEBUG ~ Building property id
12 10 2010 18:01:22,804 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:22,804 DEBUG ~ binding property email with lazy=false
12 10 2010 18:01:22,804 DEBUG ~ building SimpleValue for email
12 10 2010 18:01:22,804 DEBUG ~ Building property email
12 10 2010 18:01:22,804 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:22,804 DEBUG ~ binding property fullname with lazy=false
12 10 2010 18:01:22,804 DEBUG ~ building SimpleValue for fullname
12 10 2010 18:01:22,805 DEBUG ~ Building property fullname
12 10 2010 18:01:22,805 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:22,805 DEBUG ~ binding property isAdmin with lazy=false
12 10 2010 18:01:22,805 DEBUG ~ building SimpleValue for isAdmin
12 10 2010 18:01:22,805 DEBUG ~ Building property isAdmin
12 10 2010 18:01:22,805 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:22,805 DEBUG ~ binding property password with lazy=false
12 10 2010 18:01:22,805 DEBUG ~ building SimpleValue for password
12 10 2010 18:01:22,805 DEBUG ~ Building property password
12 10 2010 18:01:22,805 INFO  ~ Binding entity from annotated class: models.Post
12 10 2010 18:01:22,805 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 18:01:22,805 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 18:01:22,805 DEBUG ~ Import with entity name Post
12 10 2010 18:01:22,805 INFO  ~ Bind entity models.Post on table Post
12 10 2010 18:01:22,809 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:22,809 DEBUG ~ binding property id with lazy=false
12 10 2010 18:01:22,809 DEBUG ~ building SimpleValue for id
12 10 2010 18:01:22,810 DEBUG ~ Building property id
12 10 2010 18:01:22,810 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
12 10 2010 18:01:22,810 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=author, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:22,810 DEBUG ~ Building property author
12 10 2010 18:01:22,810 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
12 10 2010 18:01:22,810 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:22,810 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=null, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:22,810 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=element, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:22,810 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments_KEY, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:22,810 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='comments_KEY', referencedColumn='null', mappedBy='null'}
12 10 2010 18:01:22,810 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
12 10 2010 18:01:22,811 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
12 10 2010 18:01:22,811 DEBUG ~ Collection role: models.Post.comments
12 10 2010 18:01:22,811 DEBUG ~ Building property comments
12 10 2010 18:01:22,811 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=content, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:22,811 DEBUG ~ binding property content with lazy=false
12 10 2010 18:01:22,811 DEBUG ~ building SimpleValue for content
12 10 2010 18:01:22,811 DEBUG ~ Building property content
12 10 2010 18:01:22,812 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:22,812 DEBUG ~ binding property postedAt with lazy=false
12 10 2010 18:01:22,812 DEBUG ~ building SimpleValue for postedAt
12 10 2010 18:01:22,812 DEBUG ~ Building property postedAt
12 10 2010 18:01:22,812 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=title, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:22,812 DEBUG ~ binding property title with lazy=false
12 10 2010 18:01:22,812 DEBUG ~ building SimpleValue for title
12 10 2010 18:01:22,812 DEBUG ~ Building property title
12 10 2010 18:01:22,812 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 18:01:22,812 DEBUG ~ setting SimpleValue typeName for author
12 10 2010 18:01:22,812 DEBUG ~ setting SimpleValue typeName for content
12 10 2010 18:01:22,812 DEBUG ~ setting SimpleValue typeName for post
12 10 2010 18:01:22,812 DEBUG ~ setting SimpleValue typeName for postedAt
12 10 2010 18:01:22,812 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 18:01:22,812 DEBUG ~ setting SimpleValue typeName for email
12 10 2010 18:01:22,812 DEBUG ~ setting SimpleValue typeName for fullname
12 10 2010 18:01:22,812 DEBUG ~ setting SimpleValue typeName for isAdmin
12 10 2010 18:01:22,813 DEBUG ~ setting SimpleValue typeName for password
12 10 2010 18:01:22,813 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 18:01:22,813 DEBUG ~ setting SimpleValue typeName for content
12 10 2010 18:01:22,813 DEBUG ~ setting SimpleValue typeName for postedAt
12 10 2010 18:01:22,813 DEBUG ~ setting SimpleValue typeName for title
12 10 2010 18:01:22,813 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 18:01:22,813 DEBUG ~ processing extends queue
12 10 2010 18:01:22,813 DEBUG ~ processing collection mappings
12 10 2010 18:01:22,813 DEBUG ~ Second pass for collection: models.Post.comments
12 10 2010 18:01:22,813 DEBUG ~ Binding a OneToMany: models.Post.comments through a foreign key
12 10 2010 18:01:22,813 INFO  ~ Mapping collection: models.Post.comments -> Comment
12 10 2010 18:01:22,813 DEBUG ~ Retrieving property models.Comment.post
12 10 2010 18:01:22,813 DEBUG ~ Mapped collection key: post, one-to-many: models.Comment
12 10 2010 18:01:22,813 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 18:01:22,813 DEBUG ~ processing association property references
12 10 2010 18:01:22,814 DEBUG ~ processing foreign key constraints
12 10 2010 18:01:22,814 DEBUG ~ resolving reference to class: models.Post
12 10 2010 18:01:22,814 DEBUG ~ resolving reference to class: models.User
12 10 2010 18:01:22,815 INFO  ~ Hibernate Validator not found: ignoring
12 10 2010 18:01:22,825 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
12 10 2010 18:01:22,826 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
12 10 2010 18:01:22,828 DEBUG ~ Search not present in classpath, ignoring event listener registration.
12 10 2010 18:01:22,829 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
12 10 2010 18:01:22,829 DEBUG ~ Preparing to build session factory with filters : {}
12 10 2010 18:01:22,829 DEBUG ~ Execute first pass mapping processing
12 10 2010 18:01:22,829 DEBUG ~ Process hbm files
12 10 2010 18:01:22,829 DEBUG ~ Process annotated classes
12 10 2010 18:01:22,829 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 18:01:22,829 DEBUG ~ processing extends queue
12 10 2010 18:01:22,829 DEBUG ~ processing collection mappings
12 10 2010 18:01:22,829 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 18:01:22,829 DEBUG ~ processing association property references
12 10 2010 18:01:22,829 DEBUG ~ processing foreign key constraints
12 10 2010 18:01:22,829 DEBUG ~ resolving reference to class: models.Post
12 10 2010 18:01:22,829 DEBUG ~ resolving reference to class: models.User
12 10 2010 18:01:22,831 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
12 10 2010 18:01:22,831 INFO  ~ Using provided datasource
12 10 2010 18:01:22,831 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
12 10 2010 18:01:22,831 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
12 10 2010 18:01:22,832 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
12 10 2010 18:01:22,832 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
12 10 2010 18:01:22,832 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
12 10 2010 18:01:22,832 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
12 10 2010 18:01:22,832 INFO  ~ Automatic flush during beforeCompletion(): disabled
12 10 2010 18:01:22,832 INFO  ~ Automatic session close at end of transaction: disabled
12 10 2010 18:01:22,832 INFO  ~ JDBC batch size: 15
12 10 2010 18:01:22,832 INFO  ~ JDBC batch updates for versioned data: disabled
12 10 2010 18:01:22,832 INFO  ~ Scrollable result sets: enabled
12 10 2010 18:01:22,832 DEBUG ~ Wrap result sets: disabled
12 10 2010 18:01:22,832 INFO  ~ JDBC3 getGeneratedKeys(): disabled
12 10 2010 18:01:22,832 INFO  ~ Connection release mode: auto
12 10 2010 18:01:22,832 INFO  ~ Default batch fetch size: 1
12 10 2010 18:01:22,832 INFO  ~ Generate SQL with comments: disabled
12 10 2010 18:01:22,832 INFO  ~ Order SQL updates by primary key: disabled
12 10 2010 18:01:22,833 INFO  ~ Order SQL inserts for batching: disabled
12 10 2010 18:01:22,833 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
12 10 2010 18:01:22,833 INFO  ~ Using ASTQueryTranslatorFactory
12 10 2010 18:01:22,833 INFO  ~ Query language substitutions: {}
12 10 2010 18:01:22,833 INFO  ~ JPA-QL strict compliance: enabled
12 10 2010 18:01:22,833 INFO  ~ Second-level cache: enabled
12 10 2010 18:01:22,833 INFO  ~ Query cache: disabled
12 10 2010 18:01:22,833 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
12 10 2010 18:01:22,833 INFO  ~ Optimize cache for minimal puts: disabled
12 10 2010 18:01:22,833 INFO  ~ Structured second-level cache entries: disabled
12 10 2010 18:01:22,833 INFO  ~ Statistics: disabled
12 10 2010 18:01:22,833 INFO  ~ Deleted entity synthetic identifier rollback: disabled
12 10 2010 18:01:22,833 INFO  ~ Default entity-mode: pojo
12 10 2010 18:01:22,833 INFO  ~ Named query checking : enabled
12 10 2010 18:01:22,833 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
12 10 2010 18:01:22,844 INFO  ~ building session factory
12 10 2010 18:01:22,844 DEBUG ~ Session factory constructed with filter configurations : {}
12 10 2010 18:01:22,844 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
12 10 2010 18:01:22,845 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:22,845 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:22,845 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:22,851 DEBUG ~ Static SQL for entity: models.Comment
12 10 2010 18:01:22,851 DEBUG ~  Version select: select id from Comment where id =?
12 10 2010 18:01:22,851 DEBUG ~  Snapshot select: select comment_.id, comment_.author as author63_, comment_.content as content63_, comment_.post as post63_, comment_.postedAt as postedAt63_ from Comment comment_ where comment_.id=?
12 10 2010 18:01:22,851 DEBUG ~  Insert 0: insert into Comment (author, content, post, postedAt, id) values (?, ?, ?, ?, ?)
12 10 2010 18:01:22,851 DEBUG ~  Update 0: update Comment set author=?, content=?, post=?, postedAt=? where id=?
12 10 2010 18:01:22,851 DEBUG ~  Delete 0: delete from Comment where id=?
12 10 2010 18:01:22,851 DEBUG ~  Identity insert: insert into Comment (id, author, content, post, postedAt) values (null, ?, ?, ?, ?)
12 10 2010 18:01:22,856 DEBUG ~ Static SQL for entity: models.Post
12 10 2010 18:01:22,856 DEBUG ~  Version select: select id from Post where id =?
12 10 2010 18:01:22,856 DEBUG ~  Snapshot select: select post_.id, post_.author_id as author5_65_, post_.content as content65_, post_.postedAt as postedAt65_, post_.title as title65_ from Post post_ where post_.id=?
12 10 2010 18:01:22,856 DEBUG ~  Insert 0: insert into Post (author_id, content, postedAt, title, id) values (?, ?, ?, ?, ?)
12 10 2010 18:01:22,856 DEBUG ~  Update 0: update Post set author_id=?, content=?, postedAt=?, title=? where id=?
12 10 2010 18:01:22,856 DEBUG ~  Delete 0: delete from Post where id=?
12 10 2010 18:01:22,856 DEBUG ~  Identity insert: insert into Post (id, author_id, content, postedAt, title) values (null, ?, ?, ?, ?)
12 10 2010 18:01:22,860 DEBUG ~ Static SQL for entity: models.User
12 10 2010 18:01:22,860 DEBUG ~  Version select: select id from User where id =?
12 10 2010 18:01:22,860 DEBUG ~  Snapshot select: select user_.id, user_.email as email64_, user_.fullname as fullname64_, user_.isAdmin as isAdmin64_, user_.password as password64_ from User user_ where user_.id=?
12 10 2010 18:01:22,860 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
12 10 2010 18:01:22,860 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
12 10 2010 18:01:22,860 DEBUG ~  Delete 0: delete from User where id=?
12 10 2010 18:01:22,860 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
12 10 2010 18:01:22,860 DEBUG ~ Static SQL for collection: models.Post.comments
12 10 2010 18:01:22,860 DEBUG ~  Row insert: update Comment set post=? where id=?
12 10 2010 18:01:22,860 DEBUG ~  Row delete: update Comment set post=null where post=? and id=?
12 10 2010 18:01:22,860 DEBUG ~  One-shot delete: update Comment set post=null where post=?
12 10 2010 18:01:22,861 DEBUG ~ Static select for entity models.Comment [NONE]: select comment0_.id as id63_0_, comment0_.author as author63_0_, comment0_.content as content63_0_, comment0_.post as post63_0_, comment0_.postedAt as postedAt63_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:22,861 DEBUG ~ Static select for entity models.Comment [READ]: select comment0_.id as id63_0_, comment0_.author as author63_0_, comment0_.content as content63_0_, comment0_.post as post63_0_, comment0_.postedAt as postedAt63_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:22,861 DEBUG ~ Static select for entity models.Comment [UPGRADE]: select comment0_.id as id63_0_, comment0_.author as author63_0_, comment0_.content as content63_0_, comment0_.post as post63_0_, comment0_.postedAt as postedAt63_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:22,861 DEBUG ~ Static select for entity models.Comment [UPGRADE_NOWAIT]: select comment0_.id as id63_0_, comment0_.author as author63_0_, comment0_.content as content63_0_, comment0_.post as post63_0_, comment0_.postedAt as postedAt63_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:22,861 DEBUG ~ Static select for entity models.Comment [FORCE]: select comment0_.id as id63_0_, comment0_.author as author63_0_, comment0_.content as content63_0_, comment0_.post as post63_0_, comment0_.postedAt as postedAt63_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:22,861 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_READ]: select comment0_.id as id63_0_, comment0_.author as author63_0_, comment0_.content as content63_0_, comment0_.post as post63_0_, comment0_.postedAt as postedAt63_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:22,861 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_WRITE]: select comment0_.id as id63_0_, comment0_.author as author63_0_, comment0_.content as content63_0_, comment0_.post as post63_0_, comment0_.postedAt as postedAt63_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:22,862 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_FORCE_INCREMENT]: select comment0_.id as id63_0_, comment0_.author as author63_0_, comment0_.content as content63_0_, comment0_.post as post63_0_, comment0_.postedAt as postedAt63_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:22,862 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC]: select comment0_.id as id63_0_, comment0_.author as author63_0_, comment0_.content as content63_0_, comment0_.post as post63_0_, comment0_.postedAt as postedAt63_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:22,862 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC_FORCE_INCREMENT]: select comment0_.id as id63_0_, comment0_.author as author63_0_, comment0_.content as content63_0_, comment0_.post as post63_0_, comment0_.postedAt as postedAt63_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:22,862 DEBUG ~ Static select for action ACTION_MERGE on entity models.Comment: select comment0_.id as id63_0_, comment0_.author as author63_0_, comment0_.content as content63_0_, comment0_.post as post63_0_, comment0_.postedAt as postedAt63_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:22,862 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Comment: select comment0_.id as id63_0_, comment0_.author as author63_0_, comment0_.content as content63_0_, comment0_.post as post63_0_, comment0_.postedAt as postedAt63_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:22,862 DEBUG ~ Static select for entity models.Post [NONE]: select post0_.id as id65_1_, post0_.author_id as author5_65_1_, post0_.content as content65_1_, post0_.postedAt as postedAt65_1_, post0_.title as title65_1_, user1_.id as id64_0_, user1_.email as email64_0_, user1_.fullname as fullname64_0_, user1_.isAdmin as isAdmin64_0_, user1_.password as password64_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 18:01:22,863 DEBUG ~ Static select for entity models.Post [READ]: select post0_.id as id65_1_, post0_.author_id as author5_65_1_, post0_.content as content65_1_, post0_.postedAt as postedAt65_1_, post0_.title as title65_1_, user1_.id as id64_0_, user1_.email as email64_0_, user1_.fullname as fullname64_0_, user1_.isAdmin as isAdmin64_0_, user1_.password as password64_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 18:01:22,863 DEBUG ~ Static select for entity models.Post [UPGRADE]: select post0_.id as id65_0_, post0_.author_id as author5_65_0_, post0_.content as content65_0_, post0_.postedAt as postedAt65_0_, post0_.title as title65_0_ from Post post0_ where post0_.id=?
12 10 2010 18:01:22,863 DEBUG ~ Static select for entity models.Post [UPGRADE_NOWAIT]: select post0_.id as id65_0_, post0_.author_id as author5_65_0_, post0_.content as content65_0_, post0_.postedAt as postedAt65_0_, post0_.title as title65_0_ from Post post0_ where post0_.id=?
12 10 2010 18:01:22,863 DEBUG ~ Static select for entity models.Post [FORCE]: select post0_.id as id65_0_, post0_.author_id as author5_65_0_, post0_.content as content65_0_, post0_.postedAt as postedAt65_0_, post0_.title as title65_0_ from Post post0_ where post0_.id=?
12 10 2010 18:01:22,864 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_READ]: select post0_.id as id65_0_, post0_.author_id as author5_65_0_, post0_.content as content65_0_, post0_.postedAt as postedAt65_0_, post0_.title as title65_0_ from Post post0_ where post0_.id=?
12 10 2010 18:01:22,864 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_WRITE]: select post0_.id as id65_0_, post0_.author_id as author5_65_0_, post0_.content as content65_0_, post0_.postedAt as postedAt65_0_, post0_.title as title65_0_ from Post post0_ where post0_.id=?
12 10 2010 18:01:22,864 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_FORCE_INCREMENT]: select post0_.id as id65_0_, post0_.author_id as author5_65_0_, post0_.content as content65_0_, post0_.postedAt as postedAt65_0_, post0_.title as title65_0_ from Post post0_ where post0_.id=?
12 10 2010 18:01:22,864 DEBUG ~ Static select for entity models.Post [OPTIMISTIC]: select post0_.id as id65_1_, post0_.author_id as author5_65_1_, post0_.content as content65_1_, post0_.postedAt as postedAt65_1_, post0_.title as title65_1_, user1_.id as id64_0_, user1_.email as email64_0_, user1_.fullname as fullname64_0_, user1_.isAdmin as isAdmin64_0_, user1_.password as password64_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 18:01:22,865 DEBUG ~ Static select for entity models.Post [OPTIMISTIC_FORCE_INCREMENT]: select post0_.id as id65_1_, post0_.author_id as author5_65_1_, post0_.content as content65_1_, post0_.postedAt as postedAt65_1_, post0_.title as title65_1_, user1_.id as id64_0_, user1_.email as email64_0_, user1_.fullname as fullname64_0_, user1_.isAdmin as isAdmin64_0_, user1_.password as password64_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 18:01:22,865 DEBUG ~ Static select for action ACTION_MERGE on entity models.Post: select post0_.id as id65_1_, post0_.author_id as author5_65_1_, post0_.content as content65_1_, post0_.postedAt as postedAt65_1_, post0_.title as title65_1_, comments1_.post as post65_3_, comments1_.id as id3_, comments1_.id as id63_0_, comments1_.author as author63_0_, comments1_.content as content63_0_, comments1_.post as post63_0_, comments1_.postedAt as postedAt63_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post where post0_.id=?
12 10 2010 18:01:22,865 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Post: select post0_.id as id65_1_, post0_.author_id as author5_65_1_, post0_.content as content65_1_, post0_.postedAt as postedAt65_1_, post0_.title as title65_1_, comments1_.post as post65_3_, comments1_.id as id3_, comments1_.id as id63_0_, comments1_.author as author63_0_, comments1_.content as content63_0_, comments1_.post as post63_0_, comments1_.postedAt as postedAt63_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post where post0_.id=?
12 10 2010 18:01:22,866 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id64_0_, user0_.email as email64_0_, user0_.fullname as fullname64_0_, user0_.isAdmin as isAdmin64_0_, user0_.password as password64_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:22,866 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id64_0_, user0_.email as email64_0_, user0_.fullname as fullname64_0_, user0_.isAdmin as isAdmin64_0_, user0_.password as password64_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:22,866 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id64_0_, user0_.email as email64_0_, user0_.fullname as fullname64_0_, user0_.isAdmin as isAdmin64_0_, user0_.password as password64_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:22,866 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id64_0_, user0_.email as email64_0_, user0_.fullname as fullname64_0_, user0_.isAdmin as isAdmin64_0_, user0_.password as password64_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:22,866 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id64_0_, user0_.email as email64_0_, user0_.fullname as fullname64_0_, user0_.isAdmin as isAdmin64_0_, user0_.password as password64_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:22,866 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id64_0_, user0_.email as email64_0_, user0_.fullname as fullname64_0_, user0_.isAdmin as isAdmin64_0_, user0_.password as password64_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:22,867 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id64_0_, user0_.email as email64_0_, user0_.fullname as fullname64_0_, user0_.isAdmin as isAdmin64_0_, user0_.password as password64_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:22,867 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id64_0_, user0_.email as email64_0_, user0_.fullname as fullname64_0_, user0_.isAdmin as isAdmin64_0_, user0_.password as password64_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:22,868 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id64_0_, user0_.email as email64_0_, user0_.fullname as fullname64_0_, user0_.isAdmin as isAdmin64_0_, user0_.password as password64_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:22,868 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id64_0_, user0_.email as email64_0_, user0_.fullname as fullname64_0_, user0_.isAdmin as isAdmin64_0_, user0_.password as password64_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:22,869 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id64_0_, user0_.email as email64_0_, user0_.fullname as fullname64_0_, user0_.isAdmin as isAdmin64_0_, user0_.password as password64_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:22,869 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id64_0_, user0_.email as email64_0_, user0_.fullname as fullname64_0_, user0_.isAdmin as isAdmin64_0_, user0_.password as password64_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:22,869 DEBUG ~ Static select for one-to-many models.Post.comments: select comments0_.post as post65_1_, comments0_.id as id1_, comments0_.id as id63_0_, comments0_.author as author63_0_, comments0_.content as content63_0_, comments0_.post as post63_0_, comments0_.postedAt as postedAt63_0_ from Comment comments0_ where comments0_.post=?
12 10 2010 18:01:22,869 DEBUG ~ registered: 2c9082cd2b9f0d81012b9fac2e350010 (unnamed)
12 10 2010 18:01:22,869 INFO  ~ Not binding factory to JNDI, no JNDI name configured
12 10 2010 18:01:22,869 DEBUG ~ instantiated session factory
12 10 2010 18:01:22,869 DEBUG ~ Execute first pass mapping processing
12 10 2010 18:01:22,869 DEBUG ~ Process hbm files
12 10 2010 18:01:22,869 DEBUG ~ Process annotated classes
12 10 2010 18:01:22,869 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 18:01:22,869 DEBUG ~ processing extends queue
12 10 2010 18:01:22,870 DEBUG ~ processing collection mappings
12 10 2010 18:01:22,870 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 18:01:22,870 DEBUG ~ processing association property references
12 10 2010 18:01:22,870 DEBUG ~ processing foreign key constraints
12 10 2010 18:01:22,870 DEBUG ~ resolving reference to class: models.Post
12 10 2010 18:01:22,870 DEBUG ~ resolving reference to class: models.User
12 10 2010 18:01:22,872 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:22,872 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:22,872 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:22,872 DEBUG ~ Execute first pass mapping processing
12 10 2010 18:01:22,872 DEBUG ~ Process hbm files
12 10 2010 18:01:22,872 DEBUG ~ Process annotated classes
12 10 2010 18:01:22,872 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 18:01:22,872 DEBUG ~ processing extends queue
12 10 2010 18:01:22,872 DEBUG ~ processing collection mappings
12 10 2010 18:01:22,872 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 18:01:22,872 DEBUG ~ processing association property references
12 10 2010 18:01:22,873 DEBUG ~ processing foreign key constraints
12 10 2010 18:01:22,873 DEBUG ~ resolving reference to class: models.Post
12 10 2010 18:01:22,873 DEBUG ~ resolving reference to class: models.User
12 10 2010 18:01:22,874 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:22,874 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:22,875 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:22,876 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:22,876 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:22,876 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:22,876 INFO  ~ Running hbm2ddl schema export
12 10 2010 18:01:22,880 DEBUG ~ import file not found: /import.sql
12 10 2010 18:01:22,880 INFO  ~ exporting generated schema to database
12 10 2010 18:01:22,880 DEBUG ~ alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 18:01:22,880 DEBUG ~ Unsuccessful: alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 18:01:22,880 DEBUG ~ Table not found: COMMENT in statement [alter table Comment]
12 10 2010 18:01:22,880 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 18:01:22,880 DEBUG ~ Unsuccessful: alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 18:01:22,881 DEBUG ~ Table not found: POST in statement [alter table Post]
12 10 2010 18:01:22,881 DEBUG ~ drop table Comment if exists
12 10 2010 18:01:22,881 DEBUG ~ drop table Post if exists
12 10 2010 18:01:22,881 DEBUG ~ drop table User if exists
12 10 2010 18:01:22,881 DEBUG ~ create table Comment (id bigint generated by default as identity (start with 1), author varchar(255), content varchar(255), post varbinary(255), postedAt timestamp, primary key (id))
12 10 2010 18:01:22,881 DEBUG ~ create table Post (id bigint generated by default as identity (start with 1), content longvarchar, postedAt timestamp, title varchar(255), author_id bigint, primary key (id))
12 10 2010 18:01:22,881 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
12 10 2010 18:01:22,881 DEBUG ~ alter table Comment add constraint FK9BDE863F500B6664 foreign key (post) references Post
12 10 2010 18:01:22,882 ERROR ~ Unsuccessful: alter table Comment add constraint FK9BDE863F500B6664 foreign key (post) references Post
12 10 2010 18:01:22,882 ERROR ~ Column types do not match in statement [alter table Comment add constraint FK9BDE863F500B6664 foreign key (post) references Post]
12 10 2010 18:01:22,882 DEBUG ~ alter table Post add constraint FK260CC0A7CD013E foreign key (author_id) references User
12 10 2010 18:01:22,882 INFO  ~ schema export complete
12 10 2010 18:01:22,882 DEBUG ~ Execute first pass mapping processing
12 10 2010 18:01:22,882 DEBUG ~ Process hbm files
12 10 2010 18:01:22,882 DEBUG ~ Process annotated classes
12 10 2010 18:01:22,882 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 18:01:22,882 DEBUG ~ processing extends queue
12 10 2010 18:01:22,882 DEBUG ~ processing collection mappings
12 10 2010 18:01:22,882 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 18:01:22,882 DEBUG ~ processing association property references
12 10 2010 18:01:22,882 DEBUG ~ processing foreign key constraints
12 10 2010 18:01:22,882 DEBUG ~ resolving reference to class: models.Post
12 10 2010 18:01:22,882 DEBUG ~ resolving reference to class: models.User
12 10 2010 18:01:22,884 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:22,884 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:22,884 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:22,884 DEBUG ~ Execute first pass mapping processing
12 10 2010 18:01:22,884 DEBUG ~ Process hbm files
12 10 2010 18:01:22,884 DEBUG ~ Process annotated classes
12 10 2010 18:01:22,885 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 18:01:22,885 DEBUG ~ processing extends queue
12 10 2010 18:01:22,885 DEBUG ~ processing collection mappings
12 10 2010 18:01:22,885 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 18:01:22,885 DEBUG ~ processing association property references
12 10 2010 18:01:22,885 DEBUG ~ processing foreign key constraints
12 10 2010 18:01:22,885 DEBUG ~ resolving reference to class: models.Post
12 10 2010 18:01:22,885 DEBUG ~ resolving reference to class: models.User
12 10 2010 18:01:22,887 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:22,887 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:22,887 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:22,887 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:22,887 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:22,887 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:22,887 DEBUG ~ Checking 0 named HQL queries
12 10 2010 18:01:22,887 DEBUG ~ Checking 0 named SQL queries
12 10 2010 18:01:22,893 DEBUG ~ opened session at timestamp: 12868740828
12 10 2010 18:01:22,894 DEBUG ~ begin
12 10 2010 18:01:22,894 DEBUG ~ opening JDBC connection
12 10 2010 18:01:22,894 DEBUG ~ current autocommit status: true
12 10 2010 18:01:22,894 DEBUG ~ disabling autocommit
12 10 2010 18:01:22,948 DEBUG ~ commit
12 10 2010 18:01:22,948 DEBUG ~ re-enabling autocommit
12 10 2010 18:01:22,948 DEBUG ~ committed JDBC Connection
12 10 2010 18:01:22,948 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 18:01:22,948 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 18:01:30,980 INFO  ~ closing
12 10 2010 18:01:30,980 INFO  ~ Running hbm2ddl schema export
12 10 2010 18:01:30,981 DEBUG ~ import file not found: /import.sql
12 10 2010 18:01:30,981 INFO  ~ exporting generated schema to database
12 10 2010 18:01:30,982 DEBUG ~ alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 18:01:30,982 DEBUG ~ Unsuccessful: alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 18:01:30,982 DEBUG ~ Constraint not found FK9BDE863F500B6664 in table: COMMENT in statement [alter table Comment drop constraint FK9BDE863F500B6664]
12 10 2010 18:01:30,982 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 18:01:30,983 DEBUG ~ drop table Comment if exists
12 10 2010 18:01:30,983 DEBUG ~ drop table Post if exists
12 10 2010 18:01:30,983 DEBUG ~ drop table User if exists
12 10 2010 18:01:30,983 INFO  ~ schema export complete
12 10 2010 18:01:31,019 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 18:01:31,019 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
12 10 2010 18:01:31,019 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
12 10 2010 18:01:31,019 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
12 10 2010 18:01:31,019 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
12 10 2010 18:01:31,019 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
12 10 2010 18:01:31,019 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
12 10 2010 18:01:31,019 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
12 10 2010 18:01:31,019 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
12 10 2010 18:01:31,019 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
12 10 2010 18:01:31,019 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 18:01:31,019 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
12 10 2010 18:01:31,019 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
12 10 2010 18:01:31,019 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
12 10 2010 18:01:31,020 DEBUG ~ Execute first pass mapping processing
12 10 2010 18:01:31,020 DEBUG ~ Process hbm files
12 10 2010 18:01:31,020 DEBUG ~ Process annotated classes
12 10 2010 18:01:31,020 INFO  ~ Binding entity from annotated class: models.Comment
12 10 2010 18:01:31,020 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 18:01:31,020 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 18:01:31,021 DEBUG ~ Import with entity name Comment
12 10 2010 18:01:31,021 INFO  ~ Bind entity models.Comment on table Comment
12 10 2010 18:01:31,031 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:31,031 DEBUG ~ binding property id with lazy=false
12 10 2010 18:01:31,031 DEBUG ~ building SimpleValue for id
12 10 2010 18:01:31,031 DEBUG ~ Building property id
12 10 2010 18:01:31,032 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=author, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:31,032 DEBUG ~ binding property author with lazy=false
12 10 2010 18:01:31,032 DEBUG ~ building SimpleValue for author
12 10 2010 18:01:31,032 DEBUG ~ Building property author
12 10 2010 18:01:31,032 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=content, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:31,032 DEBUG ~ binding property content with lazy=false
12 10 2010 18:01:31,032 DEBUG ~ building SimpleValue for content
12 10 2010 18:01:31,032 DEBUG ~ Building property content
12 10 2010 18:01:31,032 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=post, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:31,032 DEBUG ~ binding property post with lazy=false
12 10 2010 18:01:31,032 DEBUG ~ building SimpleValue for post
12 10 2010 18:01:31,032 DEBUG ~ Building property post
12 10 2010 18:01:31,032 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:31,032 DEBUG ~ binding property postedAt with lazy=false
12 10 2010 18:01:31,032 DEBUG ~ building SimpleValue for postedAt
12 10 2010 18:01:31,032 DEBUG ~ Building property postedAt
12 10 2010 18:01:31,032 INFO  ~ Binding entity from annotated class: models.User
12 10 2010 18:01:31,033 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 18:01:31,033 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 18:01:31,033 DEBUG ~ Import with entity name User
12 10 2010 18:01:31,033 INFO  ~ Bind entity models.User on table User
12 10 2010 18:01:31,034 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:31,034 DEBUG ~ binding property id with lazy=false
12 10 2010 18:01:31,034 DEBUG ~ building SimpleValue for id
12 10 2010 18:01:31,034 DEBUG ~ Building property id
12 10 2010 18:01:31,034 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:31,035 DEBUG ~ binding property email with lazy=false
12 10 2010 18:01:31,035 DEBUG ~ building SimpleValue for email
12 10 2010 18:01:31,035 DEBUG ~ Building property email
12 10 2010 18:01:31,035 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:31,035 DEBUG ~ binding property fullname with lazy=false
12 10 2010 18:01:31,035 DEBUG ~ building SimpleValue for fullname
12 10 2010 18:01:31,035 DEBUG ~ Building property fullname
12 10 2010 18:01:31,035 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:31,035 DEBUG ~ binding property isAdmin with lazy=false
12 10 2010 18:01:31,035 DEBUG ~ building SimpleValue for isAdmin
12 10 2010 18:01:31,035 DEBUG ~ Building property isAdmin
12 10 2010 18:01:31,035 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:31,035 DEBUG ~ binding property password with lazy=false
12 10 2010 18:01:31,035 DEBUG ~ building SimpleValue for password
12 10 2010 18:01:31,035 DEBUG ~ Building property password
12 10 2010 18:01:31,035 INFO  ~ Binding entity from annotated class: models.Post
12 10 2010 18:01:31,035 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 18:01:31,035 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 18:01:31,036 DEBUG ~ Import with entity name Post
12 10 2010 18:01:31,036 INFO  ~ Bind entity models.Post on table Post
12 10 2010 18:01:31,038 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:31,038 DEBUG ~ binding property id with lazy=false
12 10 2010 18:01:31,038 DEBUG ~ building SimpleValue for id
12 10 2010 18:01:31,038 DEBUG ~ Building property id
12 10 2010 18:01:31,038 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
12 10 2010 18:01:31,038 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=author, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:31,039 DEBUG ~ Building property author
12 10 2010 18:01:31,039 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
12 10 2010 18:01:31,039 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:31,039 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=null, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:31,039 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=element, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:31,039 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments_KEY, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:31,039 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='comments_KEY', referencedColumn='null', mappedBy='null'}
12 10 2010 18:01:31,039 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
12 10 2010 18:01:31,039 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
12 10 2010 18:01:31,039 DEBUG ~ Collection role: models.Post.comments
12 10 2010 18:01:31,039 DEBUG ~ Building property comments
12 10 2010 18:01:31,039 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=content, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:31,039 DEBUG ~ binding property content with lazy=false
12 10 2010 18:01:31,039 DEBUG ~ building SimpleValue for content
12 10 2010 18:01:31,040 DEBUG ~ Building property content
12 10 2010 18:01:31,040 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:31,040 DEBUG ~ binding property postedAt with lazy=false
12 10 2010 18:01:31,040 DEBUG ~ building SimpleValue for postedAt
12 10 2010 18:01:31,040 DEBUG ~ Building property postedAt
12 10 2010 18:01:31,040 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=title, insertable=true, updatable=true, unique=false}
12 10 2010 18:01:31,040 DEBUG ~ binding property title with lazy=false
12 10 2010 18:01:31,040 DEBUG ~ building SimpleValue for title
12 10 2010 18:01:31,040 DEBUG ~ Building property title
12 10 2010 18:01:31,040 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 18:01:31,040 DEBUG ~ setting SimpleValue typeName for author
12 10 2010 18:01:31,040 DEBUG ~ setting SimpleValue typeName for content
12 10 2010 18:01:31,040 DEBUG ~ setting SimpleValue typeName for post
12 10 2010 18:01:31,040 DEBUG ~ setting SimpleValue typeName for postedAt
12 10 2010 18:01:31,040 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 18:01:31,041 DEBUG ~ setting SimpleValue typeName for email
12 10 2010 18:01:31,041 DEBUG ~ setting SimpleValue typeName for fullname
12 10 2010 18:01:31,041 DEBUG ~ setting SimpleValue typeName for isAdmin
12 10 2010 18:01:31,041 DEBUG ~ setting SimpleValue typeName for password
12 10 2010 18:01:31,041 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 18:01:31,041 DEBUG ~ setting SimpleValue typeName for content
12 10 2010 18:01:31,041 DEBUG ~ setting SimpleValue typeName for postedAt
12 10 2010 18:01:31,041 DEBUG ~ setting SimpleValue typeName for title
12 10 2010 18:01:31,041 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 18:01:31,041 DEBUG ~ processing extends queue
12 10 2010 18:01:31,041 DEBUG ~ processing collection mappings
12 10 2010 18:01:31,041 DEBUG ~ Second pass for collection: models.Post.comments
12 10 2010 18:01:31,041 DEBUG ~ Binding a OneToMany: models.Post.comments through a foreign key
12 10 2010 18:01:31,041 INFO  ~ Mapping collection: models.Post.comments -> Comment
12 10 2010 18:01:31,041 DEBUG ~ Retrieving property models.Comment.post
12 10 2010 18:01:31,042 DEBUG ~ Mapped collection key: post, one-to-many: models.Comment
12 10 2010 18:01:31,042 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 18:01:31,042 DEBUG ~ processing association property references
12 10 2010 18:01:31,042 DEBUG ~ processing foreign key constraints
12 10 2010 18:01:31,042 DEBUG ~ resolving reference to class: models.Post
12 10 2010 18:01:31,042 DEBUG ~ resolving reference to class: models.User
12 10 2010 18:01:31,043 INFO  ~ Hibernate Validator not found: ignoring
12 10 2010 18:01:31,051 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
12 10 2010 18:01:31,052 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
12 10 2010 18:01:31,054 DEBUG ~ Search not present in classpath, ignoring event listener registration.
12 10 2010 18:01:31,054 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
12 10 2010 18:01:31,054 DEBUG ~ Preparing to build session factory with filters : {}
12 10 2010 18:01:31,054 DEBUG ~ Execute first pass mapping processing
12 10 2010 18:01:31,054 DEBUG ~ Process hbm files
12 10 2010 18:01:31,054 DEBUG ~ Process annotated classes
12 10 2010 18:01:31,054 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 18:01:31,054 DEBUG ~ processing extends queue
12 10 2010 18:01:31,054 DEBUG ~ processing collection mappings
12 10 2010 18:01:31,054 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 18:01:31,054 DEBUG ~ processing association property references
12 10 2010 18:01:31,054 DEBUG ~ processing foreign key constraints
12 10 2010 18:01:31,054 DEBUG ~ resolving reference to class: models.Post
12 10 2010 18:01:31,055 DEBUG ~ resolving reference to class: models.User
12 10 2010 18:01:31,056 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
12 10 2010 18:01:31,056 INFO  ~ Using provided datasource
12 10 2010 18:01:31,057 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
12 10 2010 18:01:31,057 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
12 10 2010 18:01:31,057 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
12 10 2010 18:01:31,057 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
12 10 2010 18:01:31,057 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
12 10 2010 18:01:31,057 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
12 10 2010 18:01:31,057 INFO  ~ Automatic flush during beforeCompletion(): disabled
12 10 2010 18:01:31,057 INFO  ~ Automatic session close at end of transaction: disabled
12 10 2010 18:01:31,057 INFO  ~ JDBC batch size: 15
12 10 2010 18:01:31,058 INFO  ~ JDBC batch updates for versioned data: disabled
12 10 2010 18:01:31,058 INFO  ~ Scrollable result sets: enabled
12 10 2010 18:01:31,058 DEBUG ~ Wrap result sets: disabled
12 10 2010 18:01:31,058 INFO  ~ JDBC3 getGeneratedKeys(): disabled
12 10 2010 18:01:31,058 INFO  ~ Connection release mode: auto
12 10 2010 18:01:31,058 INFO  ~ Default batch fetch size: 1
12 10 2010 18:01:31,058 INFO  ~ Generate SQL with comments: disabled
12 10 2010 18:01:31,058 INFO  ~ Order SQL updates by primary key: disabled
12 10 2010 18:01:31,058 INFO  ~ Order SQL inserts for batching: disabled
12 10 2010 18:01:31,058 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
12 10 2010 18:01:31,058 INFO  ~ Using ASTQueryTranslatorFactory
12 10 2010 18:01:31,058 INFO  ~ Query language substitutions: {}
12 10 2010 18:01:31,058 INFO  ~ JPA-QL strict compliance: enabled
12 10 2010 18:01:31,058 INFO  ~ Second-level cache: enabled
12 10 2010 18:01:31,058 INFO  ~ Query cache: disabled
12 10 2010 18:01:31,058 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
12 10 2010 18:01:31,058 INFO  ~ Optimize cache for minimal puts: disabled
12 10 2010 18:01:31,058 INFO  ~ Structured second-level cache entries: disabled
12 10 2010 18:01:31,058 INFO  ~ Statistics: disabled
12 10 2010 18:01:31,058 INFO  ~ Deleted entity synthetic identifier rollback: disabled
12 10 2010 18:01:31,058 INFO  ~ Default entity-mode: pojo
12 10 2010 18:01:31,058 INFO  ~ Named query checking : enabled
12 10 2010 18:01:31,058 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
12 10 2010 18:01:31,063 INFO  ~ building session factory
12 10 2010 18:01:31,063 DEBUG ~ Session factory constructed with filter configurations : {}
12 10 2010 18:01:31,063 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
12 10 2010 18:01:31,064 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:31,064 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:31,064 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:31,078 DEBUG ~ Static SQL for entity: models.Comment
12 10 2010 18:01:31,079 DEBUG ~  Version select: select id from Comment where id =?
12 10 2010 18:01:31,079 DEBUG ~  Snapshot select: select comment_.id, comment_.author as author69_, comment_.content as content69_, comment_.post as post69_, comment_.postedAt as postedAt69_ from Comment comment_ where comment_.id=?
12 10 2010 18:01:31,079 DEBUG ~  Insert 0: insert into Comment (author, content, post, postedAt, id) values (?, ?, ?, ?, ?)
12 10 2010 18:01:31,079 DEBUG ~  Update 0: update Comment set author=?, content=?, post=?, postedAt=? where id=?
12 10 2010 18:01:31,079 DEBUG ~  Delete 0: delete from Comment where id=?
12 10 2010 18:01:31,079 DEBUG ~  Identity insert: insert into Comment (id, author, content, post, postedAt) values (null, ?, ?, ?, ?)
12 10 2010 18:01:31,083 DEBUG ~ Static SQL for entity: models.Post
12 10 2010 18:01:31,083 DEBUG ~  Version select: select id from Post where id =?
12 10 2010 18:01:31,083 DEBUG ~  Snapshot select: select post_.id, post_.author_id as author5_71_, post_.content as content71_, post_.postedAt as postedAt71_, post_.title as title71_ from Post post_ where post_.id=?
12 10 2010 18:01:31,083 DEBUG ~  Insert 0: insert into Post (author_id, content, postedAt, title, id) values (?, ?, ?, ?, ?)
12 10 2010 18:01:31,084 DEBUG ~  Update 0: update Post set author_id=?, content=?, postedAt=?, title=? where id=?
12 10 2010 18:01:31,084 DEBUG ~  Delete 0: delete from Post where id=?
12 10 2010 18:01:31,084 DEBUG ~  Identity insert: insert into Post (id, author_id, content, postedAt, title) values (null, ?, ?, ?, ?)
12 10 2010 18:01:31,087 DEBUG ~ Static SQL for entity: models.User
12 10 2010 18:01:31,087 DEBUG ~  Version select: select id from User where id =?
12 10 2010 18:01:31,088 DEBUG ~  Snapshot select: select user_.id, user_.email as email70_, user_.fullname as fullname70_, user_.isAdmin as isAdmin70_, user_.password as password70_ from User user_ where user_.id=?
12 10 2010 18:01:31,088 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
12 10 2010 18:01:31,088 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
12 10 2010 18:01:31,088 DEBUG ~  Delete 0: delete from User where id=?
12 10 2010 18:01:31,088 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
12 10 2010 18:01:31,088 DEBUG ~ Static SQL for collection: models.Post.comments
12 10 2010 18:01:31,088 DEBUG ~  Row insert: update Comment set post=? where id=?
12 10 2010 18:01:31,088 DEBUG ~  Row delete: update Comment set post=null where post=? and id=?
12 10 2010 18:01:31,088 DEBUG ~  One-shot delete: update Comment set post=null where post=?
12 10 2010 18:01:31,088 DEBUG ~ Static select for entity models.Comment [NONE]: select comment0_.id as id69_0_, comment0_.author as author69_0_, comment0_.content as content69_0_, comment0_.post as post69_0_, comment0_.postedAt as postedAt69_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:31,088 DEBUG ~ Static select for entity models.Comment [READ]: select comment0_.id as id69_0_, comment0_.author as author69_0_, comment0_.content as content69_0_, comment0_.post as post69_0_, comment0_.postedAt as postedAt69_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:31,088 DEBUG ~ Static select for entity models.Comment [UPGRADE]: select comment0_.id as id69_0_, comment0_.author as author69_0_, comment0_.content as content69_0_, comment0_.post as post69_0_, comment0_.postedAt as postedAt69_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:31,088 DEBUG ~ Static select for entity models.Comment [UPGRADE_NOWAIT]: select comment0_.id as id69_0_, comment0_.author as author69_0_, comment0_.content as content69_0_, comment0_.post as post69_0_, comment0_.postedAt as postedAt69_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:31,089 DEBUG ~ Static select for entity models.Comment [FORCE]: select comment0_.id as id69_0_, comment0_.author as author69_0_, comment0_.content as content69_0_, comment0_.post as post69_0_, comment0_.postedAt as postedAt69_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:31,089 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_READ]: select comment0_.id as id69_0_, comment0_.author as author69_0_, comment0_.content as content69_0_, comment0_.post as post69_0_, comment0_.postedAt as postedAt69_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:31,089 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_WRITE]: select comment0_.id as id69_0_, comment0_.author as author69_0_, comment0_.content as content69_0_, comment0_.post as post69_0_, comment0_.postedAt as postedAt69_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:31,089 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_FORCE_INCREMENT]: select comment0_.id as id69_0_, comment0_.author as author69_0_, comment0_.content as content69_0_, comment0_.post as post69_0_, comment0_.postedAt as postedAt69_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:31,089 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC]: select comment0_.id as id69_0_, comment0_.author as author69_0_, comment0_.content as content69_0_, comment0_.post as post69_0_, comment0_.postedAt as postedAt69_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:31,089 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC_FORCE_INCREMENT]: select comment0_.id as id69_0_, comment0_.author as author69_0_, comment0_.content as content69_0_, comment0_.post as post69_0_, comment0_.postedAt as postedAt69_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:31,089 DEBUG ~ Static select for action ACTION_MERGE on entity models.Comment: select comment0_.id as id69_0_, comment0_.author as author69_0_, comment0_.content as content69_0_, comment0_.post as post69_0_, comment0_.postedAt as postedAt69_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:31,090 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Comment: select comment0_.id as id69_0_, comment0_.author as author69_0_, comment0_.content as content69_0_, comment0_.post as post69_0_, comment0_.postedAt as postedAt69_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:01:31,090 DEBUG ~ Static select for entity models.Post [NONE]: select post0_.id as id71_1_, post0_.author_id as author5_71_1_, post0_.content as content71_1_, post0_.postedAt as postedAt71_1_, post0_.title as title71_1_, user1_.id as id70_0_, user1_.email as email70_0_, user1_.fullname as fullname70_0_, user1_.isAdmin as isAdmin70_0_, user1_.password as password70_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 18:01:31,090 DEBUG ~ Static select for entity models.Post [READ]: select post0_.id as id71_1_, post0_.author_id as author5_71_1_, post0_.content as content71_1_, post0_.postedAt as postedAt71_1_, post0_.title as title71_1_, user1_.id as id70_0_, user1_.email as email70_0_, user1_.fullname as fullname70_0_, user1_.isAdmin as isAdmin70_0_, user1_.password as password70_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 18:01:31,090 DEBUG ~ Static select for entity models.Post [UPGRADE]: select post0_.id as id71_0_, post0_.author_id as author5_71_0_, post0_.content as content71_0_, post0_.postedAt as postedAt71_0_, post0_.title as title71_0_ from Post post0_ where post0_.id=?
12 10 2010 18:01:31,090 DEBUG ~ Static select for entity models.Post [UPGRADE_NOWAIT]: select post0_.id as id71_0_, post0_.author_id as author5_71_0_, post0_.content as content71_0_, post0_.postedAt as postedAt71_0_, post0_.title as title71_0_ from Post post0_ where post0_.id=?
12 10 2010 18:01:31,091 DEBUG ~ Static select for entity models.Post [FORCE]: select post0_.id as id71_0_, post0_.author_id as author5_71_0_, post0_.content as content71_0_, post0_.postedAt as postedAt71_0_, post0_.title as title71_0_ from Post post0_ where post0_.id=?
12 10 2010 18:01:31,091 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_READ]: select post0_.id as id71_0_, post0_.author_id as author5_71_0_, post0_.content as content71_0_, post0_.postedAt as postedAt71_0_, post0_.title as title71_0_ from Post post0_ where post0_.id=?
12 10 2010 18:01:31,091 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_WRITE]: select post0_.id as id71_0_, post0_.author_id as author5_71_0_, post0_.content as content71_0_, post0_.postedAt as postedAt71_0_, post0_.title as title71_0_ from Post post0_ where post0_.id=?
12 10 2010 18:01:31,091 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_FORCE_INCREMENT]: select post0_.id as id71_0_, post0_.author_id as author5_71_0_, post0_.content as content71_0_, post0_.postedAt as postedAt71_0_, post0_.title as title71_0_ from Post post0_ where post0_.id=?
12 10 2010 18:01:31,091 DEBUG ~ Static select for entity models.Post [OPTIMISTIC]: select post0_.id as id71_1_, post0_.author_id as author5_71_1_, post0_.content as content71_1_, post0_.postedAt as postedAt71_1_, post0_.title as title71_1_, user1_.id as id70_0_, user1_.email as email70_0_, user1_.fullname as fullname70_0_, user1_.isAdmin as isAdmin70_0_, user1_.password as password70_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 18:01:31,091 DEBUG ~ Static select for entity models.Post [OPTIMISTIC_FORCE_INCREMENT]: select post0_.id as id71_1_, post0_.author_id as author5_71_1_, post0_.content as content71_1_, post0_.postedAt as postedAt71_1_, post0_.title as title71_1_, user1_.id as id70_0_, user1_.email as email70_0_, user1_.fullname as fullname70_0_, user1_.isAdmin as isAdmin70_0_, user1_.password as password70_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 18:01:31,092 DEBUG ~ Static select for action ACTION_MERGE on entity models.Post: select post0_.id as id71_1_, post0_.author_id as author5_71_1_, post0_.content as content71_1_, post0_.postedAt as postedAt71_1_, post0_.title as title71_1_, comments1_.post as post71_3_, comments1_.id as id3_, comments1_.id as id69_0_, comments1_.author as author69_0_, comments1_.content as content69_0_, comments1_.post as post69_0_, comments1_.postedAt as postedAt69_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post where post0_.id=?
12 10 2010 18:01:31,092 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Post: select post0_.id as id71_1_, post0_.author_id as author5_71_1_, post0_.content as content71_1_, post0_.postedAt as postedAt71_1_, post0_.title as title71_1_, comments1_.post as post71_3_, comments1_.id as id3_, comments1_.id as id69_0_, comments1_.author as author69_0_, comments1_.content as content69_0_, comments1_.post as post69_0_, comments1_.postedAt as postedAt69_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post where post0_.id=?
12 10 2010 18:01:31,092 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id70_0_, user0_.email as email70_0_, user0_.fullname as fullname70_0_, user0_.isAdmin as isAdmin70_0_, user0_.password as password70_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:31,092 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id70_0_, user0_.email as email70_0_, user0_.fullname as fullname70_0_, user0_.isAdmin as isAdmin70_0_, user0_.password as password70_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:31,092 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id70_0_, user0_.email as email70_0_, user0_.fullname as fullname70_0_, user0_.isAdmin as isAdmin70_0_, user0_.password as password70_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:31,093 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id70_0_, user0_.email as email70_0_, user0_.fullname as fullname70_0_, user0_.isAdmin as isAdmin70_0_, user0_.password as password70_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:31,093 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id70_0_, user0_.email as email70_0_, user0_.fullname as fullname70_0_, user0_.isAdmin as isAdmin70_0_, user0_.password as password70_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:31,093 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id70_0_, user0_.email as email70_0_, user0_.fullname as fullname70_0_, user0_.isAdmin as isAdmin70_0_, user0_.password as password70_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:31,093 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id70_0_, user0_.email as email70_0_, user0_.fullname as fullname70_0_, user0_.isAdmin as isAdmin70_0_, user0_.password as password70_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:31,093 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id70_0_, user0_.email as email70_0_, user0_.fullname as fullname70_0_, user0_.isAdmin as isAdmin70_0_, user0_.password as password70_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:31,093 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id70_0_, user0_.email as email70_0_, user0_.fullname as fullname70_0_, user0_.isAdmin as isAdmin70_0_, user0_.password as password70_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:31,093 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id70_0_, user0_.email as email70_0_, user0_.fullname as fullname70_0_, user0_.isAdmin as isAdmin70_0_, user0_.password as password70_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:31,093 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id70_0_, user0_.email as email70_0_, user0_.fullname as fullname70_0_, user0_.isAdmin as isAdmin70_0_, user0_.password as password70_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:31,094 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id70_0_, user0_.email as email70_0_, user0_.fullname as fullname70_0_, user0_.isAdmin as isAdmin70_0_, user0_.password as password70_0_ from User user0_ where user0_.id=?
12 10 2010 18:01:31,094 DEBUG ~ Static select for one-to-many models.Post.comments: select comments0_.post as post71_1_, comments0_.id as id1_, comments0_.id as id69_0_, comments0_.author as author69_0_, comments0_.content as content69_0_, comments0_.post as post69_0_, comments0_.postedAt as postedAt69_0_ from Comment comments0_ where comments0_.post=?
12 10 2010 18:01:31,094 DEBUG ~ registered: 2c9082cd2b9f0d81012b9fac4e560011 (unnamed)
12 10 2010 18:01:31,094 INFO  ~ Not binding factory to JNDI, no JNDI name configured
12 10 2010 18:01:31,094 DEBUG ~ instantiated session factory
12 10 2010 18:01:31,094 DEBUG ~ Execute first pass mapping processing
12 10 2010 18:01:31,094 DEBUG ~ Process hbm files
12 10 2010 18:01:31,094 DEBUG ~ Process annotated classes
12 10 2010 18:01:31,094 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 18:01:31,094 DEBUG ~ processing extends queue
12 10 2010 18:01:31,094 DEBUG ~ processing collection mappings
12 10 2010 18:01:31,094 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 18:01:31,094 DEBUG ~ processing association property references
12 10 2010 18:01:31,094 DEBUG ~ processing foreign key constraints
12 10 2010 18:01:31,094 DEBUG ~ resolving reference to class: models.Post
12 10 2010 18:01:31,094 DEBUG ~ resolving reference to class: models.User
12 10 2010 18:01:31,096 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:31,096 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:31,096 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:31,096 DEBUG ~ Execute first pass mapping processing
12 10 2010 18:01:31,096 DEBUG ~ Process hbm files
12 10 2010 18:01:31,096 DEBUG ~ Process annotated classes
12 10 2010 18:01:31,096 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 18:01:31,097 DEBUG ~ processing extends queue
12 10 2010 18:01:31,097 DEBUG ~ processing collection mappings
12 10 2010 18:01:31,097 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 18:01:31,097 DEBUG ~ processing association property references
12 10 2010 18:01:31,097 DEBUG ~ processing foreign key constraints
12 10 2010 18:01:31,097 DEBUG ~ resolving reference to class: models.Post
12 10 2010 18:01:31,097 DEBUG ~ resolving reference to class: models.User
12 10 2010 18:01:31,098 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:31,099 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:31,099 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:31,099 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:31,099 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:31,099 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:31,099 INFO  ~ Running hbm2ddl schema export
12 10 2010 18:01:31,099 DEBUG ~ import file not found: /import.sql
12 10 2010 18:01:31,099 INFO  ~ exporting generated schema to database
12 10 2010 18:01:31,100 DEBUG ~ alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 18:01:31,100 DEBUG ~ Unsuccessful: alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 18:01:31,100 DEBUG ~ Table not found: COMMENT in statement [alter table Comment]
12 10 2010 18:01:31,100 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 18:01:31,100 DEBUG ~ Unsuccessful: alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 18:01:31,100 DEBUG ~ Table not found: POST in statement [alter table Post]
12 10 2010 18:01:31,100 DEBUG ~ drop table Comment if exists
12 10 2010 18:01:31,100 DEBUG ~ drop table Post if exists
12 10 2010 18:01:31,100 DEBUG ~ drop table User if exists
12 10 2010 18:01:31,100 DEBUG ~ create table Comment (id bigint generated by default as identity (start with 1), author varchar(255), content varchar(255), post varbinary(255), postedAt timestamp, primary key (id))
12 10 2010 18:01:31,101 DEBUG ~ create table Post (id bigint generated by default as identity (start with 1), content longvarchar, postedAt timestamp, title varchar(255), author_id bigint, primary key (id))
12 10 2010 18:01:31,101 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
12 10 2010 18:01:31,101 DEBUG ~ alter table Comment add constraint FK9BDE863F500B6664 foreign key (post) references Post
12 10 2010 18:01:31,101 ERROR ~ Unsuccessful: alter table Comment add constraint FK9BDE863F500B6664 foreign key (post) references Post
12 10 2010 18:01:31,101 ERROR ~ Column types do not match in statement [alter table Comment add constraint FK9BDE863F500B6664 foreign key (post) references Post]
12 10 2010 18:01:31,101 DEBUG ~ alter table Post add constraint FK260CC0A7CD013E foreign key (author_id) references User
12 10 2010 18:01:31,102 INFO  ~ schema export complete
12 10 2010 18:01:31,102 DEBUG ~ Execute first pass mapping processing
12 10 2010 18:01:31,102 DEBUG ~ Process hbm files
12 10 2010 18:01:31,102 DEBUG ~ Process annotated classes
12 10 2010 18:01:31,102 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 18:01:31,102 DEBUG ~ processing extends queue
12 10 2010 18:01:31,102 DEBUG ~ processing collection mappings
12 10 2010 18:01:31,102 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 18:01:31,102 DEBUG ~ processing association property references
12 10 2010 18:01:31,102 DEBUG ~ processing foreign key constraints
12 10 2010 18:01:31,102 DEBUG ~ resolving reference to class: models.Post
12 10 2010 18:01:31,102 DEBUG ~ resolving reference to class: models.User
12 10 2010 18:01:31,103 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:31,104 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:31,104 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:31,104 DEBUG ~ Execute first pass mapping processing
12 10 2010 18:01:31,104 DEBUG ~ Process hbm files
12 10 2010 18:01:31,104 DEBUG ~ Process annotated classes
12 10 2010 18:01:31,104 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 18:01:31,104 DEBUG ~ processing extends queue
12 10 2010 18:01:31,104 DEBUG ~ processing collection mappings
12 10 2010 18:01:31,104 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 18:01:31,104 DEBUG ~ processing association property references
12 10 2010 18:01:31,104 DEBUG ~ processing foreign key constraints
12 10 2010 18:01:31,104 DEBUG ~ resolving reference to class: models.Post
12 10 2010 18:01:31,104 DEBUG ~ resolving reference to class: models.User
12 10 2010 18:01:31,105 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:31,106 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:31,106 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:31,106 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:31,106 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:31,106 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:01:31,106 DEBUG ~ Checking 0 named HQL queries
12 10 2010 18:01:31,106 DEBUG ~ Checking 0 named SQL queries
12 10 2010 18:01:31,112 DEBUG ~ opened session at timestamp: 12868740911
12 10 2010 18:01:31,112 DEBUG ~ begin
12 10 2010 18:01:31,112 DEBUG ~ opening JDBC connection
12 10 2010 18:01:31,112 DEBUG ~ current autocommit status: true
12 10 2010 18:01:31,112 DEBUG ~ disabling autocommit
12 10 2010 18:01:31,173 DEBUG ~ commit
12 10 2010 18:01:31,173 DEBUG ~ re-enabling autocommit
12 10 2010 18:01:31,173 DEBUG ~ committed JDBC Connection
12 10 2010 18:01:31,173 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 18:01:31,173 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 18:01:32,935 DEBUG ~ opened session at timestamp: 12868740929
12 10 2010 18:01:32,935 DEBUG ~ begin
12 10 2010 18:01:32,935 DEBUG ~ opening JDBC connection
12 10 2010 18:01:32,935 DEBUG ~ current autocommit status: true
12 10 2010 18:01:32,935 DEBUG ~ disabling autocommit
12 10 2010 18:01:32,957 DEBUG ~ commit
12 10 2010 18:01:32,957 DEBUG ~ re-enabling autocommit
12 10 2010 18:01:32,957 DEBUG ~ committed JDBC Connection
12 10 2010 18:01:32,957 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 18:01:32,957 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 18:01:32,975 DEBUG ~ opened session at timestamp: 12868740929
12 10 2010 18:01:32,975 DEBUG ~ begin
12 10 2010 18:01:32,975 DEBUG ~ opening JDBC connection
12 10 2010 18:01:32,975 DEBUG ~ current autocommit status: true
12 10 2010 18:01:32,975 DEBUG ~ disabling autocommit
12 10 2010 18:01:33,228 DEBUG ~ executing identity-insert immediately
12 10 2010 18:01:33,229 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,229 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,229 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,229 DEBUG ~ Natively generated identity: 1
12 10 2010 18:01:33,229 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,229 DEBUG ~ processing flush-time cascades
12 10 2010 18:01:33,229 DEBUG ~ dirty checking collections
12 10 2010 18:01:33,229 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:01:33,229 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:01:33,229 DEBUG ~ listing entities:
12 10 2010 18:01:33,229 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:01:33,231 DEBUG ~ parse() - HQL: from models.User where email = ?
12 10 2010 18:01:33,232 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'email'
          \-[PARAM] Node: '?'

12 10 2010 18:01:33,232 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:01:33,232 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:01:33,232 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 18:01:33,233 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 18:01:33,233 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 18:01:33,233 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 18:01:33,233 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 18:01:33,233 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.email {synthetic-alias} email ) ? ) ) )
12 10 2010 18:01:33,233 DEBUG ~ Derived SELECT clause created.
12 10 2010 18:01:33,233 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 18:01:33,233 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 18:01:33,233 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id70_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email70_, user0_.fullname as fullname70_, user0_.isAdmin as isAdmin70_, user0_.password as password70_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'email' {originalText=email}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 18:01:33,233 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:01:33,234 DEBUG ~ HQL: from models.User where email = ?
12 10 2010 18:01:33,234 DEBUG ~ SQL: select user0_.id as id70_, user0_.email as email70_, user0_.fullname as fullname70_, user0_.isAdmin as isAdmin70_, user0_.password as password70_ from User user0_ where user0_.email=?
12 10 2010 18:01:33,234 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:01:33,234 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,234 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:01:33,234 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 18:01:33,234 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:01:33,234 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,234 DEBUG ~ initializing non-lazy collections
12 10 2010 18:01:33,235 DEBUG ~ executing identity-insert immediately
12 10 2010 18:01:33,235 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,236 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,236 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,236 DEBUG ~ Natively generated identity: 2
12 10 2010 18:01:33,236 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,236 DEBUG ~ processing flush-time cascades
12 10 2010 18:01:33,236 DEBUG ~ dirty checking collections
12 10 2010 18:01:33,236 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:01:33,236 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:01:33,236 DEBUG ~ listing entities:
12 10 2010 18:01:33,236 DEBUG ~ models.User{id=2, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:01:33,237 DEBUG ~ parse() - HQL: from models.User where email = ? AND password = ?
12 10 2010 18:01:33,239 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'AND'
          +-[EQ] Node: '='
          |  +-[IDENT] Node: 'email'
          |  \-[PARAM] Node: '?'
          \-[EQ] Node: '='
             +-[IDENT] Node: 'password'
             \-[PARAM] Node: '?'

12 10 2010 18:01:33,239 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:01:33,239 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:01:33,239 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 18:01:33,239 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 18:01:33,239 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 18:01:33,239 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 18:01:33,239 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 18:01:33,239 DEBUG ~ getDataType() : password -> org.hibernate.type.StringType@18b3c498
12 10 2010 18:01:33,239 DEBUG ~ Resolved :  {synthetic-alias}.password -> user0_.password
12 10 2010 18:01:33,239 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 18:01:33,240 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( AND ( = ( user0_.email {synthetic-alias} email ) ? ) ( = ( user0_.password {synthetic-alias} password ) ? ) ) ) )
12 10 2010 18:01:33,240 DEBUG ~ Derived SELECT clause created.
12 10 2010 18:01:33,240 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 18:01:33,240 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 18:01:33,240 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id70_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email70_, user0_.fullname as fullname70_, user0_.isAdmin as isAdmin70_, user0_.password as password70_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'AND'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  |  \-[IDENT] IdentNode: 'email' {originalText=email}
          |  \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'user0_.password' {propertyName=password,dereferenceType=ALL,propertyPath=password,path={synthetic-alias}.password,tableAlias=user0_,className=models.User,classAlias=null}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'password' {originalText=password}
             \-[PARAM] ParameterNode: '?' {ordinal=1, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 18:01:33,240 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:01:33,241 DEBUG ~ HQL: from models.User where email = ? AND password = ?
12 10 2010 18:01:33,241 DEBUG ~ SQL: select user0_.id as id70_, user0_.email as email70_, user0_.fullname as fullname70_, user0_.isAdmin as isAdmin70_, user0_.password as password70_ from User user0_ where user0_.email=? and user0_.password=?
12 10 2010 18:01:33,241 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:01:33,241 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,241 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:01:33,241 DEBUG ~ result row: EntityKey[models.User#2]
12 10 2010 18:01:33,241 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:01:33,241 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,241 DEBUG ~ initializing non-lazy collections
12 10 2010 18:01:33,242 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,242 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:01:33,242 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:01:33,242 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,242 DEBUG ~ initializing non-lazy collections
12 10 2010 18:01:33,242 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,242 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:01:33,242 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:01:33,243 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,243 DEBUG ~ initializing non-lazy collections
12 10 2010 18:01:33,243 DEBUG ~ executing identity-insert immediately
12 10 2010 18:01:33,243 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,244 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,244 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,244 DEBUG ~ Natively generated identity: 3
12 10 2010 18:01:33,244 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,244 DEBUG ~ processing flush-time cascades
12 10 2010 18:01:33,244 DEBUG ~ dirty checking collections
12 10 2010 18:01:33,245 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:01:33,245 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:01:33,245 DEBUG ~ listing entities:
12 10 2010 18:01:33,245 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:01:33,245 DEBUG ~ executing identity-insert immediately
12 10 2010 18:01:33,245 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,245 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,245 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,245 DEBUG ~ Natively generated identity: 1
12 10 2010 18:01:33,245 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,246 DEBUG ~ processing flush-time cascades
12 10 2010 18:01:33,246 DEBUG ~ dirty checking collections
12 10 2010 18:01:33,246 DEBUG ~ Collection found: [models.Post.comments#1], was: [<unreferenced>] (initialized)
12 10 2010 18:01:33,246 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 18:01:33,246 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:01:33,246 DEBUG ~ listing entities:
12 10 2010 18:01:33,246 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:01:33,246 DEBUG ~ models.Post{content=hello world, id=1, author=models.User#3, title=first post, comments=[], postedAt=2010-10-12 18:01:33}
12 10 2010 18:01:33,247 DEBUG ~ parse() - HQL: select count(e) from models.Post e
12 10 2010 18:01:33,249 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'Post'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

12 10 2010 18:01:33,249 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:01:33,249 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:01:33,249 DEBUG ~ FromClause{level=1} :  models.Post (e) -> post0_
12 10 2010 18:01:33,249 DEBUG ~ Resolved :  e -> post0_.id
12 10 2010 18:01:33,249 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 18:01:33,249 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count post0_.id ) ) ( FromClause{level=1} Post post0_ ) )
12 10 2010 18:01:33,249 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 18:01:33,250 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 18:01:33,250 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'post0_.id' {alias=e, className=models.Post, tableAlias=post0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}

12 10 2010 18:01:33,250 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:01:33,250 DEBUG ~ HQL: select count(e) from models.Post e
12 10 2010 18:01:33,250 DEBUG ~ SQL: select count(post0_.id) as col_0_0_ from Post post0_
12 10 2010 18:01:33,250 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:01:33,250 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,250 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:01:33,251 DEBUG ~ result row: 
12 10 2010 18:01:33,251 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:01:33,251 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,251 DEBUG ~ initializing non-lazy collections
12 10 2010 18:01:33,251 DEBUG ~ parse() - HQL: from models.Post where author = ?
12 10 2010 18:01:33,253 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'author'
          \-[PARAM] Node: '?'

12 10 2010 18:01:33,253 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:01:33,253 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:01:33,253 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
12 10 2010 18:01:33,253 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 18:01:33,253 DEBUG ~ getDataType() : author -> org.hibernate.type.ManyToOneType(models.User)
12 10 2010 18:01:33,253 DEBUG ~ dereferenceShortcut() : property author in models.Post does not require a join.
12 10 2010 18:01:33,253 DEBUG ~ terminal propertyPath = [author]
12 10 2010 18:01:33,253 DEBUG ~ Resolved :  {synthetic-alias}.author -> post0_.author_id
12 10 2010 18:01:33,253 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 18:01:33,253 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( = ( post0_.author_id {synthetic-alias} author ) ? ) ) )
12 10 2010 18:01:33,254 DEBUG ~ Derived SELECT clause created.
12 10 2010 18:01:33,254 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 18:01:33,254 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 18:01:33,254 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id71_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_71_, post0_.content as content71_, post0_.postedAt as postedAt71_, post0_.title as title71_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'post0_.author_id' {propertyName=author,dereferenceType=0,propertyPath=author,path={synthetic-alias}.author,tableAlias=post0_,className=models.Post,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'author' {originalText=author}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.ManyToOneType(models.User)}

12 10 2010 18:01:33,254 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:01:33,254 DEBUG ~ HQL: from models.Post where author = ?
12 10 2010 18:01:33,254 DEBUG ~ SQL: select post0_.id as id71_, post0_.author_id as author5_71_, post0_.content as content71_, post0_.postedAt as postedAt71_, post0_.title as title71_ from Post post0_ where post0_.author_id=?
12 10 2010 18:01:33,255 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:01:33,255 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,255 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:01:33,255 DEBUG ~ result row: EntityKey[models.Post#1]
12 10 2010 18:01:33,255 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:01:33,255 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,255 DEBUG ~ initializing non-lazy collections
12 10 2010 18:01:33,256 DEBUG ~ executing identity-insert immediately
12 10 2010 18:01:33,256 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,256 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,256 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,257 DEBUG ~ Natively generated identity: 4
12 10 2010 18:01:33,257 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,257 DEBUG ~ processing flush-time cascades
12 10 2010 18:01:33,257 DEBUG ~ dirty checking collections
12 10 2010 18:01:33,257 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:01:33,257 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:01:33,257 DEBUG ~ listing entities:
12 10 2010 18:01:33,257 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:01:33,257 DEBUG ~ executing identity-insert immediately
12 10 2010 18:01:33,257 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,258 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,258 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,258 DEBUG ~ Natively generated identity: 2
12 10 2010 18:01:33,258 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,258 DEBUG ~ processing flush-time cascades
12 10 2010 18:01:33,258 DEBUG ~ dirty checking collections
12 10 2010 18:01:33,259 DEBUG ~ Collection found: [models.Post.comments#2], was: [<unreferenced>] (initialized)
12 10 2010 18:01:33,259 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 18:01:33,259 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:01:33,259 DEBUG ~ listing entities:
12 10 2010 18:01:33,259 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, comments=[], postedAt=2010-10-12 18:01:33}
12 10 2010 18:01:33,259 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:01:33,264 DEBUG ~ executing identity-insert immediately
12 10 2010 18:01:33,264 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,265 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,265 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,265 DEBUG ~ Natively generated identity: 1
12 10 2010 18:01:33,265 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,265 DEBUG ~ processing flush-time cascades
12 10 2010 18:01:33,265 DEBUG ~ dirty checking collections
12 10 2010 18:01:33,266 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
12 10 2010 18:01:33,267 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 18:01:33,267 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:01:33,267 DEBUG ~ listing entities:
12 10 2010 18:01:33,267 DEBUG ~ models.Comment{content=nice post, id=1, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808082f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808480f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808082f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2cd649f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:01:33}
12 10 2010 18:01:33,268 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, comments=[], postedAt=2010-10-12 18:01:33}
12 10 2010 18:01:33,268 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:01:33,269 DEBUG ~ executing identity-insert immediately
12 10 2010 18:01:33,269 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,269 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,269 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,269 DEBUG ~ Natively generated identity: 2
12 10 2010 18:01:33,269 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,270 DEBUG ~ processing flush-time cascades
12 10 2010 18:01:33,270 DEBUG ~ dirty checking collections
12 10 2010 18:01:33,270 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
12 10 2010 18:01:33,271 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 18:01:33,271 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:01:33,271 DEBUG ~ listing entities:
12 10 2010 18:01:33,271 DEBUG ~ models.Comment{content=nice post, id=1, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808082f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808480f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808082f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2cd649f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:01:33}
12 10 2010 18:01:33,272 DEBUG ~ models.Comment{content=i knew that !, id=2, author=Tom, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808082f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808480f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808082f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2cd649f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:01:33}
12 10 2010 18:01:33,272 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, comments=[], postedAt=2010-10-12 18:01:33}
12 10 2010 18:01:33,272 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:01:33,274 DEBUG ~ parse() - HQL: from models.Comment where post = ?
12 10 2010 18:01:33,276 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Comment'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'post'
          \-[PARAM] Node: '?'

12 10 2010 18:01:33,276 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:01:33,276 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:01:33,277 DEBUG ~ FromClause{level=1} :  models.Comment (no alias) -> comment0_
12 10 2010 18:01:33,277 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 18:01:33,277 DEBUG ~ getDataType() : post -> org.hibernate.type.SerializableType@2f77f473
12 10 2010 18:01:33,277 DEBUG ~ Resolved :  {synthetic-alias}.post -> comment0_.post
12 10 2010 18:01:33,277 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 18:01:33,277 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Comment comment0_ ) ( where ( = ( comment0_.post {synthetic-alias} post ) ? ) ) )
12 10 2010 18:01:33,277 DEBUG ~ Derived SELECT clause created.
12 10 2010 18:01:33,277 DEBUG ~ Using FROM fragment [Comment comment0_]
12 10 2010 18:01:33,278 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 18:01:33,278 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Comment)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'comment0_.id as id69_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Comment,tableAlias=comment0_,origin=null,columns={,className=models.Comment}}}
    |  \-[SQL_TOKEN] SqlFragment: 'comment0_.author as author69_, comment0_.content as content69_, comment0_.post as post69_, comment0_.postedAt as postedAt69_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[comment0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Comment comment0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Comment,tableAlias=comment0_,origin=null,columns={,className=models.Comment}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'comment0_.post' {propertyName=post,dereferenceType=ALL,propertyPath=post,path={synthetic-alias}.post,tableAlias=comment0_,className=models.Comment,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'post' {originalText=post}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.SerializableType@2f77f473}

12 10 2010 18:01:33,278 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:01:33,278 DEBUG ~ HQL: from models.Comment where post = ?
12 10 2010 18:01:33,278 DEBUG ~ SQL: select comment0_.id as id69_, comment0_.author as author69_, comment0_.content as content69_, comment0_.post as post69_, comment0_.postedAt as postedAt69_ from Comment comment0_ where comment0_.post=?
12 10 2010 18:01:33,278 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:01:33,279 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,280 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:01:33,280 DEBUG ~ result row: EntityKey[models.Comment#1]
12 10 2010 18:01:33,280 DEBUG ~ result row: EntityKey[models.Comment#2]
12 10 2010 18:01:33,280 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:01:33,280 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,280 DEBUG ~ initializing non-lazy collections
12 10 2010 18:01:33,282 DEBUG ~ executing identity-insert immediately
12 10 2010 18:01:33,282 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,282 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,282 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,282 DEBUG ~ Natively generated identity: 5
12 10 2010 18:01:33,282 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,283 DEBUG ~ processing flush-time cascades
12 10 2010 18:01:33,283 DEBUG ~ dirty checking collections
12 10 2010 18:01:33,283 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:01:33,283 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:01:33,283 DEBUG ~ listing entities:
12 10 2010 18:01:33,283 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:01:33,284 DEBUG ~ executing identity-insert immediately
12 10 2010 18:01:33,284 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,284 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,284 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,284 DEBUG ~ Natively generated identity: 3
12 10 2010 18:01:33,284 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,285 DEBUG ~ processing flush-time cascades
12 10 2010 18:01:33,285 DEBUG ~ dirty checking collections
12 10 2010 18:01:33,285 DEBUG ~ Collection found: [models.Post.comments#3], was: [<unreferenced>] (initialized)
12 10 2010 18:01:33,285 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 18:01:33,285 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:01:33,285 DEBUG ~ listing entities:
12 10 2010 18:01:33,285 DEBUG ~ models.Post{content=hello world, id=3, author=models.User#5, title=first post, comments=[], postedAt=2010-10-12 18:01:33}
12 10 2010 18:01:33,286 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:01:33,287 DEBUG ~ executing identity-insert immediately
12 10 2010 18:01:33,287 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,288 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,288 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,288 DEBUG ~ Natively generated identity: 3
12 10 2010 18:01:33,288 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,288 DEBUG ~ processing flush-time cascades
12 10 2010 18:01:33,288 DEBUG ~ dirty checking collections
12 10 2010 18:01:33,289 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
12 10 2010 18:01:33,290 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 18:01:33,290 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:01:33,290 DEBUG ~ listing entities:
12 10 2010 18:01:33,290 DEBUG ~ models.Comment{content=nice post, id=3, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808083f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808580f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808083f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2cd663f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:01:33}
12 10 2010 18:01:33,291 DEBUG ~ models.Post{content=hello world, id=3, author=models.User#5, title=first post, comments=[], postedAt=2010-10-12 18:01:33}
12 10 2010 18:01:33,291 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:01:33,294 DEBUG ~ executing identity-insert immediately
12 10 2010 18:01:33,294 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,295 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,295 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,295 DEBUG ~ Natively generated identity: 4
12 10 2010 18:01:33,295 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,295 DEBUG ~ processing flush-time cascades
12 10 2010 18:01:33,296 DEBUG ~ dirty checking collections
12 10 2010 18:01:33,296 DEBUG ~ Collection dirty: [models.Post.comments#3]
12 10 2010 18:01:33,296 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
12 10 2010 18:01:33,297 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 18:01:33,297 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:01:33,297 DEBUG ~ listing entities:
12 10 2010 18:01:33,298 DEBUG ~ models.Comment{content=nice post, id=3, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808083f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808580f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8181f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808083f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808081f7848080808af3f2808eedefe4e5ecf3aec3efedede5eef4e30c6cb88a748959828084cc8086e1f5f4e8eff2f180fe8083cc8087e3efeef4e5eef4f180fe8083cc8084f0eff3f4f4808dccedefe4e5ecf3afd0eff3f4bbcc8088f0eff3f4e5e4c1f4f180fe8084f8f180fe80858080808080808083f48084cae5e6e6f48089eee9e3e5a0f0eff3f4f180fe8087f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2cd666f8f8f4808be8e5ececefa0f7eff2ece4f3f180fe809ef788808081ab1f2cd663f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:01:33}
12 10 2010 18:01:33,298 DEBUG ~ models.Post{content=hello world, id=3, author=models.User#5, title=first post, comments=[models.Comment#3], postedAt=2010-10-12 18:01:33}
12 10 2010 18:01:33,299 DEBUG ~ models.Comment{content=i knew that !, id=4, author=Tom, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808083f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808580f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8181f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808083f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808081f7848080808af3f2808eedefe4e5ecf3aec3efedede5eef4e30c6cb88a748959828084cc8086e1f5f4e8eff2f180fe8083cc8087e3efeef4e5eef4f180fe8083cc8084f0eff3f4f4808dccedefe4e5ecf3afd0eff3f4bbcc8088f0eff3f4e5e4c1f4f180fe8084f8f180fe80858080808080808083f48084cae5e6e6f48089eee9e3e5a0f0eff3f4f180fe8087f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2cd666f8f8f4808be8e5ececefa0f7eff2ece4f3f180fe809ef788808081ab1f2cd663f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:01:33}
12 10 2010 18:01:33,299 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:01:33,300 DEBUG ~ parse() - HQL: select count(e) from models.User e
12 10 2010 18:01:33,305 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'User'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

12 10 2010 18:01:33,305 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:01:33,305 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:01:33,306 DEBUG ~ FromClause{level=1} :  models.User (e) -> user0_
12 10 2010 18:01:33,307 DEBUG ~ Resolved :  e -> user0_.id
12 10 2010 18:01:33,307 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 18:01:33,307 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count user0_.id ) ) ( FromClause{level=1} User user0_ ) )
12 10 2010 18:01:33,308 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 18:01:33,308 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 18:01:33,309 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'user0_.id' {alias=e, className=models.User, tableAlias=user0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}

12 10 2010 18:01:33,309 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:01:33,309 DEBUG ~ HQL: select count(e) from models.User e
12 10 2010 18:01:33,309 DEBUG ~ SQL: select count(user0_.id) as col_0_0_ from User user0_
12 10 2010 18:01:33,309 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:01:33,309 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,310 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:01:33,310 DEBUG ~ result row: 
12 10 2010 18:01:33,310 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:01:33,310 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,310 DEBUG ~ initializing non-lazy collections
12 10 2010 18:01:33,310 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,310 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:01:33,310 DEBUG ~ result row: 
12 10 2010 18:01:33,310 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:01:33,310 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,310 DEBUG ~ initializing non-lazy collections
12 10 2010 18:01:33,311 DEBUG ~ parse() - HQL: select count(e) from models.Comment e
12 10 2010 18:01:33,313 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'Comment'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

12 10 2010 18:01:33,313 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:01:33,313 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:01:33,314 DEBUG ~ FromClause{level=1} :  models.Comment (e) -> comment0_
12 10 2010 18:01:33,314 DEBUG ~ Resolved :  e -> comment0_.id
12 10 2010 18:01:33,314 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 18:01:33,314 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count comment0_.id ) ) ( FromClause{level=1} Comment comment0_ ) )
12 10 2010 18:01:33,314 DEBUG ~ Using FROM fragment [Comment comment0_]
12 10 2010 18:01:33,314 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 18:01:33,314 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Comment)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'comment0_.id' {alias=e, className=models.Comment, tableAlias=comment0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[comment0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Comment comment0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=Comment,tableAlias=comment0_,origin=null,columns={,className=models.Comment}}

12 10 2010 18:01:33,314 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:01:33,314 DEBUG ~ HQL: select count(e) from models.Comment e
12 10 2010 18:01:33,314 DEBUG ~ SQL: select count(comment0_.id) as col_0_0_ from Comment comment0_
12 10 2010 18:01:33,314 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:01:33,315 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,315 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:01:33,315 DEBUG ~ result row: 
12 10 2010 18:01:33,315 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:01:33,315 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,315 DEBUG ~ initializing non-lazy collections
12 10 2010 18:01:33,315 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,316 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:01:33,316 DEBUG ~ result row: EntityKey[models.Post#3]
12 10 2010 18:01:33,316 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:01:33,316 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,316 DEBUG ~ initializing non-lazy collections
12 10 2010 18:01:33,319 DEBUG ~ processing flush-time cascades
12 10 2010 18:01:33,319 DEBUG ~ dirty checking collections
12 10 2010 18:01:33,319 DEBUG ~ Collection dirty: [models.Post.comments#3]
12 10 2010 18:01:33,320 DEBUG ~ Collection dereferenced: [models.Post.comments#3]
12 10 2010 18:01:33,320 DEBUG ~ Flushed: 0 insertions, 0 updates, 3 deletions to 4 objects
12 10 2010 18:01:33,320 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 1 removals to 1 collections
12 10 2010 18:01:33,321 DEBUG ~ listing entities:
12 10 2010 18:01:33,321 DEBUG ~ models.Comment{content=nice post, id=3, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808083f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808580f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8181f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808083f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808082f7848080808af3f2808eedefe4e5ecf3aec3efedede5eef4e30c6cb88a748959828084cc8086e1f5f4e8eff2f180fe8083cc8087e3efeef4e5eef4f180fe8083cc8084f0eff3f4f4808dccedefe4e5ecf3afd0eff3f4bbcc8088f0eff3f4e5e4c1f4f180fe8084f8f180fe80858080808080808083f48084cae5e6e6f48089eee9e3e5a0f0eff3f4f180fe8087f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2cd666f8f3f180fe80998080808080808084f48083d4efedf4808de9a0ebeee5f7a0f4e8e1f4a0a1f180fe8087f3f180fe809ef788808081ab1f2cd66bf8f8f4808be8e5ececefa0f7eff2ece4f3f180fe809ef788808081ab1f2cd663f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:01:33}
12 10 2010 18:01:33,322 DEBUG ~ models.Post{content=hello world, id=3, author=models.User#5, title=first post, comments=[models.Comment#3, models.Comment#4], postedAt=2010-10-12 18:01:33}
12 10 2010 18:01:33,322 DEBUG ~ models.Comment{content=i knew that !, id=4, author=Tom, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808083f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808580f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8181f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808083f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808082f7848080808af3f2808eedefe4e5ecf3aec3efedede5eef4e30c6cb88a748959828084cc8086e1f5f4e8eff2f180fe8083cc8087e3efeef4e5eef4f180fe8083cc8084f0eff3f4f4808dccedefe4e5ecf3afd0eff3f4bbcc8088f0eff3f4e5e4c1f4f180fe8084f8f180fe80858080808080808083f48084cae5e6e6f48089eee9e3e5a0f0eff3f4f180fe8087f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2cd666f8f3f180fe80998080808080808084f48083d4efedf4808de9a0ebeee5f7a0f4e8e1f4a0a1f180fe8087f3f180fe809ef788808081ab1f2cd66bf8f8f4808be8e5ececefa0f7eff2ece4f3f180fe809ef788808081ab1f2cd663f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:01:33}
12 10 2010 18:01:33,323 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:01:33,323 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,323 DEBUG ~ reusing prepared statement
12 10 2010 18:01:33,323 DEBUG ~ Executing batch size: 2
12 10 2010 18:01:33,323 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,323 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,323 DEBUG ~ Executing batch size: 1
12 10 2010 18:01:33,323 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,324 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,325 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:01:33,325 DEBUG ~ result row: 
12 10 2010 18:01:33,325 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:01:33,325 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,325 DEBUG ~ initializing non-lazy collections
12 10 2010 18:01:33,325 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,325 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:01:33,325 DEBUG ~ result row: 
12 10 2010 18:01:33,325 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:01:33,325 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,325 DEBUG ~ initializing non-lazy collections
12 10 2010 18:01:33,325 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,325 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:01:33,326 DEBUG ~ result row: 
12 10 2010 18:01:33,326 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:01:33,326 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,326 DEBUG ~ initializing non-lazy collections
12 10 2010 18:01:33,560 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:01:33,560 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:01:33,560 DEBUG ~ result row: 
12 10 2010 18:01:33,560 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:01:33,560 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:01:33,561 DEBUG ~ initializing non-lazy collections
12 10 2010 18:01:33,583 DEBUG ~ commit
12 10 2010 18:01:33,584 DEBUG ~ re-enabling autocommit
12 10 2010 18:01:33,584 DEBUG ~ committed JDBC Connection
12 10 2010 18:01:33,584 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 18:01:33,584 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 18:01:33,609 DEBUG ~ opened session at timestamp: 12868740936
12 10 2010 18:01:33,609 DEBUG ~ begin
12 10 2010 18:01:33,609 DEBUG ~ opening JDBC connection
12 10 2010 18:01:33,609 DEBUG ~ current autocommit status: true
12 10 2010 18:01:33,609 DEBUG ~ disabling autocommit
12 10 2010 18:01:33,614 DEBUG ~ commit
12 10 2010 18:01:33,614 DEBUG ~ re-enabling autocommit
12 10 2010 18:01:33,614 DEBUG ~ committed JDBC Connection
12 10 2010 18:01:33,614 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 18:01:33,614 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 18:02:28,682 DEBUG ~ opened session at timestamp: 12868741486
12 10 2010 18:02:28,682 DEBUG ~ begin
12 10 2010 18:02:28,682 DEBUG ~ opening JDBC connection
12 10 2010 18:02:28,682 DEBUG ~ current autocommit status: true
12 10 2010 18:02:28,682 DEBUG ~ disabling autocommit
12 10 2010 18:02:28,709 DEBUG ~ commit
12 10 2010 18:02:28,709 DEBUG ~ re-enabling autocommit
12 10 2010 18:02:28,709 DEBUG ~ committed JDBC Connection
12 10 2010 18:02:28,710 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 18:02:28,710 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 18:02:28,719 DEBUG ~ opened session at timestamp: 12868741487
12 10 2010 18:02:28,719 DEBUG ~ begin
12 10 2010 18:02:28,719 DEBUG ~ opening JDBC connection
12 10 2010 18:02:28,719 DEBUG ~ current autocommit status: true
12 10 2010 18:02:28,719 DEBUG ~ disabling autocommit
12 10 2010 18:02:28,972 DEBUG ~ executing identity-insert immediately
12 10 2010 18:02:28,972 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,972 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,972 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,972 DEBUG ~ Natively generated identity: 6
12 10 2010 18:02:28,972 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,973 DEBUG ~ processing flush-time cascades
12 10 2010 18:02:28,973 DEBUG ~ dirty checking collections
12 10 2010 18:02:28,973 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:02:28,973 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:02:28,973 DEBUG ~ listing entities:
12 10 2010 18:02:28,973 DEBUG ~ models.User{id=6, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:02:28,973 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,973 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:28,974 DEBUG ~ result row: EntityKey[models.User#6]
12 10 2010 18:02:28,974 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:28,974 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,974 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:28,974 DEBUG ~ executing identity-insert immediately
12 10 2010 18:02:28,974 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,974 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,974 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,974 DEBUG ~ Natively generated identity: 7
12 10 2010 18:02:28,975 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,975 DEBUG ~ processing flush-time cascades
12 10 2010 18:02:28,975 DEBUG ~ dirty checking collections
12 10 2010 18:02:28,975 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:02:28,975 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:02:28,975 DEBUG ~ listing entities:
12 10 2010 18:02:28,975 DEBUG ~ models.User{id=7, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:02:28,975 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,975 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:28,975 DEBUG ~ result row: EntityKey[models.User#7]
12 10 2010 18:02:28,976 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:28,976 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,976 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:28,976 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,976 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:28,976 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:28,976 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,976 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:28,976 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,976 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:28,976 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:28,976 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,977 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:28,977 DEBUG ~ executing identity-insert immediately
12 10 2010 18:02:28,977 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,977 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,977 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,978 DEBUG ~ Natively generated identity: 8
12 10 2010 18:02:28,978 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,978 DEBUG ~ processing flush-time cascades
12 10 2010 18:02:28,978 DEBUG ~ dirty checking collections
12 10 2010 18:02:28,978 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:02:28,978 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:02:28,978 DEBUG ~ listing entities:
12 10 2010 18:02:28,978 DEBUG ~ models.User{id=8, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:02:28,979 DEBUG ~ executing identity-insert immediately
12 10 2010 18:02:28,979 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,979 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,979 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,979 DEBUG ~ Natively generated identity: 4
12 10 2010 18:02:28,979 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,980 DEBUG ~ processing flush-time cascades
12 10 2010 18:02:28,980 DEBUG ~ dirty checking collections
12 10 2010 18:02:28,980 DEBUG ~ Collection found: [models.Post.comments#4], was: [<unreferenced>] (initialized)
12 10 2010 18:02:28,980 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 18:02:28,980 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:02:28,980 DEBUG ~ listing entities:
12 10 2010 18:02:28,980 DEBUG ~ models.Post{content=hello world, id=4, author=models.User#8, title=first post, comments=[], postedAt=2010-10-12 18:02:28}
12 10 2010 18:02:28,980 DEBUG ~ models.User{id=8, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:02:28,981 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,981 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:28,981 DEBUG ~ result row: 
12 10 2010 18:02:28,981 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:28,981 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,981 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:28,981 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,982 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:28,982 DEBUG ~ result row: EntityKey[models.Post#4]
12 10 2010 18:02:28,982 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:28,982 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,982 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:28,983 DEBUG ~ executing identity-insert immediately
12 10 2010 18:02:28,983 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,983 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,983 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,983 DEBUG ~ Natively generated identity: 9
12 10 2010 18:02:28,983 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,983 DEBUG ~ processing flush-time cascades
12 10 2010 18:02:28,983 DEBUG ~ dirty checking collections
12 10 2010 18:02:28,983 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:02:28,983 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:02:28,983 DEBUG ~ listing entities:
12 10 2010 18:02:28,983 DEBUG ~ models.User{id=9, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:02:28,984 DEBUG ~ executing identity-insert immediately
12 10 2010 18:02:28,984 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,984 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,984 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,984 DEBUG ~ Natively generated identity: 5
12 10 2010 18:02:28,984 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,985 DEBUG ~ processing flush-time cascades
12 10 2010 18:02:28,985 DEBUG ~ dirty checking collections
12 10 2010 18:02:28,985 DEBUG ~ Collection found: [models.Post.comments#5], was: [<unreferenced>] (initialized)
12 10 2010 18:02:28,985 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 18:02:28,985 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:02:28,985 DEBUG ~ listing entities:
12 10 2010 18:02:28,985 DEBUG ~ models.Post{content=hello world, id=5, author=models.User#9, title=first post, comments=[], postedAt=2010-10-12 18:02:28}
12 10 2010 18:02:28,985 DEBUG ~ models.User{id=9, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:02:28,986 DEBUG ~ executing identity-insert immediately
12 10 2010 18:02:28,987 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,987 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,987 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,987 DEBUG ~ Natively generated identity: 5
12 10 2010 18:02:28,987 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,987 DEBUG ~ processing flush-time cascades
12 10 2010 18:02:28,987 DEBUG ~ dirty checking collections
12 10 2010 18:02:28,988 DEBUG ~ Collection found: [models.Post.comments#5], was: [models.Post.comments#5] (initialized)
12 10 2010 18:02:28,988 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 18:02:28,988 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:02:28,988 DEBUG ~ listing entities:
12 10 2010 18:02:28,989 DEBUG ~ models.Post{content=hello world, id=5, author=models.User#9, title=first post, comments=[], postedAt=2010-10-12 18:02:28}
12 10 2010 18:02:28,989 DEBUG ~ models.User{id=9, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:02:28,989 DEBUG ~ models.Comment{content=nice post, id=5, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808085f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808980f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808085f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2db0f8f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:02:28}
12 10 2010 18:02:28,990 DEBUG ~ executing identity-insert immediately
12 10 2010 18:02:28,990 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,991 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,991 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,991 DEBUG ~ Natively generated identity: 6
12 10 2010 18:02:28,991 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,991 DEBUG ~ processing flush-time cascades
12 10 2010 18:02:28,991 DEBUG ~ dirty checking collections
12 10 2010 18:02:28,991 DEBUG ~ Collection found: [models.Post.comments#5], was: [models.Post.comments#5] (initialized)
12 10 2010 18:02:28,992 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 18:02:28,992 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:02:28,992 DEBUG ~ listing entities:
12 10 2010 18:02:28,992 DEBUG ~ models.Post{content=hello world, id=5, author=models.User#9, title=first post, comments=[], postedAt=2010-10-12 18:02:28}
12 10 2010 18:02:28,992 DEBUG ~ models.User{id=9, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:02:28,993 DEBUG ~ models.Comment{content=nice post, id=5, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808085f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808980f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808085f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2db0f8f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:02:28}
12 10 2010 18:02:28,993 DEBUG ~ models.Comment{content=i knew that !, id=6, author=Tom, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808085f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808980f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808085f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2db0f8f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:02:28}
12 10 2010 18:02:28,994 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,995 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:28,996 DEBUG ~ result row: EntityKey[models.Comment#5]
12 10 2010 18:02:28,996 DEBUG ~ result row: EntityKey[models.Comment#6]
12 10 2010 18:02:28,996 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:28,996 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,996 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:28,997 DEBUG ~ executing identity-insert immediately
12 10 2010 18:02:28,997 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,997 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,997 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,997 DEBUG ~ Natively generated identity: 10
12 10 2010 18:02:28,997 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,997 DEBUG ~ processing flush-time cascades
12 10 2010 18:02:28,997 DEBUG ~ dirty checking collections
12 10 2010 18:02:28,997 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:02:28,998 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:02:28,998 DEBUG ~ listing entities:
12 10 2010 18:02:28,998 DEBUG ~ models.User{id=10, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:02:28,998 DEBUG ~ executing identity-insert immediately
12 10 2010 18:02:28,998 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,998 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,998 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:28,998 DEBUG ~ Natively generated identity: 6
12 10 2010 18:02:28,998 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:28,999 DEBUG ~ processing flush-time cascades
12 10 2010 18:02:28,999 DEBUG ~ dirty checking collections
12 10 2010 18:02:28,999 DEBUG ~ Collection found: [models.Post.comments#6], was: [<unreferenced>] (initialized)
12 10 2010 18:02:28,999 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 18:02:28,999 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:02:28,999 DEBUG ~ listing entities:
12 10 2010 18:02:28,999 DEBUG ~ models.Post{content=hello world, id=6, author=models.User#10, title=first post, comments=[], postedAt=2010-10-12 18:02:28}
12 10 2010 18:02:28,999 DEBUG ~ models.User{id=10, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:02:29,000 DEBUG ~ executing identity-insert immediately
12 10 2010 18:02:29,000 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,001 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,001 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,001 DEBUG ~ Natively generated identity: 7
12 10 2010 18:02:29,001 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,001 DEBUG ~ processing flush-time cascades
12 10 2010 18:02:29,001 DEBUG ~ dirty checking collections
12 10 2010 18:02:29,002 DEBUG ~ Collection found: [models.Post.comments#6], was: [models.Post.comments#6] (initialized)
12 10 2010 18:02:29,002 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 18:02:29,002 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:02:29,002 DEBUG ~ listing entities:
12 10 2010 18:02:29,003 DEBUG ~ models.Post{content=hello world, id=6, author=models.User#10, title=first post, comments=[], postedAt=2010-10-12 18:02:28}
12 10 2010 18:02:29,003 DEBUG ~ models.User{id=10, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:02:29,003 DEBUG ~ models.Comment{content=nice post, id=7, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808086f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808a80f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808086f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2db006f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:02:29}
12 10 2010 18:02:29,004 DEBUG ~ executing identity-insert immediately
12 10 2010 18:02:29,004 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,005 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,005 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,005 DEBUG ~ Natively generated identity: 8
12 10 2010 18:02:29,005 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,005 DEBUG ~ processing flush-time cascades
12 10 2010 18:02:29,006 DEBUG ~ dirty checking collections
12 10 2010 18:02:29,006 DEBUG ~ Collection dirty: [models.Post.comments#6]
12 10 2010 18:02:29,006 DEBUG ~ Collection found: [models.Post.comments#6], was: [models.Post.comments#6] (initialized)
12 10 2010 18:02:29,007 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 18:02:29,007 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:02:29,007 DEBUG ~ listing entities:
12 10 2010 18:02:29,007 DEBUG ~ models.Post{content=hello world, id=6, author=models.User#10, title=first post, comments=[models.Comment#7], postedAt=2010-10-12 18:02:28}
12 10 2010 18:02:29,007 DEBUG ~ models.Comment{content=i knew that !, id=8, author=Tom, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808086f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808a80f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8181f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808086f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808081f7848080808af3f2808eedefe4e5ecf3aec3efedede5eef4e30c6cb88a748959828084cc8086e1f5f4e8eff2f180fe8083cc8087e3efeef4e5eef4f180fe8083cc8084f0eff3f4f4808dccedefe4e5ecf3afd0eff3f4bbcc8088f0eff3f4e5e4c1f4f180fe8084f8f180fe80858080808080808087f48084cae5e6e6f48089eee9e3e5a0f0eff3f4f180fe8087f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2db008f8f8f4808be8e5ececefa0f7eff2ece4f3f180fe809ef788808081ab1f2db006f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:02:29}
12 10 2010 18:02:29,008 DEBUG ~ models.User{id=10, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:02:29,008 DEBUG ~ models.Comment{content=nice post, id=7, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808086f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808a80f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8181f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808086f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808081f7848080808af3f2808eedefe4e5ecf3aec3efedede5eef4e30c6cb88a748959828084cc8086e1f5f4e8eff2f180fe8083cc8087e3efeef4e5eef4f180fe8083cc8084f0eff3f4f4808dccedefe4e5ecf3afd0eff3f4bbcc8088f0eff3f4e5e4c1f4f180fe8084f8f180fe80858080808080808087f48084cae5e6e6f48089eee9e3e5a0f0eff3f4f180fe8087f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2db008f8f8f4808be8e5ececefa0f7eff2ece4f3f180fe809ef788808081ab1f2db006f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:02:29}
12 10 2010 18:02:29,009 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,009 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:29,009 DEBUG ~ result row: 
12 10 2010 18:02:29,009 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:29,009 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,009 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:29,009 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,009 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:29,010 DEBUG ~ result row: 
12 10 2010 18:02:29,010 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:29,010 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,010 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:29,010 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,010 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:29,010 DEBUG ~ result row: 
12 10 2010 18:02:29,010 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:29,010 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,010 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:29,010 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,011 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:29,011 DEBUG ~ result row: EntityKey[models.Post#6]
12 10 2010 18:02:29,011 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:29,011 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,011 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:29,014 DEBUG ~ processing flush-time cascades
12 10 2010 18:02:29,014 DEBUG ~ dirty checking collections
12 10 2010 18:02:29,014 DEBUG ~ Collection dirty: [models.Post.comments#6]
12 10 2010 18:02:29,015 DEBUG ~ Collection dereferenced: [models.Post.comments#6]
12 10 2010 18:02:29,015 DEBUG ~ Flushed: 0 insertions, 0 updates, 3 deletions to 4 objects
12 10 2010 18:02:29,015 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 1 removals to 1 collections
12 10 2010 18:02:29,015 DEBUG ~ listing entities:
12 10 2010 18:02:29,016 DEBUG ~ models.Post{content=hello world, id=6, author=models.User#10, title=first post, comments=[models.Comment#7, models.Comment#8], postedAt=2010-10-12 18:02:28}
12 10 2010 18:02:29,016 DEBUG ~ models.Comment{content=i knew that !, id=8, author=Tom, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808086f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808a80f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8181f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808086f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808082f7848080808af3f2808eedefe4e5ecf3aec3efedede5eef4e30c6cb88a748959828084cc8086e1f5f4e8eff2f180fe8083cc8087e3efeef4e5eef4f180fe8083cc8084f0eff3f4f4808dccedefe4e5ecf3afd0eff3f4bbcc8088f0eff3f4e5e4c1f4f180fe8084f8f180fe80858080808080808087f48084cae5e6e6f48089eee9e3e5a0f0eff3f4f180fe8087f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2db008f8f3f180fe80998080808080808088f48083d4efedf4808de9a0ebeee5f7a0f4e8e1f4a0a1f180fe8087f3f180fe809ef788808081ab1f2db00bf8f8f4808be8e5ececefa0f7eff2ece4f3f180fe809ef788808081ab1f2db006f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:02:29}
12 10 2010 18:02:29,016 DEBUG ~ models.User{id=10, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:02:29,017 DEBUG ~ models.Comment{content=nice post, id=7, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f08080808080808086f3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080808a80f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8181f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f08080808080808086f180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808082f7848080808af3f2808eedefe4e5ecf3aec3efedede5eef4e30c6cb88a748959828084cc8086e1f5f4e8eff2f180fe8083cc8087e3efeef4e5eef4f180fe8083cc8084f0eff3f4f4808dccedefe4e5ecf3afd0eff3f4bbcc8088f0eff3f4e5e4c1f4f180fe8084f8f180fe80858080808080808087f48084cae5e6e6f48089eee9e3e5a0f0eff3f4f180fe8087f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2db008f8f3f180fe80998080808080808088f48083d4efedf4808de9a0ebeee5f7a0f4e8e1f4a0a1f180fe8087f3f180fe809ef788808081ab1f2db00bf8f8f4808be8e5ececefa0f7eff2ece4f3f180fe809ef788808081ab1f2db006f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:02:29}
12 10 2010 18:02:29,017 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,018 DEBUG ~ reusing prepared statement
12 10 2010 18:02:29,018 DEBUG ~ Executing batch size: 2
12 10 2010 18:02:29,018 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,018 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,018 DEBUG ~ Executing batch size: 1
12 10 2010 18:02:29,018 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,019 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,019 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:29,019 DEBUG ~ result row: 
12 10 2010 18:02:29,020 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:29,020 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,020 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:29,020 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,020 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:29,020 DEBUG ~ result row: 
12 10 2010 18:02:29,020 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:29,020 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,020 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:29,020 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,020 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:29,021 DEBUG ~ result row: 
12 10 2010 18:02:29,021 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:29,021 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,021 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:29,124 DEBUG ~ executing identity-insert immediately
12 10 2010 18:02:29,124 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,124 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,124 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,125 DEBUG ~ Natively generated identity: 11
12 10 2010 18:02:29,125 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,125 DEBUG ~ processing flush-time cascades
12 10 2010 18:02:29,125 DEBUG ~ dirty checking collections
12 10 2010 18:02:29,125 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:02:29,125 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:02:29,125 DEBUG ~ listing entities:
12 10 2010 18:02:29,125 DEBUG ~ models.User{id=11, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:02:29,127 DEBUG ~ executing identity-insert immediately
12 10 2010 18:02:29,127 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,127 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,127 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,127 DEBUG ~ Natively generated identity: 12
12 10 2010 18:02:29,127 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,127 DEBUG ~ processing flush-time cascades
12 10 2010 18:02:29,127 DEBUG ~ dirty checking collections
12 10 2010 18:02:29,127 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 18:02:29,127 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:02:29,127 DEBUG ~ listing entities:
12 10 2010 18:02:29,127 DEBUG ~ models.User{id=11, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:02:29,128 DEBUG ~ models.User{id=12, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:02:29,131 DEBUG ~ parse() - HQL: from models.User where id = ?
12 10 2010 18:02:29,152 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

12 10 2010 18:02:29,152 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:02:29,152 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:02:29,152 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 18:02:29,152 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 18:02:29,152 DEBUG ~ getDataType() : id -> org.hibernate.type.LongType@6e036c4f
12 10 2010 18:02:29,152 DEBUG ~ Resolved :  {synthetic-alias}.id -> user0_.id
12 10 2010 18:02:29,152 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 18:02:29,152 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.id {synthetic-alias} id ) ? ) ) )
12 10 2010 18:02:29,153 DEBUG ~ Derived SELECT clause created.
12 10 2010 18:02:29,153 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 18:02:29,153 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 18:02:29,153 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id70_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email70_, user0_.fullname as fullname70_, user0_.isAdmin as isAdmin70_, user0_.password as password70_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.id' {propertyName=id,dereferenceType=ALL,propertyPath=id,path={synthetic-alias}.id,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.LongType@6e036c4f}

12 10 2010 18:02:29,153 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:02:29,153 DEBUG ~ HQL: from models.User where id = ?
12 10 2010 18:02:29,153 DEBUG ~ SQL: select user0_.id as id70_, user0_.email as email70_, user0_.fullname as fullname70_, user0_.isAdmin as isAdmin70_, user0_.password as password70_ from User user0_ where user0_.id=?
12 10 2010 18:02:29,153 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:02:29,154 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,154 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:29,154 DEBUG ~ result row: EntityKey[models.User#11]
12 10 2010 18:02:29,154 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:29,154 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,154 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:29,176 DEBUG ~ executing identity-insert immediately
12 10 2010 18:02:29,176 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,176 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,177 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,177 DEBUG ~ Natively generated identity: 7
12 10 2010 18:02:29,177 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,177 DEBUG ~ processing flush-time cascades
12 10 2010 18:02:29,177 DEBUG ~ dirty checking collections
12 10 2010 18:02:29,177 DEBUG ~ Collection found: [models.Post.comments#7], was: [<unreferenced>] (initialized)
12 10 2010 18:02:29,177 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 18:02:29,177 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:02:29,177 DEBUG ~ listing entities:
12 10 2010 18:02:29,177 DEBUG ~ models.User{id=11, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:02:29,178 DEBUG ~ models.User{id=12, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:02:29,178 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=7, author=models.User#11, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:02:29,181 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,181 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:29,181 DEBUG ~ result row: EntityKey[models.User#11]
12 10 2010 18:02:29,181 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:29,181 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,181 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:29,183 DEBUG ~ executing identity-insert immediately
12 10 2010 18:02:29,183 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,183 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,183 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,183 DEBUG ~ Natively generated identity: 8
12 10 2010 18:02:29,184 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,184 DEBUG ~ processing flush-time cascades
12 10 2010 18:02:29,184 DEBUG ~ dirty checking collections
12 10 2010 18:02:29,184 DEBUG ~ Collection found: [models.Post.comments#7], was: [models.Post.comments#7] (initialized)
12 10 2010 18:02:29,184 DEBUG ~ Collection found: [models.Post.comments#8], was: [<unreferenced>] (initialized)
12 10 2010 18:02:29,184 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 18:02:29,184 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 2 collections
12 10 2010 18:02:29,184 DEBUG ~ listing entities:
12 10 2010 18:02:29,185 DEBUG ~ models.User{id=11, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:02:29,185 DEBUG ~ models.User{id=12, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:02:29,185 DEBUG ~ models.Post{content=Well, it's just a test.
, id=8, author=models.User#11, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
12 10 2010 18:02:29,185 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=7, author=models.User#11, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:02:29,188 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,188 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:29,188 DEBUG ~ result row: EntityKey[models.User#12]
12 10 2010 18:02:29,188 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:29,188 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,188 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:29,190 DEBUG ~ executing identity-insert immediately
12 10 2010 18:02:29,191 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,191 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,191 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,191 DEBUG ~ Natively generated identity: 9
12 10 2010 18:02:29,191 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,191 DEBUG ~ processing flush-time cascades
12 10 2010 18:02:29,191 DEBUG ~ dirty checking collections
12 10 2010 18:02:29,192 DEBUG ~ Collection found: [models.Post.comments#7], was: [models.Post.comments#7] (initialized)
12 10 2010 18:02:29,192 DEBUG ~ Collection found: [models.Post.comments#8], was: [models.Post.comments#8] (initialized)
12 10 2010 18:02:29,192 DEBUG ~ Collection found: [models.Post.comments#9], was: [<unreferenced>] (initialized)
12 10 2010 18:02:29,192 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 5 objects
12 10 2010 18:02:29,192 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 3 collections
12 10 2010 18:02:29,192 DEBUG ~ listing entities:
12 10 2010 18:02:29,192 DEBUG ~ models.User{id=11, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:02:29,192 DEBUG ~ models.User{id=12, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:02:29,192 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=9, author=models.User#12, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
12 10 2010 18:02:29,192 DEBUG ~ models.Post{content=Well, it's just a test.
, id=8, author=models.User#11, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
12 10 2010 18:02:29,193 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=7, author=models.User#11, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:02:29,196 DEBUG ~ executing identity-insert immediately
12 10 2010 18:02:29,196 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,196 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,196 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,196 DEBUG ~ Natively generated identity: 9
12 10 2010 18:02:29,196 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,196 DEBUG ~ processing flush-time cascades
12 10 2010 18:02:29,196 DEBUG ~ dirty checking collections
12 10 2010 18:02:29,197 DEBUG ~ Collection found: [models.Post.comments#7], was: [models.Post.comments#7] (initialized)
12 10 2010 18:02:29,197 DEBUG ~ Collection found: [models.Post.comments#8], was: [models.Post.comments#8] (initialized)
12 10 2010 18:02:29,197 DEBUG ~ Collection found: [models.Post.comments#9], was: [models.Post.comments#9] (initialized)
12 10 2010 18:02:29,197 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
12 10 2010 18:02:29,197 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
12 10 2010 18:02:29,197 DEBUG ~ listing entities:
12 10 2010 18:02:29,197 DEBUG ~ models.Comment{content=You are right !
, id=9, author=Guest, post=null, postedAt=2009-06-14 09:00:00}
12 10 2010 18:02:29,197 DEBUG ~ models.User{id=11, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:02:29,197 DEBUG ~ models.User{id=12, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:02:29,197 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=9, author=models.User#12, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
12 10 2010 18:02:29,198 DEBUG ~ models.Post{content=Well, it's just a test.
, id=8, author=models.User#11, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
12 10 2010 18:02:29,198 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=7, author=models.User#11, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:02:29,200 DEBUG ~ executing identity-insert immediately
12 10 2010 18:02:29,200 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,200 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,200 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,200 DEBUG ~ Natively generated identity: 10
12 10 2010 18:02:29,200 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,201 DEBUG ~ processing flush-time cascades
12 10 2010 18:02:29,201 DEBUG ~ dirty checking collections
12 10 2010 18:02:29,201 DEBUG ~ Collection found: [models.Post.comments#7], was: [models.Post.comments#7] (initialized)
12 10 2010 18:02:29,201 DEBUG ~ Collection found: [models.Post.comments#8], was: [models.Post.comments#8] (initialized)
12 10 2010 18:02:29,201 DEBUG ~ Collection found: [models.Post.comments#9], was: [models.Post.comments#9] (initialized)
12 10 2010 18:02:29,201 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 7 objects
12 10 2010 18:02:29,201 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
12 10 2010 18:02:29,201 DEBUG ~ listing entities:
12 10 2010 18:02:29,202 DEBUG ~ models.User{id=11, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:02:29,202 DEBUG ~ models.Comment{content=You are right !
, id=9, author=Guest, post=null, postedAt=2009-06-14 09:00:00}
12 10 2010 18:02:29,202 DEBUG ~ models.User{id=12, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:02:29,202 DEBUG ~ models.Comment{content=I knew that ...
, id=10, author=Mike, post=null, postedAt=2009-06-15 09:00:00}
12 10 2010 18:02:29,202 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=9, author=models.User#12, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
12 10 2010 18:02:29,202 DEBUG ~ models.Post{content=Well, it's just a test.
, id=8, author=models.User#11, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
12 10 2010 18:02:29,203 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=7, author=models.User#11, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:02:29,205 DEBUG ~ executing identity-insert immediately
12 10 2010 18:02:29,205 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,205 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,205 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,205 DEBUG ~ Natively generated identity: 11
12 10 2010 18:02:29,205 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,205 DEBUG ~ processing flush-time cascades
12 10 2010 18:02:29,206 DEBUG ~ dirty checking collections
12 10 2010 18:02:29,206 DEBUG ~ Collection found: [models.Post.comments#7], was: [models.Post.comments#7] (initialized)
12 10 2010 18:02:29,206 DEBUG ~ Collection found: [models.Post.comments#8], was: [models.Post.comments#8] (initialized)
12 10 2010 18:02:29,206 DEBUG ~ Collection found: [models.Post.comments#9], was: [models.Post.comments#9] (initialized)
12 10 2010 18:02:29,206 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
12 10 2010 18:02:29,206 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
12 10 2010 18:02:29,206 DEBUG ~ listing entities:
12 10 2010 18:02:29,206 DEBUG ~ models.User{id=11, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:02:29,206 DEBUG ~ models.Comment{content=You are right !
, id=9, author=Guest, post=null, postedAt=2009-06-14 09:00:00}
12 10 2010 18:02:29,206 DEBUG ~ models.User{id=12, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:02:29,207 DEBUG ~ models.Comment{content=This post is useless ?
, id=11, author=Tom, post=null, postedAt=2009-04-05 09:00:00}
12 10 2010 18:02:29,207 DEBUG ~ models.Comment{content=I knew that ...
, id=10, author=Mike, post=null, postedAt=2009-06-15 09:00:00}
12 10 2010 18:02:29,207 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=9, author=models.User#12, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
12 10 2010 18:02:29,207 DEBUG ~ models.Post{content=Well, it's just a test.
, id=8, author=models.User#11, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
12 10 2010 18:02:29,208 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=7, author=models.User#11, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:02:29,208 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,208 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:29,208 DEBUG ~ result row: 
12 10 2010 18:02:29,208 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:29,209 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,209 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:29,209 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,209 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:29,209 DEBUG ~ result row: 
12 10 2010 18:02:29,209 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:29,209 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,209 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:29,209 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,209 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:29,209 DEBUG ~ result row: 
12 10 2010 18:02:29,210 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:29,210 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,210 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:29,210 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,210 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:29,210 DEBUG ~ result row: EntityKey[models.User#11]
12 10 2010 18:02:29,210 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:29,210 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,210 DEBUG ~ resolving associations for [models.User#11]
12 10 2010 18:02:29,210 DEBUG ~ done materializing entity [models.User#11]
12 10 2010 18:02:29,210 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:29,211 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,211 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:29,211 DEBUG ~ result row: EntityKey[models.User#12]
12 10 2010 18:02:29,211 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:29,211 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,211 DEBUG ~ resolving associations for [models.User#12]
12 10 2010 18:02:29,211 DEBUG ~ done materializing entity [models.User#12]
12 10 2010 18:02:29,211 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:29,211 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,212 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:29,212 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:29,212 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,212 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:29,212 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,212 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:29,212 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:29,212 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,212 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:29,213 DEBUG ~ parse() - HQL: from models.Post where author.email = ?1
12 10 2010 18:02:29,253 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'author'
          |  \-[IDENT] Node: 'email'
          \-[PARAM] Node: '?'
             \-[NUM_INT] Node: '1'

12 10 2010 18:02:29,253 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:02:29,253 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:02:29,254 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
12 10 2010 18:02:29,254 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 18:02:29,254 DEBUG ~ getDataType() : author -> org.hibernate.type.ManyToOneType(models.User)
12 10 2010 18:02:29,254 DEBUG ~ dereferenceEntityJoin() : generating join for author in models.Post {no alias} parent = [  ( . ( {non-qualified-property-ref} {synthetic-alias} author ) email ) ]
12 10 2010 18:02:29,289 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user1_
12 10 2010 18:02:29,290 DEBUG ~ addJoinByPathMap() : {synthetic-alias}.author -> ImpliedFromElement{implied,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user1_,origin=Post post0_,columns={post0_.author_id ,className=models.User}}
12 10 2010 18:02:29,290 DEBUG ~ Resolved :  {synthetic-alias}.author -> post0_.author_id
12 10 2010 18:02:29,290 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 18:02:29,290 DEBUG ~ Resolved :  {synthetic-alias}.author.email -> user1_.email
12 10 2010 18:02:29,310 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 18:02:29,310 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ User user1_ ) ( where ( = ( user1_.email ( post0_.author_id {synthetic-alias} author ) email ) ? ) ) )
12 10 2010 18:02:29,310 DEBUG ~ Derived SELECT clause created.
12 10 2010 18:02:29,310 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 18:02:29,310 DEBUG ~ Using unprocessed WHERE-fragment [post0_.author_id=user1_.id]
12 10 2010 18:02:29,310 DEBUG ~ Using processed WHERE-fragment [post0_.author_id=user1_.id]
12 10 2010 18:02:29,310 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 18:02:29,311 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User,Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id71_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_71_, post0_.content as content71_, post0_.postedAt as postedAt71_, post0_.title as title71_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=2, fromElements=2, fromElementByClassAlias=[], fromElementByTableAlias=[user1_, post0_], fromElementsByPath=[{synthetic-alias}.author], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  +-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    |  \-[FROM_FRAGMENT] ImpliedFromElement: 'User user1_' ImpliedFromElement{implied,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user1_,origin=Post post0_,columns={post0_.author_id ,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       +-[THETA_JOINS] SqlNode: '{theta joins}'
       |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id=user1_.id'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user1_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.author.email,tableAlias=user1_,className=models.User,classAlias=null}
          |  +-[DOT] DotNode: 'post0_.author_id' {propertyName=author,dereferenceType=EOF,propertyPath=author,path={synthetic-alias}.author,tableAlias=user1_,className=models.User,classAlias=null}
          |  |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  |  \-[IDENT] IdentNode: 'author' {originalText=author}
          |  \-[IDENT] IdentNode: 'email' {originalText=email}
          \-[NAMED_PARAM] ParameterNode: '?' {name=1, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 18:02:29,311 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:02:29,311 DEBUG ~ HQL: from models.Post where author.email = ?1
12 10 2010 18:02:29,311 DEBUG ~ SQL: select post0_.id as id71_, post0_.author_id as author5_71_, post0_.content as content71_, post0_.postedAt as postedAt71_, post0_.title as title71_ from Post post0_ cross join User user1_ where post0_.author_id=user1_.id and user1_.email=?
12 10 2010 18:02:29,311 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:02:29,333 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:02:29,334 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:02:29,334 DEBUG ~ result row: EntityKey[models.Post#7]
12 10 2010 18:02:29,334 DEBUG ~ result row: EntityKey[models.Post#8]
12 10 2010 18:02:29,334 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:02:29,334 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:02:29,334 DEBUG ~ resolving associations for [models.Post#7]
12 10 2010 18:02:29,340 DEBUG ~ done materializing entity [models.Post#7]
12 10 2010 18:02:29,341 DEBUG ~ resolving associations for [models.Post#8]
12 10 2010 18:02:29,341 DEBUG ~ done materializing entity [models.Post#8]
12 10 2010 18:02:29,341 DEBUG ~ initializing non-lazy collections
12 10 2010 18:02:29,341 DEBUG ~ parse() - HQL: from models.Comment where post.author.email = ?1
12 10 2010 18:02:29,343 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Comment'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'post'
          |  |  \-[IDENT] Node: 'author'
          |  \-[IDENT] Node: 'email'
          \-[PARAM] Node: '?'
             \-[NUM_INT] Node: '1'

12 10 2010 18:02:29,343 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:02:29,343 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:02:29,344 DEBUG ~ FromClause{level=1} :  models.Comment (no alias) -> comment0_
12 10 2010 18:02:29,344 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 18:02:29,344 DEBUG ~ getDataType() : post -> org.hibernate.type.SerializableType@2f77f473
12 10 2010 18:02:29,344 DEBUG ~ Resolved :  {synthetic-alias}.post -> comment0_.post
12 10 2010 18:02:29,344 DEBUG ~ getDataType() : author -> org.hibernate.type.StringType@18b3c498
12 10 2010 18:02:29,344 DEBUG ~ Resolved :  {synthetic-alias}.post.author -> comment0_.author
12 10 2010 18:02:29,352 DEBUG ~ commit
12 10 2010 18:02:29,352 DEBUG ~ processing flush-time cascades
12 10 2010 18:02:29,352 DEBUG ~ dirty checking collections
12 10 2010 18:02:29,352 DEBUG ~ Collection found: [models.Post.comments#7], was: [models.Post.comments#7] (uninitialized)
12 10 2010 18:02:29,352 DEBUG ~ Collection found: [models.Post.comments#8], was: [models.Post.comments#8] (uninitialized)
12 10 2010 18:02:29,352 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 18:02:29,352 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
12 10 2010 18:02:29,352 DEBUG ~ listing entities:
12 10 2010 18:02:29,352 DEBUG ~ models.User{id=11, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:02:29,353 DEBUG ~ models.User{id=12, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:02:29,353 DEBUG ~ models.Post{content=Well, it's just a test.
, id=8, author=models.User#11, title=Just a test of YABE, comments=<uninitialized>, postedAt=2009-03-25 09:00:00}
12 10 2010 18:02:29,353 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=7, author=models.User#11, title=About the model layer, comments=<uninitialized>, postedAt=2009-06-14 09:00:00}
12 10 2010 18:02:29,353 DEBUG ~ re-enabling autocommit
12 10 2010 18:02:29,353 DEBUG ~ committed JDBC Connection
12 10 2010 18:02:29,353 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 18:02:29,353 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 18:02:29,363 DEBUG ~ opened session at timestamp: 12868741493
12 10 2010 18:02:29,364 DEBUG ~ begin
12 10 2010 18:02:29,364 DEBUG ~ opening JDBC connection
12 10 2010 18:02:29,364 DEBUG ~ current autocommit status: true
12 10 2010 18:02:29,364 DEBUG ~ disabling autocommit
12 10 2010 18:02:29,367 DEBUG ~ commit
12 10 2010 18:02:29,368 DEBUG ~ re-enabling autocommit
12 10 2010 18:02:29,368 DEBUG ~ committed JDBC Connection
12 10 2010 18:02:29,368 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 18:02:29,368 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 18:04:18,390 DEBUG ~ opened session at timestamp: 12868742583
12 10 2010 18:04:18,390 DEBUG ~ begin
12 10 2010 18:04:18,390 DEBUG ~ opening JDBC connection
12 10 2010 18:04:18,390 DEBUG ~ current autocommit status: true
12 10 2010 18:04:18,390 DEBUG ~ disabling autocommit
12 10 2010 18:04:18,427 DEBUG ~ commit
12 10 2010 18:04:18,427 DEBUG ~ re-enabling autocommit
12 10 2010 18:04:18,427 DEBUG ~ committed JDBC Connection
12 10 2010 18:04:18,427 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 18:04:18,427 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 18:04:18,446 DEBUG ~ opened session at timestamp: 12868742584
12 10 2010 18:04:18,446 DEBUG ~ begin
12 10 2010 18:04:18,446 DEBUG ~ opening JDBC connection
12 10 2010 18:04:18,446 DEBUG ~ current autocommit status: true
12 10 2010 18:04:18,446 DEBUG ~ disabling autocommit
12 10 2010 18:04:18,699 DEBUG ~ executing identity-insert immediately
12 10 2010 18:04:18,699 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,700 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,700 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,700 DEBUG ~ Natively generated identity: 13
12 10 2010 18:04:18,700 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,700 DEBUG ~ processing flush-time cascades
12 10 2010 18:04:18,700 DEBUG ~ dirty checking collections
12 10 2010 18:04:18,700 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:04:18,700 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:04:18,700 DEBUG ~ listing entities:
12 10 2010 18:04:18,700 DEBUG ~ models.User{id=13, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:04:18,701 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,701 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,701 DEBUG ~ result row: EntityKey[models.User#13]
12 10 2010 18:04:18,701 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,701 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,701 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,702 DEBUG ~ executing identity-insert immediately
12 10 2010 18:04:18,702 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,702 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,702 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,702 DEBUG ~ Natively generated identity: 14
12 10 2010 18:04:18,702 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,702 DEBUG ~ processing flush-time cascades
12 10 2010 18:04:18,702 DEBUG ~ dirty checking collections
12 10 2010 18:04:18,702 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:04:18,702 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:04:18,703 DEBUG ~ listing entities:
12 10 2010 18:04:18,703 DEBUG ~ models.User{id=14, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:04:18,703 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,703 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,703 DEBUG ~ result row: EntityKey[models.User#14]
12 10 2010 18:04:18,703 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,703 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,703 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,703 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,704 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,704 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,704 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,704 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,704 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,704 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,704 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,704 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,704 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,705 DEBUG ~ executing identity-insert immediately
12 10 2010 18:04:18,705 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,705 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,705 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,705 DEBUG ~ Natively generated identity: 15
12 10 2010 18:04:18,705 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,705 DEBUG ~ processing flush-time cascades
12 10 2010 18:04:18,705 DEBUG ~ dirty checking collections
12 10 2010 18:04:18,706 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:04:18,706 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:04:18,706 DEBUG ~ listing entities:
12 10 2010 18:04:18,706 DEBUG ~ models.User{id=15, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:04:18,706 DEBUG ~ executing identity-insert immediately
12 10 2010 18:04:18,706 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,706 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,706 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,706 DEBUG ~ Natively generated identity: 10
12 10 2010 18:04:18,706 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,707 DEBUG ~ processing flush-time cascades
12 10 2010 18:04:18,707 DEBUG ~ dirty checking collections
12 10 2010 18:04:18,707 DEBUG ~ Collection found: [models.Post.comments#10], was: [<unreferenced>] (initialized)
12 10 2010 18:04:18,707 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 18:04:18,707 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:04:18,707 DEBUG ~ listing entities:
12 10 2010 18:04:18,707 DEBUG ~ models.User{id=15, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:04:18,707 DEBUG ~ models.Post{content=hello world, id=10, author=models.User#15, title=first post, comments=[], postedAt=2010-10-12 18:04:18}
12 10 2010 18:04:18,708 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,708 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,708 DEBUG ~ result row: 
12 10 2010 18:04:18,708 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,708 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,708 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,708 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,709 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,709 DEBUG ~ result row: EntityKey[models.Post#10]
12 10 2010 18:04:18,709 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,709 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,709 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,710 DEBUG ~ executing identity-insert immediately
12 10 2010 18:04:18,711 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,711 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,711 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,711 DEBUG ~ Natively generated identity: 16
12 10 2010 18:04:18,711 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,711 DEBUG ~ processing flush-time cascades
12 10 2010 18:04:18,711 DEBUG ~ dirty checking collections
12 10 2010 18:04:18,711 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:04:18,711 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:04:18,711 DEBUG ~ listing entities:
12 10 2010 18:04:18,711 DEBUG ~ models.User{id=16, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:04:18,712 DEBUG ~ executing identity-insert immediately
12 10 2010 18:04:18,712 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,712 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,712 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,712 DEBUG ~ Natively generated identity: 11
12 10 2010 18:04:18,712 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,712 DEBUG ~ processing flush-time cascades
12 10 2010 18:04:18,713 DEBUG ~ dirty checking collections
12 10 2010 18:04:18,713 DEBUG ~ Collection found: [models.Post.comments#11], was: [<unreferenced>] (initialized)
12 10 2010 18:04:18,713 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 18:04:18,713 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:04:18,713 DEBUG ~ listing entities:
12 10 2010 18:04:18,713 DEBUG ~ models.Post{content=hello world, id=11, author=models.User#16, title=first post, comments=[], postedAt=2010-10-12 18:04:18}
12 10 2010 18:04:18,713 DEBUG ~ models.User{id=16, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:04:18,714 DEBUG ~ executing identity-insert immediately
12 10 2010 18:04:18,714 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,715 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,715 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,715 DEBUG ~ Natively generated identity: 12
12 10 2010 18:04:18,715 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,715 DEBUG ~ processing flush-time cascades
12 10 2010 18:04:18,715 DEBUG ~ dirty checking collections
12 10 2010 18:04:18,715 DEBUG ~ Collection found: [models.Post.comments#11], was: [models.Post.comments#11] (initialized)
12 10 2010 18:04:18,716 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 18:04:18,716 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:04:18,716 DEBUG ~ listing entities:
12 10 2010 18:04:18,716 DEBUG ~ models.Post{content=hello world, id=11, author=models.User#16, title=first post, comments=[], postedAt=2010-10-12 18:04:18}
12 10 2010 18:04:18,717 DEBUG ~ models.Comment{content=nice post, id=12, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f0808080808080808bf3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080809080f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f0808080808080808bf180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2e5d98f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:04:18}
12 10 2010 18:04:18,717 DEBUG ~ models.User{id=16, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:04:18,718 DEBUG ~ executing identity-insert immediately
12 10 2010 18:04:18,718 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,720 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,720 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,720 DEBUG ~ Natively generated identity: 13
12 10 2010 18:04:18,720 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,720 DEBUG ~ processing flush-time cascades
12 10 2010 18:04:18,721 DEBUG ~ dirty checking collections
12 10 2010 18:04:18,721 DEBUG ~ Collection found: [models.Post.comments#11], was: [models.Post.comments#11] (initialized)
12 10 2010 18:04:18,722 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 18:04:18,722 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:04:18,722 DEBUG ~ listing entities:
12 10 2010 18:04:18,722 DEBUG ~ models.Post{content=hello world, id=11, author=models.User#16, title=first post, comments=[], postedAt=2010-10-12 18:04:18}
12 10 2010 18:04:18,722 DEBUG ~ models.Comment{content=i knew that !, id=13, author=Tom, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f0808080808080808bf3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080809080f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f0808080808080808bf180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2e5d98f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:04:18}
12 10 2010 18:04:18,723 DEBUG ~ models.Comment{content=nice post, id=12, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f0808080808080808bf3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080809080f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f0808080808080808bf180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2e5d98f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:04:18}
12 10 2010 18:04:18,723 DEBUG ~ models.User{id=16, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:04:18,724 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,724 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,724 DEBUG ~ result row: EntityKey[models.Comment#12]
12 10 2010 18:04:18,724 DEBUG ~ result row: EntityKey[models.Comment#13]
12 10 2010 18:04:18,724 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,725 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,725 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,725 DEBUG ~ executing identity-insert immediately
12 10 2010 18:04:18,725 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,726 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,726 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,726 DEBUG ~ Natively generated identity: 17
12 10 2010 18:04:18,726 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,726 DEBUG ~ processing flush-time cascades
12 10 2010 18:04:18,727 DEBUG ~ dirty checking collections
12 10 2010 18:04:18,727 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:04:18,727 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:04:18,727 DEBUG ~ listing entities:
12 10 2010 18:04:18,727 DEBUG ~ models.User{id=17, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:04:18,727 DEBUG ~ executing identity-insert immediately
12 10 2010 18:04:18,727 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,728 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,728 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,728 DEBUG ~ Natively generated identity: 12
12 10 2010 18:04:18,728 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,728 DEBUG ~ processing flush-time cascades
12 10 2010 18:04:18,728 DEBUG ~ dirty checking collections
12 10 2010 18:04:18,729 DEBUG ~ Collection found: [models.Post.comments#12], was: [<unreferenced>] (initialized)
12 10 2010 18:04:18,729 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 18:04:18,729 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:04:18,729 DEBUG ~ listing entities:
12 10 2010 18:04:18,729 DEBUG ~ models.Post{content=hello world, id=12, author=models.User#17, title=first post, comments=[], postedAt=2010-10-12 18:04:18}
12 10 2010 18:04:18,730 DEBUG ~ models.User{id=17, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:04:18,731 DEBUG ~ executing identity-insert immediately
12 10 2010 18:04:18,731 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,731 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,731 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,731 DEBUG ~ Natively generated identity: 14
12 10 2010 18:04:18,731 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,732 DEBUG ~ processing flush-time cascades
12 10 2010 18:04:18,732 DEBUG ~ dirty checking collections
12 10 2010 18:04:18,732 DEBUG ~ Collection found: [models.Post.comments#12], was: [models.Post.comments#12] (initialized)
12 10 2010 18:04:18,733 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 18:04:18,733 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:04:18,733 DEBUG ~ listing entities:
12 10 2010 18:04:18,733 DEBUG ~ models.Post{content=hello world, id=12, author=models.User#17, title=first post, comments=[], postedAt=2010-10-12 18:04:18}
12 10 2010 18:04:18,733 DEBUG ~ models.User{id=17, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:04:18,734 DEBUG ~ models.Comment{content=nice post, id=14, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f0808080808080808cf3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080809180f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8081f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f0808080808080808cf180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808080f7848080808af8f4808be8e5ececefa0f7eff2ece4f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2e5da7f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:04:18}
12 10 2010 18:04:18,735 DEBUG ~ executing identity-insert immediately
12 10 2010 18:04:18,735 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,736 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,736 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,736 DEBUG ~ Natively generated identity: 15
12 10 2010 18:04:18,736 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,736 DEBUG ~ processing flush-time cascades
12 10 2010 18:04:18,736 DEBUG ~ dirty checking collections
12 10 2010 18:04:18,736 DEBUG ~ Collection dirty: [models.Post.comments#12]
12 10 2010 18:04:18,736 DEBUG ~ Collection found: [models.Post.comments#12], was: [models.Post.comments#12] (initialized)
12 10 2010 18:04:18,737 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 18:04:18,737 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:04:18,737 DEBUG ~ listing entities:
12 10 2010 18:04:18,738 DEBUG ~ models.Post{content=hello world, id=12, author=models.User#17, title=first post, comments=[models.Comment#14], postedAt=2010-10-12 18:04:18}
12 10 2010 18:04:18,738 DEBUG ~ models.User{id=17, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:04:18,738 DEBUG ~ models.Comment{content=i knew that !, id=15, author=Tom, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f0808080808080808cf3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080809180f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8181f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f0808080808080808cf180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808081f7848080808af3f2808eedefe4e5ecf3aec3efedede5eef4e30c6cb88a748959828084cc8086e1f5f4e8eff2f180fe8083cc8087e3efeef4e5eef4f180fe8083cc8084f0eff3f4f4808dccedefe4e5ecf3afd0eff3f4bbcc8088f0eff3f4e5e4c1f4f180fe8084f8f180fe8085808080808080808ef48084cae5e6e6f48089eee9e3e5a0f0eff3f4f180fe8087f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2e5daaf8f8f4808be8e5ececefa0f7eff2ece4f3f180fe809ef788808081ab1f2e5da7f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:04:18}
12 10 2010 18:04:18,739 DEBUG ~ models.Comment{content=nice post, id=14, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f0808080808080808cf3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080809180f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8181f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f0808080808080808cf180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808081f7848080808af3f2808eedefe4e5ecf3aec3efedede5eef4e30c6cb88a748959828084cc8086e1f5f4e8eff2f180fe8083cc8087e3efeef4e5eef4f180fe8083cc8084f0eff3f4f4808dccedefe4e5ecf3afd0eff3f4bbcc8088f0eff3f4e5e4c1f4f180fe8084f8f180fe8085808080808080808ef48084cae5e6e6f48089eee9e3e5a0f0eff3f4f180fe8087f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2e5daaf8f8f4808be8e5ececefa0f7eff2ece4f3f180fe809ef788808081ab1f2e5da7f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:04:18}
12 10 2010 18:04:18,739 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,739 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,739 DEBUG ~ result row: 
12 10 2010 18:04:18,739 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,740 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,740 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,740 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,740 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,740 DEBUG ~ result row: 
12 10 2010 18:04:18,740 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,740 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,740 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,740 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,740 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,740 DEBUG ~ result row: 
12 10 2010 18:04:18,740 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,740 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,740 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,741 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,741 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,741 DEBUG ~ result row: EntityKey[models.Post#12]
12 10 2010 18:04:18,741 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,741 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,741 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,747 DEBUG ~ processing flush-time cascades
12 10 2010 18:04:18,747 DEBUG ~ dirty checking collections
12 10 2010 18:04:18,747 DEBUG ~ Collection dirty: [models.Post.comments#12]
12 10 2010 18:04:18,749 DEBUG ~ Collection dereferenced: [models.Post.comments#12]
12 10 2010 18:04:18,749 DEBUG ~ Flushed: 0 insertions, 0 updates, 3 deletions to 4 objects
12 10 2010 18:04:18,749 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 1 removals to 1 collections
12 10 2010 18:04:18,749 DEBUG ~ listing entities:
12 10 2010 18:04:18,750 DEBUG ~ models.Post{content=hello world, id=12, author=models.User#17, title=first post, comments=[models.Comment#14, models.Comment#15], postedAt=2010-10-12 18:04:18}
12 10 2010 18:04:18,750 DEBUG ~ models.User{id=17, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:04:18,751 DEBUG ~ models.Comment{content=i knew that !, id=15, author=Tom, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f0808080808080808cf3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080809180f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8181f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f0808080808080808cf180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808082f7848080808af3f2808eedefe4e5ecf3aec3efedede5eef4e30c6cb88a748959828084cc8086e1f5f4e8eff2f180fe8083cc8087e3efeef4e5eef4f180fe8083cc8084f0eff3f4f4808dccedefe4e5ecf3afd0eff3f4bbcc8088f0eff3f4e5e4c1f4f180fe8084f8f180fe8085808080808080808ef48084cae5e6e6f48089eee9e3e5a0f0eff3f4f180fe8087f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2e5daaf8f3f180fe8099808080808080808ff48083d4efedf4808de9a0ebeee5f7a0f4e8e1f4a0a1f180fe8087f3f180fe809ef788808081ab1f2e5daef8f8f4808be8e5ececefa0f7eff2ece4f3f180fe809ef788808081ab1f2e5da7f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:04:18}
12 10 2010 18:04:18,751 DEBUG ~ models.Comment{content=nice post, id=14, author=Jeff, post=2c6d8085f3f2808bedefe4e5ecf3aed0eff3f439237533b207fb82828085cc8086e1f5f4e8eff2f4808dccedefe4e5ecf3afd5f3e5f2bbcc8088e3efedede5eef4f3f48090cceae1f6e1aff5f4e9ecafcce9f3f4bbcc8087e3efeef4e5eef4f48092cceae1f6e1afece1eee7afd3f4f2e9eee7bbcc8088f0eff3f4e5e4c1f4f48090cceae1f6e1aff5f4e9ecafc4e1f4e5bbcc8085f4e9f4ece5f180fe8083f8f28096f0ece1f9aee4e2aeeaf0e1aed3e3e1ece1cdefe4e5ec6e8715eff1b5d2f7828081ca8082e9e4f8f28093f0ece1f9aee4e2aeeaf0e1aecad0c1c2e1f3e55cf9f227a4992bd2828080f8f0808080808080808cf3f2808bedefe4e5ecf3aed5f3e5f2c3fce3b090501181828084da8087e9f3c1e4ede9eecc8085e5ede1e9ecf180fe8083cc8088e6f5ececeee1ede5f180fe8083cc8088f0e1f3f3f7eff2e4f180fe8083f8f180fe8085808080808080809180f4808fe2efe2c0e5f8e1edf0ece5aee3efedf48083c2efe2f48086f3e5e3f2e5f4f3f280a6eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaed0e5f2f3e9f3f4e5eef4c2e1e7a79f04084e3bf6c9828081cc8083e2e1e7f180fe8082f8f280b5eff2e7aee8e9e2e5f2eee1f4e5aee3efecece5e3f4e9efeeaec1e2f3f4f2e1e3f4d0e5f2f3e9f3f4e5eef4c3efecece5e3f4e9efee3011d4b9cb66a633828087c9808ae3e1e3e8e5e4d3e9fae5da8085e4e9f2f4f9da808be9eee9f4e9e1ece9fae5e4cc8083ebe5f9f48096cceae1f6e1afe9efafd3e5f2e9e1ece9fae1e2ece5bbcc8085eff7eee5f2f48092cceae1f6e1afece1eee7afcfe2eae5e3f4bbcc8084f2efece5f180fe8083cc808ef3f4eff2e5e4d3eee1f0f3e8eff4f180fe808ff8f07f7f7f7f8181f3f2808eeae1f6e1aeece1eee7aeccefeee7bb0b64104c0fa35f828081ca8085f6e1ecf5e5f8f28090eae1f6e1aeece1eee7aecef5ede2e5f2062c159d8b14600b828080f8f0808080808080808cf180fe8087f48094edefe4e5ecf3aed0eff3f4aee3efedede5eef4f3f3f28093eae1f6e1aef5f4e9ecaec1f2f2e1f9cce9f3f4f801529d1947e11d838081c98084f3e9fae5f8f080808080f78480808080f8f3f180fe809680808082f7848080808af3f2808eedefe4e5ecf3aec3efedede5eef4e30c6cb88a748959828084cc8086e1f5f4e8eff2f180fe8083cc8087e3efeef4e5eef4f180fe8083cc8084f0eff3f4f4808dccedefe4e5ecf3afd0eff3f4bbcc8088f0eff3f4e5e4c1f4f180fe8084f8f180fe8085808080808080808ef48084cae5e6e6f48089eee9e3e5a0f0eff3f4f180fe8087f3f2808eeae1f6e1aef5f4e9ecaec4e1f4e5e8ea0181cbd9f499838080f8f0f788808081ab1f2e5daaf8f3f180fe8099808080808080808ff48083d4efedf4808de9a0ebeee5f7a0f4e8e1f4a0a1f180fe8087f3f180fe809ef788808081ab1f2e5daef8f8f4808be8e5ececefa0f7eff2ece4f3f180fe809ef788808081ab1f2e5da7f8f4808ae6e9f2f3f4a0f0eff3f4, postedAt=2010-10-12 18:04:18}
12 10 2010 18:04:18,752 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,753 DEBUG ~ reusing prepared statement
12 10 2010 18:04:18,754 DEBUG ~ Executing batch size: 2
12 10 2010 18:04:18,754 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,755 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,755 DEBUG ~ Executing batch size: 1
12 10 2010 18:04:18,756 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,761 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,761 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,761 DEBUG ~ result row: 
12 10 2010 18:04:18,761 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,761 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,761 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,761 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,762 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,762 DEBUG ~ result row: 
12 10 2010 18:04:18,762 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,762 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,762 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,762 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,762 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,762 DEBUG ~ result row: 
12 10 2010 18:04:18,762 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,762 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,762 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,776 DEBUG ~ executing identity-insert immediately
12 10 2010 18:04:18,776 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,776 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,777 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,777 DEBUG ~ Natively generated identity: 18
12 10 2010 18:04:18,777 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,777 DEBUG ~ processing flush-time cascades
12 10 2010 18:04:18,777 DEBUG ~ dirty checking collections
12 10 2010 18:04:18,777 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:04:18,777 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:04:18,777 DEBUG ~ listing entities:
12 10 2010 18:04:18,777 DEBUG ~ models.User{id=18, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:04:18,779 DEBUG ~ executing identity-insert immediately
12 10 2010 18:04:18,779 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,780 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,780 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,780 DEBUG ~ Natively generated identity: 19
12 10 2010 18:04:18,780 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,780 DEBUG ~ processing flush-time cascades
12 10 2010 18:04:18,780 DEBUG ~ dirty checking collections
12 10 2010 18:04:18,780 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 18:04:18,780 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:04:18,780 DEBUG ~ listing entities:
12 10 2010 18:04:18,780 DEBUG ~ models.User{id=19, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:04:18,780 DEBUG ~ models.User{id=18, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:04:18,783 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,784 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,784 DEBUG ~ result row: EntityKey[models.User#18]
12 10 2010 18:04:18,784 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,784 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,784 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,792 DEBUG ~ executing identity-insert immediately
12 10 2010 18:04:18,793 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,793 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,793 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,793 DEBUG ~ Natively generated identity: 13
12 10 2010 18:04:18,793 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,794 DEBUG ~ processing flush-time cascades
12 10 2010 18:04:18,794 DEBUG ~ dirty checking collections
12 10 2010 18:04:18,794 DEBUG ~ Collection found: [models.Post.comments#13], was: [<unreferenced>] (initialized)
12 10 2010 18:04:18,794 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 18:04:18,794 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:04:18,794 DEBUG ~ listing entities:
12 10 2010 18:04:18,795 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=13, author=models.User#18, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:04:18,795 DEBUG ~ models.User{id=19, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:04:18,795 DEBUG ~ models.User{id=18, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:04:18,799 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,799 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,799 DEBUG ~ result row: EntityKey[models.User#18]
12 10 2010 18:04:18,800 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,800 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,800 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,811 DEBUG ~ executing identity-insert immediately
12 10 2010 18:04:18,811 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,811 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,811 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,811 DEBUG ~ Natively generated identity: 14
12 10 2010 18:04:18,811 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,812 DEBUG ~ processing flush-time cascades
12 10 2010 18:04:18,812 DEBUG ~ dirty checking collections
12 10 2010 18:04:18,812 DEBUG ~ Collection found: [models.Post.comments#13], was: [models.Post.comments#13] (initialized)
12 10 2010 18:04:18,812 DEBUG ~ Collection found: [models.Post.comments#14], was: [<unreferenced>] (initialized)
12 10 2010 18:04:18,812 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 18:04:18,812 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 2 collections
12 10 2010 18:04:18,812 DEBUG ~ listing entities:
12 10 2010 18:04:18,812 DEBUG ~ models.Post{content=Well, it's just a test.
, id=14, author=models.User#18, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
12 10 2010 18:04:18,813 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=13, author=models.User#18, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:04:18,813 DEBUG ~ models.User{id=19, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:04:18,813 DEBUG ~ models.User{id=18, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:04:18,818 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,818 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,818 DEBUG ~ result row: EntityKey[models.User#19]
12 10 2010 18:04:18,818 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,819 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,819 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,822 DEBUG ~ executing identity-insert immediately
12 10 2010 18:04:18,822 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,822 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,822 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,822 DEBUG ~ Natively generated identity: 15
12 10 2010 18:04:18,822 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,823 DEBUG ~ processing flush-time cascades
12 10 2010 18:04:18,823 DEBUG ~ dirty checking collections
12 10 2010 18:04:18,823 DEBUG ~ Collection found: [models.Post.comments#13], was: [models.Post.comments#13] (initialized)
12 10 2010 18:04:18,823 DEBUG ~ Collection found: [models.Post.comments#14], was: [models.Post.comments#14] (initialized)
12 10 2010 18:04:18,823 DEBUG ~ Collection found: [models.Post.comments#15], was: [<unreferenced>] (initialized)
12 10 2010 18:04:18,823 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 5 objects
12 10 2010 18:04:18,824 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 3 collections
12 10 2010 18:04:18,824 DEBUG ~ listing entities:
12 10 2010 18:04:18,824 DEBUG ~ models.Post{content=Well, it's just a test.
, id=14, author=models.User#18, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
12 10 2010 18:04:18,824 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=13, author=models.User#18, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:04:18,824 DEBUG ~ models.User{id=19, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:04:18,824 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=15, author=models.User#19, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
12 10 2010 18:04:18,824 DEBUG ~ models.User{id=18, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:04:18,828 DEBUG ~ executing identity-insert immediately
12 10 2010 18:04:18,828 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,829 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,829 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,829 DEBUG ~ Natively generated identity: 16
12 10 2010 18:04:18,829 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,829 DEBUG ~ processing flush-time cascades
12 10 2010 18:04:18,829 DEBUG ~ dirty checking collections
12 10 2010 18:04:18,830 DEBUG ~ Collection found: [models.Post.comments#13], was: [models.Post.comments#13] (initialized)
12 10 2010 18:04:18,830 DEBUG ~ Collection found: [models.Post.comments#14], was: [models.Post.comments#14] (initialized)
12 10 2010 18:04:18,830 DEBUG ~ Collection found: [models.Post.comments#15], was: [models.Post.comments#15] (initialized)
12 10 2010 18:04:18,830 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
12 10 2010 18:04:18,830 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
12 10 2010 18:04:18,830 DEBUG ~ listing entities:
12 10 2010 18:04:18,830 DEBUG ~ models.Post{content=Well, it's just a test.
, id=14, author=models.User#18, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
12 10 2010 18:04:18,831 DEBUG ~ models.Comment{content=You are right !
, id=16, author=Guest, post=null, postedAt=2009-06-14 09:00:00}
12 10 2010 18:04:18,831 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=13, author=models.User#18, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:04:18,831 DEBUG ~ models.User{id=19, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:04:18,831 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=15, author=models.User#19, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
12 10 2010 18:04:18,831 DEBUG ~ models.User{id=18, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:04:18,834 DEBUG ~ executing identity-insert immediately
12 10 2010 18:04:18,835 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,835 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,835 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,835 DEBUG ~ Natively generated identity: 17
12 10 2010 18:04:18,835 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,835 DEBUG ~ processing flush-time cascades
12 10 2010 18:04:18,836 DEBUG ~ dirty checking collections
12 10 2010 18:04:18,836 DEBUG ~ Collection found: [models.Post.comments#13], was: [models.Post.comments#13] (initialized)
12 10 2010 18:04:18,836 DEBUG ~ Collection found: [models.Post.comments#14], was: [models.Post.comments#14] (initialized)
12 10 2010 18:04:18,836 DEBUG ~ Collection found: [models.Post.comments#15], was: [models.Post.comments#15] (initialized)
12 10 2010 18:04:18,836 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 7 objects
12 10 2010 18:04:18,836 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
12 10 2010 18:04:18,836 DEBUG ~ listing entities:
12 10 2010 18:04:18,836 DEBUG ~ models.User{id=19, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:04:18,836 DEBUG ~ models.User{id=18, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:04:18,836 DEBUG ~ models.Post{content=Well, it's just a test.
, id=14, author=models.User#18, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
12 10 2010 18:04:18,837 DEBUG ~ models.Comment{content=I knew that ...
, id=17, author=Mike, post=null, postedAt=2009-06-15 09:00:00}
12 10 2010 18:04:18,837 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=13, author=models.User#18, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:04:18,837 DEBUG ~ models.Comment{content=You are right !
, id=16, author=Guest, post=null, postedAt=2009-06-14 09:00:00}
12 10 2010 18:04:18,837 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=15, author=models.User#19, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
12 10 2010 18:04:18,840 DEBUG ~ executing identity-insert immediately
12 10 2010 18:04:18,840 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,840 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,840 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,840 DEBUG ~ Natively generated identity: 18
12 10 2010 18:04:18,840 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,840 DEBUG ~ processing flush-time cascades
12 10 2010 18:04:18,841 DEBUG ~ dirty checking collections
12 10 2010 18:04:18,841 DEBUG ~ Collection found: [models.Post.comments#13], was: [models.Post.comments#13] (initialized)
12 10 2010 18:04:18,841 DEBUG ~ Collection found: [models.Post.comments#14], was: [models.Post.comments#14] (initialized)
12 10 2010 18:04:18,841 DEBUG ~ Collection found: [models.Post.comments#15], was: [models.Post.comments#15] (initialized)
12 10 2010 18:04:18,841 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
12 10 2010 18:04:18,841 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
12 10 2010 18:04:18,841 DEBUG ~ listing entities:
12 10 2010 18:04:18,841 DEBUG ~ models.User{id=19, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:04:18,841 DEBUG ~ models.User{id=18, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:04:18,841 DEBUG ~ models.Post{content=Well, it's just a test.
, id=14, author=models.User#18, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
12 10 2010 18:04:18,842 DEBUG ~ models.Comment{content=I knew that ...
, id=17, author=Mike, post=null, postedAt=2009-06-15 09:00:00}
12 10 2010 18:04:18,842 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=13, author=models.User#18, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:04:18,842 DEBUG ~ models.Comment{content=You are right !
, id=16, author=Guest, post=null, postedAt=2009-06-14 09:00:00}
12 10 2010 18:04:18,842 DEBUG ~ models.Comment{content=This post is useless ?
, id=18, author=Tom, post=null, postedAt=2009-04-05 09:00:00}
12 10 2010 18:04:18,842 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=15, author=models.User#19, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
12 10 2010 18:04:18,843 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,843 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,843 DEBUG ~ result row: 
12 10 2010 18:04:18,843 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,843 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,843 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,844 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,844 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,844 DEBUG ~ result row: 
12 10 2010 18:04:18,844 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,844 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,844 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,844 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,844 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,844 DEBUG ~ result row: 
12 10 2010 18:04:18,844 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,844 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,844 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,845 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,845 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,845 DEBUG ~ result row: EntityKey[models.User#18]
12 10 2010 18:04:18,845 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,845 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,845 DEBUG ~ resolving associations for [models.User#18]
12 10 2010 18:04:18,845 DEBUG ~ done materializing entity [models.User#18]
12 10 2010 18:04:18,845 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,846 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,846 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,846 DEBUG ~ result row: EntityKey[models.User#19]
12 10 2010 18:04:18,846 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,846 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,846 DEBUG ~ resolving associations for [models.User#19]
12 10 2010 18:04:18,846 DEBUG ~ done materializing entity [models.User#19]
12 10 2010 18:04:18,846 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,846 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,847 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,847 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,847 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,847 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,847 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,847 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,847 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,847 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,847 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,847 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:04:18,848 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:04:18,848 DEBUG ~ result row: EntityKey[models.Post#13]
12 10 2010 18:04:18,848 DEBUG ~ result row: EntityKey[models.Post#14]
12 10 2010 18:04:18,848 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:04:18,848 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:04:18,848 DEBUG ~ resolving associations for [models.Post#13]
12 10 2010 18:04:18,848 DEBUG ~ done materializing entity [models.Post#13]
12 10 2010 18:04:18,848 DEBUG ~ resolving associations for [models.Post#14]
12 10 2010 18:04:18,848 DEBUG ~ done materializing entity [models.Post#14]
12 10 2010 18:04:18,848 DEBUG ~ initializing non-lazy collections
12 10 2010 18:04:18,849 DEBUG ~ parse() - HQL: from models.Comment where post.author.email = ?1
12 10 2010 18:04:18,851 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Comment'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'post'
          |  |  \-[IDENT] Node: 'author'
          |  \-[IDENT] Node: 'email'
          \-[PARAM] Node: '?'
             \-[NUM_INT] Node: '1'

12 10 2010 18:04:18,851 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:04:18,851 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:04:18,852 DEBUG ~ FromClause{level=1} :  models.Comment (no alias) -> comment0_
12 10 2010 18:04:18,852 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 18:04:18,852 DEBUG ~ getDataType() : post -> org.hibernate.type.SerializableType@2f77f473
12 10 2010 18:04:18,852 DEBUG ~ Resolved :  {synthetic-alias}.post -> comment0_.post
12 10 2010 18:04:18,852 DEBUG ~ getDataType() : author -> org.hibernate.type.StringType@18b3c498
12 10 2010 18:04:18,852 DEBUG ~ Resolved :  {synthetic-alias}.post.author -> comment0_.author
12 10 2010 18:04:18,871 DEBUG ~ commit
12 10 2010 18:04:18,871 DEBUG ~ processing flush-time cascades
12 10 2010 18:04:18,871 DEBUG ~ dirty checking collections
12 10 2010 18:04:18,871 DEBUG ~ Collection found: [models.Post.comments#13], was: [models.Post.comments#13] (uninitialized)
12 10 2010 18:04:18,872 DEBUG ~ Collection found: [models.Post.comments#14], was: [models.Post.comments#14] (uninitialized)
12 10 2010 18:04:18,872 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 18:04:18,872 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
12 10 2010 18:04:18,872 DEBUG ~ listing entities:
12 10 2010 18:04:18,872 DEBUG ~ models.User{id=19, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:04:18,872 DEBUG ~ models.User{id=18, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:04:18,872 DEBUG ~ models.Post{content=Well, it's just a test.
, id=14, author=models.User#18, title=Just a test of YABE, comments=<uninitialized>, postedAt=2009-03-25 09:00:00}
12 10 2010 18:04:18,872 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=13, author=models.User#18, title=About the model layer, comments=<uninitialized>, postedAt=2009-06-14 09:00:00}
12 10 2010 18:04:18,872 DEBUG ~ re-enabling autocommit
12 10 2010 18:04:18,872 DEBUG ~ committed JDBC Connection
12 10 2010 18:04:18,872 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 18:04:18,872 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 18:04:18,923 DEBUG ~ opened session at timestamp: 12868742589
12 10 2010 18:04:18,924 DEBUG ~ begin
12 10 2010 18:04:18,924 DEBUG ~ opening JDBC connection
12 10 2010 18:04:18,924 DEBUG ~ current autocommit status: true
12 10 2010 18:04:18,924 DEBUG ~ disabling autocommit
12 10 2010 18:04:18,933 DEBUG ~ commit
12 10 2010 18:04:18,933 DEBUG ~ re-enabling autocommit
12 10 2010 18:04:18,933 DEBUG ~ committed JDBC Connection
12 10 2010 18:04:18,933 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 18:04:18,936 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 18:06:23,512 INFO  ~ closing
12 10 2010 18:06:23,512 INFO  ~ Running hbm2ddl schema export
12 10 2010 18:06:23,513 DEBUG ~ import file not found: /import.sql
12 10 2010 18:06:23,513 INFO  ~ exporting generated schema to database
12 10 2010 18:06:23,513 DEBUG ~ alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 18:06:23,514 DEBUG ~ Unsuccessful: alter table Comment drop constraint FK9BDE863F500B6664
12 10 2010 18:06:23,514 DEBUG ~ Constraint not found FK9BDE863F500B6664 in table: COMMENT in statement [alter table Comment drop constraint FK9BDE863F500B6664]
12 10 2010 18:06:23,514 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 18:06:23,514 DEBUG ~ drop table Comment if exists
12 10 2010 18:06:23,514 DEBUG ~ drop table Post if exists
12 10 2010 18:06:23,514 DEBUG ~ drop table User if exists
12 10 2010 18:06:23,515 INFO  ~ schema export complete
12 10 2010 18:06:23,551 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 18:06:23,551 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
12 10 2010 18:06:23,551 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
12 10 2010 18:06:23,551 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
12 10 2010 18:06:23,551 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
12 10 2010 18:06:23,551 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
12 10 2010 18:06:23,551 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
12 10 2010 18:06:23,551 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
12 10 2010 18:06:23,551 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
12 10 2010 18:06:23,551 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
12 10 2010 18:06:23,551 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
12 10 2010 18:06:23,551 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
12 10 2010 18:06:23,551 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
12 10 2010 18:06:23,552 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
12 10 2010 18:06:23,552 DEBUG ~ Execute first pass mapping processing
12 10 2010 18:06:23,552 DEBUG ~ Process hbm files
12 10 2010 18:06:23,552 DEBUG ~ Process annotated classes
12 10 2010 18:06:23,553 INFO  ~ Binding entity from annotated class: models.Comment
12 10 2010 18:06:23,553 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 18:06:23,553 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 18:06:23,553 DEBUG ~ Import with entity name Comment
12 10 2010 18:06:23,553 INFO  ~ Bind entity models.Comment on table Comment
12 10 2010 18:06:23,556 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 18:06:23,556 DEBUG ~ binding property id with lazy=false
12 10 2010 18:06:23,556 DEBUG ~ building SimpleValue for id
12 10 2010 18:06:23,556 DEBUG ~ Building property id
12 10 2010 18:06:23,557 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=author, insertable=true, updatable=true, unique=false}
12 10 2010 18:06:23,557 DEBUG ~ binding property author with lazy=false
12 10 2010 18:06:23,557 DEBUG ~ building SimpleValue for author
12 10 2010 18:06:23,557 DEBUG ~ Building property author
12 10 2010 18:06:23,557 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=content, insertable=true, updatable=true, unique=false}
12 10 2010 18:06:23,557 DEBUG ~ binding property content with lazy=false
12 10 2010 18:06:23,557 DEBUG ~ building SimpleValue for content
12 10 2010 18:06:23,557 DEBUG ~ Building property content
12 10 2010 18:06:23,557 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
12 10 2010 18:06:23,557 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=post, insertable=true, updatable=true, unique=false}
12 10 2010 18:06:23,557 DEBUG ~ Building property post
12 10 2010 18:06:23,557 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
12 10 2010 18:06:23,557 DEBUG ~ binding property postedAt with lazy=false
12 10 2010 18:06:23,557 DEBUG ~ building SimpleValue for postedAt
12 10 2010 18:06:23,557 DEBUG ~ Building property postedAt
12 10 2010 18:06:23,557 INFO  ~ Binding entity from annotated class: models.User
12 10 2010 18:06:23,558 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 18:06:23,558 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 18:06:23,558 DEBUG ~ Import with entity name User
12 10 2010 18:06:23,558 INFO  ~ Bind entity models.User on table User
12 10 2010 18:06:23,559 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 18:06:23,559 DEBUG ~ binding property id with lazy=false
12 10 2010 18:06:23,559 DEBUG ~ building SimpleValue for id
12 10 2010 18:06:23,559 DEBUG ~ Building property id
12 10 2010 18:06:23,559 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
12 10 2010 18:06:23,559 DEBUG ~ binding property email with lazy=false
12 10 2010 18:06:23,559 DEBUG ~ building SimpleValue for email
12 10 2010 18:06:23,559 DEBUG ~ Building property email
12 10 2010 18:06:23,559 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
12 10 2010 18:06:23,559 DEBUG ~ binding property fullname with lazy=false
12 10 2010 18:06:23,559 DEBUG ~ building SimpleValue for fullname
12 10 2010 18:06:23,560 DEBUG ~ Building property fullname
12 10 2010 18:06:23,560 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
12 10 2010 18:06:23,560 DEBUG ~ binding property isAdmin with lazy=false
12 10 2010 18:06:23,560 DEBUG ~ building SimpleValue for isAdmin
12 10 2010 18:06:23,560 DEBUG ~ Building property isAdmin
12 10 2010 18:06:23,560 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
12 10 2010 18:06:23,560 DEBUG ~ binding property password with lazy=false
12 10 2010 18:06:23,560 DEBUG ~ building SimpleValue for password
12 10 2010 18:06:23,560 DEBUG ~ Building property password
12 10 2010 18:06:23,560 INFO  ~ Binding entity from annotated class: models.Post
12 10 2010 18:06:23,560 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
12 10 2010 18:06:23,560 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
12 10 2010 18:06:23,560 DEBUG ~ Import with entity name Post
12 10 2010 18:06:23,560 INFO  ~ Bind entity models.Post on table Post
12 10 2010 18:06:23,562 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=id, insertable=true, updatable=true, unique=false}
12 10 2010 18:06:23,562 DEBUG ~ binding property id with lazy=false
12 10 2010 18:06:23,562 DEBUG ~ building SimpleValue for id
12 10 2010 18:06:23,562 DEBUG ~ Building property id
12 10 2010 18:06:23,563 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
12 10 2010 18:06:23,563 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=author, insertable=true, updatable=true, unique=false}
12 10 2010 18:06:23,563 DEBUG ~ Building property author
12 10 2010 18:06:23,563 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
12 10 2010 18:06:23,563 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments, insertable=true, updatable=true, unique=false}
12 10 2010 18:06:23,563 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=null, insertable=true, updatable=true, unique=false}
12 10 2010 18:06:23,563 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=element, insertable=true, updatable=true, unique=false}
12 10 2010 18:06:23,563 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments_KEY, insertable=true, updatable=true, unique=false}
12 10 2010 18:06:23,563 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='comments_KEY', referencedColumn='null', mappedBy='null'}
12 10 2010 18:06:23,564 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
12 10 2010 18:06:23,564 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
12 10 2010 18:06:23,564 DEBUG ~ Collection role: models.Post.comments
12 10 2010 18:06:23,564 DEBUG ~ Building property comments
12 10 2010 18:06:23,564 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=content, insertable=true, updatable=true, unique=false}
12 10 2010 18:06:23,564 DEBUG ~ binding property content with lazy=false
12 10 2010 18:06:23,564 DEBUG ~ building SimpleValue for content
12 10 2010 18:06:23,564 DEBUG ~ Building property content
12 10 2010 18:06:23,564 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
12 10 2010 18:06:23,564 DEBUG ~ binding property postedAt with lazy=false
12 10 2010 18:06:23,564 DEBUG ~ building SimpleValue for postedAt
12 10 2010 18:06:23,564 DEBUG ~ Building property postedAt
12 10 2010 18:06:23,564 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=title, insertable=true, updatable=true, unique=false}
12 10 2010 18:06:23,564 DEBUG ~ binding property title with lazy=false
12 10 2010 18:06:23,564 DEBUG ~ building SimpleValue for title
12 10 2010 18:06:23,564 DEBUG ~ Building property title
12 10 2010 18:06:23,565 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 18:06:23,565 DEBUG ~ setting SimpleValue typeName for author
12 10 2010 18:06:23,565 DEBUG ~ setting SimpleValue typeName for content
12 10 2010 18:06:23,565 DEBUG ~ setting SimpleValue typeName for postedAt
12 10 2010 18:06:23,565 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 18:06:23,565 DEBUG ~ setting SimpleValue typeName for email
12 10 2010 18:06:23,565 DEBUG ~ setting SimpleValue typeName for fullname
12 10 2010 18:06:23,565 DEBUG ~ setting SimpleValue typeName for isAdmin
12 10 2010 18:06:23,565 DEBUG ~ setting SimpleValue typeName for password
12 10 2010 18:06:23,565 DEBUG ~ setting SimpleValue typeName for id
12 10 2010 18:06:23,565 DEBUG ~ setting SimpleValue typeName for content
12 10 2010 18:06:23,565 DEBUG ~ setting SimpleValue typeName for postedAt
12 10 2010 18:06:23,565 DEBUG ~ setting SimpleValue typeName for title
12 10 2010 18:06:23,565 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 18:06:23,565 DEBUG ~ processing extends queue
12 10 2010 18:06:23,565 DEBUG ~ processing collection mappings
12 10 2010 18:06:23,566 DEBUG ~ Second pass for collection: models.Post.comments
12 10 2010 18:06:23,566 DEBUG ~ Binding a OneToMany: models.Post.comments through a foreign key
12 10 2010 18:06:23,566 INFO  ~ Mapping collection: models.Post.comments -> Comment
12 10 2010 18:06:23,566 DEBUG ~ Retrieving property models.Comment.post
12 10 2010 18:06:23,566 DEBUG ~ Mapped collection key: post_id, one-to-many: models.Comment
12 10 2010 18:06:23,566 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 18:06:23,566 DEBUG ~ processing association property references
12 10 2010 18:06:23,566 DEBUG ~ processing foreign key constraints
12 10 2010 18:06:23,566 DEBUG ~ resolving reference to class: models.Post
12 10 2010 18:06:23,566 DEBUG ~ resolving reference to class: models.User
12 10 2010 18:06:23,585 INFO  ~ Hibernate Validator not found: ignoring
12 10 2010 18:06:23,595 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
12 10 2010 18:06:23,603 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
12 10 2010 18:06:23,605 DEBUG ~ Search not present in classpath, ignoring event listener registration.
12 10 2010 18:06:23,605 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
12 10 2010 18:06:23,605 DEBUG ~ Preparing to build session factory with filters : {}
12 10 2010 18:06:23,606 DEBUG ~ Execute first pass mapping processing
12 10 2010 18:06:23,606 DEBUG ~ Process hbm files
12 10 2010 18:06:23,606 DEBUG ~ Process annotated classes
12 10 2010 18:06:23,606 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 18:06:23,606 DEBUG ~ processing extends queue
12 10 2010 18:06:23,606 DEBUG ~ processing collection mappings
12 10 2010 18:06:23,606 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 18:06:23,606 DEBUG ~ processing association property references
12 10 2010 18:06:23,606 DEBUG ~ processing foreign key constraints
12 10 2010 18:06:23,606 DEBUG ~ resolving reference to class: models.Post
12 10 2010 18:06:23,606 DEBUG ~ resolving reference to class: models.User
12 10 2010 18:06:23,608 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
12 10 2010 18:06:23,608 INFO  ~ Using provided datasource
12 10 2010 18:06:23,608 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
12 10 2010 18:06:23,608 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
12 10 2010 18:06:23,608 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
12 10 2010 18:06:23,608 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
12 10 2010 18:06:23,609 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
12 10 2010 18:06:23,609 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
12 10 2010 18:06:23,609 INFO  ~ Automatic flush during beforeCompletion(): disabled
12 10 2010 18:06:23,609 INFO  ~ Automatic session close at end of transaction: disabled
12 10 2010 18:06:23,609 INFO  ~ JDBC batch size: 15
12 10 2010 18:06:23,609 INFO  ~ JDBC batch updates for versioned data: disabled
12 10 2010 18:06:23,609 INFO  ~ Scrollable result sets: enabled
12 10 2010 18:06:23,609 DEBUG ~ Wrap result sets: disabled
12 10 2010 18:06:23,609 INFO  ~ JDBC3 getGeneratedKeys(): disabled
12 10 2010 18:06:23,609 INFO  ~ Connection release mode: auto
12 10 2010 18:06:23,609 INFO  ~ Default batch fetch size: 1
12 10 2010 18:06:23,609 INFO  ~ Generate SQL with comments: disabled
12 10 2010 18:06:23,609 INFO  ~ Order SQL updates by primary key: disabled
12 10 2010 18:06:23,609 INFO  ~ Order SQL inserts for batching: disabled
12 10 2010 18:06:23,609 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
12 10 2010 18:06:23,609 INFO  ~ Using ASTQueryTranslatorFactory
12 10 2010 18:06:23,609 INFO  ~ Query language substitutions: {}
12 10 2010 18:06:23,609 INFO  ~ JPA-QL strict compliance: enabled
12 10 2010 18:06:23,609 INFO  ~ Second-level cache: enabled
12 10 2010 18:06:23,609 INFO  ~ Query cache: disabled
12 10 2010 18:06:23,609 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
12 10 2010 18:06:23,610 INFO  ~ Optimize cache for minimal puts: disabled
12 10 2010 18:06:23,610 INFO  ~ Structured second-level cache entries: disabled
12 10 2010 18:06:23,610 INFO  ~ Statistics: disabled
12 10 2010 18:06:23,610 INFO  ~ Deleted entity synthetic identifier rollback: disabled
12 10 2010 18:06:23,610 INFO  ~ Default entity-mode: pojo
12 10 2010 18:06:23,610 INFO  ~ Named query checking : enabled
12 10 2010 18:06:23,610 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
12 10 2010 18:06:23,622 INFO  ~ building session factory
12 10 2010 18:06:23,622 DEBUG ~ Session factory constructed with filter configurations : {}
12 10 2010 18:06:23,622 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
12 10 2010 18:06:23,623 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:06:23,623 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:06:23,623 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:06:23,633 DEBUG ~ Static SQL for entity: models.Comment
12 10 2010 18:06:23,633 DEBUG ~  Version select: select id from Comment where id =?
12 10 2010 18:06:23,633 DEBUG ~  Snapshot select: select comment_.id, comment_.author as author75_, comment_.content as content75_, comment_.post_id as post5_75_, comment_.postedAt as postedAt75_ from Comment comment_ where comment_.id=?
12 10 2010 18:06:23,633 DEBUG ~  Insert 0: insert into Comment (author, content, post_id, postedAt, id) values (?, ?, ?, ?, ?)
12 10 2010 18:06:23,633 DEBUG ~  Update 0: update Comment set author=?, content=?, post_id=?, postedAt=? where id=?
12 10 2010 18:06:23,633 DEBUG ~  Delete 0: delete from Comment where id=?
12 10 2010 18:06:23,633 DEBUG ~  Identity insert: insert into Comment (id, author, content, post_id, postedAt) values (null, ?, ?, ?, ?)
12 10 2010 18:06:23,641 DEBUG ~ Static SQL for entity: models.Post
12 10 2010 18:06:23,641 DEBUG ~  Version select: select id from Post where id =?
12 10 2010 18:06:23,641 DEBUG ~  Snapshot select: select post_.id, post_.author_id as author5_77_, post_.content as content77_, post_.postedAt as postedAt77_, post_.title as title77_ from Post post_ where post_.id=?
12 10 2010 18:06:23,641 DEBUG ~  Insert 0: insert into Post (author_id, content, postedAt, title, id) values (?, ?, ?, ?, ?)
12 10 2010 18:06:23,641 DEBUG ~  Update 0: update Post set author_id=?, content=?, postedAt=?, title=? where id=?
12 10 2010 18:06:23,641 DEBUG ~  Delete 0: delete from Post where id=?
12 10 2010 18:06:23,641 DEBUG ~  Identity insert: insert into Post (id, author_id, content, postedAt, title) values (null, ?, ?, ?, ?)
12 10 2010 18:06:23,650 DEBUG ~ Static SQL for entity: models.User
12 10 2010 18:06:23,650 DEBUG ~  Version select: select id from User where id =?
12 10 2010 18:06:23,650 DEBUG ~  Snapshot select: select user_.id, user_.email as email76_, user_.fullname as fullname76_, user_.isAdmin as isAdmin76_, user_.password as password76_ from User user_ where user_.id=?
12 10 2010 18:06:23,650 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
12 10 2010 18:06:23,650 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
12 10 2010 18:06:23,650 DEBUG ~  Delete 0: delete from User where id=?
12 10 2010 18:06:23,650 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
12 10 2010 18:06:23,650 DEBUG ~ Static SQL for collection: models.Post.comments
12 10 2010 18:06:23,650 DEBUG ~  Row insert: update Comment set post_id=? where id=?
12 10 2010 18:06:23,650 DEBUG ~  Row delete: update Comment set post_id=null where post_id=? and id=?
12 10 2010 18:06:23,650 DEBUG ~  One-shot delete: update Comment set post_id=null where post_id=?
12 10 2010 18:06:23,651 DEBUG ~ Static select for entity models.Comment [NONE]: select comment0_.id as id75_2_, comment0_.author as author75_2_, comment0_.content as content75_2_, comment0_.post_id as post5_75_2_, comment0_.postedAt as postedAt75_2_, post1_.id as id77_0_, post1_.author_id as author5_77_0_, post1_.content as content77_0_, post1_.postedAt as postedAt77_0_, post1_.title as title77_0_, user2_.id as id76_1_, user2_.email as email76_1_, user2_.fullname as fullname76_1_, user2_.isAdmin as isAdmin76_1_, user2_.password as password76_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
12 10 2010 18:06:23,651 DEBUG ~ Static select for entity models.Comment [READ]: select comment0_.id as id75_2_, comment0_.author as author75_2_, comment0_.content as content75_2_, comment0_.post_id as post5_75_2_, comment0_.postedAt as postedAt75_2_, post1_.id as id77_0_, post1_.author_id as author5_77_0_, post1_.content as content77_0_, post1_.postedAt as postedAt77_0_, post1_.title as title77_0_, user2_.id as id76_1_, user2_.email as email76_1_, user2_.fullname as fullname76_1_, user2_.isAdmin as isAdmin76_1_, user2_.password as password76_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
12 10 2010 18:06:23,652 DEBUG ~ Static select for entity models.Comment [UPGRADE]: select comment0_.id as id75_0_, comment0_.author as author75_0_, comment0_.content as content75_0_, comment0_.post_id as post5_75_0_, comment0_.postedAt as postedAt75_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:06:23,652 DEBUG ~ Static select for entity models.Comment [UPGRADE_NOWAIT]: select comment0_.id as id75_0_, comment0_.author as author75_0_, comment0_.content as content75_0_, comment0_.post_id as post5_75_0_, comment0_.postedAt as postedAt75_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:06:23,652 DEBUG ~ Static select for entity models.Comment [FORCE]: select comment0_.id as id75_0_, comment0_.author as author75_0_, comment0_.content as content75_0_, comment0_.post_id as post5_75_0_, comment0_.postedAt as postedAt75_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:06:23,652 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_READ]: select comment0_.id as id75_0_, comment0_.author as author75_0_, comment0_.content as content75_0_, comment0_.post_id as post5_75_0_, comment0_.postedAt as postedAt75_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:06:23,652 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_WRITE]: select comment0_.id as id75_0_, comment0_.author as author75_0_, comment0_.content as content75_0_, comment0_.post_id as post5_75_0_, comment0_.postedAt as postedAt75_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:06:23,652 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_FORCE_INCREMENT]: select comment0_.id as id75_0_, comment0_.author as author75_0_, comment0_.content as content75_0_, comment0_.post_id as post5_75_0_, comment0_.postedAt as postedAt75_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:06:23,653 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC]: select comment0_.id as id75_2_, comment0_.author as author75_2_, comment0_.content as content75_2_, comment0_.post_id as post5_75_2_, comment0_.postedAt as postedAt75_2_, post1_.id as id77_0_, post1_.author_id as author5_77_0_, post1_.content as content77_0_, post1_.postedAt as postedAt77_0_, post1_.title as title77_0_, user2_.id as id76_1_, user2_.email as email76_1_, user2_.fullname as fullname76_1_, user2_.isAdmin as isAdmin76_1_, user2_.password as password76_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
12 10 2010 18:06:23,653 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC_FORCE_INCREMENT]: select comment0_.id as id75_2_, comment0_.author as author75_2_, comment0_.content as content75_2_, comment0_.post_id as post5_75_2_, comment0_.postedAt as postedAt75_2_, post1_.id as id77_0_, post1_.author_id as author5_77_0_, post1_.content as content77_0_, post1_.postedAt as postedAt77_0_, post1_.title as title77_0_, user2_.id as id76_1_, user2_.email as email76_1_, user2_.fullname as fullname76_1_, user2_.isAdmin as isAdmin76_1_, user2_.password as password76_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
12 10 2010 18:06:23,653 DEBUG ~ Static select for action ACTION_MERGE on entity models.Comment: select comment0_.id as id75_0_, comment0_.author as author75_0_, comment0_.content as content75_0_, comment0_.post_id as post5_75_0_, comment0_.postedAt as postedAt75_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:06:23,653 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Comment: select comment0_.id as id75_0_, comment0_.author as author75_0_, comment0_.content as content75_0_, comment0_.post_id as post5_75_0_, comment0_.postedAt as postedAt75_0_ from Comment comment0_ where comment0_.id=?
12 10 2010 18:06:23,654 DEBUG ~ Static select for entity models.Post [NONE]: select post0_.id as id77_1_, post0_.author_id as author5_77_1_, post0_.content as content77_1_, post0_.postedAt as postedAt77_1_, post0_.title as title77_1_, user1_.id as id76_0_, user1_.email as email76_0_, user1_.fullname as fullname76_0_, user1_.isAdmin as isAdmin76_0_, user1_.password as password76_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 18:06:23,654 DEBUG ~ Static select for entity models.Post [READ]: select post0_.id as id77_1_, post0_.author_id as author5_77_1_, post0_.content as content77_1_, post0_.postedAt as postedAt77_1_, post0_.title as title77_1_, user1_.id as id76_0_, user1_.email as email76_0_, user1_.fullname as fullname76_0_, user1_.isAdmin as isAdmin76_0_, user1_.password as password76_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 18:06:23,655 DEBUG ~ Static select for entity models.Post [UPGRADE]: select post0_.id as id77_0_, post0_.author_id as author5_77_0_, post0_.content as content77_0_, post0_.postedAt as postedAt77_0_, post0_.title as title77_0_ from Post post0_ where post0_.id=?
12 10 2010 18:06:23,655 DEBUG ~ Static select for entity models.Post [UPGRADE_NOWAIT]: select post0_.id as id77_0_, post0_.author_id as author5_77_0_, post0_.content as content77_0_, post0_.postedAt as postedAt77_0_, post0_.title as title77_0_ from Post post0_ where post0_.id=?
12 10 2010 18:06:23,655 DEBUG ~ Static select for entity models.Post [FORCE]: select post0_.id as id77_0_, post0_.author_id as author5_77_0_, post0_.content as content77_0_, post0_.postedAt as postedAt77_0_, post0_.title as title77_0_ from Post post0_ where post0_.id=?
12 10 2010 18:06:23,655 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_READ]: select post0_.id as id77_0_, post0_.author_id as author5_77_0_, post0_.content as content77_0_, post0_.postedAt as postedAt77_0_, post0_.title as title77_0_ from Post post0_ where post0_.id=?
12 10 2010 18:06:23,655 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_WRITE]: select post0_.id as id77_0_, post0_.author_id as author5_77_0_, post0_.content as content77_0_, post0_.postedAt as postedAt77_0_, post0_.title as title77_0_ from Post post0_ where post0_.id=?
12 10 2010 18:06:23,655 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_FORCE_INCREMENT]: select post0_.id as id77_0_, post0_.author_id as author5_77_0_, post0_.content as content77_0_, post0_.postedAt as postedAt77_0_, post0_.title as title77_0_ from Post post0_ where post0_.id=?
12 10 2010 18:06:23,656 DEBUG ~ Static select for entity models.Post [OPTIMISTIC]: select post0_.id as id77_1_, post0_.author_id as author5_77_1_, post0_.content as content77_1_, post0_.postedAt as postedAt77_1_, post0_.title as title77_1_, user1_.id as id76_0_, user1_.email as email76_0_, user1_.fullname as fullname76_0_, user1_.isAdmin as isAdmin76_0_, user1_.password as password76_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 18:06:23,656 DEBUG ~ Static select for entity models.Post [OPTIMISTIC_FORCE_INCREMENT]: select post0_.id as id77_1_, post0_.author_id as author5_77_1_, post0_.content as content77_1_, post0_.postedAt as postedAt77_1_, post0_.title as title77_1_, user1_.id as id76_0_, user1_.email as email76_0_, user1_.fullname as fullname76_0_, user1_.isAdmin as isAdmin76_0_, user1_.password as password76_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
12 10 2010 18:06:23,656 DEBUG ~ Static select for action ACTION_MERGE on entity models.Post: select post0_.id as id77_1_, post0_.author_id as author5_77_1_, post0_.content as content77_1_, post0_.postedAt as postedAt77_1_, post0_.title as title77_1_, comments1_.post_id as post5_77_3_, comments1_.id as id3_, comments1_.id as id75_0_, comments1_.author as author75_0_, comments1_.content as content75_0_, comments1_.post_id as post5_75_0_, comments1_.postedAt as postedAt75_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post_id where post0_.id=?
12 10 2010 18:06:23,656 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Post: select post0_.id as id77_1_, post0_.author_id as author5_77_1_, post0_.content as content77_1_, post0_.postedAt as postedAt77_1_, post0_.title as title77_1_, comments1_.post_id as post5_77_3_, comments1_.id as id3_, comments1_.id as id75_0_, comments1_.author as author75_0_, comments1_.content as content75_0_, comments1_.post_id as post5_75_0_, comments1_.postedAt as postedAt75_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post_id where post0_.id=?
12 10 2010 18:06:23,657 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id76_0_, user0_.email as email76_0_, user0_.fullname as fullname76_0_, user0_.isAdmin as isAdmin76_0_, user0_.password as password76_0_ from User user0_ where user0_.id=?
12 10 2010 18:06:23,657 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id76_0_, user0_.email as email76_0_, user0_.fullname as fullname76_0_, user0_.isAdmin as isAdmin76_0_, user0_.password as password76_0_ from User user0_ where user0_.id=?
12 10 2010 18:06:23,657 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id76_0_, user0_.email as email76_0_, user0_.fullname as fullname76_0_, user0_.isAdmin as isAdmin76_0_, user0_.password as password76_0_ from User user0_ where user0_.id=?
12 10 2010 18:06:23,657 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id76_0_, user0_.email as email76_0_, user0_.fullname as fullname76_0_, user0_.isAdmin as isAdmin76_0_, user0_.password as password76_0_ from User user0_ where user0_.id=?
12 10 2010 18:06:23,657 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id76_0_, user0_.email as email76_0_, user0_.fullname as fullname76_0_, user0_.isAdmin as isAdmin76_0_, user0_.password as password76_0_ from User user0_ where user0_.id=?
12 10 2010 18:06:23,657 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id76_0_, user0_.email as email76_0_, user0_.fullname as fullname76_0_, user0_.isAdmin as isAdmin76_0_, user0_.password as password76_0_ from User user0_ where user0_.id=?
12 10 2010 18:06:23,657 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id76_0_, user0_.email as email76_0_, user0_.fullname as fullname76_0_, user0_.isAdmin as isAdmin76_0_, user0_.password as password76_0_ from User user0_ where user0_.id=?
12 10 2010 18:06:23,657 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id76_0_, user0_.email as email76_0_, user0_.fullname as fullname76_0_, user0_.isAdmin as isAdmin76_0_, user0_.password as password76_0_ from User user0_ where user0_.id=?
12 10 2010 18:06:23,658 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id76_0_, user0_.email as email76_0_, user0_.fullname as fullname76_0_, user0_.isAdmin as isAdmin76_0_, user0_.password as password76_0_ from User user0_ where user0_.id=?
12 10 2010 18:06:23,658 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id76_0_, user0_.email as email76_0_, user0_.fullname as fullname76_0_, user0_.isAdmin as isAdmin76_0_, user0_.password as password76_0_ from User user0_ where user0_.id=?
12 10 2010 18:06:23,658 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id76_0_, user0_.email as email76_0_, user0_.fullname as fullname76_0_, user0_.isAdmin as isAdmin76_0_, user0_.password as password76_0_ from User user0_ where user0_.id=?
12 10 2010 18:06:23,658 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id76_0_, user0_.email as email76_0_, user0_.fullname as fullname76_0_, user0_.isAdmin as isAdmin76_0_, user0_.password as password76_0_ from User user0_ where user0_.id=?
12 10 2010 18:06:23,658 DEBUG ~ Static select for one-to-many models.Post.comments: select comments0_.post_id as post5_77_1_, comments0_.id as id1_, comments0_.id as id75_0_, comments0_.author as author75_0_, comments0_.content as content75_0_, comments0_.post_id as post5_75_0_, comments0_.postedAt as postedAt75_0_ from Comment comments0_ where comments0_.post_id=?
12 10 2010 18:06:23,658 DEBUG ~ registered: 2c9082cd2b9f0d81012b9fb0c52a0012 (unnamed)
12 10 2010 18:06:23,658 INFO  ~ Not binding factory to JNDI, no JNDI name configured
12 10 2010 18:06:23,658 DEBUG ~ instantiated session factory
12 10 2010 18:06:23,658 DEBUG ~ Execute first pass mapping processing
12 10 2010 18:06:23,658 DEBUG ~ Process hbm files
12 10 2010 18:06:23,658 DEBUG ~ Process annotated classes
12 10 2010 18:06:23,659 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 18:06:23,659 DEBUG ~ processing extends queue
12 10 2010 18:06:23,659 DEBUG ~ processing collection mappings
12 10 2010 18:06:23,659 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 18:06:23,659 DEBUG ~ processing association property references
12 10 2010 18:06:23,659 DEBUG ~ processing foreign key constraints
12 10 2010 18:06:23,659 DEBUG ~ resolving reference to class: models.Post
12 10 2010 18:06:23,659 DEBUG ~ resolving reference to class: models.User
12 10 2010 18:06:23,661 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:06:23,661 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:06:23,661 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:06:23,661 DEBUG ~ Execute first pass mapping processing
12 10 2010 18:06:23,661 DEBUG ~ Process hbm files
12 10 2010 18:06:23,661 DEBUG ~ Process annotated classes
12 10 2010 18:06:23,661 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 18:06:23,661 DEBUG ~ processing extends queue
12 10 2010 18:06:23,661 DEBUG ~ processing collection mappings
12 10 2010 18:06:23,662 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 18:06:23,662 DEBUG ~ processing association property references
12 10 2010 18:06:23,662 DEBUG ~ processing foreign key constraints
12 10 2010 18:06:23,662 DEBUG ~ resolving reference to class: models.Post
12 10 2010 18:06:23,662 DEBUG ~ resolving reference to class: models.User
12 10 2010 18:06:23,664 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:06:23,665 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:06:23,665 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:06:23,665 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:06:23,665 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:06:23,665 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:06:23,665 INFO  ~ Running hbm2ddl schema export
12 10 2010 18:06:23,665 DEBUG ~ import file not found: /import.sql
12 10 2010 18:06:23,665 INFO  ~ exporting generated schema to database
12 10 2010 18:06:23,665 DEBUG ~ alter table Comment drop constraint FK9BDE863F388562DE
12 10 2010 18:06:23,666 DEBUG ~ Unsuccessful: alter table Comment drop constraint FK9BDE863F388562DE
12 10 2010 18:06:23,666 DEBUG ~ Table not found: COMMENT in statement [alter table Comment]
12 10 2010 18:06:23,666 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 18:06:23,666 DEBUG ~ Unsuccessful: alter table Post drop constraint FK260CC0A7CD013E
12 10 2010 18:06:23,666 DEBUG ~ Table not found: POST in statement [alter table Post]
12 10 2010 18:06:23,666 DEBUG ~ drop table Comment if exists
12 10 2010 18:06:23,666 DEBUG ~ drop table Post if exists
12 10 2010 18:06:23,666 DEBUG ~ drop table User if exists
12 10 2010 18:06:23,666 DEBUG ~ create table Comment (id bigint generated by default as identity (start with 1), author varchar(255), content longvarchar, postedAt timestamp, post_id bigint, primary key (id))
12 10 2010 18:06:23,667 DEBUG ~ create table Post (id bigint generated by default as identity (start with 1), content longvarchar, postedAt timestamp, title varchar(255), author_id bigint, primary key (id))
12 10 2010 18:06:23,667 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
12 10 2010 18:06:23,667 DEBUG ~ alter table Comment add constraint FK9BDE863F388562DE foreign key (post_id) references Post
12 10 2010 18:06:23,667 DEBUG ~ alter table Post add constraint FK260CC0A7CD013E foreign key (author_id) references User
12 10 2010 18:06:23,667 INFO  ~ schema export complete
12 10 2010 18:06:23,667 DEBUG ~ Execute first pass mapping processing
12 10 2010 18:06:23,668 DEBUG ~ Process hbm files
12 10 2010 18:06:23,668 DEBUG ~ Process annotated classes
12 10 2010 18:06:23,668 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 18:06:23,668 DEBUG ~ processing extends queue
12 10 2010 18:06:23,668 DEBUG ~ processing collection mappings
12 10 2010 18:06:23,668 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 18:06:23,668 DEBUG ~ processing association property references
12 10 2010 18:06:23,668 DEBUG ~ processing foreign key constraints
12 10 2010 18:06:23,668 DEBUG ~ resolving reference to class: models.Post
12 10 2010 18:06:23,668 DEBUG ~ resolving reference to class: models.User
12 10 2010 18:06:23,670 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:06:23,670 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:06:23,670 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:06:23,670 DEBUG ~ Execute first pass mapping processing
12 10 2010 18:06:23,670 DEBUG ~ Process hbm files
12 10 2010 18:06:23,670 DEBUG ~ Process annotated classes
12 10 2010 18:06:23,670 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
12 10 2010 18:06:23,670 DEBUG ~ processing extends queue
12 10 2010 18:06:23,670 DEBUG ~ processing collection mappings
12 10 2010 18:06:23,670 DEBUG ~ processing native query and ResultSetMapping mappings
12 10 2010 18:06:23,670 DEBUG ~ processing association property references
12 10 2010 18:06:23,670 DEBUG ~ processing foreign key constraints
12 10 2010 18:06:23,670 DEBUG ~ resolving reference to class: models.Post
12 10 2010 18:06:23,670 DEBUG ~ resolving reference to class: models.User
12 10 2010 18:06:23,671 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:06:23,671 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:06:23,671 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:06:23,672 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:06:23,672 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:06:23,672 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
12 10 2010 18:06:23,672 DEBUG ~ Checking 0 named HQL queries
12 10 2010 18:06:23,672 DEBUG ~ Checking 0 named SQL queries
12 10 2010 18:06:23,678 DEBUG ~ opened session at timestamp: 12868743836
12 10 2010 18:06:23,679 DEBUG ~ begin
12 10 2010 18:06:23,679 DEBUG ~ opening JDBC connection
12 10 2010 18:06:23,679 DEBUG ~ current autocommit status: true
12 10 2010 18:06:23,679 DEBUG ~ disabling autocommit
12 10 2010 18:06:23,738 DEBUG ~ commit
12 10 2010 18:06:23,738 DEBUG ~ re-enabling autocommit
12 10 2010 18:06:23,738 DEBUG ~ committed JDBC Connection
12 10 2010 18:06:23,738 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 18:06:23,738 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 18:06:25,339 DEBUG ~ opened session at timestamp: 12868743853
12 10 2010 18:06:25,339 DEBUG ~ begin
12 10 2010 18:06:25,339 DEBUG ~ opening JDBC connection
12 10 2010 18:06:25,339 DEBUG ~ current autocommit status: true
12 10 2010 18:06:25,339 DEBUG ~ disabling autocommit
12 10 2010 18:06:25,385 DEBUG ~ commit
12 10 2010 18:06:25,386 DEBUG ~ re-enabling autocommit
12 10 2010 18:06:25,386 DEBUG ~ committed JDBC Connection
12 10 2010 18:06:25,386 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 18:06:25,386 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 18:06:25,405 DEBUG ~ opened session at timestamp: 12868743854
12 10 2010 18:06:25,405 DEBUG ~ begin
12 10 2010 18:06:25,405 DEBUG ~ opening JDBC connection
12 10 2010 18:06:25,405 DEBUG ~ current autocommit status: true
12 10 2010 18:06:25,405 DEBUG ~ disabling autocommit
12 10 2010 18:06:25,658 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:25,658 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,659 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,659 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,659 DEBUG ~ Natively generated identity: 1
12 10 2010 18:06:25,672 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,672 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,672 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,672 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:06:25,672 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:06:25,672 DEBUG ~ listing entities:
12 10 2010 18:06:25,672 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:25,674 DEBUG ~ parse() - HQL: from models.User where email = ?
12 10 2010 18:06:25,675 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'email'
          \-[PARAM] Node: '?'

12 10 2010 18:06:25,675 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,675 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:06:25,676 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 18:06:25,676 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 18:06:25,676 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 18:06:25,676 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 18:06:25,676 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 18:06:25,676 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.email {synthetic-alias} email ) ? ) ) )
12 10 2010 18:06:25,676 DEBUG ~ Derived SELECT clause created.
12 10 2010 18:06:25,676 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 18:06:25,677 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 18:06:25,677 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id76_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email76_, user0_.fullname as fullname76_, user0_.isAdmin as isAdmin76_, user0_.password as password76_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'email' {originalText=email}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 18:06:25,677 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,677 DEBUG ~ HQL: from models.User where email = ?
12 10 2010 18:06:25,677 DEBUG ~ SQL: select user0_.id as id76_, user0_.email as email76_, user0_.fullname as fullname76_, user0_.isAdmin as isAdmin76_, user0_.password as password76_ from User user0_ where user0_.email=?
12 10 2010 18:06:25,677 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,678 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,678 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,678 DEBUG ~ result row: EntityKey[models.User#1]
12 10 2010 18:06:25,678 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,678 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,678 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,679 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:25,679 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,679 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,679 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,679 DEBUG ~ Natively generated identity: 2
12 10 2010 18:06:25,679 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,680 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,680 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,680 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:06:25,680 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:06:25,680 DEBUG ~ listing entities:
12 10 2010 18:06:25,680 DEBUG ~ models.User{id=2, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:25,681 DEBUG ~ parse() - HQL: from models.User where email = ? AND password = ?
12 10 2010 18:06:25,682 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'AND'
          +-[EQ] Node: '='
          |  +-[IDENT] Node: 'email'
          |  \-[PARAM] Node: '?'
          \-[EQ] Node: '='
             +-[IDENT] Node: 'password'
             \-[PARAM] Node: '?'

12 10 2010 18:06:25,682 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,683 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:06:25,683 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 18:06:25,683 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 18:06:25,683 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 18:06:25,683 DEBUG ~ Resolved :  {synthetic-alias}.email -> user0_.email
12 10 2010 18:06:25,683 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 18:06:25,683 DEBUG ~ getDataType() : password -> org.hibernate.type.StringType@18b3c498
12 10 2010 18:06:25,683 DEBUG ~ Resolved :  {synthetic-alias}.password -> user0_.password
12 10 2010 18:06:25,683 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 18:06:25,683 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( AND ( = ( user0_.email {synthetic-alias} email ) ? ) ( = ( user0_.password {synthetic-alias} password ) ? ) ) ) )
12 10 2010 18:06:25,684 DEBUG ~ Derived SELECT clause created.
12 10 2010 18:06:25,684 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 18:06:25,684 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 18:06:25,684 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id76_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email76_, user0_.fullname as fullname76_, user0_.isAdmin as isAdmin76_, user0_.password as password76_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'AND'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'user0_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.email,tableAlias=user0_,className=models.User,classAlias=null}
          |  |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  |  \-[IDENT] IdentNode: 'email' {originalText=email}
          |  \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@18b3c498}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'user0_.password' {propertyName=password,dereferenceType=ALL,propertyPath=password,path={synthetic-alias}.password,tableAlias=user0_,className=models.User,classAlias=null}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'password' {originalText=password}
             \-[PARAM] ParameterNode: '?' {ordinal=1, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 18:06:25,684 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,685 DEBUG ~ HQL: from models.User where email = ? AND password = ?
12 10 2010 18:06:25,685 DEBUG ~ SQL: select user0_.id as id76_, user0_.email as email76_, user0_.fullname as fullname76_, user0_.isAdmin as isAdmin76_, user0_.password as password76_ from User user0_ where user0_.email=? and user0_.password=?
12 10 2010 18:06:25,685 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,685 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,685 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,686 DEBUG ~ result row: EntityKey[models.User#2]
12 10 2010 18:06:25,686 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,686 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,686 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,686 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,686 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,686 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,686 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,687 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,687 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,687 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,687 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,687 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,687 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,688 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:25,688 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,688 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,688 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,688 DEBUG ~ Natively generated identity: 3
12 10 2010 18:06:25,688 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,688 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,688 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,689 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:06:25,689 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:06:25,689 DEBUG ~ listing entities:
12 10 2010 18:06:25,689 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:25,689 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:25,689 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,689 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,689 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,690 DEBUG ~ Natively generated identity: 1
12 10 2010 18:06:25,690 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,690 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,690 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,690 DEBUG ~ Collection found: [models.Post.comments#1], was: [<unreferenced>] (initialized)
12 10 2010 18:06:25,690 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 18:06:25,690 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:06:25,690 DEBUG ~ listing entities:
12 10 2010 18:06:25,691 DEBUG ~ models.User{id=3, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:25,691 DEBUG ~ models.Post{content=hello world, id=1, author=models.User#3, title=first post, comments=[], postedAt=2010-10-12 18:06:25}
12 10 2010 18:06:25,693 DEBUG ~ parse() - HQL: select count(e) from models.Post e
12 10 2010 18:06:25,695 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'Post'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

12 10 2010 18:06:25,695 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,695 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:06:25,695 DEBUG ~ FromClause{level=1} :  models.Post (e) -> post0_
12 10 2010 18:06:25,695 DEBUG ~ Resolved :  e -> post0_.id
12 10 2010 18:06:25,695 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 18:06:25,696 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count post0_.id ) ) ( FromClause{level=1} Post post0_ ) )
12 10 2010 18:06:25,696 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 18:06:25,696 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 18:06:25,696 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'post0_.id' {alias=e, className=models.Post, tableAlias=post0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}

12 10 2010 18:06:25,696 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,696 DEBUG ~ HQL: select count(e) from models.Post e
12 10 2010 18:06:25,696 DEBUG ~ SQL: select count(post0_.id) as col_0_0_ from Post post0_
12 10 2010 18:06:25,696 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,696 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,697 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,697 DEBUG ~ result row: 
12 10 2010 18:06:25,697 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,697 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,697 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,698 DEBUG ~ parse() - HQL: from models.Post where author = ?
12 10 2010 18:06:25,699 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'author'
          \-[PARAM] Node: '?'

12 10 2010 18:06:25,699 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,699 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:06:25,699 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
12 10 2010 18:06:25,699 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 18:06:25,699 DEBUG ~ getDataType() : author -> org.hibernate.type.ManyToOneType(models.User)
12 10 2010 18:06:25,699 DEBUG ~ dereferenceShortcut() : property author in models.Post does not require a join.
12 10 2010 18:06:25,699 DEBUG ~ terminal propertyPath = [author]
12 10 2010 18:06:25,699 DEBUG ~ Resolved :  {synthetic-alias}.author -> post0_.author_id
12 10 2010 18:06:25,700 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 18:06:25,700 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( = ( post0_.author_id {synthetic-alias} author ) ? ) ) )
12 10 2010 18:06:25,700 DEBUG ~ Derived SELECT clause created.
12 10 2010 18:06:25,700 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 18:06:25,700 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 18:06:25,700 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id77_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_77_, post0_.content as content77_, post0_.postedAt as postedAt77_, post0_.title as title77_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'post0_.author_id' {propertyName=author,dereferenceType=0,propertyPath=author,path={synthetic-alias}.author,tableAlias=post0_,className=models.Post,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'author' {originalText=author}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.ManyToOneType(models.User)}

12 10 2010 18:06:25,700 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,700 DEBUG ~ HQL: from models.Post where author = ?
12 10 2010 18:06:25,701 DEBUG ~ SQL: select post0_.id as id77_, post0_.author_id as author5_77_, post0_.content as content77_, post0_.postedAt as postedAt77_, post0_.title as title77_ from Post post0_ where post0_.author_id=?
12 10 2010 18:06:25,701 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,701 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,701 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,701 DEBUG ~ result row: EntityKey[models.Post#1]
12 10 2010 18:06:25,701 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,701 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,701 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,702 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:25,702 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,702 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,702 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,702 DEBUG ~ Natively generated identity: 4
12 10 2010 18:06:25,702 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,703 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,703 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,703 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:06:25,703 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:06:25,703 DEBUG ~ listing entities:
12 10 2010 18:06:25,703 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:25,703 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:25,703 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,704 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,704 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,704 DEBUG ~ Natively generated identity: 2
12 10 2010 18:06:25,704 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,704 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,704 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,704 DEBUG ~ Collection found: [models.Post.comments#2], was: [<unreferenced>] (initialized)
12 10 2010 18:06:25,704 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 18:06:25,704 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:06:25,704 DEBUG ~ listing entities:
12 10 2010 18:06:25,705 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, comments=[], postedAt=2010-10-12 18:06:25}
12 10 2010 18:06:25,705 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:25,705 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:25,705 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,705 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,705 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,706 DEBUG ~ Natively generated identity: 1
12 10 2010 18:06:25,706 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,706 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,706 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,706 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
12 10 2010 18:06:25,706 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 18:06:25,706 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:06:25,706 DEBUG ~ listing entities:
12 10 2010 18:06:25,706 DEBUG ~ models.Comment{content=nice post, id=1, author=Jeff, post=models.Post#2, postedAt=2010-10-12 18:06:25}
12 10 2010 18:06:25,707 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, comments=[], postedAt=2010-10-12 18:06:25}
12 10 2010 18:06:25,707 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:25,707 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:25,707 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,707 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,707 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,708 DEBUG ~ Natively generated identity: 2
12 10 2010 18:06:25,708 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,708 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,708 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,708 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
12 10 2010 18:06:25,708 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 18:06:25,708 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:06:25,709 DEBUG ~ listing entities:
12 10 2010 18:06:25,709 DEBUG ~ models.Comment{content=nice post, id=1, author=Jeff, post=models.Post#2, postedAt=2010-10-12 18:06:25}
12 10 2010 18:06:25,709 DEBUG ~ models.Comment{content=i knew that !, id=2, author=Tom, post=models.Post#2, postedAt=2010-10-12 18:06:25}
12 10 2010 18:06:25,709 DEBUG ~ models.Post{content=hello world, id=2, author=models.User#4, title=first post, comments=[], postedAt=2010-10-12 18:06:25}
12 10 2010 18:06:25,709 DEBUG ~ models.User{id=4, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:25,710 DEBUG ~ parse() - HQL: from models.Comment where post = ?
12 10 2010 18:06:25,711 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Comment'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'post'
          \-[PARAM] Node: '?'

12 10 2010 18:06:25,711 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,711 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:06:25,712 DEBUG ~ FromClause{level=1} :  models.Comment (no alias) -> comment0_
12 10 2010 18:06:25,712 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 18:06:25,712 DEBUG ~ getDataType() : post -> org.hibernate.type.ManyToOneType(models.Post)
12 10 2010 18:06:25,712 DEBUG ~ dereferenceShortcut() : property post in models.Comment does not require a join.
12 10 2010 18:06:25,712 DEBUG ~ terminal propertyPath = [post]
12 10 2010 18:06:25,712 DEBUG ~ Resolved :  {synthetic-alias}.post -> comment0_.post_id
12 10 2010 18:06:25,712 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 18:06:25,712 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Comment comment0_ ) ( where ( = ( comment0_.post_id {synthetic-alias} post ) ? ) ) )
12 10 2010 18:06:25,713 DEBUG ~ Derived SELECT clause created.
12 10 2010 18:06:25,713 DEBUG ~ Using FROM fragment [Comment comment0_]
12 10 2010 18:06:25,713 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 18:06:25,713 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Comment)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'comment0_.id as id75_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Comment,tableAlias=comment0_,origin=null,columns={,className=models.Comment}}}
    |  \-[SQL_TOKEN] SqlFragment: 'comment0_.author as author75_, comment0_.content as content75_, comment0_.post_id as post5_75_, comment0_.postedAt as postedAt75_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[comment0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Comment comment0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Comment,tableAlias=comment0_,origin=null,columns={,className=models.Comment}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'comment0_.post_id' {propertyName=post,dereferenceType=0,propertyPath=post,path={synthetic-alias}.post,tableAlias=comment0_,className=models.Comment,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'post' {originalText=post}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.ManyToOneType(models.Post)}

12 10 2010 18:06:25,713 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,714 DEBUG ~ HQL: from models.Comment where post = ?
12 10 2010 18:06:25,714 DEBUG ~ SQL: select comment0_.id as id75_, comment0_.author as author75_, comment0_.content as content75_, comment0_.post_id as post5_75_, comment0_.postedAt as postedAt75_ from Comment comment0_ where comment0_.post_id=?
12 10 2010 18:06:25,714 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,714 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,714 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,714 DEBUG ~ result row: EntityKey[models.Comment#1]
12 10 2010 18:06:25,714 DEBUG ~ result row: EntityKey[models.Comment#2]
12 10 2010 18:06:25,714 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,714 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,714 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,715 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:25,715 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,716 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,716 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,716 DEBUG ~ Natively generated identity: 5
12 10 2010 18:06:25,716 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,717 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,717 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,717 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:06:25,717 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:06:25,717 DEBUG ~ listing entities:
12 10 2010 18:06:25,717 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:25,717 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:25,717 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,717 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,717 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,718 DEBUG ~ Natively generated identity: 3
12 10 2010 18:06:25,718 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,718 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,718 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,718 DEBUG ~ Collection found: [models.Post.comments#3], was: [<unreferenced>] (initialized)
12 10 2010 18:06:25,718 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 18:06:25,718 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:06:25,718 DEBUG ~ listing entities:
12 10 2010 18:06:25,719 DEBUG ~ models.Post{content=hello world, id=3, author=models.User#5, title=first post, comments=[], postedAt=2010-10-12 18:06:25}
12 10 2010 18:06:25,719 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:25,719 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:25,719 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,719 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,719 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,719 DEBUG ~ Natively generated identity: 3
12 10 2010 18:06:25,719 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,720 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,720 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,720 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
12 10 2010 18:06:25,720 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 18:06:25,720 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:06:25,720 DEBUG ~ listing entities:
12 10 2010 18:06:25,720 DEBUG ~ models.Comment{content=nice post, id=3, author=Jeff, post=models.Post#3, postedAt=2010-10-12 18:06:25}
12 10 2010 18:06:25,721 DEBUG ~ models.Post{content=hello world, id=3, author=models.User#5, title=first post, comments=[], postedAt=2010-10-12 18:06:25}
12 10 2010 18:06:25,721 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:25,721 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:25,721 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,721 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,721 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,721 DEBUG ~ Natively generated identity: 4
12 10 2010 18:06:25,722 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,722 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,722 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,722 DEBUG ~ Collection dirty: [models.Post.comments#3]
12 10 2010 18:06:25,722 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
12 10 2010 18:06:25,722 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 18:06:25,722 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:06:25,722 DEBUG ~ listing entities:
12 10 2010 18:06:25,722 DEBUG ~ models.Comment{content=nice post, id=3, author=Jeff, post=models.Post#3, postedAt=2010-10-12 18:06:25}
12 10 2010 18:06:25,723 DEBUG ~ models.Post{content=hello world, id=3, author=models.User#5, title=first post, comments=[models.Comment#3], postedAt=2010-10-12 18:06:25}
12 10 2010 18:06:25,723 DEBUG ~ models.Comment{content=i knew that !, id=4, author=Tom, post=models.Post#3, postedAt=2010-10-12 18:06:25}
12 10 2010 18:06:25,723 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:25,724 DEBUG ~ parse() - HQL: select count(e) from models.User e
12 10 2010 18:06:25,726 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'User'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

12 10 2010 18:06:25,726 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,726 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:06:25,726 DEBUG ~ FromClause{level=1} :  models.User (e) -> user0_
12 10 2010 18:06:25,726 DEBUG ~ Resolved :  e -> user0_.id
12 10 2010 18:06:25,726 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 18:06:25,726 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count user0_.id ) ) ( FromClause{level=1} User user0_ ) )
12 10 2010 18:06:25,727 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 18:06:25,727 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 18:06:25,727 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'user0_.id' {alias=e, className=models.User, tableAlias=user0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}

12 10 2010 18:06:25,727 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,727 DEBUG ~ HQL: select count(e) from models.User e
12 10 2010 18:06:25,727 DEBUG ~ SQL: select count(user0_.id) as col_0_0_ from User user0_
12 10 2010 18:06:25,727 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,727 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,728 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,728 DEBUG ~ result row: 
12 10 2010 18:06:25,728 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,728 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,728 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,728 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,728 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,728 DEBUG ~ result row: 
12 10 2010 18:06:25,728 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,728 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,729 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,729 DEBUG ~ parse() - HQL: select count(e) from models.Comment e
12 10 2010 18:06:25,731 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'Comment'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

12 10 2010 18:06:25,731 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,731 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:06:25,732 DEBUG ~ FromClause{level=1} :  models.Comment (e) -> comment0_
12 10 2010 18:06:25,732 DEBUG ~ Resolved :  e -> comment0_.id
12 10 2010 18:06:25,732 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 18:06:25,732 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count comment0_.id ) ) ( FromClause{level=1} Comment comment0_ ) )
12 10 2010 18:06:25,732 DEBUG ~ Using FROM fragment [Comment comment0_]
12 10 2010 18:06:25,732 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 18:06:25,733 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Comment)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'comment0_.id' {alias=e, className=models.Comment, tableAlias=comment0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[comment0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Comment comment0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=Comment,tableAlias=comment0_,origin=null,columns={,className=models.Comment}}

12 10 2010 18:06:25,733 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,733 DEBUG ~ HQL: select count(e) from models.Comment e
12 10 2010 18:06:25,733 DEBUG ~ SQL: select count(comment0_.id) as col_0_0_ from Comment comment0_
12 10 2010 18:06:25,733 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,733 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,734 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,734 DEBUG ~ result row: 
12 10 2010 18:06:25,734 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,734 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,734 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,734 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,734 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,735 DEBUG ~ result row: EntityKey[models.Post#3]
12 10 2010 18:06:25,735 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,735 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,735 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,737 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,737 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,737 DEBUG ~ Collection dirty: [models.Post.comments#3]
12 10 2010 18:06:25,737 DEBUG ~ Collection dereferenced: [models.Post.comments#3]
12 10 2010 18:06:25,737 DEBUG ~ Flushed: 0 insertions, 0 updates, 3 deletions to 4 objects
12 10 2010 18:06:25,737 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 1 removals to 1 collections
12 10 2010 18:06:25,737 DEBUG ~ listing entities:
12 10 2010 18:06:25,738 DEBUG ~ models.Comment{content=nice post, id=3, author=Jeff, post=models.Post#3, postedAt=2010-10-12 18:06:25}
12 10 2010 18:06:25,738 DEBUG ~ models.Post{content=hello world, id=3, author=models.User#5, title=first post, comments=[models.Comment#3, models.Comment#4], postedAt=2010-10-12 18:06:25}
12 10 2010 18:06:25,738 DEBUG ~ models.Comment{content=i knew that !, id=4, author=Tom, post=models.Post#3, postedAt=2010-10-12 18:06:25}
12 10 2010 18:06:25,738 DEBUG ~ models.User{id=5, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:25,738 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,739 DEBUG ~ reusing prepared statement
12 10 2010 18:06:25,739 DEBUG ~ Executing batch size: 2
12 10 2010 18:06:25,739 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,739 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,739 DEBUG ~ Executing batch size: 1
12 10 2010 18:06:25,739 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,741 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,742 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,742 DEBUG ~ result row: 
12 10 2010 18:06:25,742 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,742 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,742 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,742 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,742 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,742 DEBUG ~ result row: 
12 10 2010 18:06:25,742 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,743 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,743 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,743 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,743 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,743 DEBUG ~ result row: 
12 10 2010 18:06:25,743 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,743 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,743 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,756 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:25,756 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,757 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,757 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,757 DEBUG ~ Natively generated identity: 6
12 10 2010 18:06:25,757 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,757 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,757 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,757 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:06:25,757 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:06:25,757 DEBUG ~ listing entities:
12 10 2010 18:06:25,757 DEBUG ~ models.User{id=6, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:06:25,759 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:25,759 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,759 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,759 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,760 DEBUG ~ Natively generated identity: 7
12 10 2010 18:06:25,760 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,760 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,760 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,760 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 18:06:25,760 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:06:25,760 DEBUG ~ listing entities:
12 10 2010 18:06:25,760 DEBUG ~ models.User{id=7, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:06:25,760 DEBUG ~ models.User{id=6, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:06:25,763 DEBUG ~ parse() - HQL: from models.User where id = ?
12 10 2010 18:06:25,764 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

12 10 2010 18:06:25,764 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,764 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:06:25,765 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
12 10 2010 18:06:25,765 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 18:06:25,765 DEBUG ~ getDataType() : id -> org.hibernate.type.LongType@6e036c4f
12 10 2010 18:06:25,765 DEBUG ~ Resolved :  {synthetic-alias}.id -> user0_.id
12 10 2010 18:06:25,765 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 18:06:25,765 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.id {synthetic-alias} id ) ? ) ) )
12 10 2010 18:06:25,765 DEBUG ~ Derived SELECT clause created.
12 10 2010 18:06:25,765 DEBUG ~ Using FROM fragment [User user0_]
12 10 2010 18:06:25,765 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 18:06:25,766 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id76_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email76_, user0_.fullname as fullname76_, user0_.isAdmin as isAdmin76_, user0_.password as password76_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.id' {propertyName=id,dereferenceType=ALL,propertyPath=id,path={synthetic-alias}.id,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.LongType@6e036c4f}

12 10 2010 18:06:25,766 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,766 DEBUG ~ HQL: from models.User where id = ?
12 10 2010 18:06:25,766 DEBUG ~ SQL: select user0_.id as id76_, user0_.email as email76_, user0_.fullname as fullname76_, user0_.isAdmin as isAdmin76_, user0_.password as password76_ from User user0_ where user0_.id=?
12 10 2010 18:06:25,766 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,766 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,767 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,767 DEBUG ~ result row: EntityKey[models.User#6]
12 10 2010 18:06:25,767 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,767 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,767 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,769 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:25,769 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,769 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,769 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,769 DEBUG ~ Natively generated identity: 4
12 10 2010 18:06:25,769 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,770 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,770 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,770 DEBUG ~ Collection found: [models.Post.comments#4], was: [<unreferenced>] (initialized)
12 10 2010 18:06:25,770 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 18:06:25,770 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:06:25,770 DEBUG ~ listing entities:
12 10 2010 18:06:25,770 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=4, author=models.User#6, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:25,771 DEBUG ~ models.User{id=7, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:06:25,771 DEBUG ~ models.User{id=6, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:06:25,774 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,774 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,774 DEBUG ~ result row: EntityKey[models.User#6]
12 10 2010 18:06:25,774 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,774 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,774 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,777 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:25,777 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,777 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,777 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,777 DEBUG ~ Natively generated identity: 5
12 10 2010 18:06:25,777 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,778 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,778 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,778 DEBUG ~ Collection found: [models.Post.comments#4], was: [models.Post.comments#4] (initialized)
12 10 2010 18:06:25,778 DEBUG ~ Collection found: [models.Post.comments#5], was: [<unreferenced>] (initialized)
12 10 2010 18:06:25,778 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 18:06:25,778 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 2 collections
12 10 2010 18:06:25,778 DEBUG ~ listing entities:
12 10 2010 18:06:25,778 DEBUG ~ models.Post{content=Well, it's just a test.
, id=5, author=models.User#6, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
12 10 2010 18:06:25,779 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=4, author=models.User#6, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:25,779 DEBUG ~ models.User{id=7, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:06:25,779 DEBUG ~ models.User{id=6, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:06:25,782 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,782 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,783 DEBUG ~ result row: EntityKey[models.User#7]
12 10 2010 18:06:25,783 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,783 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,783 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,786 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:25,786 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,786 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,786 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,786 DEBUG ~ Natively generated identity: 6
12 10 2010 18:06:25,786 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,787 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,787 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,787 DEBUG ~ Collection found: [models.Post.comments#4], was: [models.Post.comments#4] (initialized)
12 10 2010 18:06:25,787 DEBUG ~ Collection found: [models.Post.comments#5], was: [models.Post.comments#5] (initialized)
12 10 2010 18:06:25,787 DEBUG ~ Collection found: [models.Post.comments#6], was: [<unreferenced>] (initialized)
12 10 2010 18:06:25,788 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 5 objects
12 10 2010 18:06:25,788 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 3 collections
12 10 2010 18:06:25,788 DEBUG ~ listing entities:
12 10 2010 18:06:25,788 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=6, author=models.User#7, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
12 10 2010 18:06:25,788 DEBUG ~ models.Post{content=Well, it's just a test.
, id=5, author=models.User#6, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
12 10 2010 18:06:25,789 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=4, author=models.User#6, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:25,789 DEBUG ~ models.User{id=7, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:06:25,789 DEBUG ~ models.User{id=6, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:06:25,791 DEBUG ~ parse() - HQL: from models.Post where id = ?
12 10 2010 18:06:25,793 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

12 10 2010 18:06:25,793 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,793 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:06:25,794 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
12 10 2010 18:06:25,794 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 18:06:25,794 DEBUG ~ getDataType() : id -> org.hibernate.type.LongType@6e036c4f
12 10 2010 18:06:25,794 DEBUG ~ Resolved :  {synthetic-alias}.id -> post0_.id
12 10 2010 18:06:25,794 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 18:06:25,794 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( = ( post0_.id {synthetic-alias} id ) ? ) ) )
12 10 2010 18:06:25,794 DEBUG ~ Derived SELECT clause created.
12 10 2010 18:06:25,794 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 18:06:25,794 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 18:06:25,795 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id77_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_77_, post0_.content as content77_, post0_.postedAt as postedAt77_, post0_.title as title77_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'post0_.id' {propertyName=id,dereferenceType=ALL,propertyPath=id,path={synthetic-alias}.id,tableAlias=post0_,className=models.Post,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.LongType@6e036c4f}

12 10 2010 18:06:25,795 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,795 DEBUG ~ HQL: from models.Post where id = ?
12 10 2010 18:06:25,795 DEBUG ~ SQL: select post0_.id as id77_, post0_.author_id as author5_77_, post0_.content as content77_, post0_.postedAt as postedAt77_, post0_.title as title77_ from Post post0_ where post0_.id=?
12 10 2010 18:06:25,795 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,796 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,797 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,797 DEBUG ~ result row: EntityKey[models.Post#4]
12 10 2010 18:06:25,797 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,797 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,797 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,799 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:25,799 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,799 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,799 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,799 DEBUG ~ Natively generated identity: 5
12 10 2010 18:06:25,799 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,800 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,800 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,800 DEBUG ~ Collection found: [models.Post.comments#4], was: [models.Post.comments#4] (initialized)
12 10 2010 18:06:25,800 DEBUG ~ Collection found: [models.Post.comments#5], was: [models.Post.comments#5] (initialized)
12 10 2010 18:06:25,800 DEBUG ~ Collection found: [models.Post.comments#6], was: [models.Post.comments#6] (initialized)
12 10 2010 18:06:25,800 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
12 10 2010 18:06:25,800 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
12 10 2010 18:06:25,800 DEBUG ~ listing entities:
12 10 2010 18:06:25,801 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=6, author=models.User#7, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
12 10 2010 18:06:25,801 DEBUG ~ models.Post{content=Well, it's just a test.
, id=5, author=models.User#6, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
12 10 2010 18:06:25,801 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=4, author=models.User#6, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:25,801 DEBUG ~ models.Comment{content=You are right !
, id=5, author=Guest, post=models.Post#4, postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:25,801 DEBUG ~ models.User{id=7, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:06:25,801 DEBUG ~ models.User{id=6, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:06:25,804 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,805 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,805 DEBUG ~ result row: EntityKey[models.Post#4]
12 10 2010 18:06:25,805 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,805 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,805 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,807 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:25,808 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,808 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,808 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,808 DEBUG ~ Natively generated identity: 6
12 10 2010 18:06:25,808 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,808 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,809 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,809 DEBUG ~ Collection found: [models.Post.comments#4], was: [models.Post.comments#4] (initialized)
12 10 2010 18:06:25,809 DEBUG ~ Collection found: [models.Post.comments#5], was: [models.Post.comments#5] (initialized)
12 10 2010 18:06:25,809 DEBUG ~ Collection found: [models.Post.comments#6], was: [models.Post.comments#6] (initialized)
12 10 2010 18:06:25,809 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 7 objects
12 10 2010 18:06:25,809 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
12 10 2010 18:06:25,809 DEBUG ~ listing entities:
12 10 2010 18:06:25,809 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=6, author=models.User#7, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
12 10 2010 18:06:25,809 DEBUG ~ models.Post{content=Well, it's just a test.
, id=5, author=models.User#6, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
12 10 2010 18:06:25,810 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=4, author=models.User#6, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:25,810 DEBUG ~ models.User{id=7, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:06:25,810 DEBUG ~ models.User{id=6, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:06:25,810 DEBUG ~ models.Comment{content=You are right !
, id=5, author=Guest, post=models.Post#4, postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:25,810 DEBUG ~ models.Comment{content=I knew that ...
, id=6, author=Mike, post=models.Post#4, postedAt=2009-06-15 09:00:00}
12 10 2010 18:06:25,813 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,813 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,813 DEBUG ~ result row: EntityKey[models.Post#5]
12 10 2010 18:06:25,813 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,813 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,813 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,815 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:25,815 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,815 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,815 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,816 DEBUG ~ Natively generated identity: 7
12 10 2010 18:06:25,816 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,816 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,816 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,816 DEBUG ~ Collection found: [models.Post.comments#4], was: [models.Post.comments#4] (initialized)
12 10 2010 18:06:25,816 DEBUG ~ Collection found: [models.Post.comments#5], was: [models.Post.comments#5] (initialized)
12 10 2010 18:06:25,816 DEBUG ~ Collection found: [models.Post.comments#6], was: [models.Post.comments#6] (initialized)
12 10 2010 18:06:25,817 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
12 10 2010 18:06:25,817 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
12 10 2010 18:06:25,817 DEBUG ~ listing entities:
12 10 2010 18:06:25,817 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=6, author=models.User#7, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
12 10 2010 18:06:25,817 DEBUG ~ models.Post{content=Well, it's just a test.
, id=5, author=models.User#6, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
12 10 2010 18:06:25,818 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=4, author=models.User#6, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:25,818 DEBUG ~ models.User{id=7, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:06:25,818 DEBUG ~ models.User{id=6, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:06:25,818 DEBUG ~ models.Comment{content=You are right !
, id=5, author=Guest, post=models.Post#4, postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:25,818 DEBUG ~ models.Comment{content=This post is useless ?
, id=7, author=Tom, post=models.Post#5, postedAt=2009-04-05 09:00:00}
12 10 2010 18:06:25,818 DEBUG ~ models.Comment{content=I knew that ...
, id=6, author=Mike, post=models.Post#4, postedAt=2009-06-15 09:00:00}
12 10 2010 18:06:25,820 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,820 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,820 DEBUG ~ result row: 
12 10 2010 18:06:25,820 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,820 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,820 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,821 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,821 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,821 DEBUG ~ result row: 
12 10 2010 18:06:25,821 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,821 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,821 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,821 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,821 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,821 DEBUG ~ result row: 
12 10 2010 18:06:25,821 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,821 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,821 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,822 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,822 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,822 DEBUG ~ result row: EntityKey[models.User#6]
12 10 2010 18:06:25,822 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,822 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,822 DEBUG ~ resolving associations for [models.User#6]
12 10 2010 18:06:25,822 DEBUG ~ done materializing entity [models.User#6]
12 10 2010 18:06:25,822 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,822 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,823 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,823 DEBUG ~ result row: EntityKey[models.User#7]
12 10 2010 18:06:25,823 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,823 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,823 DEBUG ~ resolving associations for [models.User#7]
12 10 2010 18:06:25,823 DEBUG ~ done materializing entity [models.User#7]
12 10 2010 18:06:25,823 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,823 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,823 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,823 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,823 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,823 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,824 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,824 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,824 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,824 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,824 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,824 DEBUG ~ parse() - HQL: from models.Post where author.email = ?1
12 10 2010 18:06:25,829 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'author'
          |  \-[IDENT] Node: 'email'
          \-[PARAM] Node: '?'
             \-[NUM_INT] Node: '1'

12 10 2010 18:06:25,829 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,829 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:06:25,829 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
12 10 2010 18:06:25,829 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 18:06:25,829 DEBUG ~ getDataType() : author -> org.hibernate.type.ManyToOneType(models.User)
12 10 2010 18:06:25,829 DEBUG ~ dereferenceEntityJoin() : generating join for author in models.Post {no alias} parent = [  ( . ( {non-qualified-property-ref} {synthetic-alias} author ) email ) ]
12 10 2010 18:06:25,830 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user1_
12 10 2010 18:06:25,830 DEBUG ~ addJoinByPathMap() : {synthetic-alias}.author -> ImpliedFromElement{implied,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user1_,origin=Post post0_,columns={post0_.author_id ,className=models.User}}
12 10 2010 18:06:25,830 DEBUG ~ Resolved :  {synthetic-alias}.author -> post0_.author_id
12 10 2010 18:06:25,830 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 18:06:25,830 DEBUG ~ Resolved :  {synthetic-alias}.author.email -> user1_.email
12 10 2010 18:06:25,830 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 18:06:25,830 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ User user1_ ) ( where ( = ( user1_.email ( post0_.author_id {synthetic-alias} author ) email ) ? ) ) )
12 10 2010 18:06:25,830 DEBUG ~ Derived SELECT clause created.
12 10 2010 18:06:25,830 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 18:06:25,830 DEBUG ~ Using unprocessed WHERE-fragment [post0_.author_id=user1_.id]
12 10 2010 18:06:25,830 DEBUG ~ Using processed WHERE-fragment [post0_.author_id=user1_.id]
12 10 2010 18:06:25,831 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 18:06:25,831 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User,Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id77_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_77_, post0_.content as content77_, post0_.postedAt as postedAt77_, post0_.title as title77_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=2, fromElements=2, fromElementByClassAlias=[], fromElementByTableAlias=[user1_, post0_], fromElementsByPath=[{synthetic-alias}.author], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  +-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    |  \-[FROM_FRAGMENT] ImpliedFromElement: 'User user1_' ImpliedFromElement{implied,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user1_,origin=Post post0_,columns={post0_.author_id ,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       +-[THETA_JOINS] SqlNode: '{theta joins}'
       |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id=user1_.id'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user1_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.author.email,tableAlias=user1_,className=models.User,classAlias=null}
          |  +-[DOT] DotNode: 'post0_.author_id' {propertyName=author,dereferenceType=EOF,propertyPath=author,path={synthetic-alias}.author,tableAlias=user1_,className=models.User,classAlias=null}
          |  |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  |  \-[IDENT] IdentNode: 'author' {originalText=author}
          |  \-[IDENT] IdentNode: 'email' {originalText=email}
          \-[NAMED_PARAM] ParameterNode: '?' {name=1, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 18:06:25,831 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,832 DEBUG ~ HQL: from models.Post where author.email = ?1
12 10 2010 18:06:25,832 DEBUG ~ SQL: select post0_.id as id77_, post0_.author_id as author5_77_, post0_.content as content77_, post0_.postedAt as postedAt77_, post0_.title as title77_ from Post post0_ cross join User user1_ where post0_.author_id=user1_.id and user1_.email=?
12 10 2010 18:06:25,832 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,832 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,833 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,833 DEBUG ~ result row: EntityKey[models.Post#4]
12 10 2010 18:06:25,833 DEBUG ~ result row: EntityKey[models.Post#5]
12 10 2010 18:06:25,833 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,833 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,833 DEBUG ~ resolving associations for [models.Post#4]
12 10 2010 18:06:25,833 DEBUG ~ done materializing entity [models.Post#4]
12 10 2010 18:06:25,833 DEBUG ~ resolving associations for [models.Post#5]
12 10 2010 18:06:25,833 DEBUG ~ done materializing entity [models.Post#5]
12 10 2010 18:06:25,833 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,834 DEBUG ~ parse() - HQL: from models.Comment where post.author.email = ?1
12 10 2010 18:06:25,837 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Comment'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'post'
          |  |  \-[IDENT] Node: 'author'
          |  \-[IDENT] Node: 'email'
          \-[PARAM] Node: '?'
             \-[NUM_INT] Node: '1'

12 10 2010 18:06:25,837 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,837 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:06:25,838 DEBUG ~ FromClause{level=1} :  models.Comment (no alias) -> comment0_
12 10 2010 18:06:25,838 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 18:06:25,838 DEBUG ~ getDataType() : post -> org.hibernate.type.ManyToOneType(models.Post)
12 10 2010 18:06:25,838 DEBUG ~ dereferenceEntityJoin() : generating join for post in models.Comment {no alias} parent = [  ( . ( {non-qualified-property-ref} {synthetic-alias} post ) author ) ]
12 10 2010 18:06:25,838 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post1_
12 10 2010 18:06:25,838 DEBUG ~ addJoinByPathMap() : {synthetic-alias}.post -> ImpliedFromElement{implied,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post1_,origin=Comment comment0_,columns={comment0_.post_id ,className=models.Post}}
12 10 2010 18:06:25,838 DEBUG ~ Resolved :  {synthetic-alias}.post -> comment0_.post_id
12 10 2010 18:06:25,838 DEBUG ~ getDataType() : author -> org.hibernate.type.ManyToOneType(models.User)
12 10 2010 18:06:25,838 DEBUG ~ dereferenceEntityJoin() : generating join for author in models.Post {no alias} parent = [  ( . ( . ( comment0_.post_id {synthetic-alias} post ) author ) email ) ]
12 10 2010 18:06:25,838 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user2_
12 10 2010 18:06:25,838 DEBUG ~ addJoinByPathMap() : {synthetic-alias}.post.author -> ImpliedFromElement{implied,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user2_,origin=Post post1_,columns={post1_.author_id ,className=models.User}}
12 10 2010 18:06:25,838 DEBUG ~ Resolved :  {synthetic-alias}.post.author -> post1_.author_id
12 10 2010 18:06:25,838 DEBUG ~ getDataType() : email -> org.hibernate.type.StringType@18b3c498
12 10 2010 18:06:25,838 DEBUG ~ Resolved :  {synthetic-alias}.post.author.email -> user2_.email
12 10 2010 18:06:25,839 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 18:06:25,839 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Comment comment0_ Post post1_ User user2_ ) ( where ( = ( user2_.email ( post1_.author_id ( comment0_.post_id {synthetic-alias} post ) author ) email ) ? ) ) )
12 10 2010 18:06:25,839 DEBUG ~ Derived SELECT clause created.
12 10 2010 18:06:25,839 DEBUG ~ Using FROM fragment [Comment comment0_]
12 10 2010 18:06:25,839 DEBUG ~ Using unprocessed WHERE-fragment [comment0_.post_id=post1_.id]
12 10 2010 18:06:25,839 DEBUG ~ Using processed WHERE-fragment [comment0_.post_id=post1_.id]
12 10 2010 18:06:25,839 DEBUG ~ Using unprocessed WHERE-fragment [post1_.author_id=user2_.id]
12 10 2010 18:06:25,839 DEBUG ~ Using processed WHERE-fragment [post1_.author_id=user2_.id]
12 10 2010 18:06:25,839 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 18:06:25,840 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User,Post,Comment)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'comment0_.id as id75_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Comment,tableAlias=comment0_,origin=null,columns={,className=models.Comment}}}
    |  \-[SQL_TOKEN] SqlFragment: 'comment0_.author as author75_, comment0_.content as content75_, comment0_.post_id as post5_75_, comment0_.postedAt as postedAt75_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=3, fromElements=3, fromElementByClassAlias=[], fromElementByTableAlias=[user2_, post1_, comment0_], fromElementsByPath=[{synthetic-alias}.post, {synthetic-alias}.post.author], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  +-[FROM_FRAGMENT] FromElement: 'Comment comment0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Comment,tableAlias=comment0_,origin=null,columns={,className=models.Comment}}
    |  +-[FROM_FRAGMENT] ImpliedFromElement: 'Post post1_' ImpliedFromElement{implied,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post1_,origin=Comment comment0_,columns={comment0_.post_id ,className=models.Post}}
    |  \-[FROM_FRAGMENT] ImpliedFromElement: 'User user2_' ImpliedFromElement{implied,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user2_,origin=Post post1_,columns={post1_.author_id ,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       +-[THETA_JOINS] SqlNode: '{theta joins}'
       |  +-[SQL_TOKEN] SqlFragment: 'comment0_.post_id=post1_.id'
       |  \-[SQL_TOKEN] SqlFragment: 'post1_.author_id=user2_.id'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user2_.email' {propertyName=email,dereferenceType=ALL,propertyPath=email,path={synthetic-alias}.post.author.email,tableAlias=user2_,className=models.User,classAlias=null}
          |  +-[DOT] DotNode: 'post1_.author_id' {propertyName=author,dereferenceType=EOF,propertyPath=author,path={synthetic-alias}.post.author,tableAlias=user2_,className=models.User,classAlias=null}
          |  |  +-[DOT] DotNode: 'comment0_.post_id' {propertyName=post,dereferenceType=EOF,propertyPath=post,path={synthetic-alias}.post,tableAlias=post1_,className=models.Post,classAlias=null}
          |  |  |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  |  |  \-[IDENT] IdentNode: 'post' {originalText=post}
          |  |  \-[IDENT] IdentNode: 'author' {originalText=author}
          |  \-[IDENT] IdentNode: 'email' {originalText=email}
          \-[NAMED_PARAM] ParameterNode: '?' {name=1, expectedType=org.hibernate.type.StringType@18b3c498}

12 10 2010 18:06:25,840 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,840 DEBUG ~ HQL: from models.Comment where post.author.email = ?1
12 10 2010 18:06:25,840 DEBUG ~ SQL: select comment0_.id as id75_, comment0_.author as author75_, comment0_.content as content75_, comment0_.post_id as post5_75_, comment0_.postedAt as postedAt75_ from Comment comment0_ cross join Post post1_ cross join User user2_ where comment0_.post_id=post1_.id and post1_.author_id=user2_.id and user2_.email=?
12 10 2010 18:06:25,840 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,840 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,841 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,841 DEBUG ~ result row: EntityKey[models.Comment#5]
12 10 2010 18:06:25,841 DEBUG ~ result row: EntityKey[models.Comment#6]
12 10 2010 18:06:25,841 DEBUG ~ result row: EntityKey[models.Comment#7]
12 10 2010 18:06:25,841 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,841 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,841 DEBUG ~ resolving associations for [models.Comment#5]
12 10 2010 18:06:25,841 DEBUG ~ done materializing entity [models.Comment#5]
12 10 2010 18:06:25,841 DEBUG ~ resolving associations for [models.Comment#6]
12 10 2010 18:06:25,841 DEBUG ~ done materializing entity [models.Comment#6]
12 10 2010 18:06:25,841 DEBUG ~ resolving associations for [models.Comment#7]
12 10 2010 18:06:25,842 DEBUG ~ done materializing entity [models.Comment#7]
12 10 2010 18:06:25,842 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,842 DEBUG ~ parse() - HQL: from models.Post order by postedAt desc
12 10 2010 18:06:25,844 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[ORDER] Node: 'order'
       +-[IDENT] Node: 'postedAt'
       \-[DESCENDING] Node: 'desc'

12 10 2010 18:06:25,844 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,844 DEBUG ~ select << begin [level=1, statement=select]
12 10 2010 18:06:25,844 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
12 10 2010 18:06:25,846 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
12 10 2010 18:06:25,846 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@47fbc17c
12 10 2010 18:06:25,846 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
12 10 2010 18:06:25,846 DEBUG ~ select : finishing up [level=1, statement=select]
12 10 2010 18:06:25,846 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( order ( post0_.postedAt {synthetic-alias} postedAt ) desc ) )
12 10 2010 18:06:25,846 DEBUG ~ Derived SELECT clause created.
12 10 2010 18:06:25,846 DEBUG ~ Using FROM fragment [Post post0_]
12 10 2010 18:06:25,846 DEBUG ~ select >> end [level=1, statement=select]
12 10 2010 18:06:25,846 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id77_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_77_, post0_.content as content77_, post0_.postedAt as postedAt77_, post0_.title as title77_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[ORDER] OrderByClause: 'order'
       +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
       |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
       |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
       \-[DESCENDING] SqlNode: 'desc'

12 10 2010 18:06:25,847 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,847 DEBUG ~ HQL: from models.Post order by postedAt desc
12 10 2010 18:06:25,847 DEBUG ~ SQL: select post0_.id as id77_, post0_.author_id as author5_77_, post0_.content as content77_, post0_.postedAt as postedAt77_, post0_.title as title77_ from Post post0_ order by post0_.postedAt desc
12 10 2010 18:06:25,847 DEBUG ~ throwQueryException() : no errors
12 10 2010 18:06:25,847 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,850 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,850 DEBUG ~ result row: EntityKey[models.Post#4]
12 10 2010 18:06:25,850 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,850 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,850 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,854 DEBUG ~ loading collection: [models.Post.comments#4]
12 10 2010 18:06:25,854 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,854 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,854 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#4]
12 10 2010 18:06:25,877 DEBUG ~ result row: EntityKey[models.Comment#5]
12 10 2010 18:06:25,877 DEBUG ~ found row of collection: [models.Post.comments#4]
12 10 2010 18:06:25,877 DEBUG ~ result row: EntityKey[models.Comment#6]
12 10 2010 18:06:25,877 DEBUG ~ found row of collection: [models.Post.comments#4]
12 10 2010 18:06:25,877 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,877 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,878 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
12 10 2010 18:06:25,878 DEBUG ~ collection fully initialized: [models.Post.comments#4]
12 10 2010 18:06:25,878 DEBUG ~ 1 collections initialized for role: models.Post.comments
12 10 2010 18:06:25,878 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,878 DEBUG ~ done loading collection
12 10 2010 18:06:25,878 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:25,878 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,879 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,879 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,879 DEBUG ~ Natively generated identity: 8
12 10 2010 18:06:25,879 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,879 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,880 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,880 DEBUG ~ Collection found: [models.Post.comments#4], was: [models.Post.comments#4] (initialized)
12 10 2010 18:06:25,880 DEBUG ~ Collection found: [models.Post.comments#5], was: [models.Post.comments#5] (uninitialized)
12 10 2010 18:06:25,880 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
12 10 2010 18:06:25,880 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
12 10 2010 18:06:25,880 DEBUG ~ listing entities:
12 10 2010 18:06:25,881 DEBUG ~ models.Comment{content=Hello guys, id=8, author=Jim, post=models.Post#4, postedAt=2010-10-12 18:06:25}
12 10 2010 18:06:25,881 DEBUG ~ models.Post{content=Well, it's just a test.
, id=5, author=models.User#6, title=Just a test of YABE, comments=<uninitialized>, postedAt=2009-03-25 09:00:00}
12 10 2010 18:06:25,881 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=4, author=models.User#6, title=About the model layer, comments=[models.Comment#5, models.Comment#6], postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:25,881 DEBUG ~ models.User{id=7, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:06:25,882 DEBUG ~ models.User{id=6, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:06:25,882 DEBUG ~ models.Comment{content=You are right !
, id=5, author=Guest, post=models.Post#4, postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:25,882 DEBUG ~ models.Comment{content=This post is useless ?
, id=7, author=Tom, post=models.Post#5, postedAt=2009-04-05 09:00:00}
12 10 2010 18:06:25,882 DEBUG ~ models.Comment{content=I knew that ...
, id=6, author=Mike, post=models.Post#4, postedAt=2009-06-15 09:00:00}
12 10 2010 18:06:25,883 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:25,883 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:25,883 DEBUG ~ result row: 
12 10 2010 18:06:25,883 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:25,883 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:25,883 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:25,975 DEBUG ~ commit
12 10 2010 18:06:25,975 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:25,976 DEBUG ~ dirty checking collections
12 10 2010 18:06:25,976 DEBUG ~ Collection dirty: [models.Post.comments#4]
12 10 2010 18:06:25,976 DEBUG ~ Collection found: [models.Post.comments#4], was: [models.Post.comments#4] (initialized)
12 10 2010 18:06:25,976 DEBUG ~ Collection found: [models.Post.comments#5], was: [models.Post.comments#5] (uninitialized)
12 10 2010 18:06:25,976 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
12 10 2010 18:06:25,976 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
12 10 2010 18:06:25,976 DEBUG ~ listing entities:
12 10 2010 18:06:25,977 DEBUG ~ models.Comment{content=Hello guys, id=8, author=Jim, post=models.Post#4, postedAt=2010-10-12 18:06:25}
12 10 2010 18:06:25,977 DEBUG ~ models.Post{content=Well, it's just a test.
, id=5, author=models.User#6, title=Just a test of YABE, comments=<uninitialized>, postedAt=2009-03-25 09:00:00}
12 10 2010 18:06:25,977 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=4, author=models.User#6, title=About the model layer, comments=[models.Comment#5, models.Comment#6, models.Comment#8], postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:25,977 DEBUG ~ models.User{id=7, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:06:25,977 DEBUG ~ models.User{id=6, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:06:25,977 DEBUG ~ models.Comment{content=You are right !
, id=5, author=Guest, post=models.Post#4, postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:25,977 DEBUG ~ models.Comment{content=This post is useless ?
, id=7, author=Tom, post=models.Post#5, postedAt=2009-04-05 09:00:00}
12 10 2010 18:06:25,978 DEBUG ~ models.Comment{content=I knew that ...
, id=6, author=Mike, post=models.Post#4, postedAt=2009-06-15 09:00:00}
12 10 2010 18:06:25,978 DEBUG ~ re-enabling autocommit
12 10 2010 18:06:25,978 DEBUG ~ committed JDBC Connection
12 10 2010 18:06:25,978 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 18:06:25,978 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 18:06:26,012 DEBUG ~ opened session at timestamp: 12868743860
12 10 2010 18:06:26,013 DEBUG ~ begin
12 10 2010 18:06:26,013 DEBUG ~ opening JDBC connection
12 10 2010 18:06:26,013 DEBUG ~ current autocommit status: true
12 10 2010 18:06:26,013 DEBUG ~ disabling autocommit
12 10 2010 18:06:26,017 DEBUG ~ commit
12 10 2010 18:06:26,017 DEBUG ~ re-enabling autocommit
12 10 2010 18:06:26,017 DEBUG ~ committed JDBC Connection
12 10 2010 18:06:26,017 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 18:06:26,017 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 18:06:35,956 DEBUG ~ opened session at timestamp: 12868743959
12 10 2010 18:06:35,957 DEBUG ~ begin
12 10 2010 18:06:35,957 DEBUG ~ opening JDBC connection
12 10 2010 18:06:35,957 DEBUG ~ current autocommit status: true
12 10 2010 18:06:35,957 DEBUG ~ disabling autocommit
12 10 2010 18:06:35,966 DEBUG ~ commit
12 10 2010 18:06:35,966 DEBUG ~ re-enabling autocommit
12 10 2010 18:06:35,966 DEBUG ~ committed JDBC Connection
12 10 2010 18:06:35,966 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 18:06:35,966 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 18:06:35,975 DEBUG ~ opened session at timestamp: 12868743959
12 10 2010 18:06:35,975 DEBUG ~ begin
12 10 2010 18:06:35,975 DEBUG ~ opening JDBC connection
12 10 2010 18:06:35,975 DEBUG ~ current autocommit status: true
12 10 2010 18:06:35,975 DEBUG ~ disabling autocommit
12 10 2010 18:06:36,228 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:36,228 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,228 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,228 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,228 DEBUG ~ Natively generated identity: 8
12 10 2010 18:06:36,228 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,229 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,229 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,229 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:06:36,229 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:06:36,229 DEBUG ~ listing entities:
12 10 2010 18:06:36,229 DEBUG ~ models.User{id=8, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:36,229 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,229 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,229 DEBUG ~ result row: EntityKey[models.User#8]
12 10 2010 18:06:36,229 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,229 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,229 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,230 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:36,230 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,230 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,230 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,230 DEBUG ~ Natively generated identity: 9
12 10 2010 18:06:36,230 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,230 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,231 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,231 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:06:36,231 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:06:36,231 DEBUG ~ listing entities:
12 10 2010 18:06:36,231 DEBUG ~ models.User{id=9, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:36,231 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,231 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,231 DEBUG ~ result row: EntityKey[models.User#9]
12 10 2010 18:06:36,231 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,231 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,231 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,231 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,232 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,232 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,232 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,232 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,232 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,232 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,232 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,232 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,232 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,233 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:36,233 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,233 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,233 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,233 DEBUG ~ Natively generated identity: 10
12 10 2010 18:06:36,233 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,233 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,233 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,233 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:06:36,233 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:06:36,233 DEBUG ~ listing entities:
12 10 2010 18:06:36,234 DEBUG ~ models.User{id=10, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:36,234 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:36,234 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,234 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,234 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,234 DEBUG ~ Natively generated identity: 7
12 10 2010 18:06:36,234 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,235 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,235 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,235 DEBUG ~ Collection found: [models.Post.comments#7], was: [<unreferenced>] (initialized)
12 10 2010 18:06:36,235 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 18:06:36,235 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:06:36,235 DEBUG ~ listing entities:
12 10 2010 18:06:36,235 DEBUG ~ models.User{id=10, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:36,236 DEBUG ~ models.Post{content=hello world, id=7, author=models.User#10, title=first post, comments=[], postedAt=2010-10-12 18:06:36}
12 10 2010 18:06:36,236 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,236 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,236 DEBUG ~ result row: 
12 10 2010 18:06:36,237 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,237 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,237 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,237 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,237 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,237 DEBUG ~ result row: EntityKey[models.Post#7]
12 10 2010 18:06:36,237 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,237 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,237 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,238 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:36,238 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,238 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,238 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,238 DEBUG ~ Natively generated identity: 11
12 10 2010 18:06:36,238 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,239 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,239 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,239 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:06:36,239 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:06:36,239 DEBUG ~ listing entities:
12 10 2010 18:06:36,239 DEBUG ~ models.User{id=11, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:36,239 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:36,239 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,240 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,240 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,240 DEBUG ~ Natively generated identity: 8
12 10 2010 18:06:36,240 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,240 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,240 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,240 DEBUG ~ Collection found: [models.Post.comments#8], was: [<unreferenced>] (initialized)
12 10 2010 18:06:36,241 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 18:06:36,241 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:06:36,241 DEBUG ~ listing entities:
12 10 2010 18:06:36,241 DEBUG ~ models.User{id=11, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:36,241 DEBUG ~ models.Post{content=hello world, id=8, author=models.User#11, title=first post, comments=[], postedAt=2010-10-12 18:06:36}
12 10 2010 18:06:36,241 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:36,241 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,242 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,242 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,242 DEBUG ~ Natively generated identity: 9
12 10 2010 18:06:36,242 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,242 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,242 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,242 DEBUG ~ Collection found: [models.Post.comments#8], was: [models.Post.comments#8] (initialized)
12 10 2010 18:06:36,242 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 18:06:36,242 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:06:36,242 DEBUG ~ listing entities:
12 10 2010 18:06:36,243 DEBUG ~ models.Comment{content=nice post, id=9, author=Jeff, post=models.Post#8, postedAt=2010-10-12 18:06:36}
12 10 2010 18:06:36,243 DEBUG ~ models.User{id=11, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:36,243 DEBUG ~ models.Post{content=hello world, id=8, author=models.User#11, title=first post, comments=[], postedAt=2010-10-12 18:06:36}
12 10 2010 18:06:36,243 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:36,243 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,243 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,243 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,244 DEBUG ~ Natively generated identity: 10
12 10 2010 18:06:36,244 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,244 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,244 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,244 DEBUG ~ Collection found: [models.Post.comments#8], was: [models.Post.comments#8] (initialized)
12 10 2010 18:06:36,244 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 18:06:36,244 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:06:36,244 DEBUG ~ listing entities:
12 10 2010 18:06:36,244 DEBUG ~ models.Comment{content=nice post, id=9, author=Jeff, post=models.Post#8, postedAt=2010-10-12 18:06:36}
12 10 2010 18:06:36,245 DEBUG ~ models.User{id=11, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:36,245 DEBUG ~ models.Comment{content=i knew that !, id=10, author=Tom, post=models.Post#8, postedAt=2010-10-12 18:06:36}
12 10 2010 18:06:36,245 DEBUG ~ models.Post{content=hello world, id=8, author=models.User#11, title=first post, comments=[], postedAt=2010-10-12 18:06:36}
12 10 2010 18:06:36,246 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,246 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,246 DEBUG ~ result row: EntityKey[models.Comment#9]
12 10 2010 18:06:36,247 DEBUG ~ result row: EntityKey[models.Comment#10]
12 10 2010 18:06:36,247 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,247 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,248 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,250 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:36,250 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,251 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,251 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,251 DEBUG ~ Natively generated identity: 12
12 10 2010 18:06:36,251 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,253 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,253 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,253 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:06:36,253 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:06:36,253 DEBUG ~ listing entities:
12 10 2010 18:06:36,253 DEBUG ~ models.User{id=12, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:36,254 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:36,254 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,254 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,254 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,254 DEBUG ~ Natively generated identity: 9
12 10 2010 18:06:36,254 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,254 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,254 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,255 DEBUG ~ Collection found: [models.Post.comments#9], was: [<unreferenced>] (initialized)
12 10 2010 18:06:36,255 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 18:06:36,255 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:06:36,255 DEBUG ~ listing entities:
12 10 2010 18:06:36,255 DEBUG ~ models.User{id=12, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:36,255 DEBUG ~ models.Post{content=hello world, id=9, author=models.User#12, title=first post, comments=[], postedAt=2010-10-12 18:06:36}
12 10 2010 18:06:36,256 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:36,256 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,256 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,256 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,256 DEBUG ~ Natively generated identity: 11
12 10 2010 18:06:36,256 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,256 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,256 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,260 DEBUG ~ Collection found: [models.Post.comments#9], was: [models.Post.comments#9] (initialized)
12 10 2010 18:06:36,260 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 18:06:36,260 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:06:36,260 DEBUG ~ listing entities:
12 10 2010 18:06:36,260 DEBUG ~ models.User{id=12, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:36,260 DEBUG ~ models.Comment{content=nice post, id=11, author=Jeff, post=models.Post#9, postedAt=2010-10-12 18:06:36}
12 10 2010 18:06:36,260 DEBUG ~ models.Post{content=hello world, id=9, author=models.User#12, title=first post, comments=[], postedAt=2010-10-12 18:06:36}
12 10 2010 18:06:36,261 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:36,261 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,261 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,261 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,261 DEBUG ~ Natively generated identity: 12
12 10 2010 18:06:36,261 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,261 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,262 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,262 DEBUG ~ Collection dirty: [models.Post.comments#9]
12 10 2010 18:06:36,262 DEBUG ~ Collection found: [models.Post.comments#9], was: [models.Post.comments#9] (initialized)
12 10 2010 18:06:36,262 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 18:06:36,262 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:06:36,262 DEBUG ~ listing entities:
12 10 2010 18:06:36,262 DEBUG ~ models.User{id=12, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:36,262 DEBUG ~ models.Comment{content=nice post, id=11, author=Jeff, post=models.Post#9, postedAt=2010-10-12 18:06:36}
12 10 2010 18:06:36,262 DEBUG ~ models.Comment{content=i knew that !, id=12, author=Tom, post=models.Post#9, postedAt=2010-10-12 18:06:36}
12 10 2010 18:06:36,263 DEBUG ~ models.Post{content=hello world, id=9, author=models.User#12, title=first post, comments=[models.Comment#11], postedAt=2010-10-12 18:06:36}
12 10 2010 18:06:36,263 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,263 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,263 DEBUG ~ result row: 
12 10 2010 18:06:36,263 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,263 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,264 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,264 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,264 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,264 DEBUG ~ result row: 
12 10 2010 18:06:36,264 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,264 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,264 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,264 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,264 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,264 DEBUG ~ result row: 
12 10 2010 18:06:36,264 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,264 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,264 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,265 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,265 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,265 DEBUG ~ result row: EntityKey[models.Post#9]
12 10 2010 18:06:36,265 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,265 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,265 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,267 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,267 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,267 DEBUG ~ Collection dirty: [models.Post.comments#9]
12 10 2010 18:06:36,267 DEBUG ~ Collection dereferenced: [models.Post.comments#9]
12 10 2010 18:06:36,267 DEBUG ~ Flushed: 0 insertions, 0 updates, 3 deletions to 4 objects
12 10 2010 18:06:36,267 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 1 removals to 1 collections
12 10 2010 18:06:36,267 DEBUG ~ listing entities:
12 10 2010 18:06:36,267 DEBUG ~ models.User{id=12, email=bob@example.com, isAdmin=false, password=secret, fullname=Bob}
12 10 2010 18:06:36,268 DEBUG ~ models.Comment{content=nice post, id=11, author=Jeff, post=models.Post#9, postedAt=2010-10-12 18:06:36}
12 10 2010 18:06:36,268 DEBUG ~ models.Comment{content=i knew that !, id=12, author=Tom, post=models.Post#9, postedAt=2010-10-12 18:06:36}
12 10 2010 18:06:36,268 DEBUG ~ models.Post{content=hello world, id=9, author=models.User#12, title=first post, comments=[models.Comment#11, models.Comment#12], postedAt=2010-10-12 18:06:36}
12 10 2010 18:06:36,268 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,268 DEBUG ~ reusing prepared statement
12 10 2010 18:06:36,268 DEBUG ~ Executing batch size: 2
12 10 2010 18:06:36,268 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,268 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,268 DEBUG ~ Executing batch size: 1
12 10 2010 18:06:36,269 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,270 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,270 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,270 DEBUG ~ result row: 
12 10 2010 18:06:36,270 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,270 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,270 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,270 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,271 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,271 DEBUG ~ result row: 
12 10 2010 18:06:36,271 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,271 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,271 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,271 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,271 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,271 DEBUG ~ result row: 
12 10 2010 18:06:36,271 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,271 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,271 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,286 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:36,286 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,286 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,286 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,286 DEBUG ~ Natively generated identity: 13
12 10 2010 18:06:36,286 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,286 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,286 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,287 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
12 10 2010 18:06:36,287 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:06:36,287 DEBUG ~ listing entities:
12 10 2010 18:06:36,287 DEBUG ~ models.User{id=13, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:06:36,289 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:36,289 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,289 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,289 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,289 DEBUG ~ Natively generated identity: 14
12 10 2010 18:06:36,289 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,289 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,289 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,290 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
12 10 2010 18:06:36,290 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
12 10 2010 18:06:36,290 DEBUG ~ listing entities:
12 10 2010 18:06:36,290 DEBUG ~ models.User{id=13, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:06:36,290 DEBUG ~ models.User{id=14, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:06:36,293 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,293 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,293 DEBUG ~ result row: EntityKey[models.User#13]
12 10 2010 18:06:36,293 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,293 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,293 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,296 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:36,296 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,296 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,296 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,296 DEBUG ~ Natively generated identity: 10
12 10 2010 18:06:36,296 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,296 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,296 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,297 DEBUG ~ Collection found: [models.Post.comments#10], was: [<unreferenced>] (initialized)
12 10 2010 18:06:36,297 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
12 10 2010 18:06:36,297 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
12 10 2010 18:06:36,297 DEBUG ~ listing entities:
12 10 2010 18:06:36,297 DEBUG ~ models.User{id=13, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:06:36,297 DEBUG ~ models.User{id=14, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:06:36,297 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=10, author=models.User#13, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:36,300 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,301 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,301 DEBUG ~ result row: EntityKey[models.User#13]
12 10 2010 18:06:36,301 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,301 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,301 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,304 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:36,304 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,304 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,304 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,304 DEBUG ~ Natively generated identity: 11
12 10 2010 18:06:36,304 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,304 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,305 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,305 DEBUG ~ Collection found: [models.Post.comments#10], was: [models.Post.comments#10] (initialized)
12 10 2010 18:06:36,305 DEBUG ~ Collection found: [models.Post.comments#11], was: [<unreferenced>] (initialized)
12 10 2010 18:06:36,305 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
12 10 2010 18:06:36,305 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 2 collections
12 10 2010 18:06:36,305 DEBUG ~ listing entities:
12 10 2010 18:06:36,305 DEBUG ~ models.User{id=13, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:06:36,306 DEBUG ~ models.Post{content=Well, it's just a test.
, id=11, author=models.User#13, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
12 10 2010 18:06:36,306 DEBUG ~ models.User{id=14, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:06:36,306 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=10, author=models.User#13, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:36,309 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,309 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,309 DEBUG ~ result row: EntityKey[models.User#14]
12 10 2010 18:06:36,310 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,310 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,310 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,312 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:36,312 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,313 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,313 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,313 DEBUG ~ Natively generated identity: 12
12 10 2010 18:06:36,313 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,313 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,314 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,314 DEBUG ~ Collection found: [models.Post.comments#10], was: [models.Post.comments#10] (initialized)
12 10 2010 18:06:36,314 DEBUG ~ Collection found: [models.Post.comments#11], was: [models.Post.comments#11] (initialized)
12 10 2010 18:06:36,314 DEBUG ~ Collection found: [models.Post.comments#12], was: [<unreferenced>] (initialized)
12 10 2010 18:06:36,314 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 5 objects
12 10 2010 18:06:36,314 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 3 collections
12 10 2010 18:06:36,314 DEBUG ~ listing entities:
12 10 2010 18:06:36,314 DEBUG ~ models.User{id=13, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:06:36,315 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=12, author=models.User#14, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
12 10 2010 18:06:36,316 DEBUG ~ models.Post{content=Well, it's just a test.
, id=11, author=models.User#13, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
12 10 2010 18:06:36,316 DEBUG ~ models.User{id=14, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:06:36,316 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=10, author=models.User#13, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:36,319 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,319 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,319 DEBUG ~ result row: EntityKey[models.Post#10]
12 10 2010 18:06:36,319 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,320 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,320 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,322 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:36,322 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,322 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,323 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,323 DEBUG ~ Natively generated identity: 13
12 10 2010 18:06:36,323 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,323 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,324 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,324 DEBUG ~ Collection found: [models.Post.comments#10], was: [models.Post.comments#10] (initialized)
12 10 2010 18:06:36,324 DEBUG ~ Collection found: [models.Post.comments#11], was: [models.Post.comments#11] (initialized)
12 10 2010 18:06:36,324 DEBUG ~ Collection found: [models.Post.comments#12], was: [models.Post.comments#12] (initialized)
12 10 2010 18:06:36,324 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
12 10 2010 18:06:36,324 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
12 10 2010 18:06:36,324 DEBUG ~ listing entities:
12 10 2010 18:06:36,324 DEBUG ~ models.User{id=13, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:06:36,325 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=12, author=models.User#14, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
12 10 2010 18:06:36,325 DEBUG ~ models.Post{content=Well, it's just a test.
, id=11, author=models.User#13, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
12 10 2010 18:06:36,325 DEBUG ~ models.User{id=14, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:06:36,325 DEBUG ~ models.Comment{content=You are right !
, id=13, author=Guest, post=models.Post#10, postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:36,326 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=10, author=models.User#13, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:36,330 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,331 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,331 DEBUG ~ result row: EntityKey[models.Post#10]
12 10 2010 18:06:36,331 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,331 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,331 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,333 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:36,333 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,333 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,333 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,334 DEBUG ~ Natively generated identity: 14
12 10 2010 18:06:36,334 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,334 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,334 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,334 DEBUG ~ Collection found: [models.Post.comments#10], was: [models.Post.comments#10] (initialized)
12 10 2010 18:06:36,335 DEBUG ~ Collection found: [models.Post.comments#11], was: [models.Post.comments#11] (initialized)
12 10 2010 18:06:36,335 DEBUG ~ Collection found: [models.Post.comments#12], was: [models.Post.comments#12] (initialized)
12 10 2010 18:06:36,335 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 7 objects
12 10 2010 18:06:36,335 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
12 10 2010 18:06:36,335 DEBUG ~ listing entities:
12 10 2010 18:06:36,335 DEBUG ~ models.User{id=13, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:06:36,335 DEBUG ~ models.User{id=14, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:06:36,335 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=10, author=models.User#13, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:36,335 DEBUG ~ models.Comment{content=You are right !
, id=13, author=Guest, post=models.Post#10, postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:36,336 DEBUG ~ models.Comment{content=I knew that ...
, id=14, author=Mike, post=models.Post#10, postedAt=2009-06-15 09:00:00}
12 10 2010 18:06:36,336 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=12, author=models.User#14, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
12 10 2010 18:06:36,336 DEBUG ~ models.Post{content=Well, it's just a test.
, id=11, author=models.User#13, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
12 10 2010 18:06:36,345 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,346 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,346 DEBUG ~ result row: EntityKey[models.Post#11]
12 10 2010 18:06:36,346 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,346 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,346 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,348 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:36,348 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,348 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,349 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,349 DEBUG ~ Natively generated identity: 15
12 10 2010 18:06:36,349 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,349 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,349 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,350 DEBUG ~ Collection found: [models.Post.comments#10], was: [models.Post.comments#10] (initialized)
12 10 2010 18:06:36,350 DEBUG ~ Collection found: [models.Post.comments#11], was: [models.Post.comments#11] (initialized)
12 10 2010 18:06:36,351 DEBUG ~ Collection found: [models.Post.comments#12], was: [models.Post.comments#12] (initialized)
12 10 2010 18:06:36,351 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
12 10 2010 18:06:36,351 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
12 10 2010 18:06:36,351 DEBUG ~ listing entities:
12 10 2010 18:06:36,351 DEBUG ~ models.User{id=13, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:06:36,351 DEBUG ~ models.User{id=14, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:06:36,351 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=10, author=models.User#13, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:36,351 DEBUG ~ models.Comment{content=You are right !
, id=13, author=Guest, post=models.Post#10, postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:36,352 DEBUG ~ models.Comment{content=This post is useless ?
, id=15, author=Tom, post=models.Post#11, postedAt=2009-04-05 09:00:00}
12 10 2010 18:06:36,352 DEBUG ~ models.Comment{content=I knew that ...
, id=14, author=Mike, post=models.Post#10, postedAt=2009-06-15 09:00:00}
12 10 2010 18:06:36,353 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=12, author=models.User#14, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
12 10 2010 18:06:36,353 DEBUG ~ models.Post{content=Well, it's just a test.
, id=11, author=models.User#13, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
12 10 2010 18:06:36,354 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,354 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,354 DEBUG ~ result row: 
12 10 2010 18:06:36,354 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,354 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,354 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,355 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,355 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,355 DEBUG ~ result row: 
12 10 2010 18:06:36,355 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,355 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,355 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,355 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,356 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,356 DEBUG ~ result row: 
12 10 2010 18:06:36,356 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,356 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,356 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,356 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,356 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,357 DEBUG ~ result row: EntityKey[models.User#13]
12 10 2010 18:06:36,357 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,357 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,357 DEBUG ~ resolving associations for [models.User#13]
12 10 2010 18:06:36,357 DEBUG ~ done materializing entity [models.User#13]
12 10 2010 18:06:36,357 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,357 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,357 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,357 DEBUG ~ result row: EntityKey[models.User#14]
12 10 2010 18:06:36,358 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,358 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,358 DEBUG ~ resolving associations for [models.User#14]
12 10 2010 18:06:36,358 DEBUG ~ done materializing entity [models.User#14]
12 10 2010 18:06:36,358 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,358 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,358 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,358 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,358 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,358 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,359 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,359 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,359 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,359 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,359 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,359 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,359 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,360 DEBUG ~ result row: EntityKey[models.Post#10]
12 10 2010 18:06:36,360 DEBUG ~ result row: EntityKey[models.Post#11]
12 10 2010 18:06:36,360 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,360 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,360 DEBUG ~ resolving associations for [models.Post#10]
12 10 2010 18:06:36,360 DEBUG ~ done materializing entity [models.Post#10]
12 10 2010 18:06:36,360 DEBUG ~ resolving associations for [models.Post#11]
12 10 2010 18:06:36,360 DEBUG ~ done materializing entity [models.Post#11]
12 10 2010 18:06:36,360 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,360 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,361 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,361 DEBUG ~ result row: EntityKey[models.Comment#13]
12 10 2010 18:06:36,361 DEBUG ~ result row: EntityKey[models.Comment#14]
12 10 2010 18:06:36,361 DEBUG ~ result row: EntityKey[models.Comment#15]
12 10 2010 18:06:36,361 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,361 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,361 DEBUG ~ resolving associations for [models.Comment#13]
12 10 2010 18:06:36,361 DEBUG ~ done materializing entity [models.Comment#13]
12 10 2010 18:06:36,361 DEBUG ~ resolving associations for [models.Comment#14]
12 10 2010 18:06:36,361 DEBUG ~ done materializing entity [models.Comment#14]
12 10 2010 18:06:36,361 DEBUG ~ resolving associations for [models.Comment#15]
12 10 2010 18:06:36,362 DEBUG ~ done materializing entity [models.Comment#15]
12 10 2010 18:06:36,362 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,362 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,362 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,362 DEBUG ~ result row: EntityKey[models.Post#10]
12 10 2010 18:06:36,362 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,362 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,362 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,362 DEBUG ~ loading collection: [models.Post.comments#10]
12 10 2010 18:06:36,362 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,363 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,363 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#10]
12 10 2010 18:06:36,363 DEBUG ~ result row: EntityKey[models.Comment#13]
12 10 2010 18:06:36,363 DEBUG ~ found row of collection: [models.Post.comments#10]
12 10 2010 18:06:36,363 DEBUG ~ result row: EntityKey[models.Comment#14]
12 10 2010 18:06:36,363 DEBUG ~ found row of collection: [models.Post.comments#10]
12 10 2010 18:06:36,363 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,363 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,363 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
12 10 2010 18:06:36,363 DEBUG ~ collection fully initialized: [models.Post.comments#10]
12 10 2010 18:06:36,363 DEBUG ~ 1 collections initialized for role: models.Post.comments
12 10 2010 18:06:36,363 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,363 DEBUG ~ done loading collection
12 10 2010 18:06:36,363 DEBUG ~ executing identity-insert immediately
12 10 2010 18:06:36,363 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,363 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,364 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,364 DEBUG ~ Natively generated identity: 16
12 10 2010 18:06:36,364 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,364 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,364 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,365 DEBUG ~ Collection found: [models.Post.comments#10], was: [models.Post.comments#10] (initialized)
12 10 2010 18:06:36,365 DEBUG ~ Collection found: [models.Post.comments#11], was: [models.Post.comments#11] (uninitialized)
12 10 2010 18:06:36,365 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
12 10 2010 18:06:36,365 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
12 10 2010 18:06:36,365 DEBUG ~ listing entities:
12 10 2010 18:06:36,365 DEBUG ~ models.User{id=13, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:06:36,365 DEBUG ~ models.User{id=14, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:06:36,365 DEBUG ~ models.Comment{content=You are right !
, id=13, author=Guest, post=models.Post#10, postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:36,365 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=10, author=models.User#13, title=About the model layer, comments=[models.Comment#13, models.Comment#14], postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:36,366 DEBUG ~ models.Comment{content=This post is useless ?
, id=15, author=Tom, post=models.Post#11, postedAt=2009-04-05 09:00:00}
12 10 2010 18:06:36,366 DEBUG ~ models.Comment{content=I knew that ...
, id=14, author=Mike, post=models.Post#10, postedAt=2009-06-15 09:00:00}
12 10 2010 18:06:36,366 DEBUG ~ models.Comment{content=Hello guys, id=16, author=Jim, post=models.Post#10, postedAt=2010-10-12 18:06:36}
12 10 2010 18:06:36,366 DEBUG ~ models.Post{content=Well, it's just a test.
, id=11, author=models.User#13, title=Just a test of YABE, comments=<uninitialized>, postedAt=2009-03-25 09:00:00}
12 10 2010 18:06:36,367 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
12 10 2010 18:06:36,367 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
12 10 2010 18:06:36,367 DEBUG ~ result row: 
12 10 2010 18:06:36,367 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
12 10 2010 18:06:36,367 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
12 10 2010 18:06:36,367 DEBUG ~ initializing non-lazy collections
12 10 2010 18:06:36,375 DEBUG ~ commit
12 10 2010 18:06:36,375 DEBUG ~ processing flush-time cascades
12 10 2010 18:06:36,376 DEBUG ~ dirty checking collections
12 10 2010 18:06:36,376 DEBUG ~ Collection dirty: [models.Post.comments#10]
12 10 2010 18:06:36,376 DEBUG ~ Collection found: [models.Post.comments#10], was: [models.Post.comments#10] (initialized)
12 10 2010 18:06:36,377 DEBUG ~ Collection found: [models.Post.comments#11], was: [models.Post.comments#11] (uninitialized)
12 10 2010 18:06:36,382 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
12 10 2010 18:06:36,382 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
12 10 2010 18:06:36,382 DEBUG ~ listing entities:
12 10 2010 18:06:36,382 DEBUG ~ models.User{id=13, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
12 10 2010 18:06:36,382 DEBUG ~ models.User{id=14, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
12 10 2010 18:06:36,382 DEBUG ~ models.Comment{content=You are right !
, id=13, author=Guest, post=models.Post#10, postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:36,382 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=10, author=models.User#13, title=About the model layer, comments=[models.Comment#13, models.Comment#14, models.Comment#16], postedAt=2009-06-14 09:00:00}
12 10 2010 18:06:36,382 DEBUG ~ models.Comment{content=This post is useless ?
, id=15, author=Tom, post=models.Post#11, postedAt=2009-04-05 09:00:00}
12 10 2010 18:06:36,383 DEBUG ~ models.Comment{content=I knew that ...
, id=14, author=Mike, post=models.Post#10, postedAt=2009-06-15 09:00:00}
12 10 2010 18:06:36,383 DEBUG ~ models.Comment{content=Hello guys, id=16, author=Jim, post=models.Post#10, postedAt=2010-10-12 18:06:36}
12 10 2010 18:06:36,383 DEBUG ~ models.Post{content=Well, it's just a test.
, id=11, author=models.User#13, title=Just a test of YABE, comments=<uninitialized>, postedAt=2009-03-25 09:00:00}
12 10 2010 18:06:36,383 DEBUG ~ re-enabling autocommit
12 10 2010 18:06:36,383 DEBUG ~ committed JDBC Connection
12 10 2010 18:06:36,383 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 18:06:36,383 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
12 10 2010 18:06:36,396 DEBUG ~ opened session at timestamp: 12868743963
12 10 2010 18:06:36,396 DEBUG ~ begin
12 10 2010 18:06:36,396 DEBUG ~ opening JDBC connection
12 10 2010 18:06:36,396 DEBUG ~ current autocommit status: true
12 10 2010 18:06:36,396 DEBUG ~ disabling autocommit
12 10 2010 18:06:36,399 DEBUG ~ commit
12 10 2010 18:06:36,429 DEBUG ~ re-enabling autocommit
12 10 2010 18:06:36,429 DEBUG ~ committed JDBC Connection
12 10 2010 18:06:36,429 DEBUG ~ aggressively releasing JDBC connection
12 10 2010 18:06:36,429 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
