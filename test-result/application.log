15 10 2010 15:22:47,441 INFO  ~ Starting D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog
15 10 2010 15:22:47,446 INFO  ~ Module scala is available (D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3)
15 10 2010 15:22:48,600 INFO  ~ 
15 10 2010 15:22:48,600 INFO  ~ Go to http://localhost:9000/@tests to run the tests
15 10 2010 15:22:48,600 INFO  ~ 
15 10 2010 15:22:48,600 WARN  ~ You're running Play! in DEV mode
15 10 2010 15:22:48,682 INFO  ~ Listening for HTTP on port 9000 (Waiting a first request to start) ...
15 10 2010 15:23:03,737 DEBUG ~ Creating new CacheManager with default config
15 10 2010 15:23:03,739 DEBUG ~ Configuring ehcache from classpath.
15 10 2010 15:23:03,742 DEBUG ~ Configuring ehcache from ehcache.xml found in the classpath: jar:file:/D:/cygwin/home/yuji-okazawa/work/j/play-1.1-beta2/framework/play.jar!/ehcache.xml
15 10 2010 15:23:03,743 DEBUG ~ Configuring ehcache from URL: jar:file:/D:/cygwin/home/yuji-okazawa/work/j/play-1.1-beta2/framework/play.jar!/ehcache.xml
15 10 2010 15:23:03,743 DEBUG ~ Configuring ehcache from InputStream
15 10 2010 15:23:03,777 DEBUG ~ Ignoring ehcache attribute xmlns:xsi
15 10 2010 15:23:03,777 DEBUG ~ Ignoring ehcache attribute xsi:noNamespaceSchemaLocation
15 10 2010 15:23:03,779 DEBUG ~ Disk Store Path: C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\
15 10 2010 15:23:03,793 DEBUG ~ propertiesString is null.
15 10 2010 15:23:03,795 DEBUG ~ No disk store path defined. Skipping disk store path conflict test.
15 10 2010 15:23:03,795 DEBUG ~ No CacheManagerEventListenerFactory class specified. Skipping...
15 10 2010 15:23:03,809 DEBUG ~ No BootstrapCacheLoaderFactory class specified. Skipping...
15 10 2010 15:23:03,809 DEBUG ~ CacheWriter factory not configured. Skipping...
15 10 2010 15:23:03,809 DEBUG ~ No CacheExceptionHandlerFactory class specified. Skipping...
15 10 2010 15:23:03,818 DEBUG ~ Initialized net.sf.ehcache.store.MemoryStore for play
15 10 2010 15:23:03,820 DEBUG ~ Initialised cache: play
15 10 2010 15:23:04,130 INFO  ~ Connected to jdbc:hsqldb:mem:playembed
15 10 2010 15:23:04,245 INFO  ~ Hibernate Annotations 3.5.3-Final
15 10 2010 15:23:04,258 INFO  ~ Hibernate 3.5.3-Final
15 10 2010 15:23:04,260 INFO  ~ hibernate.properties not found
15 10 2010 15:23:04,263 INFO  ~ Bytecode provider name : javassist
15 10 2010 15:23:04,267 INFO  ~ using JDK 1.4 java.sql.Timestamp handling
15 10 2010 15:23:04,336 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
15 10 2010 15:23:04,339 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
15 10 2010 15:23:04,339 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
15 10 2010 15:23:04,340 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
15 10 2010 15:23:04,341 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
15 10 2010 15:23:04,342 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
15 10 2010 15:23:04,343 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
15 10 2010 15:23:04,344 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
15 10 2010 15:23:04,344 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
15 10 2010 15:23:04,345 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
15 10 2010 15:23:04,345 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
15 10 2010 15:23:04,346 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
15 10 2010 15:23:04,347 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
15 10 2010 15:23:04,349 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
15 10 2010 15:23:04,356 INFO  ~ Hibernate Commons Annotations 3.2.0.Final
15 10 2010 15:23:04,363 INFO  ~ Hibernate EntityManager 3.5.3-Final
15 10 2010 15:23:04,364 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
15 10 2010 15:23:04,364 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
15 10 2010 15:23:04,364 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
15 10 2010 15:23:04,364 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
15 10 2010 15:23:04,364 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
15 10 2010 15:23:04,364 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
15 10 2010 15:23:04,364 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
15 10 2010 15:23:04,364 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
15 10 2010 15:23:04,365 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
15 10 2010 15:23:04,365 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
15 10 2010 15:23:04,365 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
15 10 2010 15:23:04,365 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
15 10 2010 15:23:04,365 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
15 10 2010 15:23:04,365 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
15 10 2010 15:23:04,399 DEBUG ~ Execute first pass mapping processing
15 10 2010 15:23:04,437 DEBUG ~ Process hbm files
15 10 2010 15:23:04,437 DEBUG ~ Process annotated classes
15 10 2010 15:23:04,448 INFO  ~ Binding entity from annotated class: models.Comment
15 10 2010 15:23:04,458 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
15 10 2010 15:23:04,461 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
15 10 2010 15:23:04,477 DEBUG ~ Import with entity name Comment
15 10 2010 15:23:04,482 INFO  ~ Bind entity models.Comment on table Comment
15 10 2010 15:23:04,518 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=id, insertable=true, updatable=true, unique=false}
15 10 2010 15:23:04,522 DEBUG ~ binding property id with lazy=false
15 10 2010 15:23:04,523 DEBUG ~ building SimpleValue for id
15 10 2010 15:23:04,525 DEBUG ~ Building property id
15 10 2010 15:23:04,528 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=author, insertable=true, updatable=true, unique=false}
15 10 2010 15:23:04,528 DEBUG ~ binding property author with lazy=false
15 10 2010 15:23:04,528 DEBUG ~ building SimpleValue for author
15 10 2010 15:23:04,528 DEBUG ~ Building property author
15 10 2010 15:23:04,528 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=content, insertable=true, updatable=true, unique=false}
15 10 2010 15:23:04,529 DEBUG ~ binding property content with lazy=false
15 10 2010 15:23:04,557 DEBUG ~ building SimpleValue for content
15 10 2010 15:23:04,557 DEBUG ~ Building property content
15 10 2010 15:23:04,558 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
15 10 2010 15:23:04,558 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=post, insertable=true, updatable=true, unique=false}
15 10 2010 15:23:04,562 DEBUG ~ Building property post
15 10 2010 15:23:04,563 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
15 10 2010 15:23:04,563 DEBUG ~ binding property postedAt with lazy=false
15 10 2010 15:23:04,563 DEBUG ~ building SimpleValue for postedAt
15 10 2010 15:23:04,563 DEBUG ~ Building property postedAt
15 10 2010 15:23:04,565 INFO  ~ Binding entity from annotated class: models.User
15 10 2010 15:23:04,565 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
15 10 2010 15:23:04,565 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
15 10 2010 15:23:04,565 DEBUG ~ Import with entity name User
15 10 2010 15:23:04,565 INFO  ~ Bind entity models.User on table User
15 10 2010 15:23:04,567 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
15 10 2010 15:23:04,567 DEBUG ~ binding property id with lazy=false
15 10 2010 15:23:04,568 DEBUG ~ building SimpleValue for id
15 10 2010 15:23:04,568 DEBUG ~ Building property id
15 10 2010 15:23:04,568 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
15 10 2010 15:23:04,568 DEBUG ~ binding property email with lazy=false
15 10 2010 15:23:04,568 DEBUG ~ building SimpleValue for email
15 10 2010 15:23:04,568 DEBUG ~ Building property email
15 10 2010 15:23:04,568 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
15 10 2010 15:23:04,569 DEBUG ~ binding property fullname with lazy=false
15 10 2010 15:23:04,569 DEBUG ~ building SimpleValue for fullname
15 10 2010 15:23:04,570 DEBUG ~ Building property fullname
15 10 2010 15:23:04,570 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
15 10 2010 15:23:04,570 DEBUG ~ binding property isAdmin with lazy=false
15 10 2010 15:23:04,571 DEBUG ~ building SimpleValue for isAdmin
15 10 2010 15:23:04,571 DEBUG ~ Building property isAdmin
15 10 2010 15:23:04,571 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
15 10 2010 15:23:04,571 DEBUG ~ binding property password with lazy=false
15 10 2010 15:23:04,571 DEBUG ~ building SimpleValue for password
15 10 2010 15:23:04,571 DEBUG ~ Building property password
15 10 2010 15:23:04,571 INFO  ~ Binding entity from annotated class: models.Post
15 10 2010 15:23:04,572 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
15 10 2010 15:23:04,572 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
15 10 2010 15:23:04,572 DEBUG ~ Import with entity name Post
15 10 2010 15:23:04,573 INFO  ~ Bind entity models.Post on table Post
15 10 2010 15:23:04,580 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=id, insertable=true, updatable=true, unique=false}
15 10 2010 15:23:04,580 DEBUG ~ binding property id with lazy=false
15 10 2010 15:23:04,580 DEBUG ~ building SimpleValue for id
15 10 2010 15:23:04,580 DEBUG ~ Building property id
15 10 2010 15:23:04,580 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
15 10 2010 15:23:04,580 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=author, insertable=true, updatable=true, unique=false}
15 10 2010 15:23:04,581 DEBUG ~ Building property author
15 10 2010 15:23:04,581 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
15 10 2010 15:23:04,581 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments, insertable=true, updatable=true, unique=false}
15 10 2010 15:23:04,582 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=null, insertable=true, updatable=true, unique=false}
15 10 2010 15:23:04,596 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=element, insertable=true, updatable=true, unique=false}
15 10 2010 15:23:04,596 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments_KEY, insertable=true, updatable=true, unique=false}
15 10 2010 15:23:04,597 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='comments_KEY', referencedColumn='null', mappedBy='null'}
15 10 2010 15:23:04,598 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
15 10 2010 15:23:04,598 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
15 10 2010 15:23:04,599 DEBUG ~ Collection role: models.Post.comments
15 10 2010 15:23:04,602 DEBUG ~ Building property comments
15 10 2010 15:23:04,602 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=content, insertable=true, updatable=true, unique=false}
15 10 2010 15:23:04,602 DEBUG ~ binding property content with lazy=false
15 10 2010 15:23:04,603 DEBUG ~ building SimpleValue for content
15 10 2010 15:23:04,603 DEBUG ~ Building property content
15 10 2010 15:23:04,603 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
15 10 2010 15:23:04,603 DEBUG ~ binding property postedAt with lazy=false
15 10 2010 15:23:04,603 DEBUG ~ building SimpleValue for postedAt
15 10 2010 15:23:04,603 DEBUG ~ Building property postedAt
15 10 2010 15:23:04,604 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=title, insertable=true, updatable=true, unique=false}
15 10 2010 15:23:04,605 DEBUG ~ binding property title with lazy=false
15 10 2010 15:23:04,605 DEBUG ~ building SimpleValue for title
15 10 2010 15:23:04,605 DEBUG ~ Building property title
15 10 2010 15:23:04,606 DEBUG ~ setting SimpleValue typeName for id
15 10 2010 15:23:04,606 DEBUG ~ setting SimpleValue typeName for author
15 10 2010 15:23:04,606 DEBUG ~ setting SimpleValue typeName for content
15 10 2010 15:23:04,606 DEBUG ~ setting SimpleValue typeName for postedAt
15 10 2010 15:23:04,606 DEBUG ~ setting SimpleValue typeName for id
15 10 2010 15:23:04,606 DEBUG ~ setting SimpleValue typeName for email
15 10 2010 15:23:04,607 DEBUG ~ setting SimpleValue typeName for fullname
15 10 2010 15:23:04,607 DEBUG ~ setting SimpleValue typeName for isAdmin
15 10 2010 15:23:04,607 DEBUG ~ setting SimpleValue typeName for password
15 10 2010 15:23:04,607 DEBUG ~ setting SimpleValue typeName for id
15 10 2010 15:23:04,607 DEBUG ~ setting SimpleValue typeName for content
15 10 2010 15:23:04,607 DEBUG ~ setting SimpleValue typeName for postedAt
15 10 2010 15:23:04,607 DEBUG ~ setting SimpleValue typeName for title
15 10 2010 15:23:04,609 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
15 10 2010 15:23:04,625 DEBUG ~ processing extends queue
15 10 2010 15:23:04,626 DEBUG ~ processing collection mappings
15 10 2010 15:23:04,626 DEBUG ~ Second pass for collection: models.Post.comments
15 10 2010 15:23:04,627 DEBUG ~ Binding a OneToMany: models.Post.comments through a foreign key
15 10 2010 15:23:04,627 INFO  ~ Mapping collection: models.Post.comments -> Comment
15 10 2010 15:23:04,629 DEBUG ~ Retrieving property models.Comment.post
15 10 2010 15:23:04,629 DEBUG ~ Mapped collection key: post_id, one-to-many: models.Comment
15 10 2010 15:23:04,629 DEBUG ~ processing native query and ResultSetMapping mappings
15 10 2010 15:23:04,629 DEBUG ~ processing association property references
15 10 2010 15:23:04,629 DEBUG ~ processing foreign key constraints
15 10 2010 15:23:04,629 DEBUG ~ resolving reference to class: models.Post
15 10 2010 15:23:04,630 DEBUG ~ resolving reference to class: models.User
15 10 2010 15:23:04,635 INFO  ~ Hibernate Validator not found: ignoring
15 10 2010 15:23:04,657 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
15 10 2010 15:23:04,661 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
15 10 2010 15:23:04,664 DEBUG ~ Search not present in classpath, ignoring event listener registration.
15 10 2010 15:23:04,664 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
15 10 2010 15:23:04,664 DEBUG ~ Preparing to build session factory with filters : {}
15 10 2010 15:23:04,665 DEBUG ~ Execute first pass mapping processing
15 10 2010 15:23:04,665 DEBUG ~ Process hbm files
15 10 2010 15:23:04,665 DEBUG ~ Process annotated classes
15 10 2010 15:23:04,665 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
15 10 2010 15:23:04,665 DEBUG ~ processing extends queue
15 10 2010 15:23:04,665 DEBUG ~ processing collection mappings
15 10 2010 15:23:04,665 DEBUG ~ processing native query and ResultSetMapping mappings
15 10 2010 15:23:04,665 DEBUG ~ processing association property references
15 10 2010 15:23:04,665 DEBUG ~ processing foreign key constraints
15 10 2010 15:23:04,665 DEBUG ~ resolving reference to class: models.Post
15 10 2010 15:23:04,665 DEBUG ~ resolving reference to class: models.User
15 10 2010 15:23:04,671 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
15 10 2010 15:23:04,674 INFO  ~ Using provided datasource
15 10 2010 15:23:04,695 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
15 10 2010 15:23:04,695 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
15 10 2010 15:23:04,716 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
15 10 2010 15:23:04,721 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
15 10 2010 15:23:04,724 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
15 10 2010 15:23:04,725 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
15 10 2010 15:23:04,725 INFO  ~ Automatic flush during beforeCompletion(): disabled
15 10 2010 15:23:04,726 INFO  ~ Automatic session close at end of transaction: disabled
15 10 2010 15:23:04,726 INFO  ~ JDBC batch size: 15
15 10 2010 15:23:04,726 INFO  ~ JDBC batch updates for versioned data: disabled
15 10 2010 15:23:04,726 INFO  ~ Scrollable result sets: enabled
15 10 2010 15:23:04,727 DEBUG ~ Wrap result sets: disabled
15 10 2010 15:23:04,727 INFO  ~ JDBC3 getGeneratedKeys(): disabled
15 10 2010 15:23:04,727 INFO  ~ Connection release mode: auto
15 10 2010 15:23:04,727 INFO  ~ Default batch fetch size: 1
15 10 2010 15:23:04,727 INFO  ~ Generate SQL with comments: disabled
15 10 2010 15:23:04,727 INFO  ~ Order SQL updates by primary key: disabled
15 10 2010 15:23:04,728 INFO  ~ Order SQL inserts for batching: disabled
15 10 2010 15:23:04,728 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
15 10 2010 15:23:04,729 INFO  ~ Using ASTQueryTranslatorFactory
15 10 2010 15:23:04,730 INFO  ~ Query language substitutions: {}
15 10 2010 15:23:04,730 INFO  ~ JPA-QL strict compliance: enabled
15 10 2010 15:23:04,730 INFO  ~ Second-level cache: enabled
15 10 2010 15:23:04,730 INFO  ~ Query cache: disabled
15 10 2010 15:23:04,730 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
15 10 2010 15:23:04,730 INFO  ~ Optimize cache for minimal puts: disabled
15 10 2010 15:23:04,730 INFO  ~ Structured second-level cache entries: disabled
15 10 2010 15:23:04,734 INFO  ~ Statistics: disabled
15 10 2010 15:23:04,734 INFO  ~ Deleted entity synthetic identifier rollback: disabled
15 10 2010 15:23:04,734 INFO  ~ Default entity-mode: pojo
15 10 2010 15:23:04,735 INFO  ~ Named query checking : enabled
15 10 2010 15:23:04,735 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
15 10 2010 15:23:04,761 INFO  ~ building session factory
15 10 2010 15:23:04,766 DEBUG ~ Session factory constructed with filter configurations : {}
15 10 2010 15:23:04,766 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
15 10 2010 15:23:04,767 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:23:04,767 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:23:04,768 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:23:04,855 DEBUG ~ Static SQL for entity: models.Comment
15 10 2010 15:23:04,855 DEBUG ~  Version select: select id from Comment where id =?
15 10 2010 15:23:04,855 DEBUG ~  Snapshot select: select comment_.id, comment_.author as author0_, comment_.content as content0_, comment_.post_id as post5_0_, comment_.postedAt as postedAt0_ from Comment comment_ where comment_.id=?
15 10 2010 15:23:04,855 DEBUG ~  Insert 0: insert into Comment (author, content, post_id, postedAt, id) values (?, ?, ?, ?, ?)
15 10 2010 15:23:04,855 DEBUG ~  Update 0: update Comment set author=?, content=?, post_id=?, postedAt=? where id=?
15 10 2010 15:23:04,855 DEBUG ~  Delete 0: delete from Comment where id=?
15 10 2010 15:23:04,855 DEBUG ~  Identity insert: insert into Comment (id, author, content, post_id, postedAt) values (null, ?, ?, ?, ?)
15 10 2010 15:23:04,866 DEBUG ~ Static SQL for entity: models.Post
15 10 2010 15:23:04,866 DEBUG ~  Version select: select id from Post where id =?
15 10 2010 15:23:04,866 DEBUG ~  Snapshot select: select post_.id, post_.author_id as author5_2_, post_.content as content2_, post_.postedAt as postedAt2_, post_.title as title2_ from Post post_ where post_.id=?
15 10 2010 15:23:04,866 DEBUG ~  Insert 0: insert into Post (author_id, content, postedAt, title, id) values (?, ?, ?, ?, ?)
15 10 2010 15:23:04,866 DEBUG ~  Update 0: update Post set author_id=?, content=?, postedAt=?, title=? where id=?
15 10 2010 15:23:04,866 DEBUG ~  Delete 0: delete from Post where id=?
15 10 2010 15:23:04,866 DEBUG ~  Identity insert: insert into Post (id, author_id, content, postedAt, title) values (null, ?, ?, ?, ?)
15 10 2010 15:23:04,875 DEBUG ~ Static SQL for entity: models.User
15 10 2010 15:23:04,875 DEBUG ~  Version select: select id from User where id =?
15 10 2010 15:23:04,875 DEBUG ~  Snapshot select: select user_.id, user_.email as email1_, user_.fullname as fullname1_, user_.isAdmin as isAdmin1_, user_.password as password1_ from User user_ where user_.id=?
15 10 2010 15:23:04,875 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
15 10 2010 15:23:04,875 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
15 10 2010 15:23:04,875 DEBUG ~  Delete 0: delete from User where id=?
15 10 2010 15:23:04,875 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
15 10 2010 15:23:04,888 DEBUG ~ Static SQL for collection: models.Post.comments
15 10 2010 15:23:04,888 DEBUG ~  Row insert: update Comment set post_id=? where id=?
15 10 2010 15:23:04,888 DEBUG ~  Row delete: update Comment set post_id=null where post_id=? and id=?
15 10 2010 15:23:04,888 DEBUG ~  One-shot delete: update Comment set post_id=null where post_id=?
15 10 2010 15:23:04,942 DEBUG ~ Static select for entity models.Comment [NONE]: select comment0_.id as id0_2_, comment0_.author as author0_2_, comment0_.content as content0_2_, comment0_.post_id as post5_0_2_, comment0_.postedAt as postedAt0_2_, post1_.id as id2_0_, post1_.author_id as author5_2_0_, post1_.content as content2_0_, post1_.postedAt as postedAt2_0_, post1_.title as title2_0_, user2_.id as id1_1_, user2_.email as email1_1_, user2_.fullname as fullname1_1_, user2_.isAdmin as isAdmin1_1_, user2_.password as password1_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
15 10 2010 15:23:04,943 DEBUG ~ Static select for entity models.Comment [READ]: select comment0_.id as id0_2_, comment0_.author as author0_2_, comment0_.content as content0_2_, comment0_.post_id as post5_0_2_, comment0_.postedAt as postedAt0_2_, post1_.id as id2_0_, post1_.author_id as author5_2_0_, post1_.content as content2_0_, post1_.postedAt as postedAt2_0_, post1_.title as title2_0_, user2_.id as id1_1_, user2_.email as email1_1_, user2_.fullname as fullname1_1_, user2_.isAdmin as isAdmin1_1_, user2_.password as password1_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
15 10 2010 15:23:04,943 DEBUG ~ Static select for entity models.Comment [UPGRADE]: select comment0_.id as id0_0_, comment0_.author as author0_0_, comment0_.content as content0_0_, comment0_.post_id as post5_0_0_, comment0_.postedAt as postedAt0_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:23:04,943 DEBUG ~ Static select for entity models.Comment [UPGRADE_NOWAIT]: select comment0_.id as id0_0_, comment0_.author as author0_0_, comment0_.content as content0_0_, comment0_.post_id as post5_0_0_, comment0_.postedAt as postedAt0_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:23:04,943 DEBUG ~ Static select for entity models.Comment [FORCE]: select comment0_.id as id0_0_, comment0_.author as author0_0_, comment0_.content as content0_0_, comment0_.post_id as post5_0_0_, comment0_.postedAt as postedAt0_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:23:04,944 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_READ]: select comment0_.id as id0_0_, comment0_.author as author0_0_, comment0_.content as content0_0_, comment0_.post_id as post5_0_0_, comment0_.postedAt as postedAt0_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:23:04,944 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_WRITE]: select comment0_.id as id0_0_, comment0_.author as author0_0_, comment0_.content as content0_0_, comment0_.post_id as post5_0_0_, comment0_.postedAt as postedAt0_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:23:04,944 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_FORCE_INCREMENT]: select comment0_.id as id0_0_, comment0_.author as author0_0_, comment0_.content as content0_0_, comment0_.post_id as post5_0_0_, comment0_.postedAt as postedAt0_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:23:04,944 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC]: select comment0_.id as id0_2_, comment0_.author as author0_2_, comment0_.content as content0_2_, comment0_.post_id as post5_0_2_, comment0_.postedAt as postedAt0_2_, post1_.id as id2_0_, post1_.author_id as author5_2_0_, post1_.content as content2_0_, post1_.postedAt as postedAt2_0_, post1_.title as title2_0_, user2_.id as id1_1_, user2_.email as email1_1_, user2_.fullname as fullname1_1_, user2_.isAdmin as isAdmin1_1_, user2_.password as password1_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
15 10 2010 15:23:04,945 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC_FORCE_INCREMENT]: select comment0_.id as id0_2_, comment0_.author as author0_2_, comment0_.content as content0_2_, comment0_.post_id as post5_0_2_, comment0_.postedAt as postedAt0_2_, post1_.id as id2_0_, post1_.author_id as author5_2_0_, post1_.content as content2_0_, post1_.postedAt as postedAt2_0_, post1_.title as title2_0_, user2_.id as id1_1_, user2_.email as email1_1_, user2_.fullname as fullname1_1_, user2_.isAdmin as isAdmin1_1_, user2_.password as password1_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
15 10 2010 15:23:04,951 DEBUG ~ Static select for action ACTION_MERGE on entity models.Comment: select comment0_.id as id0_0_, comment0_.author as author0_0_, comment0_.content as content0_0_, comment0_.post_id as post5_0_0_, comment0_.postedAt as postedAt0_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:23:04,952 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Comment: select comment0_.id as id0_0_, comment0_.author as author0_0_, comment0_.content as content0_0_, comment0_.post_id as post5_0_0_, comment0_.postedAt as postedAt0_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:23:04,953 DEBUG ~ Static select for entity models.Post [NONE]: select post0_.id as id2_1_, post0_.author_id as author5_2_1_, post0_.content as content2_1_, post0_.postedAt as postedAt2_1_, post0_.title as title2_1_, user1_.id as id1_0_, user1_.email as email1_0_, user1_.fullname as fullname1_0_, user1_.isAdmin as isAdmin1_0_, user1_.password as password1_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
15 10 2010 15:23:04,954 DEBUG ~ Static select for entity models.Post [READ]: select post0_.id as id2_1_, post0_.author_id as author5_2_1_, post0_.content as content2_1_, post0_.postedAt as postedAt2_1_, post0_.title as title2_1_, user1_.id as id1_0_, user1_.email as email1_0_, user1_.fullname as fullname1_0_, user1_.isAdmin as isAdmin1_0_, user1_.password as password1_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
15 10 2010 15:23:04,954 DEBUG ~ Static select for entity models.Post [UPGRADE]: select post0_.id as id2_0_, post0_.author_id as author5_2_0_, post0_.content as content2_0_, post0_.postedAt as postedAt2_0_, post0_.title as title2_0_ from Post post0_ where post0_.id=?
15 10 2010 15:23:04,954 DEBUG ~ Static select for entity models.Post [UPGRADE_NOWAIT]: select post0_.id as id2_0_, post0_.author_id as author5_2_0_, post0_.content as content2_0_, post0_.postedAt as postedAt2_0_, post0_.title as title2_0_ from Post post0_ where post0_.id=?
15 10 2010 15:23:04,954 DEBUG ~ Static select for entity models.Post [FORCE]: select post0_.id as id2_0_, post0_.author_id as author5_2_0_, post0_.content as content2_0_, post0_.postedAt as postedAt2_0_, post0_.title as title2_0_ from Post post0_ where post0_.id=?
15 10 2010 15:23:04,955 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_READ]: select post0_.id as id2_0_, post0_.author_id as author5_2_0_, post0_.content as content2_0_, post0_.postedAt as postedAt2_0_, post0_.title as title2_0_ from Post post0_ where post0_.id=?
15 10 2010 15:23:04,955 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_WRITE]: select post0_.id as id2_0_, post0_.author_id as author5_2_0_, post0_.content as content2_0_, post0_.postedAt as postedAt2_0_, post0_.title as title2_0_ from Post post0_ where post0_.id=?
15 10 2010 15:23:04,955 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_FORCE_INCREMENT]: select post0_.id as id2_0_, post0_.author_id as author5_2_0_, post0_.content as content2_0_, post0_.postedAt as postedAt2_0_, post0_.title as title2_0_ from Post post0_ where post0_.id=?
15 10 2010 15:23:04,955 DEBUG ~ Static select for entity models.Post [OPTIMISTIC]: select post0_.id as id2_1_, post0_.author_id as author5_2_1_, post0_.content as content2_1_, post0_.postedAt as postedAt2_1_, post0_.title as title2_1_, user1_.id as id1_0_, user1_.email as email1_0_, user1_.fullname as fullname1_0_, user1_.isAdmin as isAdmin1_0_, user1_.password as password1_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
15 10 2010 15:23:04,956 DEBUG ~ Static select for entity models.Post [OPTIMISTIC_FORCE_INCREMENT]: select post0_.id as id2_1_, post0_.author_id as author5_2_1_, post0_.content as content2_1_, post0_.postedAt as postedAt2_1_, post0_.title as title2_1_, user1_.id as id1_0_, user1_.email as email1_0_, user1_.fullname as fullname1_0_, user1_.isAdmin as isAdmin1_0_, user1_.password as password1_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
15 10 2010 15:23:04,959 DEBUG ~ Static select for action ACTION_MERGE on entity models.Post: select post0_.id as id2_1_, post0_.author_id as author5_2_1_, post0_.content as content2_1_, post0_.postedAt as postedAt2_1_, post0_.title as title2_1_, comments1_.post_id as post5_2_3_, comments1_.id as id3_, comments1_.id as id0_0_, comments1_.author as author0_0_, comments1_.content as content0_0_, comments1_.post_id as post5_0_0_, comments1_.postedAt as postedAt0_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post_id where post0_.id=?
15 10 2010 15:23:04,959 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Post: select post0_.id as id2_1_, post0_.author_id as author5_2_1_, post0_.content as content2_1_, post0_.postedAt as postedAt2_1_, post0_.title as title2_1_, comments1_.post_id as post5_2_3_, comments1_.id as id3_, comments1_.id as id0_0_, comments1_.author as author0_0_, comments1_.content as content0_0_, comments1_.post_id as post5_0_0_, comments1_.postedAt as postedAt0_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post_id where post0_.id=?
15 10 2010 15:23:04,960 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
15 10 2010 15:23:04,960 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
15 10 2010 15:23:04,960 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
15 10 2010 15:23:04,960 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
15 10 2010 15:23:04,960 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
15 10 2010 15:23:04,961 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
15 10 2010 15:23:04,961 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
15 10 2010 15:23:04,961 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
15 10 2010 15:23:04,961 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
15 10 2010 15:23:04,961 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
15 10 2010 15:23:04,961 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
15 10 2010 15:23:04,962 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
15 10 2010 15:23:04,967 DEBUG ~ Static select for one-to-many models.Post.comments: select comments0_.post_id as post5_2_1_, comments0_.id as id1_, comments0_.id as id0_0_, comments0_.author as author0_0_, comments0_.content as content0_0_, comments0_.post_id as post5_0_0_, comments0_.postedAt as postedAt0_0_ from Comment comments0_ where comments0_.post_id=?
15 10 2010 15:23:04,968 DEBUG ~ initializing class SessionFactoryObjectFactory
15 10 2010 15:23:04,969 DEBUG ~ registered: 2c9082cd2bae8e52012bae8e55070000 (unnamed)
15 10 2010 15:23:04,969 INFO  ~ Not binding factory to JNDI, no JNDI name configured
15 10 2010 15:23:04,969 DEBUG ~ instantiated session factory
15 10 2010 15:23:04,972 DEBUG ~ Execute first pass mapping processing
15 10 2010 15:23:04,973 DEBUG ~ Process hbm files
15 10 2010 15:23:04,973 DEBUG ~ Process annotated classes
15 10 2010 15:23:04,973 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
15 10 2010 15:23:04,973 DEBUG ~ processing extends queue
15 10 2010 15:23:04,973 DEBUG ~ processing collection mappings
15 10 2010 15:23:04,973 DEBUG ~ processing native query and ResultSetMapping mappings
15 10 2010 15:23:04,973 DEBUG ~ processing association property references
15 10 2010 15:23:04,973 DEBUG ~ processing foreign key constraints
15 10 2010 15:23:04,973 DEBUG ~ resolving reference to class: models.Post
15 10 2010 15:23:04,973 DEBUG ~ resolving reference to class: models.User
15 10 2010 15:23:04,976 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:23:04,977 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:23:04,978 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:23:04,978 DEBUG ~ Execute first pass mapping processing
15 10 2010 15:23:04,978 DEBUG ~ Process hbm files
15 10 2010 15:23:04,978 DEBUG ~ Process annotated classes
15 10 2010 15:23:04,978 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
15 10 2010 15:23:04,978 DEBUG ~ processing extends queue
15 10 2010 15:23:04,978 DEBUG ~ processing collection mappings
15 10 2010 15:23:04,978 DEBUG ~ processing native query and ResultSetMapping mappings
15 10 2010 15:23:04,978 DEBUG ~ processing association property references
15 10 2010 15:23:04,978 DEBUG ~ processing foreign key constraints
15 10 2010 15:23:04,978 DEBUG ~ resolving reference to class: models.Post
15 10 2010 15:23:04,978 DEBUG ~ resolving reference to class: models.User
15 10 2010 15:23:04,980 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:23:04,981 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:23:04,981 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:23:04,981 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:23:04,981 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:23:04,981 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:23:04,984 INFO  ~ Running hbm2ddl schema export
15 10 2010 15:23:04,985 DEBUG ~ import file not found: /import.sql
15 10 2010 15:23:04,986 INFO  ~ exporting generated schema to database
15 10 2010 15:23:04,988 DEBUG ~ alter table Comment drop constraint FK9BDE863F388562DE
15 10 2010 15:23:04,992 DEBUG ~ Unsuccessful: alter table Comment drop constraint FK9BDE863F388562DE
15 10 2010 15:23:04,992 DEBUG ~ Table not found: COMMENT in statement [alter table Comment]
15 10 2010 15:23:04,992 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
15 10 2010 15:23:04,992 DEBUG ~ Unsuccessful: alter table Post drop constraint FK260CC0A7CD013E
15 10 2010 15:23:04,992 DEBUG ~ Table not found: POST in statement [alter table Post]
15 10 2010 15:23:04,992 DEBUG ~ drop table Comment if exists
15 10 2010 15:23:04,993 DEBUG ~ drop table Post if exists
15 10 2010 15:23:04,993 DEBUG ~ drop table User if exists
15 10 2010 15:23:05,002 DEBUG ~ create table Comment (id bigint generated by default as identity (start with 1), author varchar(255), content longvarchar, postedAt timestamp, post_id bigint, primary key (id))
15 10 2010 15:23:05,009 DEBUG ~ create table Post (id bigint generated by default as identity (start with 1), content longvarchar, postedAt timestamp, title varchar(255), author_id bigint, primary key (id))
15 10 2010 15:23:05,009 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
15 10 2010 15:23:05,010 DEBUG ~ alter table Comment add constraint FK9BDE863F388562DE foreign key (post_id) references Post
15 10 2010 15:23:05,015 DEBUG ~ alter table Post add constraint FK260CC0A7CD013E foreign key (author_id) references User
15 10 2010 15:23:05,016 INFO  ~ schema export complete
15 10 2010 15:23:05,017 DEBUG ~ Execute first pass mapping processing
15 10 2010 15:23:05,017 DEBUG ~ Process hbm files
15 10 2010 15:23:05,017 DEBUG ~ Process annotated classes
15 10 2010 15:23:05,017 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
15 10 2010 15:23:05,017 DEBUG ~ processing extends queue
15 10 2010 15:23:05,017 DEBUG ~ processing collection mappings
15 10 2010 15:23:05,017 DEBUG ~ processing native query and ResultSetMapping mappings
15 10 2010 15:23:05,017 DEBUG ~ processing association property references
15 10 2010 15:23:05,017 DEBUG ~ processing foreign key constraints
15 10 2010 15:23:05,017 DEBUG ~ resolving reference to class: models.Post
15 10 2010 15:23:05,018 DEBUG ~ resolving reference to class: models.User
15 10 2010 15:23:05,020 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:23:05,020 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:23:05,020 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:23:05,020 DEBUG ~ Execute first pass mapping processing
15 10 2010 15:23:05,020 DEBUG ~ Process hbm files
15 10 2010 15:23:05,020 DEBUG ~ Process annotated classes
15 10 2010 15:23:05,020 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
15 10 2010 15:23:05,020 DEBUG ~ processing extends queue
15 10 2010 15:23:05,020 DEBUG ~ processing collection mappings
15 10 2010 15:23:05,020 DEBUG ~ processing native query and ResultSetMapping mappings
15 10 2010 15:23:05,021 DEBUG ~ processing association property references
15 10 2010 15:23:05,021 DEBUG ~ processing foreign key constraints
15 10 2010 15:23:05,021 DEBUG ~ resolving reference to class: models.Post
15 10 2010 15:23:05,021 DEBUG ~ resolving reference to class: models.User
15 10 2010 15:23:05,022 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:23:05,022 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:23:05,023 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:23:05,024 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:23:05,024 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:23:05,024 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:23:05,024 DEBUG ~ Checking 0 named HQL queries
15 10 2010 15:23:05,024 DEBUG ~ Checking 0 named SQL queries
15 10 2010 15:23:05,117 INFO  ~ Application 'blog' is now started !
15 10 2010 15:23:05,187 DEBUG ~ opened session at timestamp: 12871237851
15 10 2010 15:23:05,192 DEBUG ~ begin
15 10 2010 15:23:05,192 DEBUG ~ opening JDBC connection
15 10 2010 15:23:05,192 DEBUG ~ current autocommit status: true
15 10 2010 15:23:05,192 DEBUG ~ disabling autocommit
15 10 2010 15:23:05,248 DEBUG ~ parse() - HQL: select count(e) from models.User e
15 10 2010 15:23:05,281 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'User'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

15 10 2010 15:23:05,281 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:23:05,319 DEBUG ~ select << begin [level=1, statement=select]
15 10 2010 15:23:05,335 DEBUG ~ FromClause{level=1} :  models.User (e) -> user0_
15 10 2010 15:23:05,336 DEBUG ~ Resolved :  e -> user0_.id
15 10 2010 15:23:05,338 DEBUG ~ select : finishing up [level=1, statement=select]
15 10 2010 15:23:05,338 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count user0_.id ) ) ( FromClause{level=1} User user0_ ) )
15 10 2010 15:23:05,345 DEBUG ~ Using FROM fragment [User user0_]
15 10 2010 15:23:05,345 DEBUG ~ select >> end [level=1, statement=select]
15 10 2010 15:23:05,346 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'user0_.id' {alias=e, className=models.User, tableAlias=user0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}

15 10 2010 15:23:05,347 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:23:05,369 DEBUG ~ HQL: select count(e) from models.User e
15 10 2010 15:23:05,369 DEBUG ~ SQL: select count(user0_.id) as col_0_0_ from User user0_
15 10 2010 15:23:05,369 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:23:05,381 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,393 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:23:05,394 DEBUG ~ result row: 
15 10 2010 15:23:05,394 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:23:05,394 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,396 DEBUG ~ initializing non-lazy collections
15 10 2010 15:23:05,582 DEBUG ~ executing identity-insert immediately
15 10 2010 15:23:05,582 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,584 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,584 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,586 DEBUG ~ Natively generated identity: 1
15 10 2010 15:23:05,586 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,589 DEBUG ~ processing flush-time cascades
15 10 2010 15:23:05,590 DEBUG ~ dirty checking collections
15 10 2010 15:23:05,592 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
15 10 2010 15:23:05,592 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
15 10 2010 15:23:05,593 DEBUG ~ listing entities:
15 10 2010 15:23:05,593 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:23:05,598 DEBUG ~ executing identity-insert immediately
15 10 2010 15:23:05,598 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,598 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,599 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,599 DEBUG ~ Natively generated identity: 2
15 10 2010 15:23:05,599 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,599 DEBUG ~ processing flush-time cascades
15 10 2010 15:23:05,599 DEBUG ~ dirty checking collections
15 10 2010 15:23:05,599 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
15 10 2010 15:23:05,599 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
15 10 2010 15:23:05,600 DEBUG ~ listing entities:
15 10 2010 15:23:05,600 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:23:05,600 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:23:05,606 DEBUG ~ parse() - HQL: from models.User where id = ?
15 10 2010 15:23:05,613 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

15 10 2010 15:23:05,613 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:23:05,614 DEBUG ~ select << begin [level=1, statement=select]
15 10 2010 15:23:05,614 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
15 10 2010 15:23:05,616 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
15 10 2010 15:23:05,618 DEBUG ~ getDataType() : id -> org.hibernate.type.LongType@2723a510
15 10 2010 15:23:05,619 DEBUG ~ Resolved :  {synthetic-alias}.id -> user0_.id
15 10 2010 15:23:05,621 DEBUG ~ select : finishing up [level=1, statement=select]
15 10 2010 15:23:05,622 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.id {synthetic-alias} id ) ? ) ) )
15 10 2010 15:23:05,624 DEBUG ~ Derived SELECT clause created.
15 10 2010 15:23:05,624 DEBUG ~ Using FROM fragment [User user0_]
15 10 2010 15:23:05,624 DEBUG ~ select >> end [level=1, statement=select]
15 10 2010 15:23:05,625 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id1_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email1_, user0_.fullname as fullname1_, user0_.isAdmin as isAdmin1_, user0_.password as password1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.id' {propertyName=id,dereferenceType=ALL,propertyPath=id,path={synthetic-alias}.id,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.LongType@2723a510}

15 10 2010 15:23:05,625 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:23:05,626 DEBUG ~ HQL: from models.User where id = ?
15 10 2010 15:23:05,626 DEBUG ~ SQL: select user0_.id as id1_, user0_.email as email1_, user0_.fullname as fullname1_, user0_.isAdmin as isAdmin1_, user0_.password as password1_ from User user0_ where user0_.id=?
15 10 2010 15:23:05,626 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:23:05,631 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,631 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:23:05,633 DEBUG ~ result row: EntityKey[models.User#1]
15 10 2010 15:23:05,633 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:23:05,633 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,633 DEBUG ~ initializing non-lazy collections
15 10 2010 15:23:05,649 DEBUG ~ executing identity-insert immediately
15 10 2010 15:23:05,649 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,649 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,650 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,650 DEBUG ~ Natively generated identity: 1
15 10 2010 15:23:05,650 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,661 DEBUG ~ processing flush-time cascades
15 10 2010 15:23:05,661 DEBUG ~ dirty checking collections
15 10 2010 15:23:05,664 DEBUG ~ Collection found: [models.Post.comments#1], was: [<unreferenced>] (initialized)
15 10 2010 15:23:05,666 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
15 10 2010 15:23:05,666 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
15 10 2010 15:23:05,666 DEBUG ~ listing entities:
15 10 2010 15:23:05,666 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:23:05,666 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
15 10 2010 15:23:05,667 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:23:05,676 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,676 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:23:05,676 DEBUG ~ result row: EntityKey[models.User#1]
15 10 2010 15:23:05,676 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:23:05,676 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,677 DEBUG ~ initializing non-lazy collections
15 10 2010 15:23:05,680 DEBUG ~ executing identity-insert immediately
15 10 2010 15:23:05,680 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,681 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,681 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,681 DEBUG ~ Natively generated identity: 2
15 10 2010 15:23:05,681 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,682 DEBUG ~ processing flush-time cascades
15 10 2010 15:23:05,682 DEBUG ~ dirty checking collections
15 10 2010 15:23:05,682 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:23:05,682 DEBUG ~ Collection found: [models.Post.comments#2], was: [<unreferenced>] (initialized)
15 10 2010 15:23:05,683 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
15 10 2010 15:23:05,683 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 2 collections
15 10 2010 15:23:05,683 DEBUG ~ listing entities:
15 10 2010 15:23:05,683 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:23:05,683 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
15 10 2010 15:23:05,683 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:23:05,683 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
15 10 2010 15:23:05,688 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,689 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:23:05,689 DEBUG ~ result row: EntityKey[models.User#2]
15 10 2010 15:23:05,689 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:23:05,689 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,689 DEBUG ~ initializing non-lazy collections
15 10 2010 15:23:05,692 DEBUG ~ executing identity-insert immediately
15 10 2010 15:23:05,692 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,693 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,693 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,693 DEBUG ~ Natively generated identity: 3
15 10 2010 15:23:05,693 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,693 DEBUG ~ processing flush-time cascades
15 10 2010 15:23:05,694 DEBUG ~ dirty checking collections
15 10 2010 15:23:05,694 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:23:05,694 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
15 10 2010 15:23:05,694 DEBUG ~ Collection found: [models.Post.comments#3], was: [<unreferenced>] (initialized)
15 10 2010 15:23:05,694 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 5 objects
15 10 2010 15:23:05,694 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 3 collections
15 10 2010 15:23:05,694 DEBUG ~ listing entities:
15 10 2010 15:23:05,695 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:23:05,695 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
15 10 2010 15:23:05,695 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:23:05,695 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
15 10 2010 15:23:05,695 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
15 10 2010 15:23:05,699 DEBUG ~ parse() - HQL: from models.Post where id = ?
15 10 2010 15:23:05,704 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

15 10 2010 15:23:05,704 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:23:05,704 DEBUG ~ select << begin [level=1, statement=select]
15 10 2010 15:23:05,705 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
15 10 2010 15:23:05,705 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
15 10 2010 15:23:05,705 DEBUG ~ getDataType() : id -> org.hibernate.type.LongType@2723a510
15 10 2010 15:23:05,705 DEBUG ~ Resolved :  {synthetic-alias}.id -> post0_.id
15 10 2010 15:23:05,705 DEBUG ~ select : finishing up [level=1, statement=select]
15 10 2010 15:23:05,705 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( = ( post0_.id {synthetic-alias} id ) ? ) ) )
15 10 2010 15:23:05,706 DEBUG ~ Derived SELECT clause created.
15 10 2010 15:23:05,706 DEBUG ~ Using FROM fragment [Post post0_]
15 10 2010 15:23:05,706 DEBUG ~ select >> end [level=1, statement=select]
15 10 2010 15:23:05,707 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id2_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_2_, post0_.content as content2_, post0_.postedAt as postedAt2_, post0_.title as title2_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'post0_.id' {propertyName=id,dereferenceType=ALL,propertyPath=id,path={synthetic-alias}.id,tableAlias=post0_,className=models.Post,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.LongType@2723a510}

15 10 2010 15:23:05,707 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:23:05,707 DEBUG ~ HQL: from models.Post where id = ?
15 10 2010 15:23:05,707 DEBUG ~ SQL: select post0_.id as id2_, post0_.author_id as author5_2_, post0_.content as content2_, post0_.postedAt as postedAt2_, post0_.title as title2_ from Post post0_ where post0_.id=?
15 10 2010 15:23:05,707 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:23:05,715 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,716 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:23:05,716 DEBUG ~ result row: EntityKey[models.Post#1]
15 10 2010 15:23:05,716 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:23:05,716 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,716 DEBUG ~ initializing non-lazy collections
15 10 2010 15:23:05,719 DEBUG ~ executing identity-insert immediately
15 10 2010 15:23:05,719 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,719 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,719 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,720 DEBUG ~ Natively generated identity: 1
15 10 2010 15:23:05,720 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,720 DEBUG ~ processing flush-time cascades
15 10 2010 15:23:05,721 DEBUG ~ dirty checking collections
15 10 2010 15:23:05,726 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:23:05,727 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
15 10 2010 15:23:05,728 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
15 10 2010 15:23:05,728 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
15 10 2010 15:23:05,728 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
15 10 2010 15:23:05,728 DEBUG ~ listing entities:
15 10 2010 15:23:05,729 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
15 10 2010 15:23:05,730 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:23:05,731 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
15 10 2010 15:23:05,732 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:23:05,732 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
15 10 2010 15:23:05,733 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
15 10 2010 15:23:05,738 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,739 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:23:05,739 DEBUG ~ result row: EntityKey[models.Post#1]
15 10 2010 15:23:05,739 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:23:05,739 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,739 DEBUG ~ initializing non-lazy collections
15 10 2010 15:23:05,742 DEBUG ~ executing identity-insert immediately
15 10 2010 15:23:05,742 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,742 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,742 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,742 DEBUG ~ Natively generated identity: 2
15 10 2010 15:23:05,743 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,743 DEBUG ~ processing flush-time cascades
15 10 2010 15:23:05,743 DEBUG ~ dirty checking collections
15 10 2010 15:23:05,743 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:23:05,745 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
15 10 2010 15:23:05,745 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
15 10 2010 15:23:05,745 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 7 objects
15 10 2010 15:23:05,745 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
15 10 2010 15:23:05,746 DEBUG ~ listing entities:
15 10 2010 15:23:05,746 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
15 10 2010 15:23:05,746 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
15 10 2010 15:23:05,746 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:23:05,746 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:23:05,746 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
15 10 2010 15:23:05,747 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
15 10 2010 15:23:05,747 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
15 10 2010 15:23:05,750 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,753 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:23:05,753 DEBUG ~ result row: EntityKey[models.Post#2]
15 10 2010 15:23:05,754 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:23:05,754 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,754 DEBUG ~ initializing non-lazy collections
15 10 2010 15:23:05,757 DEBUG ~ executing identity-insert immediately
15 10 2010 15:23:05,757 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,757 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,757 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:05,757 DEBUG ~ Natively generated identity: 3
15 10 2010 15:23:05,757 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:05,758 DEBUG ~ processing flush-time cascades
15 10 2010 15:23:05,758 DEBUG ~ dirty checking collections
15 10 2010 15:23:05,758 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:23:05,758 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
15 10 2010 15:23:05,759 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
15 10 2010 15:23:05,759 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
15 10 2010 15:23:05,759 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
15 10 2010 15:23:05,759 DEBUG ~ listing entities:
15 10 2010 15:23:05,759 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
15 10 2010 15:23:05,759 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
15 10 2010 15:23:05,759 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:23:05,760 DEBUG ~ models.Comment{content=This post is useless ?
, id=3, author=Tom, post=models.Post#2, postedAt=2009-04-05 09:00:00}
15 10 2010 15:23:05,760 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:23:05,760 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
15 10 2010 15:23:05,760 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
15 10 2010 15:23:05,760 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
15 10 2010 15:23:05,764 DEBUG ~ commit
15 10 2010 15:23:05,764 DEBUG ~ re-enabling autocommit
15 10 2010 15:23:05,764 DEBUG ~ committed JDBC Connection
15 10 2010 15:23:05,764 DEBUG ~ aggressively releasing JDBC connection
15 10 2010 15:23:05,765 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
15 10 2010 15:23:05,768 DEBUG ~ opened session at timestamp: 12871237857
15 10 2010 15:23:05,768 DEBUG ~ begin
15 10 2010 15:23:05,768 DEBUG ~ opening JDBC connection
15 10 2010 15:23:05,768 DEBUG ~ current autocommit status: true
15 10 2010 15:23:05,768 DEBUG ~ disabling autocommit
15 10 2010 15:23:06,050 DEBUG ~ parse() - HQL: from models.Post order by postedAt desc
15 10 2010 15:23:06,052 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[ORDER] Node: 'order'
       +-[IDENT] Node: 'postedAt'
       \-[DESCENDING] Node: 'desc'

15 10 2010 15:23:06,052 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:23:06,052 DEBUG ~ select << begin [level=1, statement=select]
15 10 2010 15:23:06,053 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
15 10 2010 15:23:06,053 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
15 10 2010 15:23:06,054 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@4ced8df7
15 10 2010 15:23:06,054 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
15 10 2010 15:23:06,054 DEBUG ~ select : finishing up [level=1, statement=select]
15 10 2010 15:23:06,054 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( order ( post0_.postedAt {synthetic-alias} postedAt ) desc ) )
15 10 2010 15:23:06,054 DEBUG ~ Derived SELECT clause created.
15 10 2010 15:23:06,054 DEBUG ~ Using FROM fragment [Post post0_]
15 10 2010 15:23:06,054 DEBUG ~ select >> end [level=1, statement=select]
15 10 2010 15:23:06,055 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id2_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_2_, post0_.content as content2_, post0_.postedAt as postedAt2_, post0_.title as title2_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[ORDER] OrderByClause: 'order'
       +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
       |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
       |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
       \-[DESCENDING] SqlNode: 'desc'

15 10 2010 15:23:06,055 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:23:06,055 DEBUG ~ HQL: from models.Post order by postedAt desc
15 10 2010 15:23:06,056 DEBUG ~ SQL: select post0_.id as id2_, post0_.author_id as author5_2_, post0_.content as content2_, post0_.postedAt as postedAt2_, post0_.title as title2_ from Post post0_ order by post0_.postedAt desc
15 10 2010 15:23:06,056 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:23:06,057 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:06,061 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:23:06,062 DEBUG ~ result row: EntityKey[models.Post#1]
15 10 2010 15:23:06,063 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:23:06,064 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:06,064 DEBUG ~ resolving associations for [models.Post#1]
15 10 2010 15:23:06,065 DEBUG ~ loading entity: [models.User#1]
15 10 2010 15:23:06,065 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:06,065 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:23:06,065 DEBUG ~ result row: EntityKey[models.User#1]
15 10 2010 15:23:06,066 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:23:06,066 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:06,066 DEBUG ~ resolving associations for [models.User#1]
15 10 2010 15:23:06,066 DEBUG ~ done materializing entity [models.User#1]
15 10 2010 15:23:06,066 DEBUG ~ done entity load
15 10 2010 15:23:06,068 DEBUG ~ done materializing entity [models.Post#1]
15 10 2010 15:23:06,068 DEBUG ~ initializing non-lazy collections
15 10 2010 15:23:06,069 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:06,070 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:23:06,070 DEBUG ~ result row: EntityKey[models.Post#3]
15 10 2010 15:23:06,070 DEBUG ~ result row: EntityKey[models.Post#2]
15 10 2010 15:23:06,070 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:23:06,070 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:06,071 DEBUG ~ resolving associations for [models.Post#3]
15 10 2010 15:23:06,071 DEBUG ~ loading entity: [models.User#2]
15 10 2010 15:23:06,071 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:06,071 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:23:06,071 DEBUG ~ result row: EntityKey[models.User#2]
15 10 2010 15:23:06,071 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:23:06,071 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:06,071 DEBUG ~ resolving associations for [models.User#2]
15 10 2010 15:23:06,072 DEBUG ~ done materializing entity [models.User#2]
15 10 2010 15:23:06,072 DEBUG ~ done entity load
15 10 2010 15:23:06,072 DEBUG ~ done materializing entity [models.Post#3]
15 10 2010 15:23:06,072 DEBUG ~ resolving associations for [models.Post#2]
15 10 2010 15:23:06,072 DEBUG ~ done materializing entity [models.Post#2]
15 10 2010 15:23:06,072 DEBUG ~ initializing non-lazy collections
15 10 2010 15:23:06,919 DEBUG ~ loading collection: [models.Post.comments#1]
15 10 2010 15:23:06,920 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:06,920 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:23:06,920 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
15 10 2010 15:23:06,922 DEBUG ~ result row: EntityKey[models.Comment#1]
15 10 2010 15:23:06,923 DEBUG ~ found row of collection: [models.Post.comments#1]
15 10 2010 15:23:06,923 DEBUG ~ result row: EntityKey[models.Comment#2]
15 10 2010 15:23:06,923 DEBUG ~ found row of collection: [models.Post.comments#1]
15 10 2010 15:23:06,923 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:23:06,923 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:06,923 DEBUG ~ resolving associations for [models.Comment#1]
15 10 2010 15:23:06,923 DEBUG ~ done materializing entity [models.Comment#1]
15 10 2010 15:23:06,923 DEBUG ~ resolving associations for [models.Comment#2]
15 10 2010 15:23:06,923 DEBUG ~ done materializing entity [models.Comment#2]
15 10 2010 15:23:06,924 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
15 10 2010 15:23:06,924 DEBUG ~ collection fully initialized: [models.Post.comments#1]
15 10 2010 15:23:06,924 DEBUG ~ 1 collections initialized for role: models.Post.comments
15 10 2010 15:23:06,924 DEBUG ~ initializing non-lazy collections
15 10 2010 15:23:06,924 DEBUG ~ done loading collection
15 10 2010 15:23:07,064 DEBUG ~ loading collection: [models.Post.comments#3]
15 10 2010 15:23:07,064 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:07,065 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:23:07,065 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#3]
15 10 2010 15:23:07,065 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:23:07,065 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:07,065 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
15 10 2010 15:23:07,065 DEBUG ~ collection fully initialized: [models.Post.comments#3]
15 10 2010 15:23:07,065 DEBUG ~ 1 collections initialized for role: models.Post.comments
15 10 2010 15:23:07,065 DEBUG ~ initializing non-lazy collections
15 10 2010 15:23:07,066 DEBUG ~ done loading collection
15 10 2010 15:23:07,072 DEBUG ~ loading collection: [models.Post.comments#2]
15 10 2010 15:23:07,072 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:23:07,072 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:23:07,072 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#2]
15 10 2010 15:23:07,073 DEBUG ~ result row: EntityKey[models.Comment#3]
15 10 2010 15:23:07,073 DEBUG ~ found row of collection: [models.Post.comments#2]
15 10 2010 15:23:07,073 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:23:07,073 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:23:07,073 DEBUG ~ resolving associations for [models.Comment#3]
15 10 2010 15:23:07,073 DEBUG ~ done materializing entity [models.Comment#3]
15 10 2010 15:23:07,073 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
15 10 2010 15:23:07,073 DEBUG ~ collection fully initialized: [models.Post.comments#2]
15 10 2010 15:23:07,073 DEBUG ~ 1 collections initialized for role: models.Post.comments
15 10 2010 15:23:07,073 DEBUG ~ initializing non-lazy collections
15 10 2010 15:23:07,074 DEBUG ~ done loading collection
15 10 2010 15:23:07,127 DEBUG ~ commit
15 10 2010 15:23:07,127 DEBUG ~ processing flush-time cascades
15 10 2010 15:23:07,128 DEBUG ~ dirty checking collections
15 10 2010 15:23:07,128 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:23:07,128 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
15 10 2010 15:23:07,128 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
15 10 2010 15:23:07,128 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
15 10 2010 15:23:07,128 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
15 10 2010 15:23:07,128 DEBUG ~ listing entities:
15 10 2010 15:23:07,129 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
15 10 2010 15:23:07,129 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
15 10 2010 15:23:07,129 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:23:07,129 DEBUG ~ models.Comment{content=This post is useless ?
, id=3, author=Tom, post=models.Post#2, postedAt=2009-04-05 09:00:00}
15 10 2010 15:23:07,129 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2], postedAt=2009-06-14 09:00:00}
15 10 2010 15:23:07,129 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:23:07,130 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[models.Comment#3], postedAt=2009-03-25 09:00:00}
15 10 2010 15:23:07,130 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
15 10 2010 15:23:07,130 DEBUG ~ re-enabling autocommit
15 10 2010 15:23:07,130 DEBUG ~ committed JDBC Connection
15 10 2010 15:23:07,130 DEBUG ~ aggressively releasing JDBC connection
15 10 2010 15:23:07,130 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
15 10 2010 15:25:02,379 DEBUG ~ opened session at timestamp: 12871239023
15 10 2010 15:25:02,380 DEBUG ~ begin
15 10 2010 15:25:02,380 DEBUG ~ opening JDBC connection
15 10 2010 15:25:02,380 DEBUG ~ current autocommit status: true
15 10 2010 15:25:02,380 DEBUG ~ disabling autocommit
15 10 2010 15:25:02,382 DEBUG ~ loading entity: [models.Post#1]
15 10 2010 15:25:02,382 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:25:02,382 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:25:02,383 DEBUG ~ result row: EntityKey[models.User#1], EntityKey[models.Post#1]
15 10 2010 15:25:02,383 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:25:02,383 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:25:02,383 DEBUG ~ resolving associations for [models.User#1]
15 10 2010 15:25:02,383 DEBUG ~ done materializing entity [models.User#1]
15 10 2010 15:25:02,383 DEBUG ~ resolving associations for [models.Post#1]
15 10 2010 15:25:02,383 DEBUG ~ done materializing entity [models.Post#1]
15 10 2010 15:25:02,383 DEBUG ~ initializing non-lazy collections
15 10 2010 15:25:02,383 DEBUG ~ done entity load
15 10 2010 15:25:03,033 DEBUG ~ rollback
15 10 2010 15:25:03,033 DEBUG ~ re-enabling autocommit
15 10 2010 15:25:03,033 DEBUG ~ rolled back JDBC Connection
15 10 2010 15:25:03,033 DEBUG ~ aggressively releasing JDBC connection
15 10 2010 15:25:03,033 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
15 10 2010 15:25:03,160 ERROR ~ 

@646f5fg96
Internal Server Error (500) for request GET /posts/1

Template execution error (In /app/views/Application/show.html around line 3)
Execution error occured in template /app/views/Application/show.html. Exception raised was NullPointerException : Cannot get property 'title' on null object.

play.exceptions.TemplateExecutionException: Cannot get property 'title' on null object
	at play.templates.BaseTemplate.throwException(BaseTemplate.java:84)
	at play.templates.GroovyTemplate.render(GroovyTemplate.java:226)
	at play.mvc.results.RenderTemplate.<init>(RenderTemplate.java:23)
	at play.mvc.Controller.renderTemplate(Controller.java:568)
	at play.mvc.Controller.renderTemplate(Controller.java:583)
	at play.mvc.ControllerDelegate.renderTemplate(ControllerDelegate.java:34)
	at play.mvc.ScalaController.render(ScalaController.scala:107)
	at controllers.Application$.show(/app/controllers/Application.scala:39)
	at play.mvc.ActionInvoker.invokeControllerMethod(ActionInvoker.java:420)
	at play.mvc.ActionInvoker.invokeControllerMethod(ActionInvoker.java:403)
	at play.mvc.ActionInvoker.invoke(ActionInvoker.java:176)
	at Invocation.HTTP Request(Play!)
Caused by: java.lang.NullPointerException: Cannot get property 'title' on null object
	at /app/views/Application/show.html.(line:3)
	at play.templates.GroovyTemplate.render(GroovyTemplate.java:203)
	... 10 more
15 10 2010 15:26:09,149 WARN  ~ match is not exhaustive!
missing combination           None
, at line 38 of /app/controllers/Application.scala
15 10 2010 15:26:09,704 INFO  ~ closing
15 10 2010 15:26:09,704 INFO  ~ Running hbm2ddl schema export
15 10 2010 15:26:09,705 DEBUG ~ import file not found: /import.sql
15 10 2010 15:26:09,705 INFO  ~ exporting generated schema to database
15 10 2010 15:26:09,705 DEBUG ~ alter table Comment drop constraint FK9BDE863F388562DE
15 10 2010 15:26:09,706 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
15 10 2010 15:26:09,706 DEBUG ~ drop table Comment if exists
15 10 2010 15:26:09,706 DEBUG ~ drop table Post if exists
15 10 2010 15:26:09,706 DEBUG ~ drop table User if exists
15 10 2010 15:26:09,706 INFO  ~ schema export complete
15 10 2010 15:26:09,778 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
15 10 2010 15:26:09,778 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
15 10 2010 15:26:09,778 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
15 10 2010 15:26:09,778 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
15 10 2010 15:26:09,778 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
15 10 2010 15:26:09,778 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
15 10 2010 15:26:09,778 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
15 10 2010 15:26:09,778 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
15 10 2010 15:26:09,779 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
15 10 2010 15:26:09,779 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
15 10 2010 15:26:09,779 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
15 10 2010 15:26:09,779 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
15 10 2010 15:26:09,779 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
15 10 2010 15:26:09,779 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
15 10 2010 15:26:09,780 DEBUG ~ Execute first pass mapping processing
15 10 2010 15:26:09,780 DEBUG ~ Process hbm files
15 10 2010 15:26:09,780 DEBUG ~ Process annotated classes
15 10 2010 15:26:09,780 INFO  ~ Binding entity from annotated class: models.Comment
15 10 2010 15:26:09,780 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
15 10 2010 15:26:09,780 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
15 10 2010 15:26:09,781 DEBUG ~ Import with entity name Comment
15 10 2010 15:26:09,781 INFO  ~ Bind entity models.Comment on table Comment
15 10 2010 15:26:09,786 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=id, insertable=true, updatable=true, unique=false}
15 10 2010 15:26:09,786 DEBUG ~ binding property id with lazy=false
15 10 2010 15:26:09,786 DEBUG ~ building SimpleValue for id
15 10 2010 15:26:09,786 DEBUG ~ Building property id
15 10 2010 15:26:09,786 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=author, insertable=true, updatable=true, unique=false}
15 10 2010 15:26:09,786 DEBUG ~ binding property author with lazy=false
15 10 2010 15:26:09,786 DEBUG ~ building SimpleValue for author
15 10 2010 15:26:09,787 DEBUG ~ Building property author
15 10 2010 15:26:09,787 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=content, insertable=true, updatable=true, unique=false}
15 10 2010 15:26:09,787 DEBUG ~ binding property content with lazy=false
15 10 2010 15:26:09,787 DEBUG ~ building SimpleValue for content
15 10 2010 15:26:09,787 DEBUG ~ Building property content
15 10 2010 15:26:09,787 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
15 10 2010 15:26:09,787 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=post, insertable=true, updatable=true, unique=false}
15 10 2010 15:26:09,787 DEBUG ~ Building property post
15 10 2010 15:26:09,788 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
15 10 2010 15:26:09,788 DEBUG ~ binding property postedAt with lazy=false
15 10 2010 15:26:09,789 DEBUG ~ building SimpleValue for postedAt
15 10 2010 15:26:09,789 DEBUG ~ Building property postedAt
15 10 2010 15:26:09,789 INFO  ~ Binding entity from annotated class: models.User
15 10 2010 15:26:09,789 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
15 10 2010 15:26:09,789 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
15 10 2010 15:26:09,790 DEBUG ~ Import with entity name User
15 10 2010 15:26:09,790 INFO  ~ Bind entity models.User on table User
15 10 2010 15:26:09,791 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
15 10 2010 15:26:09,792 DEBUG ~ binding property id with lazy=false
15 10 2010 15:26:09,792 DEBUG ~ building SimpleValue for id
15 10 2010 15:26:09,792 DEBUG ~ Building property id
15 10 2010 15:26:09,792 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
15 10 2010 15:26:09,792 DEBUG ~ binding property email with lazy=false
15 10 2010 15:26:09,793 DEBUG ~ building SimpleValue for email
15 10 2010 15:26:09,793 DEBUG ~ Building property email
15 10 2010 15:26:09,793 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
15 10 2010 15:26:09,793 DEBUG ~ binding property fullname with lazy=false
15 10 2010 15:26:09,793 DEBUG ~ building SimpleValue for fullname
15 10 2010 15:26:09,793 DEBUG ~ Building property fullname
15 10 2010 15:26:09,794 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
15 10 2010 15:26:09,795 DEBUG ~ binding property isAdmin with lazy=false
15 10 2010 15:26:09,795 DEBUG ~ building SimpleValue for isAdmin
15 10 2010 15:26:09,795 DEBUG ~ Building property isAdmin
15 10 2010 15:26:09,795 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
15 10 2010 15:26:09,795 DEBUG ~ binding property password with lazy=false
15 10 2010 15:26:09,795 DEBUG ~ building SimpleValue for password
15 10 2010 15:26:09,795 DEBUG ~ Building property password
15 10 2010 15:26:09,796 INFO  ~ Binding entity from annotated class: models.Post
15 10 2010 15:26:09,796 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
15 10 2010 15:26:09,796 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
15 10 2010 15:26:09,796 DEBUG ~ Import with entity name Post
15 10 2010 15:26:09,796 INFO  ~ Bind entity models.Post on table Post
15 10 2010 15:26:09,799 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=id, insertable=true, updatable=true, unique=false}
15 10 2010 15:26:09,799 DEBUG ~ binding property id with lazy=false
15 10 2010 15:26:09,800 DEBUG ~ building SimpleValue for id
15 10 2010 15:26:09,801 DEBUG ~ Building property id
15 10 2010 15:26:09,801 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
15 10 2010 15:26:09,801 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=author, insertable=true, updatable=true, unique=false}
15 10 2010 15:26:09,801 DEBUG ~ Building property author
15 10 2010 15:26:09,801 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
15 10 2010 15:26:09,801 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments, insertable=true, updatable=true, unique=false}
15 10 2010 15:26:09,801 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=null, insertable=true, updatable=true, unique=false}
15 10 2010 15:26:09,802 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=element, insertable=true, updatable=true, unique=false}
15 10 2010 15:26:09,802 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments_KEY, insertable=true, updatable=true, unique=false}
15 10 2010 15:26:09,802 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='comments_KEY', referencedColumn='null', mappedBy='null'}
15 10 2010 15:26:09,802 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
15 10 2010 15:26:09,802 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
15 10 2010 15:26:09,802 DEBUG ~ Collection role: models.Post.comments
15 10 2010 15:26:09,802 DEBUG ~ Building property comments
15 10 2010 15:26:09,802 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=content, insertable=true, updatable=true, unique=false}
15 10 2010 15:26:09,802 DEBUG ~ binding property content with lazy=false
15 10 2010 15:26:09,802 DEBUG ~ building SimpleValue for content
15 10 2010 15:26:09,803 DEBUG ~ Building property content
15 10 2010 15:26:09,803 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
15 10 2010 15:26:09,803 DEBUG ~ binding property postedAt with lazy=false
15 10 2010 15:26:09,803 DEBUG ~ building SimpleValue for postedAt
15 10 2010 15:26:09,803 DEBUG ~ Building property postedAt
15 10 2010 15:26:09,803 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=title, insertable=true, updatable=true, unique=false}
15 10 2010 15:26:09,804 DEBUG ~ binding property title with lazy=false
15 10 2010 15:26:09,804 DEBUG ~ building SimpleValue for title
15 10 2010 15:26:09,804 DEBUG ~ Building property title
15 10 2010 15:26:09,804 DEBUG ~ setting SimpleValue typeName for id
15 10 2010 15:26:09,804 DEBUG ~ setting SimpleValue typeName for author
15 10 2010 15:26:09,804 DEBUG ~ setting SimpleValue typeName for content
15 10 2010 15:26:09,804 DEBUG ~ setting SimpleValue typeName for postedAt
15 10 2010 15:26:09,804 DEBUG ~ setting SimpleValue typeName for id
15 10 2010 15:26:09,804 DEBUG ~ setting SimpleValue typeName for email
15 10 2010 15:26:09,805 DEBUG ~ setting SimpleValue typeName for fullname
15 10 2010 15:26:09,805 DEBUG ~ setting SimpleValue typeName for isAdmin
15 10 2010 15:26:09,805 DEBUG ~ setting SimpleValue typeName for password
15 10 2010 15:26:09,805 DEBUG ~ setting SimpleValue typeName for id
15 10 2010 15:26:09,805 DEBUG ~ setting SimpleValue typeName for content
15 10 2010 15:26:09,806 DEBUG ~ setting SimpleValue typeName for postedAt
15 10 2010 15:26:09,807 DEBUG ~ setting SimpleValue typeName for title
15 10 2010 15:26:09,807 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
15 10 2010 15:26:09,808 DEBUG ~ processing extends queue
15 10 2010 15:26:09,808 DEBUG ~ processing collection mappings
15 10 2010 15:26:09,809 DEBUG ~ Second pass for collection: models.Post.comments
15 10 2010 15:26:09,809 DEBUG ~ Binding a OneToMany: models.Post.comments through a foreign key
15 10 2010 15:26:09,809 INFO  ~ Mapping collection: models.Post.comments -> Comment
15 10 2010 15:26:09,809 DEBUG ~ Retrieving property models.Comment.post
15 10 2010 15:26:09,809 DEBUG ~ Mapped collection key: post_id, one-to-many: models.Comment
15 10 2010 15:26:09,809 DEBUG ~ processing native query and ResultSetMapping mappings
15 10 2010 15:26:09,809 DEBUG ~ processing association property references
15 10 2010 15:26:09,809 DEBUG ~ processing foreign key constraints
15 10 2010 15:26:09,809 DEBUG ~ resolving reference to class: models.Post
15 10 2010 15:26:09,809 DEBUG ~ resolving reference to class: models.User
15 10 2010 15:26:09,811 INFO  ~ Hibernate Validator not found: ignoring
15 10 2010 15:26:09,822 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
15 10 2010 15:26:09,823 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
15 10 2010 15:26:09,827 DEBUG ~ Search not present in classpath, ignoring event listener registration.
15 10 2010 15:26:09,827 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
15 10 2010 15:26:09,827 DEBUG ~ Preparing to build session factory with filters : {}
15 10 2010 15:26:09,827 DEBUG ~ Execute first pass mapping processing
15 10 2010 15:26:09,827 DEBUG ~ Process hbm files
15 10 2010 15:26:09,829 DEBUG ~ Process annotated classes
15 10 2010 15:26:09,829 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
15 10 2010 15:26:09,829 DEBUG ~ processing extends queue
15 10 2010 15:26:09,829 DEBUG ~ processing collection mappings
15 10 2010 15:26:09,829 DEBUG ~ processing native query and ResultSetMapping mappings
15 10 2010 15:26:09,829 DEBUG ~ processing association property references
15 10 2010 15:26:09,829 DEBUG ~ processing foreign key constraints
15 10 2010 15:26:09,829 DEBUG ~ resolving reference to class: models.Post
15 10 2010 15:26:09,829 DEBUG ~ resolving reference to class: models.User
15 10 2010 15:26:09,832 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
15 10 2010 15:26:09,833 INFO  ~ Using provided datasource
15 10 2010 15:26:09,833 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
15 10 2010 15:26:09,833 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
15 10 2010 15:26:09,834 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
15 10 2010 15:26:09,834 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
15 10 2010 15:26:09,834 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
15 10 2010 15:26:09,834 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
15 10 2010 15:26:09,834 INFO  ~ Automatic flush during beforeCompletion(): disabled
15 10 2010 15:26:09,834 INFO  ~ Automatic session close at end of transaction: disabled
15 10 2010 15:26:09,834 INFO  ~ JDBC batch size: 15
15 10 2010 15:26:09,835 INFO  ~ JDBC batch updates for versioned data: disabled
15 10 2010 15:26:09,835 INFO  ~ Scrollable result sets: enabled
15 10 2010 15:26:09,835 DEBUG ~ Wrap result sets: disabled
15 10 2010 15:26:09,835 INFO  ~ JDBC3 getGeneratedKeys(): disabled
15 10 2010 15:26:09,835 INFO  ~ Connection release mode: auto
15 10 2010 15:26:09,835 INFO  ~ Default batch fetch size: 1
15 10 2010 15:26:09,835 INFO  ~ Generate SQL with comments: disabled
15 10 2010 15:26:09,835 INFO  ~ Order SQL updates by primary key: disabled
15 10 2010 15:26:09,835 INFO  ~ Order SQL inserts for batching: disabled
15 10 2010 15:26:09,835 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
15 10 2010 15:26:09,835 INFO  ~ Using ASTQueryTranslatorFactory
15 10 2010 15:26:09,835 INFO  ~ Query language substitutions: {}
15 10 2010 15:26:09,835 INFO  ~ JPA-QL strict compliance: enabled
15 10 2010 15:26:09,835 INFO  ~ Second-level cache: enabled
15 10 2010 15:26:09,836 INFO  ~ Query cache: disabled
15 10 2010 15:26:09,836 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
15 10 2010 15:26:09,836 INFO  ~ Optimize cache for minimal puts: disabled
15 10 2010 15:26:09,836 INFO  ~ Structured second-level cache entries: disabled
15 10 2010 15:26:09,836 INFO  ~ Statistics: disabled
15 10 2010 15:26:09,836 INFO  ~ Deleted entity synthetic identifier rollback: disabled
15 10 2010 15:26:09,836 INFO  ~ Default entity-mode: pojo
15 10 2010 15:26:09,836 INFO  ~ Named query checking : enabled
15 10 2010 15:26:09,836 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
15 10 2010 15:26:09,841 INFO  ~ building session factory
15 10 2010 15:26:09,841 DEBUG ~ Session factory constructed with filter configurations : {}
15 10 2010 15:26:09,842 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
15 10 2010 15:26:09,842 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:26:09,843 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:26:09,843 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:26:09,852 DEBUG ~ Static SQL for entity: models.Comment
15 10 2010 15:26:09,852 DEBUG ~  Version select: select id from Comment where id =?
15 10 2010 15:26:09,852 DEBUG ~  Snapshot select: select comment_.id, comment_.author as author6_, comment_.content as content6_, comment_.post_id as post5_6_, comment_.postedAt as postedAt6_ from Comment comment_ where comment_.id=?
15 10 2010 15:26:09,852 DEBUG ~  Insert 0: insert into Comment (author, content, post_id, postedAt, id) values (?, ?, ?, ?, ?)
15 10 2010 15:26:09,852 DEBUG ~  Update 0: update Comment set author=?, content=?, post_id=?, postedAt=? where id=?
15 10 2010 15:26:09,852 DEBUG ~  Delete 0: delete from Comment where id=?
15 10 2010 15:26:09,852 DEBUG ~  Identity insert: insert into Comment (id, author, content, post_id, postedAt) values (null, ?, ?, ?, ?)
15 10 2010 15:26:09,892 DEBUG ~ Static SQL for entity: models.Post
15 10 2010 15:26:09,892 DEBUG ~  Version select: select id from Post where id =?
15 10 2010 15:26:09,892 DEBUG ~  Snapshot select: select post_.id, post_.author_id as author5_8_, post_.content as content8_, post_.postedAt as postedAt8_, post_.title as title8_ from Post post_ where post_.id=?
15 10 2010 15:26:09,892 DEBUG ~  Insert 0: insert into Post (author_id, content, postedAt, title, id) values (?, ?, ?, ?, ?)
15 10 2010 15:26:09,893 DEBUG ~  Update 0: update Post set author_id=?, content=?, postedAt=?, title=? where id=?
15 10 2010 15:26:09,893 DEBUG ~  Delete 0: delete from Post where id=?
15 10 2010 15:26:09,893 DEBUG ~  Identity insert: insert into Post (id, author_id, content, postedAt, title) values (null, ?, ?, ?, ?)
15 10 2010 15:26:09,903 DEBUG ~ Static SQL for entity: models.User
15 10 2010 15:26:09,903 DEBUG ~  Version select: select id from User where id =?
15 10 2010 15:26:09,903 DEBUG ~  Snapshot select: select user_.id, user_.email as email7_, user_.fullname as fullname7_, user_.isAdmin as isAdmin7_, user_.password as password7_ from User user_ where user_.id=?
15 10 2010 15:26:09,904 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
15 10 2010 15:26:09,904 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
15 10 2010 15:26:09,904 DEBUG ~  Delete 0: delete from User where id=?
15 10 2010 15:26:09,904 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
15 10 2010 15:26:09,904 DEBUG ~ Static SQL for collection: models.Post.comments
15 10 2010 15:26:09,904 DEBUG ~  Row insert: update Comment set post_id=? where id=?
15 10 2010 15:26:09,904 DEBUG ~  Row delete: update Comment set post_id=null where post_id=? and id=?
15 10 2010 15:26:09,904 DEBUG ~  One-shot delete: update Comment set post_id=null where post_id=?
15 10 2010 15:26:09,905 DEBUG ~ Static select for entity models.Comment [NONE]: select comment0_.id as id6_2_, comment0_.author as author6_2_, comment0_.content as content6_2_, comment0_.post_id as post5_6_2_, comment0_.postedAt as postedAt6_2_, post1_.id as id8_0_, post1_.author_id as author5_8_0_, post1_.content as content8_0_, post1_.postedAt as postedAt8_0_, post1_.title as title8_0_, user2_.id as id7_1_, user2_.email as email7_1_, user2_.fullname as fullname7_1_, user2_.isAdmin as isAdmin7_1_, user2_.password as password7_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
15 10 2010 15:26:09,905 DEBUG ~ Static select for entity models.Comment [READ]: select comment0_.id as id6_2_, comment0_.author as author6_2_, comment0_.content as content6_2_, comment0_.post_id as post5_6_2_, comment0_.postedAt as postedAt6_2_, post1_.id as id8_0_, post1_.author_id as author5_8_0_, post1_.content as content8_0_, post1_.postedAt as postedAt8_0_, post1_.title as title8_0_, user2_.id as id7_1_, user2_.email as email7_1_, user2_.fullname as fullname7_1_, user2_.isAdmin as isAdmin7_1_, user2_.password as password7_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
15 10 2010 15:26:09,905 DEBUG ~ Static select for entity models.Comment [UPGRADE]: select comment0_.id as id6_0_, comment0_.author as author6_0_, comment0_.content as content6_0_, comment0_.post_id as post5_6_0_, comment0_.postedAt as postedAt6_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:26:09,905 DEBUG ~ Static select for entity models.Comment [UPGRADE_NOWAIT]: select comment0_.id as id6_0_, comment0_.author as author6_0_, comment0_.content as content6_0_, comment0_.post_id as post5_6_0_, comment0_.postedAt as postedAt6_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:26:09,905 DEBUG ~ Static select for entity models.Comment [FORCE]: select comment0_.id as id6_0_, comment0_.author as author6_0_, comment0_.content as content6_0_, comment0_.post_id as post5_6_0_, comment0_.postedAt as postedAt6_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:26:09,906 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_READ]: select comment0_.id as id6_0_, comment0_.author as author6_0_, comment0_.content as content6_0_, comment0_.post_id as post5_6_0_, comment0_.postedAt as postedAt6_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:26:09,906 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_WRITE]: select comment0_.id as id6_0_, comment0_.author as author6_0_, comment0_.content as content6_0_, comment0_.post_id as post5_6_0_, comment0_.postedAt as postedAt6_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:26:09,906 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_FORCE_INCREMENT]: select comment0_.id as id6_0_, comment0_.author as author6_0_, comment0_.content as content6_0_, comment0_.post_id as post5_6_0_, comment0_.postedAt as postedAt6_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:26:09,906 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC]: select comment0_.id as id6_2_, comment0_.author as author6_2_, comment0_.content as content6_2_, comment0_.post_id as post5_6_2_, comment0_.postedAt as postedAt6_2_, post1_.id as id8_0_, post1_.author_id as author5_8_0_, post1_.content as content8_0_, post1_.postedAt as postedAt8_0_, post1_.title as title8_0_, user2_.id as id7_1_, user2_.email as email7_1_, user2_.fullname as fullname7_1_, user2_.isAdmin as isAdmin7_1_, user2_.password as password7_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
15 10 2010 15:26:09,907 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC_FORCE_INCREMENT]: select comment0_.id as id6_2_, comment0_.author as author6_2_, comment0_.content as content6_2_, comment0_.post_id as post5_6_2_, comment0_.postedAt as postedAt6_2_, post1_.id as id8_0_, post1_.author_id as author5_8_0_, post1_.content as content8_0_, post1_.postedAt as postedAt8_0_, post1_.title as title8_0_, user2_.id as id7_1_, user2_.email as email7_1_, user2_.fullname as fullname7_1_, user2_.isAdmin as isAdmin7_1_, user2_.password as password7_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
15 10 2010 15:26:09,907 DEBUG ~ Static select for action ACTION_MERGE on entity models.Comment: select comment0_.id as id6_0_, comment0_.author as author6_0_, comment0_.content as content6_0_, comment0_.post_id as post5_6_0_, comment0_.postedAt as postedAt6_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:26:09,907 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Comment: select comment0_.id as id6_0_, comment0_.author as author6_0_, comment0_.content as content6_0_, comment0_.post_id as post5_6_0_, comment0_.postedAt as postedAt6_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:26:09,907 DEBUG ~ Static select for entity models.Post [NONE]: select post0_.id as id8_1_, post0_.author_id as author5_8_1_, post0_.content as content8_1_, post0_.postedAt as postedAt8_1_, post0_.title as title8_1_, user1_.id as id7_0_, user1_.email as email7_0_, user1_.fullname as fullname7_0_, user1_.isAdmin as isAdmin7_0_, user1_.password as password7_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
15 10 2010 15:26:09,908 DEBUG ~ Static select for entity models.Post [READ]: select post0_.id as id8_1_, post0_.author_id as author5_8_1_, post0_.content as content8_1_, post0_.postedAt as postedAt8_1_, post0_.title as title8_1_, user1_.id as id7_0_, user1_.email as email7_0_, user1_.fullname as fullname7_0_, user1_.isAdmin as isAdmin7_0_, user1_.password as password7_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
15 10 2010 15:26:09,908 DEBUG ~ Static select for entity models.Post [UPGRADE]: select post0_.id as id8_0_, post0_.author_id as author5_8_0_, post0_.content as content8_0_, post0_.postedAt as postedAt8_0_, post0_.title as title8_0_ from Post post0_ where post0_.id=?
15 10 2010 15:26:09,908 DEBUG ~ Static select for entity models.Post [UPGRADE_NOWAIT]: select post0_.id as id8_0_, post0_.author_id as author5_8_0_, post0_.content as content8_0_, post0_.postedAt as postedAt8_0_, post0_.title as title8_0_ from Post post0_ where post0_.id=?
15 10 2010 15:26:09,908 DEBUG ~ Static select for entity models.Post [FORCE]: select post0_.id as id8_0_, post0_.author_id as author5_8_0_, post0_.content as content8_0_, post0_.postedAt as postedAt8_0_, post0_.title as title8_0_ from Post post0_ where post0_.id=?
15 10 2010 15:26:09,908 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_READ]: select post0_.id as id8_0_, post0_.author_id as author5_8_0_, post0_.content as content8_0_, post0_.postedAt as postedAt8_0_, post0_.title as title8_0_ from Post post0_ where post0_.id=?
15 10 2010 15:26:09,908 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_WRITE]: select post0_.id as id8_0_, post0_.author_id as author5_8_0_, post0_.content as content8_0_, post0_.postedAt as postedAt8_0_, post0_.title as title8_0_ from Post post0_ where post0_.id=?
15 10 2010 15:26:09,909 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_FORCE_INCREMENT]: select post0_.id as id8_0_, post0_.author_id as author5_8_0_, post0_.content as content8_0_, post0_.postedAt as postedAt8_0_, post0_.title as title8_0_ from Post post0_ where post0_.id=?
15 10 2010 15:26:09,909 DEBUG ~ Static select for entity models.Post [OPTIMISTIC]: select post0_.id as id8_1_, post0_.author_id as author5_8_1_, post0_.content as content8_1_, post0_.postedAt as postedAt8_1_, post0_.title as title8_1_, user1_.id as id7_0_, user1_.email as email7_0_, user1_.fullname as fullname7_0_, user1_.isAdmin as isAdmin7_0_, user1_.password as password7_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
15 10 2010 15:26:09,909 DEBUG ~ Static select for entity models.Post [OPTIMISTIC_FORCE_INCREMENT]: select post0_.id as id8_1_, post0_.author_id as author5_8_1_, post0_.content as content8_1_, post0_.postedAt as postedAt8_1_, post0_.title as title8_1_, user1_.id as id7_0_, user1_.email as email7_0_, user1_.fullname as fullname7_0_, user1_.isAdmin as isAdmin7_0_, user1_.password as password7_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
15 10 2010 15:26:09,909 DEBUG ~ Static select for action ACTION_MERGE on entity models.Post: select post0_.id as id8_1_, post0_.author_id as author5_8_1_, post0_.content as content8_1_, post0_.postedAt as postedAt8_1_, post0_.title as title8_1_, comments1_.post_id as post5_8_3_, comments1_.id as id3_, comments1_.id as id6_0_, comments1_.author as author6_0_, comments1_.content as content6_0_, comments1_.post_id as post5_6_0_, comments1_.postedAt as postedAt6_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post_id where post0_.id=?
15 10 2010 15:26:09,910 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Post: select post0_.id as id8_1_, post0_.author_id as author5_8_1_, post0_.content as content8_1_, post0_.postedAt as postedAt8_1_, post0_.title as title8_1_, comments1_.post_id as post5_8_3_, comments1_.id as id3_, comments1_.id as id6_0_, comments1_.author as author6_0_, comments1_.content as content6_0_, comments1_.post_id as post5_6_0_, comments1_.postedAt as postedAt6_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post_id where post0_.id=?
15 10 2010 15:26:09,910 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
15 10 2010 15:26:09,910 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
15 10 2010 15:26:09,910 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
15 10 2010 15:26:09,910 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
15 10 2010 15:26:09,911 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
15 10 2010 15:26:09,911 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
15 10 2010 15:26:09,911 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
15 10 2010 15:26:09,911 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
15 10 2010 15:26:09,911 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
15 10 2010 15:26:09,911 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
15 10 2010 15:26:09,911 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
15 10 2010 15:26:09,912 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
15 10 2010 15:26:09,912 DEBUG ~ Static select for one-to-many models.Post.comments: select comments0_.post_id as post5_8_1_, comments0_.id as id1_, comments0_.id as id6_0_, comments0_.author as author6_0_, comments0_.content as content6_0_, comments0_.post_id as post5_6_0_, comments0_.postedAt as postedAt6_0_ from Comment comments0_ where comments0_.post_id=?
15 10 2010 15:26:09,912 DEBUG ~ registered: 2c9082cd2bae8e52012bae9127780001 (unnamed)
15 10 2010 15:26:09,912 INFO  ~ Not binding factory to JNDI, no JNDI name configured
15 10 2010 15:26:09,912 DEBUG ~ instantiated session factory
15 10 2010 15:26:09,912 DEBUG ~ Execute first pass mapping processing
15 10 2010 15:26:09,912 DEBUG ~ Process hbm files
15 10 2010 15:26:09,912 DEBUG ~ Process annotated classes
15 10 2010 15:26:09,912 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
15 10 2010 15:26:09,912 DEBUG ~ processing extends queue
15 10 2010 15:26:09,912 DEBUG ~ processing collection mappings
15 10 2010 15:26:09,913 DEBUG ~ processing native query and ResultSetMapping mappings
15 10 2010 15:26:09,913 DEBUG ~ processing association property references
15 10 2010 15:26:09,913 DEBUG ~ processing foreign key constraints
15 10 2010 15:26:09,913 DEBUG ~ resolving reference to class: models.Post
15 10 2010 15:26:09,913 DEBUG ~ resolving reference to class: models.User
15 10 2010 15:26:09,920 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:26:09,920 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:26:09,920 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:26:09,920 DEBUG ~ Execute first pass mapping processing
15 10 2010 15:26:09,920 DEBUG ~ Process hbm files
15 10 2010 15:26:09,920 DEBUG ~ Process annotated classes
15 10 2010 15:26:09,920 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
15 10 2010 15:26:09,920 DEBUG ~ processing extends queue
15 10 2010 15:26:09,920 DEBUG ~ processing collection mappings
15 10 2010 15:26:09,920 DEBUG ~ processing native query and ResultSetMapping mappings
15 10 2010 15:26:09,920 DEBUG ~ processing association property references
15 10 2010 15:26:09,921 DEBUG ~ processing foreign key constraints
15 10 2010 15:26:09,921 DEBUG ~ resolving reference to class: models.Post
15 10 2010 15:26:09,921 DEBUG ~ resolving reference to class: models.User
15 10 2010 15:26:09,923 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:26:09,923 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:26:09,923 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:26:09,923 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:26:09,923 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:26:09,923 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:26:09,923 INFO  ~ Running hbm2ddl schema export
15 10 2010 15:26:09,924 DEBUG ~ import file not found: /import.sql
15 10 2010 15:26:09,924 INFO  ~ exporting generated schema to database
15 10 2010 15:26:09,924 DEBUG ~ alter table Comment drop constraint FK9BDE863F388562DE
15 10 2010 15:26:09,924 DEBUG ~ Unsuccessful: alter table Comment drop constraint FK9BDE863F388562DE
15 10 2010 15:26:09,924 DEBUG ~ Table not found: COMMENT in statement [alter table Comment]
15 10 2010 15:26:09,924 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
15 10 2010 15:26:09,933 DEBUG ~ Unsuccessful: alter table Post drop constraint FK260CC0A7CD013E
15 10 2010 15:26:09,933 DEBUG ~ Table not found: POST in statement [alter table Post]
15 10 2010 15:26:09,933 DEBUG ~ drop table Comment if exists
15 10 2010 15:26:09,933 DEBUG ~ drop table Post if exists
15 10 2010 15:26:09,933 DEBUG ~ drop table User if exists
15 10 2010 15:26:09,933 DEBUG ~ create table Comment (id bigint generated by default as identity (start with 1), author varchar(255), content longvarchar, postedAt timestamp, post_id bigint, primary key (id))
15 10 2010 15:26:09,933 DEBUG ~ create table Post (id bigint generated by default as identity (start with 1), content longvarchar, postedAt timestamp, title varchar(255), author_id bigint, primary key (id))
15 10 2010 15:26:09,934 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
15 10 2010 15:26:09,934 DEBUG ~ alter table Comment add constraint FK9BDE863F388562DE foreign key (post_id) references Post
15 10 2010 15:26:09,944 DEBUG ~ alter table Post add constraint FK260CC0A7CD013E foreign key (author_id) references User
15 10 2010 15:26:09,944 INFO  ~ schema export complete
15 10 2010 15:26:09,946 DEBUG ~ Execute first pass mapping processing
15 10 2010 15:26:09,946 DEBUG ~ Process hbm files
15 10 2010 15:26:09,946 DEBUG ~ Process annotated classes
15 10 2010 15:26:09,946 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
15 10 2010 15:26:09,946 DEBUG ~ processing extends queue
15 10 2010 15:26:09,947 DEBUG ~ processing collection mappings
15 10 2010 15:26:09,947 DEBUG ~ processing native query and ResultSetMapping mappings
15 10 2010 15:26:09,947 DEBUG ~ processing association property references
15 10 2010 15:26:09,947 DEBUG ~ processing foreign key constraints
15 10 2010 15:26:09,947 DEBUG ~ resolving reference to class: models.Post
15 10 2010 15:26:09,947 DEBUG ~ resolving reference to class: models.User
15 10 2010 15:26:09,949 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:26:09,949 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:26:09,949 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:26:09,949 DEBUG ~ Execute first pass mapping processing
15 10 2010 15:26:09,949 DEBUG ~ Process hbm files
15 10 2010 15:26:09,949 DEBUG ~ Process annotated classes
15 10 2010 15:26:09,949 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
15 10 2010 15:26:09,949 DEBUG ~ processing extends queue
15 10 2010 15:26:09,949 DEBUG ~ processing collection mappings
15 10 2010 15:26:09,949 DEBUG ~ processing native query and ResultSetMapping mappings
15 10 2010 15:26:09,949 DEBUG ~ processing association property references
15 10 2010 15:26:09,950 DEBUG ~ processing foreign key constraints
15 10 2010 15:26:09,950 DEBUG ~ resolving reference to class: models.Post
15 10 2010 15:26:09,950 DEBUG ~ resolving reference to class: models.User
15 10 2010 15:26:09,952 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:26:09,953 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:26:09,953 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:26:09,953 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:26:09,954 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:26:09,954 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:26:09,954 DEBUG ~ Checking 0 named HQL queries
15 10 2010 15:26:09,954 DEBUG ~ Checking 0 named SQL queries
15 10 2010 15:26:09,973 DEBUG ~ opened session at timestamp: 12871239699
15 10 2010 15:26:09,973 DEBUG ~ begin
15 10 2010 15:26:09,973 DEBUG ~ opening JDBC connection
15 10 2010 15:26:09,973 DEBUG ~ current autocommit status: true
15 10 2010 15:26:09,973 DEBUG ~ disabling autocommit
15 10 2010 15:26:09,975 DEBUG ~ parse() - HQL: select count(e) from models.User e
15 10 2010 15:26:09,978 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'User'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

15 10 2010 15:26:09,978 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:26:09,978 DEBUG ~ select << begin [level=1, statement=select]
15 10 2010 15:26:09,979 DEBUG ~ FromClause{level=1} :  models.User (e) -> user0_
15 10 2010 15:26:09,980 DEBUG ~ Resolved :  e -> user0_.id
15 10 2010 15:26:09,980 DEBUG ~ select : finishing up [level=1, statement=select]
15 10 2010 15:26:09,980 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count user0_.id ) ) ( FromClause{level=1} User user0_ ) )
15 10 2010 15:26:09,980 DEBUG ~ Using FROM fragment [User user0_]
15 10 2010 15:26:09,980 DEBUG ~ select >> end [level=1, statement=select]
15 10 2010 15:26:09,981 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'user0_.id' {alias=e, className=models.User, tableAlias=user0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}

15 10 2010 15:26:09,981 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:26:09,982 DEBUG ~ HQL: select count(e) from models.User e
15 10 2010 15:26:09,982 DEBUG ~ SQL: select count(user0_.id) as col_0_0_ from User user0_
15 10 2010 15:26:09,982 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:26:09,982 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:09,982 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:26:09,982 DEBUG ~ result row: 
15 10 2010 15:26:09,982 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:26:09,983 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:09,983 DEBUG ~ initializing non-lazy collections
15 10 2010 15:26:10,001 DEBUG ~ executing identity-insert immediately
15 10 2010 15:26:10,002 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,002 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,002 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,002 DEBUG ~ Natively generated identity: 1
15 10 2010 15:26:10,002 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,002 DEBUG ~ processing flush-time cascades
15 10 2010 15:26:10,003 DEBUG ~ dirty checking collections
15 10 2010 15:26:10,003 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
15 10 2010 15:26:10,003 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
15 10 2010 15:26:10,003 DEBUG ~ listing entities:
15 10 2010 15:26:10,003 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:26:10,005 DEBUG ~ executing identity-insert immediately
15 10 2010 15:26:10,005 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,005 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,005 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,006 DEBUG ~ Natively generated identity: 2
15 10 2010 15:26:10,006 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,006 DEBUG ~ processing flush-time cascades
15 10 2010 15:26:10,006 DEBUG ~ dirty checking collections
15 10 2010 15:26:10,006 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
15 10 2010 15:26:10,006 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
15 10 2010 15:26:10,006 DEBUG ~ listing entities:
15 10 2010 15:26:10,006 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:26:10,006 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:26:10,013 DEBUG ~ parse() - HQL: from models.User where id = ?
15 10 2010 15:26:10,025 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

15 10 2010 15:26:10,025 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:26:10,025 DEBUG ~ select << begin [level=1, statement=select]
15 10 2010 15:26:10,025 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
15 10 2010 15:26:10,026 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
15 10 2010 15:26:10,026 DEBUG ~ getDataType() : id -> org.hibernate.type.LongType@2723a510
15 10 2010 15:26:10,026 DEBUG ~ Resolved :  {synthetic-alias}.id -> user0_.id
15 10 2010 15:26:10,026 DEBUG ~ select : finishing up [level=1, statement=select]
15 10 2010 15:26:10,026 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.id {synthetic-alias} id ) ? ) ) )
15 10 2010 15:26:10,026 DEBUG ~ Derived SELECT clause created.
15 10 2010 15:26:10,026 DEBUG ~ Using FROM fragment [User user0_]
15 10 2010 15:26:10,026 DEBUG ~ select >> end [level=1, statement=select]
15 10 2010 15:26:10,027 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id7_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email7_, user0_.fullname as fullname7_, user0_.isAdmin as isAdmin7_, user0_.password as password7_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.id' {propertyName=id,dereferenceType=ALL,propertyPath=id,path={synthetic-alias}.id,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.LongType@2723a510}

15 10 2010 15:26:10,027 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:26:10,028 DEBUG ~ HQL: from models.User where id = ?
15 10 2010 15:26:10,028 DEBUG ~ SQL: select user0_.id as id7_, user0_.email as email7_, user0_.fullname as fullname7_, user0_.isAdmin as isAdmin7_, user0_.password as password7_ from User user0_ where user0_.id=?
15 10 2010 15:26:10,028 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:26:10,028 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,029 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:26:10,029 DEBUG ~ result row: EntityKey[models.User#1]
15 10 2010 15:26:10,029 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:26:10,029 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,029 DEBUG ~ initializing non-lazy collections
15 10 2010 15:26:10,032 DEBUG ~ executing identity-insert immediately
15 10 2010 15:26:10,032 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,032 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,032 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,032 DEBUG ~ Natively generated identity: 1
15 10 2010 15:26:10,032 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,033 DEBUG ~ processing flush-time cascades
15 10 2010 15:26:10,033 DEBUG ~ dirty checking collections
15 10 2010 15:26:10,033 DEBUG ~ Collection found: [models.Post.comments#1], was: [<unreferenced>] (initialized)
15 10 2010 15:26:10,033 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
15 10 2010 15:26:10,033 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
15 10 2010 15:26:10,033 DEBUG ~ listing entities:
15 10 2010 15:26:10,033 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:26:10,034 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
15 10 2010 15:26:10,038 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:26:10,043 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,043 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:26:10,044 DEBUG ~ result row: EntityKey[models.User#1]
15 10 2010 15:26:10,044 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:26:10,044 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,045 DEBUG ~ initializing non-lazy collections
15 10 2010 15:26:10,054 DEBUG ~ executing identity-insert immediately
15 10 2010 15:26:10,054 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,055 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,055 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,055 DEBUG ~ Natively generated identity: 2
15 10 2010 15:26:10,055 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,055 DEBUG ~ processing flush-time cascades
15 10 2010 15:26:10,056 DEBUG ~ dirty checking collections
15 10 2010 15:26:10,056 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:26:10,056 DEBUG ~ Collection found: [models.Post.comments#2], was: [<unreferenced>] (initialized)
15 10 2010 15:26:10,056 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
15 10 2010 15:26:10,056 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 2 collections
15 10 2010 15:26:10,056 DEBUG ~ listing entities:
15 10 2010 15:26:10,056 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:26:10,057 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
15 10 2010 15:26:10,057 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:26:10,057 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
15 10 2010 15:26:10,061 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,062 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:26:10,062 DEBUG ~ result row: EntityKey[models.User#2]
15 10 2010 15:26:10,062 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:26:10,062 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,062 DEBUG ~ initializing non-lazy collections
15 10 2010 15:26:10,064 DEBUG ~ executing identity-insert immediately
15 10 2010 15:26:10,065 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,065 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,065 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,065 DEBUG ~ Natively generated identity: 3
15 10 2010 15:26:10,065 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,066 DEBUG ~ processing flush-time cascades
15 10 2010 15:26:10,066 DEBUG ~ dirty checking collections
15 10 2010 15:26:10,066 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:26:10,066 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
15 10 2010 15:26:10,066 DEBUG ~ Collection found: [models.Post.comments#3], was: [<unreferenced>] (initialized)
15 10 2010 15:26:10,066 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 5 objects
15 10 2010 15:26:10,066 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 3 collections
15 10 2010 15:26:10,066 DEBUG ~ listing entities:
15 10 2010 15:26:10,067 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:26:10,067 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
15 10 2010 15:26:10,067 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:26:10,067 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
15 10 2010 15:26:10,068 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
15 10 2010 15:26:10,071 DEBUG ~ parse() - HQL: from models.Post where id = ?
15 10 2010 15:26:10,073 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

15 10 2010 15:26:10,073 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:26:10,074 DEBUG ~ select << begin [level=1, statement=select]
15 10 2010 15:26:10,074 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
15 10 2010 15:26:10,074 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
15 10 2010 15:26:10,075 DEBUG ~ getDataType() : id -> org.hibernate.type.LongType@2723a510
15 10 2010 15:26:10,075 DEBUG ~ Resolved :  {synthetic-alias}.id -> post0_.id
15 10 2010 15:26:10,075 DEBUG ~ select : finishing up [level=1, statement=select]
15 10 2010 15:26:10,075 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( = ( post0_.id {synthetic-alias} id ) ? ) ) )
15 10 2010 15:26:10,075 DEBUG ~ Derived SELECT clause created.
15 10 2010 15:26:10,076 DEBUG ~ Using FROM fragment [Post post0_]
15 10 2010 15:26:10,076 DEBUG ~ select >> end [level=1, statement=select]
15 10 2010 15:26:10,076 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id8_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_8_, post0_.content as content8_, post0_.postedAt as postedAt8_, post0_.title as title8_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'post0_.id' {propertyName=id,dereferenceType=ALL,propertyPath=id,path={synthetic-alias}.id,tableAlias=post0_,className=models.Post,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.LongType@2723a510}

15 10 2010 15:26:10,076 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:26:10,077 DEBUG ~ HQL: from models.Post where id = ?
15 10 2010 15:26:10,077 DEBUG ~ SQL: select post0_.id as id8_, post0_.author_id as author5_8_, post0_.content as content8_, post0_.postedAt as postedAt8_, post0_.title as title8_ from Post post0_ where post0_.id=?
15 10 2010 15:26:10,077 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:26:10,078 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,078 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:26:10,078 DEBUG ~ result row: EntityKey[models.Post#1]
15 10 2010 15:26:10,078 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:26:10,078 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,079 DEBUG ~ initializing non-lazy collections
15 10 2010 15:26:10,081 DEBUG ~ executing identity-insert immediately
15 10 2010 15:26:10,081 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,081 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,081 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,081 DEBUG ~ Natively generated identity: 1
15 10 2010 15:26:10,081 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,082 DEBUG ~ processing flush-time cascades
15 10 2010 15:26:10,082 DEBUG ~ dirty checking collections
15 10 2010 15:26:10,082 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:26:10,082 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
15 10 2010 15:26:10,082 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
15 10 2010 15:26:10,082 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
15 10 2010 15:26:10,082 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
15 10 2010 15:26:10,083 DEBUG ~ listing entities:
15 10 2010 15:26:10,083 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
15 10 2010 15:26:10,083 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:26:10,083 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
15 10 2010 15:26:10,083 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:26:10,083 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
15 10 2010 15:26:10,084 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
15 10 2010 15:26:10,089 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,089 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:26:10,089 DEBUG ~ result row: EntityKey[models.Post#1]
15 10 2010 15:26:10,089 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:26:10,090 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,090 DEBUG ~ initializing non-lazy collections
15 10 2010 15:26:10,094 DEBUG ~ executing identity-insert immediately
15 10 2010 15:26:10,095 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,096 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,096 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,097 DEBUG ~ Natively generated identity: 2
15 10 2010 15:26:10,097 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,099 DEBUG ~ processing flush-time cascades
15 10 2010 15:26:10,099 DEBUG ~ dirty checking collections
15 10 2010 15:26:10,099 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:26:10,100 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
15 10 2010 15:26:10,100 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
15 10 2010 15:26:10,102 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 7 objects
15 10 2010 15:26:10,102 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
15 10 2010 15:26:10,102 DEBUG ~ listing entities:
15 10 2010 15:26:10,102 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
15 10 2010 15:26:10,102 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
15 10 2010 15:26:10,102 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:26:10,102 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:26:10,103 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
15 10 2010 15:26:10,103 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
15 10 2010 15:26:10,103 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
15 10 2010 15:26:10,106 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,107 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:26:10,107 DEBUG ~ result row: EntityKey[models.Post#2]
15 10 2010 15:26:10,107 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:26:10,108 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,109 DEBUG ~ initializing non-lazy collections
15 10 2010 15:26:10,112 DEBUG ~ executing identity-insert immediately
15 10 2010 15:26:10,112 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,113 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,113 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,113 DEBUG ~ Natively generated identity: 3
15 10 2010 15:26:10,113 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,113 DEBUG ~ processing flush-time cascades
15 10 2010 15:26:10,118 DEBUG ~ dirty checking collections
15 10 2010 15:26:10,118 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:26:10,118 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
15 10 2010 15:26:10,118 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
15 10 2010 15:26:10,119 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
15 10 2010 15:26:10,119 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
15 10 2010 15:26:10,119 DEBUG ~ listing entities:
15 10 2010 15:26:10,119 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
15 10 2010 15:26:10,119 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
15 10 2010 15:26:10,119 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:26:10,119 DEBUG ~ models.Comment{content=This post is useless ?
, id=3, author=Tom, post=models.Post#2, postedAt=2009-04-05 09:00:00}
15 10 2010 15:26:10,119 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:26:10,120 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
15 10 2010 15:26:10,120 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
15 10 2010 15:26:10,120 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
15 10 2010 15:26:10,121 DEBUG ~ commit
15 10 2010 15:26:10,121 DEBUG ~ re-enabling autocommit
15 10 2010 15:26:10,121 DEBUG ~ committed JDBC Connection
15 10 2010 15:26:10,121 DEBUG ~ aggressively releasing JDBC connection
15 10 2010 15:26:10,121 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
15 10 2010 15:26:10,123 DEBUG ~ opened session at timestamp: 12871239701
15 10 2010 15:26:10,123 DEBUG ~ begin
15 10 2010 15:26:10,123 DEBUG ~ opening JDBC connection
15 10 2010 15:26:10,123 DEBUG ~ current autocommit status: true
15 10 2010 15:26:10,123 DEBUG ~ disabling autocommit
15 10 2010 15:26:10,129 DEBUG ~ loading entity: [models.Post#1]
15 10 2010 15:26:10,129 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:26:10,130 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:26:10,130 DEBUG ~ result row: EntityKey[models.User#1], EntityKey[models.Post#1]
15 10 2010 15:26:10,130 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:26:10,130 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:26:10,130 DEBUG ~ resolving associations for [models.User#1]
15 10 2010 15:26:10,130 DEBUG ~ done materializing entity [models.User#1]
15 10 2010 15:26:10,130 DEBUG ~ resolving associations for [models.Post#1]
15 10 2010 15:26:10,131 DEBUG ~ done materializing entity [models.Post#1]
15 10 2010 15:26:10,131 DEBUG ~ initializing non-lazy collections
15 10 2010 15:26:10,131 DEBUG ~ done entity load
15 10 2010 15:26:10,279 DEBUG ~ rollback
15 10 2010 15:26:10,279 DEBUG ~ re-enabling autocommit
15 10 2010 15:26:10,279 DEBUG ~ rolled back JDBC Connection
15 10 2010 15:26:10,279 DEBUG ~ aggressively releasing JDBC connection
15 10 2010 15:26:10,279 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
15 10 2010 15:26:10,360 ERROR ~ 

@646f5fg97
Internal Server Error (500) for request GET /posts/1

Template execution error (In /app/views/Application/show.html around line 3)
Execution error occured in template /app/views/Application/show.html. Exception raised was NullPointerException : Cannot get property 'title' on null object.

play.exceptions.TemplateExecutionException: Cannot get property 'title' on null object
	at play.templates.BaseTemplate.throwException(BaseTemplate.java:84)
	at play.templates.GroovyTemplate.render(GroovyTemplate.java:226)
	at play.mvc.results.RenderTemplate.<init>(RenderTemplate.java:23)
	at play.mvc.Controller.renderTemplate(Controller.java:568)
	at play.mvc.Controller.renderTemplate(Controller.java:583)
	at play.mvc.ControllerDelegate.renderTemplate(ControllerDelegate.java:34)
	at play.mvc.ScalaController.render(ScalaController.scala:107)
	at controllers.Application$.show(/app/controllers/Application.scala:39)
	at play.mvc.ActionInvoker.invokeControllerMethod(ActionInvoker.java:420)
	at play.mvc.ActionInvoker.invokeControllerMethod(ActionInvoker.java:403)
	at play.mvc.ActionInvoker.invoke(ActionInvoker.java:176)
	at Invocation.HTTP Request(Play!)
Caused by: java.lang.NullPointerException: Cannot get property 'title' on null object
	at /app/views/Application/show.html.(line:3)
	at play.templates.GroovyTemplate.render(GroovyTemplate.java:203)
	... 10 more
15 10 2010 15:28:56,805 INFO  ~ closing
15 10 2010 15:28:56,808 INFO  ~ Running hbm2ddl schema export
15 10 2010 15:28:56,808 DEBUG ~ import file not found: /import.sql
15 10 2010 15:28:56,808 INFO  ~ exporting generated schema to database
15 10 2010 15:28:56,809 DEBUG ~ alter table Comment drop constraint FK9BDE863F388562DE
15 10 2010 15:28:56,809 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
15 10 2010 15:28:56,809 DEBUG ~ drop table Comment if exists
15 10 2010 15:28:56,809 DEBUG ~ drop table Post if exists
15 10 2010 15:28:56,809 DEBUG ~ drop table User if exists
15 10 2010 15:28:56,809 INFO  ~ schema export complete
15 10 2010 15:28:56,849 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
15 10 2010 15:28:56,849 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
15 10 2010 15:28:56,849 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
15 10 2010 15:28:56,849 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
15 10 2010 15:28:56,850 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
15 10 2010 15:28:56,850 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
15 10 2010 15:28:56,850 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
15 10 2010 15:28:56,850 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
15 10 2010 15:28:56,850 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
15 10 2010 15:28:56,850 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
15 10 2010 15:28:56,850 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
15 10 2010 15:28:56,850 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
15 10 2010 15:28:56,850 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
15 10 2010 15:28:56,850 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
15 10 2010 15:28:56,851 DEBUG ~ Execute first pass mapping processing
15 10 2010 15:28:56,851 DEBUG ~ Process hbm files
15 10 2010 15:28:56,851 DEBUG ~ Process annotated classes
15 10 2010 15:28:56,852 INFO  ~ Binding entity from annotated class: models.Comment
15 10 2010 15:28:56,853 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
15 10 2010 15:28:56,853 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
15 10 2010 15:28:56,853 DEBUG ~ Import with entity name Comment
15 10 2010 15:28:56,853 INFO  ~ Bind entity models.Comment on table Comment
15 10 2010 15:28:56,857 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=id, insertable=true, updatable=true, unique=false}
15 10 2010 15:28:56,857 DEBUG ~ binding property id with lazy=false
15 10 2010 15:28:56,857 DEBUG ~ building SimpleValue for id
15 10 2010 15:28:56,857 DEBUG ~ Building property id
15 10 2010 15:28:56,857 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=author, insertable=true, updatable=true, unique=false}
15 10 2010 15:28:56,861 DEBUG ~ binding property author with lazy=false
15 10 2010 15:28:56,862 DEBUG ~ building SimpleValue for author
15 10 2010 15:28:56,862 DEBUG ~ Building property author
15 10 2010 15:28:56,862 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=content, insertable=true, updatable=true, unique=false}
15 10 2010 15:28:56,862 DEBUG ~ binding property content with lazy=false
15 10 2010 15:28:56,862 DEBUG ~ building SimpleValue for content
15 10 2010 15:28:56,862 DEBUG ~ Building property content
15 10 2010 15:28:56,862 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
15 10 2010 15:28:56,862 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=post, insertable=true, updatable=true, unique=false}
15 10 2010 15:28:56,863 DEBUG ~ Building property post
15 10 2010 15:28:56,863 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
15 10 2010 15:28:56,863 DEBUG ~ binding property postedAt with lazy=false
15 10 2010 15:28:56,863 DEBUG ~ building SimpleValue for postedAt
15 10 2010 15:28:56,863 DEBUG ~ Building property postedAt
15 10 2010 15:28:56,863 INFO  ~ Binding entity from annotated class: models.User
15 10 2010 15:28:56,863 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
15 10 2010 15:28:56,863 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
15 10 2010 15:28:56,864 DEBUG ~ Import with entity name User
15 10 2010 15:28:56,864 INFO  ~ Bind entity models.User on table User
15 10 2010 15:28:56,867 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
15 10 2010 15:28:56,867 DEBUG ~ binding property id with lazy=false
15 10 2010 15:28:56,867 DEBUG ~ building SimpleValue for id
15 10 2010 15:28:56,867 DEBUG ~ Building property id
15 10 2010 15:28:56,867 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
15 10 2010 15:28:56,867 DEBUG ~ binding property email with lazy=false
15 10 2010 15:28:56,868 DEBUG ~ building SimpleValue for email
15 10 2010 15:28:56,868 DEBUG ~ Building property email
15 10 2010 15:28:56,868 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
15 10 2010 15:28:56,868 DEBUG ~ binding property fullname with lazy=false
15 10 2010 15:28:56,868 DEBUG ~ building SimpleValue for fullname
15 10 2010 15:28:56,868 DEBUG ~ Building property fullname
15 10 2010 15:28:56,868 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
15 10 2010 15:28:56,871 DEBUG ~ binding property isAdmin with lazy=false
15 10 2010 15:28:56,872 DEBUG ~ building SimpleValue for isAdmin
15 10 2010 15:28:56,872 DEBUG ~ Building property isAdmin
15 10 2010 15:28:56,872 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
15 10 2010 15:28:56,872 DEBUG ~ binding property password with lazy=false
15 10 2010 15:28:56,872 DEBUG ~ building SimpleValue for password
15 10 2010 15:28:56,872 DEBUG ~ Building property password
15 10 2010 15:28:56,872 INFO  ~ Binding entity from annotated class: models.Post
15 10 2010 15:28:56,873 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
15 10 2010 15:28:56,873 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
15 10 2010 15:28:56,873 DEBUG ~ Import with entity name Post
15 10 2010 15:28:56,874 INFO  ~ Bind entity models.Post on table Post
15 10 2010 15:28:56,877 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=id, insertable=true, updatable=true, unique=false}
15 10 2010 15:28:56,877 DEBUG ~ binding property id with lazy=false
15 10 2010 15:28:56,877 DEBUG ~ building SimpleValue for id
15 10 2010 15:28:56,877 DEBUG ~ Building property id
15 10 2010 15:28:56,877 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
15 10 2010 15:28:56,877 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=author, insertable=true, updatable=true, unique=false}
15 10 2010 15:28:56,877 DEBUG ~ Building property author
15 10 2010 15:28:56,877 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
15 10 2010 15:28:56,877 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments, insertable=true, updatable=true, unique=false}
15 10 2010 15:28:56,878 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=null, insertable=true, updatable=true, unique=false}
15 10 2010 15:28:56,878 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=element, insertable=true, updatable=true, unique=false}
15 10 2010 15:28:56,878 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments_KEY, insertable=true, updatable=true, unique=false}
15 10 2010 15:28:56,878 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='comments_KEY', referencedColumn='null', mappedBy='null'}
15 10 2010 15:28:56,878 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
15 10 2010 15:28:56,878 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
15 10 2010 15:28:56,878 DEBUG ~ Collection role: models.Post.comments
15 10 2010 15:28:56,879 DEBUG ~ Building property comments
15 10 2010 15:28:56,880 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=content, insertable=true, updatable=true, unique=false}
15 10 2010 15:28:56,880 DEBUG ~ binding property content with lazy=false
15 10 2010 15:28:56,880 DEBUG ~ building SimpleValue for content
15 10 2010 15:28:56,880 DEBUG ~ Building property content
15 10 2010 15:28:56,881 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
15 10 2010 15:28:56,881 DEBUG ~ binding property postedAt with lazy=false
15 10 2010 15:28:56,881 DEBUG ~ building SimpleValue for postedAt
15 10 2010 15:28:56,881 DEBUG ~ Building property postedAt
15 10 2010 15:28:56,881 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=title, insertable=true, updatable=true, unique=false}
15 10 2010 15:28:56,881 DEBUG ~ binding property title with lazy=false
15 10 2010 15:28:56,881 DEBUG ~ building SimpleValue for title
15 10 2010 15:28:56,882 DEBUG ~ Building property title
15 10 2010 15:28:56,882 DEBUG ~ setting SimpleValue typeName for id
15 10 2010 15:28:56,882 DEBUG ~ setting SimpleValue typeName for author
15 10 2010 15:28:56,883 DEBUG ~ setting SimpleValue typeName for content
15 10 2010 15:28:56,883 DEBUG ~ setting SimpleValue typeName for postedAt
15 10 2010 15:28:56,883 DEBUG ~ setting SimpleValue typeName for id
15 10 2010 15:28:56,883 DEBUG ~ setting SimpleValue typeName for email
15 10 2010 15:28:56,883 DEBUG ~ setting SimpleValue typeName for fullname
15 10 2010 15:28:56,883 DEBUG ~ setting SimpleValue typeName for isAdmin
15 10 2010 15:28:56,883 DEBUG ~ setting SimpleValue typeName for password
15 10 2010 15:28:56,883 DEBUG ~ setting SimpleValue typeName for id
15 10 2010 15:28:56,883 DEBUG ~ setting SimpleValue typeName for content
15 10 2010 15:28:56,884 DEBUG ~ setting SimpleValue typeName for postedAt
15 10 2010 15:28:56,884 DEBUG ~ setting SimpleValue typeName for title
15 10 2010 15:28:56,884 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
15 10 2010 15:28:56,884 DEBUG ~ processing extends queue
15 10 2010 15:28:56,884 DEBUG ~ processing collection mappings
15 10 2010 15:28:56,884 DEBUG ~ Second pass for collection: models.Post.comments
15 10 2010 15:28:56,884 DEBUG ~ Binding a OneToMany: models.Post.comments through a foreign key
15 10 2010 15:28:56,884 INFO  ~ Mapping collection: models.Post.comments -> Comment
15 10 2010 15:28:56,885 DEBUG ~ Retrieving property models.Comment.post
15 10 2010 15:28:56,885 DEBUG ~ Mapped collection key: post_id, one-to-many: models.Comment
15 10 2010 15:28:56,886 DEBUG ~ processing native query and ResultSetMapping mappings
15 10 2010 15:28:56,886 DEBUG ~ processing association property references
15 10 2010 15:28:56,886 DEBUG ~ processing foreign key constraints
15 10 2010 15:28:56,886 DEBUG ~ resolving reference to class: models.Post
15 10 2010 15:28:56,886 DEBUG ~ resolving reference to class: models.User
15 10 2010 15:28:56,887 INFO  ~ Hibernate Validator not found: ignoring
15 10 2010 15:28:56,898 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
15 10 2010 15:28:56,899 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
15 10 2010 15:28:56,902 DEBUG ~ Search not present in classpath, ignoring event listener registration.
15 10 2010 15:28:56,902 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
15 10 2010 15:28:56,902 DEBUG ~ Preparing to build session factory with filters : {}
15 10 2010 15:28:56,902 DEBUG ~ Execute first pass mapping processing
15 10 2010 15:28:56,902 DEBUG ~ Process hbm files
15 10 2010 15:28:56,902 DEBUG ~ Process annotated classes
15 10 2010 15:28:56,902 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
15 10 2010 15:28:56,902 DEBUG ~ processing extends queue
15 10 2010 15:28:56,902 DEBUG ~ processing collection mappings
15 10 2010 15:28:56,902 DEBUG ~ processing native query and ResultSetMapping mappings
15 10 2010 15:28:56,902 DEBUG ~ processing association property references
15 10 2010 15:28:56,902 DEBUG ~ processing foreign key constraints
15 10 2010 15:28:56,902 DEBUG ~ resolving reference to class: models.Post
15 10 2010 15:28:56,902 DEBUG ~ resolving reference to class: models.User
15 10 2010 15:28:56,904 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
15 10 2010 15:28:56,904 INFO  ~ Using provided datasource
15 10 2010 15:28:56,905 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
15 10 2010 15:28:56,905 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
15 10 2010 15:28:56,905 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
15 10 2010 15:28:56,905 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
15 10 2010 15:28:56,905 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
15 10 2010 15:28:56,906 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
15 10 2010 15:28:56,906 INFO  ~ Automatic flush during beforeCompletion(): disabled
15 10 2010 15:28:56,906 INFO  ~ Automatic session close at end of transaction: disabled
15 10 2010 15:28:56,906 INFO  ~ JDBC batch size: 15
15 10 2010 15:28:56,906 INFO  ~ JDBC batch updates for versioned data: disabled
15 10 2010 15:28:56,906 INFO  ~ Scrollable result sets: enabled
15 10 2010 15:28:56,906 DEBUG ~ Wrap result sets: disabled
15 10 2010 15:28:56,906 INFO  ~ JDBC3 getGeneratedKeys(): disabled
15 10 2010 15:28:56,906 INFO  ~ Connection release mode: auto
15 10 2010 15:28:56,906 INFO  ~ Default batch fetch size: 1
15 10 2010 15:28:56,906 INFO  ~ Generate SQL with comments: disabled
15 10 2010 15:28:56,906 INFO  ~ Order SQL updates by primary key: disabled
15 10 2010 15:28:56,906 INFO  ~ Order SQL inserts for batching: disabled
15 10 2010 15:28:56,906 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
15 10 2010 15:28:56,907 INFO  ~ Using ASTQueryTranslatorFactory
15 10 2010 15:28:56,907 INFO  ~ Query language substitutions: {}
15 10 2010 15:28:56,907 INFO  ~ JPA-QL strict compliance: enabled
15 10 2010 15:28:56,907 INFO  ~ Second-level cache: enabled
15 10 2010 15:28:56,907 INFO  ~ Query cache: disabled
15 10 2010 15:28:56,907 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
15 10 2010 15:28:56,907 INFO  ~ Optimize cache for minimal puts: disabled
15 10 2010 15:28:56,907 INFO  ~ Structured second-level cache entries: disabled
15 10 2010 15:28:56,907 INFO  ~ Statistics: disabled
15 10 2010 15:28:56,907 INFO  ~ Deleted entity synthetic identifier rollback: disabled
15 10 2010 15:28:56,908 INFO  ~ Default entity-mode: pojo
15 10 2010 15:28:56,908 INFO  ~ Named query checking : enabled
15 10 2010 15:28:56,908 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
15 10 2010 15:28:56,912 INFO  ~ building session factory
15 10 2010 15:28:56,912 DEBUG ~ Session factory constructed with filter configurations : {}
15 10 2010 15:28:56,912 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
15 10 2010 15:28:56,913 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:28:56,913 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:28:56,913 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:28:56,918 DEBUG ~ Static SQL for entity: models.Comment
15 10 2010 15:28:56,918 DEBUG ~  Version select: select id from Comment where id =?
15 10 2010 15:28:56,918 DEBUG ~  Snapshot select: select comment_.id, comment_.author as author12_, comment_.content as content12_, comment_.post_id as post5_12_, comment_.postedAt as postedAt12_ from Comment comment_ where comment_.id=?
15 10 2010 15:28:56,919 DEBUG ~  Insert 0: insert into Comment (author, content, post_id, postedAt, id) values (?, ?, ?, ?, ?)
15 10 2010 15:28:56,919 DEBUG ~  Update 0: update Comment set author=?, content=?, post_id=?, postedAt=? where id=?
15 10 2010 15:28:56,919 DEBUG ~  Delete 0: delete from Comment where id=?
15 10 2010 15:28:56,919 DEBUG ~  Identity insert: insert into Comment (id, author, content, post_id, postedAt) values (null, ?, ?, ?, ?)
15 10 2010 15:28:56,927 DEBUG ~ Static SQL for entity: models.Post
15 10 2010 15:28:56,927 DEBUG ~  Version select: select id from Post where id =?
15 10 2010 15:28:56,927 DEBUG ~  Snapshot select: select post_.id, post_.author_id as author5_14_, post_.content as content14_, post_.postedAt as postedAt14_, post_.title as title14_ from Post post_ where post_.id=?
15 10 2010 15:28:56,927 DEBUG ~  Insert 0: insert into Post (author_id, content, postedAt, title, id) values (?, ?, ?, ?, ?)
15 10 2010 15:28:56,927 DEBUG ~  Update 0: update Post set author_id=?, content=?, postedAt=?, title=? where id=?
15 10 2010 15:28:56,927 DEBUG ~  Delete 0: delete from Post where id=?
15 10 2010 15:28:56,927 DEBUG ~  Identity insert: insert into Post (id, author_id, content, postedAt, title) values (null, ?, ?, ?, ?)
15 10 2010 15:28:56,932 DEBUG ~ Static SQL for entity: models.User
15 10 2010 15:28:56,932 DEBUG ~  Version select: select id from User where id =?
15 10 2010 15:28:56,932 DEBUG ~  Snapshot select: select user_.id, user_.email as email13_, user_.fullname as fullname13_, user_.isAdmin as isAdmin13_, user_.password as password13_ from User user_ where user_.id=?
15 10 2010 15:28:56,932 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
15 10 2010 15:28:56,932 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
15 10 2010 15:28:56,932 DEBUG ~  Delete 0: delete from User where id=?
15 10 2010 15:28:56,932 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
15 10 2010 15:28:56,932 DEBUG ~ Static SQL for collection: models.Post.comments
15 10 2010 15:28:56,932 DEBUG ~  Row insert: update Comment set post_id=? where id=?
15 10 2010 15:28:56,933 DEBUG ~  Row delete: update Comment set post_id=null where post_id=? and id=?
15 10 2010 15:28:56,933 DEBUG ~  One-shot delete: update Comment set post_id=null where post_id=?
15 10 2010 15:28:56,933 DEBUG ~ Static select for entity models.Comment [NONE]: select comment0_.id as id12_2_, comment0_.author as author12_2_, comment0_.content as content12_2_, comment0_.post_id as post5_12_2_, comment0_.postedAt as postedAt12_2_, post1_.id as id14_0_, post1_.author_id as author5_14_0_, post1_.content as content14_0_, post1_.postedAt as postedAt14_0_, post1_.title as title14_0_, user2_.id as id13_1_, user2_.email as email13_1_, user2_.fullname as fullname13_1_, user2_.isAdmin as isAdmin13_1_, user2_.password as password13_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
15 10 2010 15:28:56,933 DEBUG ~ Static select for entity models.Comment [READ]: select comment0_.id as id12_2_, comment0_.author as author12_2_, comment0_.content as content12_2_, comment0_.post_id as post5_12_2_, comment0_.postedAt as postedAt12_2_, post1_.id as id14_0_, post1_.author_id as author5_14_0_, post1_.content as content14_0_, post1_.postedAt as postedAt14_0_, post1_.title as title14_0_, user2_.id as id13_1_, user2_.email as email13_1_, user2_.fullname as fullname13_1_, user2_.isAdmin as isAdmin13_1_, user2_.password as password13_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
15 10 2010 15:28:56,934 DEBUG ~ Static select for entity models.Comment [UPGRADE]: select comment0_.id as id12_0_, comment0_.author as author12_0_, comment0_.content as content12_0_, comment0_.post_id as post5_12_0_, comment0_.postedAt as postedAt12_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:28:56,934 DEBUG ~ Static select for entity models.Comment [UPGRADE_NOWAIT]: select comment0_.id as id12_0_, comment0_.author as author12_0_, comment0_.content as content12_0_, comment0_.post_id as post5_12_0_, comment0_.postedAt as postedAt12_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:28:56,934 DEBUG ~ Static select for entity models.Comment [FORCE]: select comment0_.id as id12_0_, comment0_.author as author12_0_, comment0_.content as content12_0_, comment0_.post_id as post5_12_0_, comment0_.postedAt as postedAt12_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:28:56,934 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_READ]: select comment0_.id as id12_0_, comment0_.author as author12_0_, comment0_.content as content12_0_, comment0_.post_id as post5_12_0_, comment0_.postedAt as postedAt12_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:28:56,934 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_WRITE]: select comment0_.id as id12_0_, comment0_.author as author12_0_, comment0_.content as content12_0_, comment0_.post_id as post5_12_0_, comment0_.postedAt as postedAt12_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:28:56,934 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_FORCE_INCREMENT]: select comment0_.id as id12_0_, comment0_.author as author12_0_, comment0_.content as content12_0_, comment0_.post_id as post5_12_0_, comment0_.postedAt as postedAt12_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:28:56,935 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC]: select comment0_.id as id12_2_, comment0_.author as author12_2_, comment0_.content as content12_2_, comment0_.post_id as post5_12_2_, comment0_.postedAt as postedAt12_2_, post1_.id as id14_0_, post1_.author_id as author5_14_0_, post1_.content as content14_0_, post1_.postedAt as postedAt14_0_, post1_.title as title14_0_, user2_.id as id13_1_, user2_.email as email13_1_, user2_.fullname as fullname13_1_, user2_.isAdmin as isAdmin13_1_, user2_.password as password13_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
15 10 2010 15:28:56,935 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC_FORCE_INCREMENT]: select comment0_.id as id12_2_, comment0_.author as author12_2_, comment0_.content as content12_2_, comment0_.post_id as post5_12_2_, comment0_.postedAt as postedAt12_2_, post1_.id as id14_0_, post1_.author_id as author5_14_0_, post1_.content as content14_0_, post1_.postedAt as postedAt14_0_, post1_.title as title14_0_, user2_.id as id13_1_, user2_.email as email13_1_, user2_.fullname as fullname13_1_, user2_.isAdmin as isAdmin13_1_, user2_.password as password13_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
15 10 2010 15:28:56,935 DEBUG ~ Static select for action ACTION_MERGE on entity models.Comment: select comment0_.id as id12_0_, comment0_.author as author12_0_, comment0_.content as content12_0_, comment0_.post_id as post5_12_0_, comment0_.postedAt as postedAt12_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:28:56,935 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Comment: select comment0_.id as id12_0_, comment0_.author as author12_0_, comment0_.content as content12_0_, comment0_.post_id as post5_12_0_, comment0_.postedAt as postedAt12_0_ from Comment comment0_ where comment0_.id=?
15 10 2010 15:28:56,936 DEBUG ~ Static select for entity models.Post [NONE]: select post0_.id as id14_1_, post0_.author_id as author5_14_1_, post0_.content as content14_1_, post0_.postedAt as postedAt14_1_, post0_.title as title14_1_, user1_.id as id13_0_, user1_.email as email13_0_, user1_.fullname as fullname13_0_, user1_.isAdmin as isAdmin13_0_, user1_.password as password13_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
15 10 2010 15:28:56,936 DEBUG ~ Static select for entity models.Post [READ]: select post0_.id as id14_1_, post0_.author_id as author5_14_1_, post0_.content as content14_1_, post0_.postedAt as postedAt14_1_, post0_.title as title14_1_, user1_.id as id13_0_, user1_.email as email13_0_, user1_.fullname as fullname13_0_, user1_.isAdmin as isAdmin13_0_, user1_.password as password13_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
15 10 2010 15:28:56,936 DEBUG ~ Static select for entity models.Post [UPGRADE]: select post0_.id as id14_0_, post0_.author_id as author5_14_0_, post0_.content as content14_0_, post0_.postedAt as postedAt14_0_, post0_.title as title14_0_ from Post post0_ where post0_.id=?
15 10 2010 15:28:56,936 DEBUG ~ Static select for entity models.Post [UPGRADE_NOWAIT]: select post0_.id as id14_0_, post0_.author_id as author5_14_0_, post0_.content as content14_0_, post0_.postedAt as postedAt14_0_, post0_.title as title14_0_ from Post post0_ where post0_.id=?
15 10 2010 15:28:56,937 DEBUG ~ Static select for entity models.Post [FORCE]: select post0_.id as id14_0_, post0_.author_id as author5_14_0_, post0_.content as content14_0_, post0_.postedAt as postedAt14_0_, post0_.title as title14_0_ from Post post0_ where post0_.id=?
15 10 2010 15:28:56,937 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_READ]: select post0_.id as id14_0_, post0_.author_id as author5_14_0_, post0_.content as content14_0_, post0_.postedAt as postedAt14_0_, post0_.title as title14_0_ from Post post0_ where post0_.id=?
15 10 2010 15:28:56,937 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_WRITE]: select post0_.id as id14_0_, post0_.author_id as author5_14_0_, post0_.content as content14_0_, post0_.postedAt as postedAt14_0_, post0_.title as title14_0_ from Post post0_ where post0_.id=?
15 10 2010 15:28:56,937 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_FORCE_INCREMENT]: select post0_.id as id14_0_, post0_.author_id as author5_14_0_, post0_.content as content14_0_, post0_.postedAt as postedAt14_0_, post0_.title as title14_0_ from Post post0_ where post0_.id=?
15 10 2010 15:28:56,937 DEBUG ~ Static select for entity models.Post [OPTIMISTIC]: select post0_.id as id14_1_, post0_.author_id as author5_14_1_, post0_.content as content14_1_, post0_.postedAt as postedAt14_1_, post0_.title as title14_1_, user1_.id as id13_0_, user1_.email as email13_0_, user1_.fullname as fullname13_0_, user1_.isAdmin as isAdmin13_0_, user1_.password as password13_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
15 10 2010 15:28:56,938 DEBUG ~ Static select for entity models.Post [OPTIMISTIC_FORCE_INCREMENT]: select post0_.id as id14_1_, post0_.author_id as author5_14_1_, post0_.content as content14_1_, post0_.postedAt as postedAt14_1_, post0_.title as title14_1_, user1_.id as id13_0_, user1_.email as email13_0_, user1_.fullname as fullname13_0_, user1_.isAdmin as isAdmin13_0_, user1_.password as password13_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
15 10 2010 15:28:56,997 DEBUG ~ Static select for action ACTION_MERGE on entity models.Post: select post0_.id as id14_1_, post0_.author_id as author5_14_1_, post0_.content as content14_1_, post0_.postedAt as postedAt14_1_, post0_.title as title14_1_, comments1_.post_id as post5_14_3_, comments1_.id as id3_, comments1_.id as id12_0_, comments1_.author as author12_0_, comments1_.content as content12_0_, comments1_.post_id as post5_12_0_, comments1_.postedAt as postedAt12_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post_id where post0_.id=?
15 10 2010 15:28:56,997 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Post: select post0_.id as id14_1_, post0_.author_id as author5_14_1_, post0_.content as content14_1_, post0_.postedAt as postedAt14_1_, post0_.title as title14_1_, comments1_.post_id as post5_14_3_, comments1_.id as id3_, comments1_.id as id12_0_, comments1_.author as author12_0_, comments1_.content as content12_0_, comments1_.post_id as post5_12_0_, comments1_.postedAt as postedAt12_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post_id where post0_.id=?
15 10 2010 15:28:56,997 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
15 10 2010 15:28:56,997 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
15 10 2010 15:28:56,997 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
15 10 2010 15:28:56,998 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
15 10 2010 15:28:56,998 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
15 10 2010 15:28:56,998 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
15 10 2010 15:28:56,998 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
15 10 2010 15:28:56,998 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
15 10 2010 15:28:56,999 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
15 10 2010 15:28:56,999 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
15 10 2010 15:28:56,999 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
15 10 2010 15:28:56,999 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
15 10 2010 15:28:56,999 DEBUG ~ Static select for one-to-many models.Post.comments: select comments0_.post_id as post5_14_1_, comments0_.id as id1_, comments0_.id as id12_0_, comments0_.author as author12_0_, comments0_.content as content12_0_, comments0_.post_id as post5_12_0_, comments0_.postedAt as postedAt12_0_ from Comment comments0_ where comments0_.post_id=?
15 10 2010 15:28:56,999 DEBUG ~ registered: 2c9082cd2bae8e52012bae93b4270002 (unnamed)
15 10 2010 15:28:56,999 INFO  ~ Not binding factory to JNDI, no JNDI name configured
15 10 2010 15:28:57,000 DEBUG ~ instantiated session factory
15 10 2010 15:28:57,000 DEBUG ~ Execute first pass mapping processing
15 10 2010 15:28:57,000 DEBUG ~ Process hbm files
15 10 2010 15:28:57,000 DEBUG ~ Process annotated classes
15 10 2010 15:28:57,000 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
15 10 2010 15:28:57,000 DEBUG ~ processing extends queue
15 10 2010 15:28:57,000 DEBUG ~ processing collection mappings
15 10 2010 15:28:57,000 DEBUG ~ processing native query and ResultSetMapping mappings
15 10 2010 15:28:57,000 DEBUG ~ processing association property references
15 10 2010 15:28:57,000 DEBUG ~ processing foreign key constraints
15 10 2010 15:28:57,000 DEBUG ~ resolving reference to class: models.Post
15 10 2010 15:28:57,000 DEBUG ~ resolving reference to class: models.User
15 10 2010 15:28:57,005 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:28:57,005 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:28:57,005 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:28:57,005 DEBUG ~ Execute first pass mapping processing
15 10 2010 15:28:57,006 DEBUG ~ Process hbm files
15 10 2010 15:28:57,006 DEBUG ~ Process annotated classes
15 10 2010 15:28:57,006 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
15 10 2010 15:28:57,006 DEBUG ~ processing extends queue
15 10 2010 15:28:57,006 DEBUG ~ processing collection mappings
15 10 2010 15:28:57,006 DEBUG ~ processing native query and ResultSetMapping mappings
15 10 2010 15:28:57,006 DEBUG ~ processing association property references
15 10 2010 15:28:57,006 DEBUG ~ processing foreign key constraints
15 10 2010 15:28:57,006 DEBUG ~ resolving reference to class: models.Post
15 10 2010 15:28:57,006 DEBUG ~ resolving reference to class: models.User
15 10 2010 15:28:57,008 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:28:57,008 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:28:57,008 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:28:57,008 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:28:57,008 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:28:57,008 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:28:57,008 INFO  ~ Running hbm2ddl schema export
15 10 2010 15:28:57,009 DEBUG ~ import file not found: /import.sql
15 10 2010 15:28:57,009 INFO  ~ exporting generated schema to database
15 10 2010 15:28:57,009 DEBUG ~ alter table Comment drop constraint FK9BDE863F388562DE
15 10 2010 15:28:57,010 DEBUG ~ Unsuccessful: alter table Comment drop constraint FK9BDE863F388562DE
15 10 2010 15:28:57,010 DEBUG ~ Table not found: COMMENT in statement [alter table Comment]
15 10 2010 15:28:57,010 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
15 10 2010 15:28:57,010 DEBUG ~ Unsuccessful: alter table Post drop constraint FK260CC0A7CD013E
15 10 2010 15:28:57,010 DEBUG ~ Table not found: POST in statement [alter table Post]
15 10 2010 15:28:57,010 DEBUG ~ drop table Comment if exists
15 10 2010 15:28:57,010 DEBUG ~ drop table Post if exists
15 10 2010 15:28:57,010 DEBUG ~ drop table User if exists
15 10 2010 15:28:57,010 DEBUG ~ create table Comment (id bigint generated by default as identity (start with 1), author varchar(255), content longvarchar, postedAt timestamp, post_id bigint, primary key (id))
15 10 2010 15:28:57,011 DEBUG ~ create table Post (id bigint generated by default as identity (start with 1), content longvarchar, postedAt timestamp, title varchar(255), author_id bigint, primary key (id))
15 10 2010 15:28:57,011 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
15 10 2010 15:28:57,011 DEBUG ~ alter table Comment add constraint FK9BDE863F388562DE foreign key (post_id) references Post
15 10 2010 15:28:57,011 DEBUG ~ alter table Post add constraint FK260CC0A7CD013E foreign key (author_id) references User
15 10 2010 15:28:57,011 INFO  ~ schema export complete
15 10 2010 15:28:57,012 DEBUG ~ Execute first pass mapping processing
15 10 2010 15:28:57,012 DEBUG ~ Process hbm files
15 10 2010 15:28:57,012 DEBUG ~ Process annotated classes
15 10 2010 15:28:57,012 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
15 10 2010 15:28:57,012 DEBUG ~ processing extends queue
15 10 2010 15:28:57,012 DEBUG ~ processing collection mappings
15 10 2010 15:28:57,012 DEBUG ~ processing native query and ResultSetMapping mappings
15 10 2010 15:28:57,012 DEBUG ~ processing association property references
15 10 2010 15:28:57,012 DEBUG ~ processing foreign key constraints
15 10 2010 15:28:57,012 DEBUG ~ resolving reference to class: models.Post
15 10 2010 15:28:57,012 DEBUG ~ resolving reference to class: models.User
15 10 2010 15:28:57,015 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:28:57,015 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:28:57,015 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:28:57,015 DEBUG ~ Execute first pass mapping processing
15 10 2010 15:28:57,015 DEBUG ~ Process hbm files
15 10 2010 15:28:57,015 DEBUG ~ Process annotated classes
15 10 2010 15:28:57,016 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
15 10 2010 15:28:57,016 DEBUG ~ processing extends queue
15 10 2010 15:28:57,016 DEBUG ~ processing collection mappings
15 10 2010 15:28:57,016 DEBUG ~ processing native query and ResultSetMapping mappings
15 10 2010 15:28:57,016 DEBUG ~ processing association property references
15 10 2010 15:28:57,016 DEBUG ~ processing foreign key constraints
15 10 2010 15:28:57,016 DEBUG ~ resolving reference to class: models.Post
15 10 2010 15:28:57,016 DEBUG ~ resolving reference to class: models.User
15 10 2010 15:28:57,017 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:28:57,018 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:28:57,018 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:28:57,018 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:28:57,018 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:28:57,018 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
15 10 2010 15:28:57,018 DEBUG ~ Checking 0 named HQL queries
15 10 2010 15:28:57,018 DEBUG ~ Checking 0 named SQL queries
15 10 2010 15:28:57,040 DEBUG ~ opened session at timestamp: 12871241370
15 10 2010 15:28:57,040 DEBUG ~ begin
15 10 2010 15:28:57,040 DEBUG ~ opening JDBC connection
15 10 2010 15:28:57,040 DEBUG ~ current autocommit status: true
15 10 2010 15:28:57,040 DEBUG ~ disabling autocommit
15 10 2010 15:28:57,041 DEBUG ~ parse() - HQL: select count(e) from models.User e
15 10 2010 15:28:57,043 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'User'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

15 10 2010 15:28:57,044 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:28:57,044 DEBUG ~ select << begin [level=1, statement=select]
15 10 2010 15:28:57,044 DEBUG ~ FromClause{level=1} :  models.User (e) -> user0_
15 10 2010 15:28:57,044 DEBUG ~ Resolved :  e -> user0_.id
15 10 2010 15:28:57,044 DEBUG ~ select : finishing up [level=1, statement=select]
15 10 2010 15:28:57,044 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count user0_.id ) ) ( FromClause{level=1} User user0_ ) )
15 10 2010 15:28:57,045 DEBUG ~ Using FROM fragment [User user0_]
15 10 2010 15:28:57,045 DEBUG ~ select >> end [level=1, statement=select]
15 10 2010 15:28:57,045 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'user0_.id' {alias=e, className=models.User, tableAlias=user0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}

15 10 2010 15:28:57,045 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:28:57,046 DEBUG ~ HQL: select count(e) from models.User e
15 10 2010 15:28:57,046 DEBUG ~ SQL: select count(user0_.id) as col_0_0_ from User user0_
15 10 2010 15:28:57,046 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:28:57,046 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,046 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:28:57,046 DEBUG ~ result row: 
15 10 2010 15:28:57,047 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:28:57,047 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,047 DEBUG ~ initializing non-lazy collections
15 10 2010 15:28:57,057 DEBUG ~ executing identity-insert immediately
15 10 2010 15:28:57,057 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,057 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,057 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,057 DEBUG ~ Natively generated identity: 1
15 10 2010 15:28:57,058 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,058 DEBUG ~ processing flush-time cascades
15 10 2010 15:28:57,058 DEBUG ~ dirty checking collections
15 10 2010 15:28:57,058 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
15 10 2010 15:28:57,058 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
15 10 2010 15:28:57,058 DEBUG ~ listing entities:
15 10 2010 15:28:57,058 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:28:57,060 DEBUG ~ executing identity-insert immediately
15 10 2010 15:28:57,061 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,061 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,061 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,061 DEBUG ~ Natively generated identity: 2
15 10 2010 15:28:57,061 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,061 DEBUG ~ processing flush-time cascades
15 10 2010 15:28:57,062 DEBUG ~ dirty checking collections
15 10 2010 15:28:57,062 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
15 10 2010 15:28:57,062 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
15 10 2010 15:28:57,062 DEBUG ~ listing entities:
15 10 2010 15:28:57,062 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:28:57,062 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:28:57,065 DEBUG ~ parse() - HQL: from models.User where id = ?
15 10 2010 15:28:57,067 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

15 10 2010 15:28:57,068 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:28:57,068 DEBUG ~ select << begin [level=1, statement=select]
15 10 2010 15:28:57,068 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
15 10 2010 15:28:57,069 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
15 10 2010 15:28:57,069 DEBUG ~ getDataType() : id -> org.hibernate.type.LongType@2723a510
15 10 2010 15:28:57,069 DEBUG ~ Resolved :  {synthetic-alias}.id -> user0_.id
15 10 2010 15:28:57,069 DEBUG ~ select : finishing up [level=1, statement=select]
15 10 2010 15:28:57,069 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.id {synthetic-alias} id ) ? ) ) )
15 10 2010 15:28:57,069 DEBUG ~ Derived SELECT clause created.
15 10 2010 15:28:57,069 DEBUG ~ Using FROM fragment [User user0_]
15 10 2010 15:28:57,069 DEBUG ~ select >> end [level=1, statement=select]
15 10 2010 15:28:57,070 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id13_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email13_, user0_.fullname as fullname13_, user0_.isAdmin as isAdmin13_, user0_.password as password13_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.id' {propertyName=id,dereferenceType=ALL,propertyPath=id,path={synthetic-alias}.id,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.LongType@2723a510}

15 10 2010 15:28:57,070 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:28:57,071 DEBUG ~ HQL: from models.User where id = ?
15 10 2010 15:28:57,071 DEBUG ~ SQL: select user0_.id as id13_, user0_.email as email13_, user0_.fullname as fullname13_, user0_.isAdmin as isAdmin13_, user0_.password as password13_ from User user0_ where user0_.id=?
15 10 2010 15:28:57,071 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:28:57,071 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,072 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:28:57,072 DEBUG ~ result row: EntityKey[models.User#1]
15 10 2010 15:28:57,072 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:28:57,072 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,072 DEBUG ~ initializing non-lazy collections
15 10 2010 15:28:57,075 DEBUG ~ executing identity-insert immediately
15 10 2010 15:28:57,075 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,075 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,075 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,075 DEBUG ~ Natively generated identity: 1
15 10 2010 15:28:57,075 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,076 DEBUG ~ processing flush-time cascades
15 10 2010 15:28:57,076 DEBUG ~ dirty checking collections
15 10 2010 15:28:57,076 DEBUG ~ Collection found: [models.Post.comments#1], was: [<unreferenced>] (initialized)
15 10 2010 15:28:57,076 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
15 10 2010 15:28:57,076 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
15 10 2010 15:28:57,076 DEBUG ~ listing entities:
15 10 2010 15:28:57,077 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:28:57,077 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
15 10 2010 15:28:57,077 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:28:57,080 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,081 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:28:57,081 DEBUG ~ result row: EntityKey[models.User#1]
15 10 2010 15:28:57,081 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:28:57,081 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,081 DEBUG ~ initializing non-lazy collections
15 10 2010 15:28:57,084 DEBUG ~ executing identity-insert immediately
15 10 2010 15:28:57,084 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,084 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,084 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,084 DEBUG ~ Natively generated identity: 2
15 10 2010 15:28:57,084 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,085 DEBUG ~ processing flush-time cascades
15 10 2010 15:28:57,085 DEBUG ~ dirty checking collections
15 10 2010 15:28:57,085 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:28:57,085 DEBUG ~ Collection found: [models.Post.comments#2], was: [<unreferenced>] (initialized)
15 10 2010 15:28:57,085 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
15 10 2010 15:28:57,085 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 2 collections
15 10 2010 15:28:57,085 DEBUG ~ listing entities:
15 10 2010 15:28:57,086 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:28:57,086 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
15 10 2010 15:28:57,086 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:28:57,086 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
15 10 2010 15:28:57,090 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,090 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:28:57,090 DEBUG ~ result row: EntityKey[models.User#2]
15 10 2010 15:28:57,090 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:28:57,091 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,091 DEBUG ~ initializing non-lazy collections
15 10 2010 15:28:57,094 DEBUG ~ executing identity-insert immediately
15 10 2010 15:28:57,094 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,094 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,094 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,095 DEBUG ~ Natively generated identity: 3
15 10 2010 15:28:57,095 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,095 DEBUG ~ processing flush-time cascades
15 10 2010 15:28:57,095 DEBUG ~ dirty checking collections
15 10 2010 15:28:57,096 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:28:57,096 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
15 10 2010 15:28:57,096 DEBUG ~ Collection found: [models.Post.comments#3], was: [<unreferenced>] (initialized)
15 10 2010 15:28:57,096 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 5 objects
15 10 2010 15:28:57,096 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 3 collections
15 10 2010 15:28:57,096 DEBUG ~ listing entities:
15 10 2010 15:28:57,096 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:28:57,096 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
15 10 2010 15:28:57,096 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:28:57,097 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
15 10 2010 15:28:57,097 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
15 10 2010 15:28:57,103 DEBUG ~ parse() - HQL: from models.Post where id = ?
15 10 2010 15:28:57,105 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

15 10 2010 15:28:57,105 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:28:57,106 DEBUG ~ select << begin [level=1, statement=select]
15 10 2010 15:28:57,106 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
15 10 2010 15:28:57,106 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
15 10 2010 15:28:57,106 DEBUG ~ getDataType() : id -> org.hibernate.type.LongType@2723a510
15 10 2010 15:28:57,106 DEBUG ~ Resolved :  {synthetic-alias}.id -> post0_.id
15 10 2010 15:28:57,107 DEBUG ~ select : finishing up [level=1, statement=select]
15 10 2010 15:28:57,107 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( = ( post0_.id {synthetic-alias} id ) ? ) ) )
15 10 2010 15:28:57,107 DEBUG ~ Derived SELECT clause created.
15 10 2010 15:28:57,107 DEBUG ~ Using FROM fragment [Post post0_]
15 10 2010 15:28:57,107 DEBUG ~ select >> end [level=1, statement=select]
15 10 2010 15:28:57,108 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id14_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_14_, post0_.content as content14_, post0_.postedAt as postedAt14_, post0_.title as title14_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'post0_.id' {propertyName=id,dereferenceType=ALL,propertyPath=id,path={synthetic-alias}.id,tableAlias=post0_,className=models.Post,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.LongType@2723a510}

15 10 2010 15:28:57,108 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:28:57,108 DEBUG ~ HQL: from models.Post where id = ?
15 10 2010 15:28:57,108 DEBUG ~ SQL: select post0_.id as id14_, post0_.author_id as author5_14_, post0_.content as content14_, post0_.postedAt as postedAt14_, post0_.title as title14_ from Post post0_ where post0_.id=?
15 10 2010 15:28:57,108 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:28:57,109 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,109 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:28:57,110 DEBUG ~ result row: EntityKey[models.Post#1]
15 10 2010 15:28:57,110 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:28:57,110 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,110 DEBUG ~ initializing non-lazy collections
15 10 2010 15:28:57,113 DEBUG ~ executing identity-insert immediately
15 10 2010 15:28:57,113 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,113 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,114 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,114 DEBUG ~ Natively generated identity: 1
15 10 2010 15:28:57,114 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,114 DEBUG ~ processing flush-time cascades
15 10 2010 15:28:57,114 DEBUG ~ dirty checking collections
15 10 2010 15:28:57,115 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:28:57,115 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
15 10 2010 15:28:57,115 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
15 10 2010 15:28:57,115 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
15 10 2010 15:28:57,116 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
15 10 2010 15:28:57,116 DEBUG ~ listing entities:
15 10 2010 15:28:57,116 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
15 10 2010 15:28:57,116 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:28:57,116 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
15 10 2010 15:28:57,116 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:28:57,117 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
15 10 2010 15:28:57,117 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
15 10 2010 15:28:57,120 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,120 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:28:57,120 DEBUG ~ result row: EntityKey[models.Post#1]
15 10 2010 15:28:57,120 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:28:57,121 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,121 DEBUG ~ initializing non-lazy collections
15 10 2010 15:28:57,123 DEBUG ~ executing identity-insert immediately
15 10 2010 15:28:57,123 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,123 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,123 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,123 DEBUG ~ Natively generated identity: 2
15 10 2010 15:28:57,123 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,124 DEBUG ~ processing flush-time cascades
15 10 2010 15:28:57,124 DEBUG ~ dirty checking collections
15 10 2010 15:28:57,124 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:28:57,124 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
15 10 2010 15:28:57,124 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
15 10 2010 15:28:57,125 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 7 objects
15 10 2010 15:28:57,125 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
15 10 2010 15:28:57,125 DEBUG ~ listing entities:
15 10 2010 15:28:57,125 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
15 10 2010 15:28:57,125 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
15 10 2010 15:28:57,125 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:28:57,125 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:28:57,126 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
15 10 2010 15:28:57,126 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
15 10 2010 15:28:57,126 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
15 10 2010 15:28:57,129 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,129 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:28:57,129 DEBUG ~ result row: EntityKey[models.Post#2]
15 10 2010 15:28:57,129 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:28:57,130 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,130 DEBUG ~ initializing non-lazy collections
15 10 2010 15:28:57,132 DEBUG ~ executing identity-insert immediately
15 10 2010 15:28:57,132 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,132 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,132 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,132 DEBUG ~ Natively generated identity: 3
15 10 2010 15:28:57,132 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,133 DEBUG ~ processing flush-time cascades
15 10 2010 15:28:57,133 DEBUG ~ dirty checking collections
15 10 2010 15:28:57,133 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:28:57,133 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
15 10 2010 15:28:57,133 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
15 10 2010 15:28:57,133 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
15 10 2010 15:28:57,134 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
15 10 2010 15:28:57,134 DEBUG ~ listing entities:
15 10 2010 15:28:57,134 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
15 10 2010 15:28:57,134 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
15 10 2010 15:28:57,134 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:28:57,134 DEBUG ~ models.Comment{content=This post is useless ?
, id=3, author=Tom, post=models.Post#2, postedAt=2009-04-05 09:00:00}
15 10 2010 15:28:57,134 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:28:57,135 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
15 10 2010 15:28:57,135 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
15 10 2010 15:28:57,135 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
15 10 2010 15:28:57,136 DEBUG ~ commit
15 10 2010 15:28:57,136 DEBUG ~ re-enabling autocommit
15 10 2010 15:28:57,136 DEBUG ~ committed JDBC Connection
15 10 2010 15:28:57,136 DEBUG ~ aggressively releasing JDBC connection
15 10 2010 15:28:57,136 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
15 10 2010 15:28:57,137 DEBUG ~ opened session at timestamp: 12871241371
15 10 2010 15:28:57,137 DEBUG ~ begin
15 10 2010 15:28:57,137 DEBUG ~ opening JDBC connection
15 10 2010 15:28:57,137 DEBUG ~ current autocommit status: true
15 10 2010 15:28:57,137 DEBUG ~ disabling autocommit
15 10 2010 15:28:57,140 DEBUG ~ parse() - HQL: from models.Post order by postedAt desc
15 10 2010 15:28:57,144 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[ORDER] Node: 'order'
       +-[IDENT] Node: 'postedAt'
       \-[DESCENDING] Node: 'desc'

15 10 2010 15:28:57,144 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:28:57,145 DEBUG ~ select << begin [level=1, statement=select]
15 10 2010 15:28:57,145 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
15 10 2010 15:28:57,145 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
15 10 2010 15:28:57,145 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@4ced8df7
15 10 2010 15:28:57,145 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
15 10 2010 15:28:57,146 DEBUG ~ select : finishing up [level=1, statement=select]
15 10 2010 15:28:57,146 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( order ( post0_.postedAt {synthetic-alias} postedAt ) desc ) )
15 10 2010 15:28:57,146 DEBUG ~ Derived SELECT clause created.
15 10 2010 15:28:57,146 DEBUG ~ Using FROM fragment [Post post0_]
15 10 2010 15:28:57,146 DEBUG ~ select >> end [level=1, statement=select]
15 10 2010 15:28:57,147 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id14_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_14_, post0_.content as content14_, post0_.postedAt as postedAt14_, post0_.title as title14_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[ORDER] OrderByClause: 'order'
       +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
       |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
       |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
       \-[DESCENDING] SqlNode: 'desc'

15 10 2010 15:28:57,147 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:28:57,147 DEBUG ~ HQL: from models.Post order by postedAt desc
15 10 2010 15:28:57,147 DEBUG ~ SQL: select post0_.id as id14_, post0_.author_id as author5_14_, post0_.content as content14_, post0_.postedAt as postedAt14_, post0_.title as title14_ from Post post0_ order by post0_.postedAt desc
15 10 2010 15:28:57,147 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:28:57,148 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,148 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:28:57,148 DEBUG ~ result row: EntityKey[models.Post#1]
15 10 2010 15:28:57,148 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:28:57,149 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,149 DEBUG ~ resolving associations for [models.Post#1]
15 10 2010 15:28:57,149 DEBUG ~ loading entity: [models.User#1]
15 10 2010 15:28:57,149 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,149 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:28:57,149 DEBUG ~ result row: EntityKey[models.User#1]
15 10 2010 15:28:57,149 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:28:57,149 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,149 DEBUG ~ resolving associations for [models.User#1]
15 10 2010 15:28:57,150 DEBUG ~ done materializing entity [models.User#1]
15 10 2010 15:28:57,150 DEBUG ~ done entity load
15 10 2010 15:28:57,150 DEBUG ~ done materializing entity [models.Post#1]
15 10 2010 15:28:57,150 DEBUG ~ initializing non-lazy collections
15 10 2010 15:28:57,150 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,151 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:28:57,151 DEBUG ~ result row: EntityKey[models.Post#3]
15 10 2010 15:28:57,151 DEBUG ~ result row: EntityKey[models.Post#2]
15 10 2010 15:28:57,151 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:28:57,151 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,151 DEBUG ~ resolving associations for [models.Post#3]
15 10 2010 15:28:57,152 DEBUG ~ loading entity: [models.User#2]
15 10 2010 15:28:57,152 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,152 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:28:57,152 DEBUG ~ result row: EntityKey[models.User#2]
15 10 2010 15:28:57,152 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:28:57,152 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,152 DEBUG ~ resolving associations for [models.User#2]
15 10 2010 15:28:57,152 DEBUG ~ done materializing entity [models.User#2]
15 10 2010 15:28:57,152 DEBUG ~ done entity load
15 10 2010 15:28:57,153 DEBUG ~ done materializing entity [models.Post#3]
15 10 2010 15:28:57,153 DEBUG ~ resolving associations for [models.Post#2]
15 10 2010 15:28:57,153 DEBUG ~ done materializing entity [models.Post#2]
15 10 2010 15:28:57,153 DEBUG ~ initializing non-lazy collections
15 10 2010 15:28:57,306 DEBUG ~ loading collection: [models.Post.comments#1]
15 10 2010 15:28:57,306 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,307 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:28:57,307 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
15 10 2010 15:28:57,307 DEBUG ~ result row: EntityKey[models.Comment#1]
15 10 2010 15:28:57,307 DEBUG ~ found row of collection: [models.Post.comments#1]
15 10 2010 15:28:57,307 DEBUG ~ result row: EntityKey[models.Comment#2]
15 10 2010 15:28:57,307 DEBUG ~ found row of collection: [models.Post.comments#1]
15 10 2010 15:28:57,307 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:28:57,308 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,308 DEBUG ~ resolving associations for [models.Comment#1]
15 10 2010 15:28:57,308 DEBUG ~ done materializing entity [models.Comment#1]
15 10 2010 15:28:57,308 DEBUG ~ resolving associations for [models.Comment#2]
15 10 2010 15:28:57,308 DEBUG ~ done materializing entity [models.Comment#2]
15 10 2010 15:28:57,308 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
15 10 2010 15:28:57,308 DEBUG ~ collection fully initialized: [models.Post.comments#1]
15 10 2010 15:28:57,308 DEBUG ~ 1 collections initialized for role: models.Post.comments
15 10 2010 15:28:57,308 DEBUG ~ initializing non-lazy collections
15 10 2010 15:28:57,308 DEBUG ~ done loading collection
15 10 2010 15:28:57,333 DEBUG ~ loading collection: [models.Post.comments#3]
15 10 2010 15:28:57,333 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,334 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:28:57,334 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#3]
15 10 2010 15:28:57,334 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:28:57,334 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,334 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
15 10 2010 15:28:57,334 DEBUG ~ collection fully initialized: [models.Post.comments#3]
15 10 2010 15:28:57,334 DEBUG ~ 1 collections initialized for role: models.Post.comments
15 10 2010 15:28:57,334 DEBUG ~ initializing non-lazy collections
15 10 2010 15:28:57,334 DEBUG ~ done loading collection
15 10 2010 15:28:57,338 DEBUG ~ loading collection: [models.Post.comments#2]
15 10 2010 15:28:57,338 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:57,339 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:28:57,339 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#2]
15 10 2010 15:28:57,339 DEBUG ~ result row: EntityKey[models.Comment#3]
15 10 2010 15:28:57,339 DEBUG ~ found row of collection: [models.Post.comments#2]
15 10 2010 15:28:57,339 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:28:57,339 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:57,339 DEBUG ~ resolving associations for [models.Comment#3]
15 10 2010 15:28:57,339 DEBUG ~ done materializing entity [models.Comment#3]
15 10 2010 15:28:57,339 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
15 10 2010 15:28:57,340 DEBUG ~ collection fully initialized: [models.Post.comments#2]
15 10 2010 15:28:57,340 DEBUG ~ 1 collections initialized for role: models.Post.comments
15 10 2010 15:28:57,340 DEBUG ~ initializing non-lazy collections
15 10 2010 15:28:57,340 DEBUG ~ done loading collection
15 10 2010 15:28:57,360 DEBUG ~ commit
15 10 2010 15:28:57,360 DEBUG ~ processing flush-time cascades
15 10 2010 15:28:57,360 DEBUG ~ dirty checking collections
15 10 2010 15:28:57,360 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:28:57,360 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
15 10 2010 15:28:57,361 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
15 10 2010 15:28:57,361 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
15 10 2010 15:28:57,361 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
15 10 2010 15:28:57,361 DEBUG ~ listing entities:
15 10 2010 15:28:57,361 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
15 10 2010 15:28:57,362 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
15 10 2010 15:28:57,362 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:28:57,362 DEBUG ~ models.Comment{content=This post is useless ?
, id=3, author=Tom, post=models.Post#2, postedAt=2009-04-05 09:00:00}
15 10 2010 15:28:57,362 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2], postedAt=2009-06-14 09:00:00}
15 10 2010 15:28:57,362 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:28:57,362 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[models.Comment#3], postedAt=2009-03-25 09:00:00}
15 10 2010 15:28:57,362 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
15 10 2010 15:28:57,363 DEBUG ~ re-enabling autocommit
15 10 2010 15:28:57,363 DEBUG ~ committed JDBC Connection
15 10 2010 15:28:57,363 DEBUG ~ aggressively releasing JDBC connection
15 10 2010 15:28:57,363 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
15 10 2010 15:28:59,371 DEBUG ~ opened session at timestamp: 12871241393
15 10 2010 15:28:59,371 DEBUG ~ begin
15 10 2010 15:28:59,371 DEBUG ~ opening JDBC connection
15 10 2010 15:28:59,372 DEBUG ~ current autocommit status: true
15 10 2010 15:28:59,372 DEBUG ~ disabling autocommit
15 10 2010 15:28:59,373 DEBUG ~ loading entity: [models.Post#1]
15 10 2010 15:28:59,373 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:28:59,374 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:28:59,374 DEBUG ~ result row: EntityKey[models.User#1], EntityKey[models.Post#1]
15 10 2010 15:28:59,374 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:28:59,374 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:28:59,375 DEBUG ~ resolving associations for [models.User#1]
15 10 2010 15:28:59,375 DEBUG ~ done materializing entity [models.User#1]
15 10 2010 15:28:59,375 DEBUG ~ resolving associations for [models.Post#1]
15 10 2010 15:28:59,375 DEBUG ~ done materializing entity [models.Post#1]
15 10 2010 15:28:59,375 DEBUG ~ initializing non-lazy collections
15 10 2010 15:28:59,375 DEBUG ~ done entity load
15 10 2010 15:28:59,526 DEBUG ~ rollback
15 10 2010 15:28:59,526 DEBUG ~ re-enabling autocommit
15 10 2010 15:28:59,526 DEBUG ~ rolled back JDBC Connection
15 10 2010 15:28:59,526 DEBUG ~ aggressively releasing JDBC connection
15 10 2010 15:28:59,526 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
15 10 2010 15:28:59,596 ERROR ~ 

@646f5fg98
Internal Server Error (500) for request GET /posts/1

Template execution error (In /app/views/Application/show.html around line 3)
Execution error occured in template /app/views/Application/show.html. Exception raised was MissingPropertyException : No such property: title for class: scala.Some.

play.exceptions.TemplateExecutionException: No such property: title for class: scala.Some
	at play.templates.BaseTemplate.throwException(BaseTemplate.java:84)
	at play.templates.GroovyTemplate.render(GroovyTemplate.java:226)
	at play.mvc.results.RenderTemplate.<init>(RenderTemplate.java:23)
	at play.mvc.Controller.renderTemplate(Controller.java:568)
	at play.mvc.Controller.renderTemplate(Controller.java:583)
	at play.mvc.ControllerDelegate.renderTemplate(ControllerDelegate.java:34)
	at play.mvc.ScalaController.render(ScalaController.scala:107)
	at controllers.Application$.show(/app/controllers/Application.scala:39)
	at play.mvc.ActionInvoker.invokeControllerMethod(ActionInvoker.java:420)
	at play.mvc.ActionInvoker.invokeControllerMethod(ActionInvoker.java:403)
	at play.mvc.ActionInvoker.invoke(ActionInvoker.java:176)
	at Invocation.HTTP Request(Play!)
Caused by: groovy.lang.MissingPropertyException: No such property: title for class: scala.Some
	at /app/views/Application/show.html.(line:3)
	at play.templates.GroovyTemplate.render(GroovyTemplate.java:203)
	... 10 more
15 10 2010 15:29:38,597 DEBUG ~ opened session at timestamp: 12871241785
15 10 2010 15:29:38,597 DEBUG ~ begin
15 10 2010 15:29:38,597 DEBUG ~ opening JDBC connection
15 10 2010 15:29:38,598 DEBUG ~ current autocommit status: true
15 10 2010 15:29:38,598 DEBUG ~ disabling autocommit
15 10 2010 15:29:38,599 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:29:38,600 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:29:38,600 DEBUG ~ result row: EntityKey[models.Post#1]
15 10 2010 15:29:38,600 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:29:38,600 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:29:38,600 DEBUG ~ resolving associations for [models.Post#1]
15 10 2010 15:29:38,600 DEBUG ~ loading entity: [models.User#1]
15 10 2010 15:29:38,601 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:29:38,601 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:29:38,601 DEBUG ~ result row: EntityKey[models.User#1]
15 10 2010 15:29:38,601 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:29:38,601 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:29:38,601 DEBUG ~ resolving associations for [models.User#1]
15 10 2010 15:29:38,601 DEBUG ~ done materializing entity [models.User#1]
15 10 2010 15:29:38,601 DEBUG ~ done entity load
15 10 2010 15:29:38,602 DEBUG ~ done materializing entity [models.Post#1]
15 10 2010 15:29:38,602 DEBUG ~ initializing non-lazy collections
15 10 2010 15:29:38,602 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:29:38,602 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:29:38,602 DEBUG ~ result row: EntityKey[models.Post#3]
15 10 2010 15:29:38,602 DEBUG ~ result row: EntityKey[models.Post#2]
15 10 2010 15:29:38,603 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:29:38,603 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:29:38,603 DEBUG ~ resolving associations for [models.Post#3]
15 10 2010 15:29:38,603 DEBUG ~ loading entity: [models.User#2]
15 10 2010 15:29:38,603 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:29:38,603 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:29:38,603 DEBUG ~ result row: EntityKey[models.User#2]
15 10 2010 15:29:38,603 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:29:38,603 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:29:38,604 DEBUG ~ resolving associations for [models.User#2]
15 10 2010 15:29:38,604 DEBUG ~ done materializing entity [models.User#2]
15 10 2010 15:29:38,604 DEBUG ~ done entity load
15 10 2010 15:29:38,604 DEBUG ~ done materializing entity [models.Post#3]
15 10 2010 15:29:38,604 DEBUG ~ resolving associations for [models.Post#2]
15 10 2010 15:29:38,604 DEBUG ~ done materializing entity [models.Post#2]
15 10 2010 15:29:38,604 DEBUG ~ initializing non-lazy collections
15 10 2010 15:29:38,608 DEBUG ~ loading collection: [models.Post.comments#1]
15 10 2010 15:29:38,609 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:29:38,609 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:29:38,609 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
15 10 2010 15:29:38,609 DEBUG ~ result row: EntityKey[models.Comment#1]
15 10 2010 15:29:38,609 DEBUG ~ found row of collection: [models.Post.comments#1]
15 10 2010 15:29:38,609 DEBUG ~ result row: EntityKey[models.Comment#2]
15 10 2010 15:29:38,610 DEBUG ~ found row of collection: [models.Post.comments#1]
15 10 2010 15:29:38,610 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:29:38,610 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:29:38,610 DEBUG ~ resolving associations for [models.Comment#1]
15 10 2010 15:29:38,610 DEBUG ~ done materializing entity [models.Comment#1]
15 10 2010 15:29:38,610 DEBUG ~ resolving associations for [models.Comment#2]
15 10 2010 15:29:38,610 DEBUG ~ done materializing entity [models.Comment#2]
15 10 2010 15:29:38,610 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
15 10 2010 15:29:38,610 DEBUG ~ collection fully initialized: [models.Post.comments#1]
15 10 2010 15:29:38,610 DEBUG ~ 1 collections initialized for role: models.Post.comments
15 10 2010 15:29:38,610 DEBUG ~ initializing non-lazy collections
15 10 2010 15:29:38,610 DEBUG ~ done loading collection
15 10 2010 15:29:38,614 DEBUG ~ loading collection: [models.Post.comments#3]
15 10 2010 15:29:38,614 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:29:38,615 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:29:38,625 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#3]
15 10 2010 15:29:38,625 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:29:38,625 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:29:38,625 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
15 10 2010 15:29:38,625 DEBUG ~ collection fully initialized: [models.Post.comments#3]
15 10 2010 15:29:38,625 DEBUG ~ 1 collections initialized for role: models.Post.comments
15 10 2010 15:29:38,625 DEBUG ~ initializing non-lazy collections
15 10 2010 15:29:38,625 DEBUG ~ done loading collection
15 10 2010 15:29:38,633 DEBUG ~ loading collection: [models.Post.comments#2]
15 10 2010 15:29:38,633 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:29:38,634 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:29:38,634 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#2]
15 10 2010 15:29:38,634 DEBUG ~ result row: EntityKey[models.Comment#3]
15 10 2010 15:29:38,634 DEBUG ~ found row of collection: [models.Post.comments#2]
15 10 2010 15:29:38,634 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:29:38,634 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:29:38,634 DEBUG ~ resolving associations for [models.Comment#3]
15 10 2010 15:29:38,635 DEBUG ~ done materializing entity [models.Comment#3]
15 10 2010 15:29:38,635 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
15 10 2010 15:29:38,635 DEBUG ~ collection fully initialized: [models.Post.comments#2]
15 10 2010 15:29:38,635 DEBUG ~ 1 collections initialized for role: models.Post.comments
15 10 2010 15:29:38,635 DEBUG ~ initializing non-lazy collections
15 10 2010 15:29:38,635 DEBUG ~ done loading collection
15 10 2010 15:29:38,645 DEBUG ~ commit
15 10 2010 15:29:38,645 DEBUG ~ processing flush-time cascades
15 10 2010 15:29:38,645 DEBUG ~ dirty checking collections
15 10 2010 15:29:38,646 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:29:38,646 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
15 10 2010 15:29:38,646 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
15 10 2010 15:29:38,646 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
15 10 2010 15:29:38,646 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
15 10 2010 15:29:38,646 DEBUG ~ listing entities:
15 10 2010 15:29:38,646 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
15 10 2010 15:29:38,647 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
15 10 2010 15:29:38,647 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:29:38,647 DEBUG ~ models.Comment{content=This post is useless ?
, id=3, author=Tom, post=models.Post#2, postedAt=2009-04-05 09:00:00}
15 10 2010 15:29:38,647 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2], postedAt=2009-06-14 09:00:00}
15 10 2010 15:29:38,647 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:29:38,647 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[models.Comment#3], postedAt=2009-03-25 09:00:00}
15 10 2010 15:29:38,647 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
15 10 2010 15:29:38,648 DEBUG ~ re-enabling autocommit
15 10 2010 15:29:38,648 DEBUG ~ committed JDBC Connection
15 10 2010 15:29:38,648 DEBUG ~ aggressively releasing JDBC connection
15 10 2010 15:29:38,648 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
15 10 2010 15:29:40,185 DEBUG ~ opened session at timestamp: 12871241801
15 10 2010 15:29:40,185 DEBUG ~ begin
15 10 2010 15:29:40,185 DEBUG ~ opening JDBC connection
15 10 2010 15:29:40,185 DEBUG ~ current autocommit status: true
15 10 2010 15:29:40,185 DEBUG ~ disabling autocommit
15 10 2010 15:29:40,187 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:29:40,187 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:29:40,187 DEBUG ~ result row: EntityKey[models.Post#1]
15 10 2010 15:29:40,187 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:29:40,187 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:29:40,188 DEBUG ~ resolving associations for [models.Post#1]
15 10 2010 15:29:40,188 DEBUG ~ loading entity: [models.User#1]
15 10 2010 15:29:40,188 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:29:40,188 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:29:40,188 DEBUG ~ result row: EntityKey[models.User#1]
15 10 2010 15:29:40,188 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:29:40,188 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:29:40,188 DEBUG ~ resolving associations for [models.User#1]
15 10 2010 15:29:40,188 DEBUG ~ done materializing entity [models.User#1]
15 10 2010 15:29:40,188 DEBUG ~ done entity load
15 10 2010 15:29:40,189 DEBUG ~ done materializing entity [models.Post#1]
15 10 2010 15:29:40,189 DEBUG ~ initializing non-lazy collections
15 10 2010 15:29:40,307 DEBUG ~ rollback
15 10 2010 15:29:40,307 DEBUG ~ re-enabling autocommit
15 10 2010 15:29:40,307 DEBUG ~ rolled back JDBC Connection
15 10 2010 15:29:40,308 DEBUG ~ aggressively releasing JDBC connection
15 10 2010 15:29:40,308 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
15 10 2010 15:29:40,320 ERROR ~ 

@646f5fg99
Internal Server Error (500) for request GET /posts/1

Template execution error (In /app/views/Application/show.html around line 3)
Execution error occured in template /app/views/Application/show.html. Exception raised was MissingPropertyException : No such property: title for class: scala.Some.

play.exceptions.TemplateExecutionException: No such property: title for class: scala.Some
	at play.templates.BaseTemplate.throwException(BaseTemplate.java:84)
	at play.templates.GroovyTemplate.render(GroovyTemplate.java:226)
	at play.mvc.results.RenderTemplate.<init>(RenderTemplate.java:23)
	at play.mvc.Controller.renderTemplate(Controller.java:568)
	at play.mvc.Controller.renderTemplate(Controller.java:583)
	at play.mvc.ControllerDelegate.renderTemplate(ControllerDelegate.java:34)
	at play.mvc.ScalaController.render(ScalaController.scala:107)
	at controllers.Application$.show(/app/controllers/Application.scala:39)
	at play.mvc.ActionInvoker.invokeControllerMethod(ActionInvoker.java:420)
	at play.mvc.ActionInvoker.invokeControllerMethod(ActionInvoker.java:403)
	at play.mvc.ActionInvoker.invoke(ActionInvoker.java:176)
	at Invocation.HTTP Request(Play!)
Caused by: groovy.lang.MissingPropertyException: No such property: title for class: scala.Some
	at /app/views/Application/show.html.(line:3)
	at play.templates.GroovyTemplate.render(GroovyTemplate.java:203)
	... 10 more
15 10 2010 15:31:50,483 ERROR ~ 

@646f5fg9a
Internal Server Error (500) for request GET /

Compilation error (In /app/controllers/Application.scala around line 38)
The file /app/controllers/Application.scala could not be compiled. Error raised is : value get is not a member of play.db.jpa.ScalaQuery[models.Post]

play.exceptions.CompilationException: value get is not a member of play.db.jpa.ScalaQuery[models.Post]
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
15 10 2010 15:32:48,121 DEBUG ~ opened session at timestamp: 12871243681
15 10 2010 15:32:48,122 DEBUG ~ begin
15 10 2010 15:32:48,122 DEBUG ~ opening JDBC connection
15 10 2010 15:32:48,122 DEBUG ~ current autocommit status: true
15 10 2010 15:32:48,122 DEBUG ~ disabling autocommit
15 10 2010 15:32:48,123 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:48,124 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:48,124 DEBUG ~ result row: EntityKey[models.Post#1]
15 10 2010 15:32:48,124 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:48,124 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:48,124 DEBUG ~ resolving associations for [models.Post#1]
15 10 2010 15:32:48,125 DEBUG ~ loading entity: [models.User#1]
15 10 2010 15:32:48,125 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:48,125 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:48,125 DEBUG ~ result row: EntityKey[models.User#1]
15 10 2010 15:32:48,125 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:48,125 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:48,125 DEBUG ~ resolving associations for [models.User#1]
15 10 2010 15:32:48,125 DEBUG ~ done materializing entity [models.User#1]
15 10 2010 15:32:48,125 DEBUG ~ done entity load
15 10 2010 15:32:48,125 DEBUG ~ done materializing entity [models.Post#1]
15 10 2010 15:32:48,126 DEBUG ~ initializing non-lazy collections
15 10 2010 15:32:48,126 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:48,126 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:48,126 DEBUG ~ result row: EntityKey[models.Post#3]
15 10 2010 15:32:48,126 DEBUG ~ result row: EntityKey[models.Post#2]
15 10 2010 15:32:48,126 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:48,126 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:48,127 DEBUG ~ resolving associations for [models.Post#3]
15 10 2010 15:32:48,127 DEBUG ~ loading entity: [models.User#2]
15 10 2010 15:32:48,127 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:48,127 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:48,127 DEBUG ~ result row: EntityKey[models.User#2]
15 10 2010 15:32:48,127 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:48,127 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:48,127 DEBUG ~ resolving associations for [models.User#2]
15 10 2010 15:32:48,127 DEBUG ~ done materializing entity [models.User#2]
15 10 2010 15:32:48,127 DEBUG ~ done entity load
15 10 2010 15:32:48,128 DEBUG ~ done materializing entity [models.Post#3]
15 10 2010 15:32:48,128 DEBUG ~ resolving associations for [models.Post#2]
15 10 2010 15:32:48,128 DEBUG ~ done materializing entity [models.Post#2]
15 10 2010 15:32:48,128 DEBUG ~ initializing non-lazy collections
15 10 2010 15:32:48,131 DEBUG ~ loading collection: [models.Post.comments#1]
15 10 2010 15:32:48,131 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:48,132 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:48,132 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
15 10 2010 15:32:48,132 DEBUG ~ result row: EntityKey[models.Comment#1]
15 10 2010 15:32:48,132 DEBUG ~ found row of collection: [models.Post.comments#1]
15 10 2010 15:32:48,132 DEBUG ~ result row: EntityKey[models.Comment#2]
15 10 2010 15:32:48,132 DEBUG ~ found row of collection: [models.Post.comments#1]
15 10 2010 15:32:48,132 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:48,133 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:48,133 DEBUG ~ resolving associations for [models.Comment#1]
15 10 2010 15:32:48,133 DEBUG ~ done materializing entity [models.Comment#1]
15 10 2010 15:32:48,133 DEBUG ~ resolving associations for [models.Comment#2]
15 10 2010 15:32:48,133 DEBUG ~ done materializing entity [models.Comment#2]
15 10 2010 15:32:48,133 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
15 10 2010 15:32:48,133 DEBUG ~ collection fully initialized: [models.Post.comments#1]
15 10 2010 15:32:48,133 DEBUG ~ 1 collections initialized for role: models.Post.comments
15 10 2010 15:32:48,133 DEBUG ~ initializing non-lazy collections
15 10 2010 15:32:48,133 DEBUG ~ done loading collection
15 10 2010 15:32:48,137 DEBUG ~ loading collection: [models.Post.comments#3]
15 10 2010 15:32:48,137 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:48,137 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:48,137 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#3]
15 10 2010 15:32:48,137 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:48,138 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:48,138 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
15 10 2010 15:32:48,138 DEBUG ~ collection fully initialized: [models.Post.comments#3]
15 10 2010 15:32:48,138 DEBUG ~ 1 collections initialized for role: models.Post.comments
15 10 2010 15:32:48,138 DEBUG ~ initializing non-lazy collections
15 10 2010 15:32:48,138 DEBUG ~ done loading collection
15 10 2010 15:32:48,140 DEBUG ~ loading collection: [models.Post.comments#2]
15 10 2010 15:32:48,140 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:48,141 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:48,141 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#2]
15 10 2010 15:32:48,141 DEBUG ~ result row: EntityKey[models.Comment#3]
15 10 2010 15:32:48,141 DEBUG ~ found row of collection: [models.Post.comments#2]
15 10 2010 15:32:48,141 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:48,141 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:48,141 DEBUG ~ resolving associations for [models.Comment#3]
15 10 2010 15:32:48,141 DEBUG ~ done materializing entity [models.Comment#3]
15 10 2010 15:32:48,142 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
15 10 2010 15:32:48,142 DEBUG ~ collection fully initialized: [models.Post.comments#2]
15 10 2010 15:32:48,142 DEBUG ~ 1 collections initialized for role: models.Post.comments
15 10 2010 15:32:48,142 DEBUG ~ initializing non-lazy collections
15 10 2010 15:32:48,142 DEBUG ~ done loading collection
15 10 2010 15:32:48,146 DEBUG ~ commit
15 10 2010 15:32:48,147 DEBUG ~ processing flush-time cascades
15 10 2010 15:32:48,148 DEBUG ~ dirty checking collections
15 10 2010 15:32:48,148 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:32:48,148 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
15 10 2010 15:32:48,148 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
15 10 2010 15:32:48,149 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
15 10 2010 15:32:48,149 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
15 10 2010 15:32:48,149 DEBUG ~ listing entities:
15 10 2010 15:32:48,149 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
15 10 2010 15:32:48,149 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
15 10 2010 15:32:48,149 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:32:48,150 DEBUG ~ models.Comment{content=This post is useless ?
, id=3, author=Tom, post=models.Post#2, postedAt=2009-04-05 09:00:00}
15 10 2010 15:32:48,154 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2], postedAt=2009-06-14 09:00:00}
15 10 2010 15:32:48,154 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:32:48,154 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[models.Comment#3], postedAt=2009-03-25 09:00:00}
15 10 2010 15:32:48,155 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
15 10 2010 15:32:48,155 DEBUG ~ re-enabling autocommit
15 10 2010 15:32:48,155 DEBUG ~ committed JDBC Connection
15 10 2010 15:32:48,155 DEBUG ~ aggressively releasing JDBC connection
15 10 2010 15:32:48,155 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
15 10 2010 15:32:49,576 DEBUG ~ opened session at timestamp: 12871243695
15 10 2010 15:32:49,577 DEBUG ~ begin
15 10 2010 15:32:49,577 DEBUG ~ opening JDBC connection
15 10 2010 15:32:49,577 DEBUG ~ current autocommit status: true
15 10 2010 15:32:49,577 DEBUG ~ disabling autocommit
15 10 2010 15:32:49,579 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:49,579 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:49,579 DEBUG ~ result row: EntityKey[models.Post#1]
15 10 2010 15:32:49,580 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:49,580 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:49,580 DEBUG ~ resolving associations for [models.Post#1]
15 10 2010 15:32:49,580 DEBUG ~ loading entity: [models.User#1]
15 10 2010 15:32:49,581 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:49,581 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:49,581 DEBUG ~ result row: EntityKey[models.User#1]
15 10 2010 15:32:49,581 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:49,581 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:49,581 DEBUG ~ resolving associations for [models.User#1]
15 10 2010 15:32:49,581 DEBUG ~ done materializing entity [models.User#1]
15 10 2010 15:32:49,581 DEBUG ~ done entity load
15 10 2010 15:32:49,581 DEBUG ~ done materializing entity [models.Post#1]
15 10 2010 15:32:49,582 DEBUG ~ initializing non-lazy collections
15 10 2010 15:32:49,716 DEBUG ~ parse() - HQL: from models.Post where postedAt > ? order by postedAt asc
15 10 2010 15:32:49,726 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    +-[WHERE] Node: 'where'
    |  \-[GT] Node: '>'
    |     +-[IDENT] Node: 'postedAt'
    |     \-[PARAM] Node: '?'
    \-[ORDER] Node: 'order'
       +-[IDENT] Node: 'postedAt'
       \-[ASCENDING] Node: 'asc'

15 10 2010 15:32:49,726 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:32:49,726 DEBUG ~ select << begin [level=1, statement=select]
15 10 2010 15:32:49,726 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
15 10 2010 15:32:49,727 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
15 10 2010 15:32:49,727 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@4ced8df7
15 10 2010 15:32:49,727 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
15 10 2010 15:32:49,727 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
15 10 2010 15:32:49,727 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@4ced8df7
15 10 2010 15:32:49,727 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
15 10 2010 15:32:49,727 DEBUG ~ select : finishing up [level=1, statement=select]
15 10 2010 15:32:49,727 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( > ( post0_.postedAt {synthetic-alias} postedAt ) ? ) ) ( order ( post0_.postedAt {synthetic-alias} postedAt ) asc ) )
15 10 2010 15:32:49,727 DEBUG ~ Derived SELECT clause created.
15 10 2010 15:32:49,727 DEBUG ~ Using FROM fragment [Post post0_]
15 10 2010 15:32:49,728 DEBUG ~ select >> end [level=1, statement=select]
15 10 2010 15:32:49,728 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id14_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_14_, post0_.content as content14_, post0_.postedAt as postedAt14_, post0_.title as title14_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    +-[WHERE] SqlNode: 'where'
    |  \-[GT] BinaryLogicOperatorNode: '>'
    |     +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
    |     |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
    |     \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.TimestampType@4ced8df7}
    \-[ORDER] OrderByClause: 'order'
       +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
       |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
       |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
       \-[ASCENDING] SqlNode: 'asc'

15 10 2010 15:32:49,728 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:32:49,729 DEBUG ~ HQL: from models.Post where postedAt > ? order by postedAt asc
15 10 2010 15:32:49,729 DEBUG ~ SQL: select post0_.id as id14_, post0_.author_id as author5_14_, post0_.content as content14_, post0_.postedAt as postedAt14_, post0_.title as title14_ from Post post0_ where post0_.postedAt>? order by post0_.postedAt asc
15 10 2010 15:32:49,729 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:32:49,729 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:49,730 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:49,730 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:49,730 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:49,730 DEBUG ~ initializing non-lazy collections
15 10 2010 15:32:49,732 DEBUG ~ parse() - HQL: from models.Post where postedAt < ? order by postedAt desc
15 10 2010 15:32:49,739 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    +-[WHERE] Node: 'where'
    |  \-[LT] Node: '<'
    |     +-[IDENT] Node: 'postedAt'
    |     \-[PARAM] Node: '?'
    \-[ORDER] Node: 'order'
       +-[IDENT] Node: 'postedAt'
       \-[DESCENDING] Node: 'desc'

15 10 2010 15:32:49,740 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:32:49,740 DEBUG ~ select << begin [level=1, statement=select]
15 10 2010 15:32:49,740 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
15 10 2010 15:32:49,740 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
15 10 2010 15:32:49,740 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@4ced8df7
15 10 2010 15:32:49,740 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
15 10 2010 15:32:49,741 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
15 10 2010 15:32:49,741 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@4ced8df7
15 10 2010 15:32:49,741 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
15 10 2010 15:32:49,741 DEBUG ~ select : finishing up [level=1, statement=select]
15 10 2010 15:32:49,741 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( < ( post0_.postedAt {synthetic-alias} postedAt ) ? ) ) ( order ( post0_.postedAt {synthetic-alias} postedAt ) desc ) )
15 10 2010 15:32:49,741 DEBUG ~ Derived SELECT clause created.
15 10 2010 15:32:49,742 DEBUG ~ Using FROM fragment [Post post0_]
15 10 2010 15:32:49,742 DEBUG ~ select >> end [level=1, statement=select]
15 10 2010 15:32:49,742 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id14_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_14_, post0_.content as content14_, post0_.postedAt as postedAt14_, post0_.title as title14_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    +-[WHERE] SqlNode: 'where'
    |  \-[LT] BinaryLogicOperatorNode: '<'
    |     +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
    |     |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
    |     \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.TimestampType@4ced8df7}
    \-[ORDER] OrderByClause: 'order'
       +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
       |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
       |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
       \-[DESCENDING] SqlNode: 'desc'

15 10 2010 15:32:49,742 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:32:49,743 DEBUG ~ HQL: from models.Post where postedAt < ? order by postedAt desc
15 10 2010 15:32:49,743 DEBUG ~ SQL: select post0_.id as id14_, post0_.author_id as author5_14_, post0_.content as content14_, post0_.postedAt as postedAt14_, post0_.title as title14_ from Post post0_ where post0_.postedAt<? order by post0_.postedAt desc
15 10 2010 15:32:49,743 DEBUG ~ throwQueryException() : no errors
15 10 2010 15:32:49,743 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:49,744 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:49,744 DEBUG ~ result row: EntityKey[models.Post#3]
15 10 2010 15:32:49,744 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:49,744 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:49,744 DEBUG ~ resolving associations for [models.Post#3]
15 10 2010 15:32:49,744 DEBUG ~ loading entity: [models.User#2]
15 10 2010 15:32:49,744 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:49,745 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:49,745 DEBUG ~ result row: EntityKey[models.User#2]
15 10 2010 15:32:49,745 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:49,745 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:49,745 DEBUG ~ resolving associations for [models.User#2]
15 10 2010 15:32:49,745 DEBUG ~ done materializing entity [models.User#2]
15 10 2010 15:32:49,745 DEBUG ~ done entity load
15 10 2010 15:32:49,745 DEBUG ~ done materializing entity [models.Post#3]
15 10 2010 15:32:49,745 DEBUG ~ initializing non-lazy collections
15 10 2010 15:32:49,746 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:49,746 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:49,746 DEBUG ~ result row: EntityKey[models.Post#3]
15 10 2010 15:32:49,746 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:49,746 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:49,747 DEBUG ~ initializing non-lazy collections
15 10 2010 15:32:49,747 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:49,748 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:49,748 DEBUG ~ result row: EntityKey[models.Post#3]
15 10 2010 15:32:49,748 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:49,748 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:49,748 DEBUG ~ initializing non-lazy collections
15 10 2010 15:32:49,751 DEBUG ~ loading collection: [models.Post.comments#1]
15 10 2010 15:32:49,752 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:49,752 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:49,752 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
15 10 2010 15:32:49,752 DEBUG ~ result row: EntityKey[models.Comment#1]
15 10 2010 15:32:49,752 DEBUG ~ found row of collection: [models.Post.comments#1]
15 10 2010 15:32:49,752 DEBUG ~ result row: EntityKey[models.Comment#2]
15 10 2010 15:32:49,753 DEBUG ~ found row of collection: [models.Post.comments#1]
15 10 2010 15:32:49,753 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:49,753 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:49,753 DEBUG ~ resolving associations for [models.Comment#1]
15 10 2010 15:32:49,753 DEBUG ~ done materializing entity [models.Comment#1]
15 10 2010 15:32:49,753 DEBUG ~ resolving associations for [models.Comment#2]
15 10 2010 15:32:49,754 DEBUG ~ done materializing entity [models.Comment#2]
15 10 2010 15:32:49,754 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
15 10 2010 15:32:49,754 DEBUG ~ collection fully initialized: [models.Post.comments#1]
15 10 2010 15:32:49,754 DEBUG ~ 1 collections initialized for role: models.Post.comments
15 10 2010 15:32:49,754 DEBUG ~ initializing non-lazy collections
15 10 2010 15:32:49,754 DEBUG ~ done loading collection
15 10 2010 15:32:49,769 DEBUG ~ commit
15 10 2010 15:32:49,769 DEBUG ~ processing flush-time cascades
15 10 2010 15:32:49,770 DEBUG ~ dirty checking collections
15 10 2010 15:32:49,770 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:32:49,770 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (uninitialized)
15 10 2010 15:32:49,770 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
15 10 2010 15:32:49,770 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
15 10 2010 15:32:49,770 DEBUG ~ listing entities:
15 10 2010 15:32:49,771 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
15 10 2010 15:32:49,771 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:32:49,771 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:32:49,771 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2], postedAt=2009-06-14 09:00:00}
15 10 2010 15:32:49,771 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
15 10 2010 15:32:49,772 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=<uninitialized>, postedAt=2009-06-06 09:00:00}
15 10 2010 15:32:49,772 DEBUG ~ re-enabling autocommit
15 10 2010 15:32:49,772 DEBUG ~ committed JDBC Connection
15 10 2010 15:32:49,772 DEBUG ~ aggressively releasing JDBC connection
15 10 2010 15:32:49,772 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
15 10 2010 15:32:57,754 DEBUG ~ opened session at timestamp: 12871243777
15 10 2010 15:32:57,754 DEBUG ~ begin
15 10 2010 15:32:57,755 DEBUG ~ opening JDBC connection
15 10 2010 15:32:57,755 DEBUG ~ current autocommit status: true
15 10 2010 15:32:57,755 DEBUG ~ disabling autocommit
15 10 2010 15:32:57,756 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:57,757 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:57,757 DEBUG ~ result row: EntityKey[models.Post#1]
15 10 2010 15:32:57,757 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:57,757 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:57,757 DEBUG ~ resolving associations for [models.Post#1]
15 10 2010 15:32:57,757 DEBUG ~ loading entity: [models.User#1]
15 10 2010 15:32:57,757 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:57,757 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:57,758 DEBUG ~ result row: EntityKey[models.User#1]
15 10 2010 15:32:57,758 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:57,758 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:57,758 DEBUG ~ resolving associations for [models.User#1]
15 10 2010 15:32:57,758 DEBUG ~ done materializing entity [models.User#1]
15 10 2010 15:32:57,758 DEBUG ~ done entity load
15 10 2010 15:32:57,758 DEBUG ~ done materializing entity [models.Post#1]
15 10 2010 15:32:57,758 DEBUG ~ initializing non-lazy collections
15 10 2010 15:32:57,760 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:57,760 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:57,760 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:57,760 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:57,760 DEBUG ~ initializing non-lazy collections
15 10 2010 15:32:57,761 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:57,761 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:57,761 DEBUG ~ result row: EntityKey[models.Post#3]
15 10 2010 15:32:57,761 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:57,761 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:57,761 DEBUG ~ resolving associations for [models.Post#3]
15 10 2010 15:32:57,761 DEBUG ~ loading entity: [models.User#2]
15 10 2010 15:32:57,762 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:57,762 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:57,762 DEBUG ~ result row: EntityKey[models.User#2]
15 10 2010 15:32:57,762 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:57,762 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:57,762 DEBUG ~ resolving associations for [models.User#2]
15 10 2010 15:32:57,762 DEBUG ~ done materializing entity [models.User#2]
15 10 2010 15:32:57,762 DEBUG ~ done entity load
15 10 2010 15:32:57,762 DEBUG ~ done materializing entity [models.Post#3]
15 10 2010 15:32:57,762 DEBUG ~ initializing non-lazy collections
15 10 2010 15:32:57,763 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:57,763 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:57,763 DEBUG ~ result row: EntityKey[models.Post#3]
15 10 2010 15:32:57,763 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:57,763 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:57,763 DEBUG ~ initializing non-lazy collections
15 10 2010 15:32:57,764 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:57,764 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:57,764 DEBUG ~ result row: EntityKey[models.Post#3]
15 10 2010 15:32:57,764 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:57,764 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:57,764 DEBUG ~ initializing non-lazy collections
15 10 2010 15:32:57,768 DEBUG ~ loading collection: [models.Post.comments#1]
15 10 2010 15:32:57,768 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:32:57,768 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:32:57,768 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
15 10 2010 15:32:57,769 DEBUG ~ result row: EntityKey[models.Comment#1]
15 10 2010 15:32:57,769 DEBUG ~ found row of collection: [models.Post.comments#1]
15 10 2010 15:32:57,769 DEBUG ~ result row: EntityKey[models.Comment#2]
15 10 2010 15:32:57,769 DEBUG ~ found row of collection: [models.Post.comments#1]
15 10 2010 15:32:57,769 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:32:57,770 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:32:57,770 DEBUG ~ resolving associations for [models.Comment#1]
15 10 2010 15:32:57,770 DEBUG ~ done materializing entity [models.Comment#1]
15 10 2010 15:32:57,770 DEBUG ~ resolving associations for [models.Comment#2]
15 10 2010 15:32:57,770 DEBUG ~ done materializing entity [models.Comment#2]
15 10 2010 15:32:57,770 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
15 10 2010 15:32:57,770 DEBUG ~ collection fully initialized: [models.Post.comments#1]
15 10 2010 15:32:57,770 DEBUG ~ 1 collections initialized for role: models.Post.comments
15 10 2010 15:32:57,770 DEBUG ~ initializing non-lazy collections
15 10 2010 15:32:57,770 DEBUG ~ done loading collection
15 10 2010 15:32:57,776 DEBUG ~ commit
15 10 2010 15:32:57,777 DEBUG ~ processing flush-time cascades
15 10 2010 15:32:57,778 DEBUG ~ dirty checking collections
15 10 2010 15:32:57,778 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:32:57,778 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (uninitialized)
15 10 2010 15:32:57,778 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
15 10 2010 15:32:57,778 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
15 10 2010 15:32:57,778 DEBUG ~ listing entities:
15 10 2010 15:32:57,779 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
15 10 2010 15:32:57,779 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:32:57,779 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:32:57,779 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2], postedAt=2009-06-14 09:00:00}
15 10 2010 15:32:57,779 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
15 10 2010 15:32:57,779 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=<uninitialized>, postedAt=2009-06-06 09:00:00}
15 10 2010 15:32:57,780 DEBUG ~ re-enabling autocommit
15 10 2010 15:32:57,780 DEBUG ~ committed JDBC Connection
15 10 2010 15:32:57,780 DEBUG ~ aggressively releasing JDBC connection
15 10 2010 15:32:57,780 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
15 10 2010 15:34:48,118 DEBUG ~ opened session at timestamp: 12871244881
15 10 2010 15:34:48,118 DEBUG ~ begin
15 10 2010 15:34:48,118 DEBUG ~ opening JDBC connection
15 10 2010 15:34:48,118 DEBUG ~ current autocommit status: true
15 10 2010 15:34:48,118 DEBUG ~ disabling autocommit
15 10 2010 15:34:48,120 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:48,120 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:48,120 DEBUG ~ result row: EntityKey[models.Post#3]
15 10 2010 15:34:48,120 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:48,120 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:48,121 DEBUG ~ resolving associations for [models.Post#3]
15 10 2010 15:34:48,121 DEBUG ~ loading entity: [models.User#2]
15 10 2010 15:34:48,121 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:48,121 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:48,121 DEBUG ~ result row: EntityKey[models.User#2]
15 10 2010 15:34:48,122 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:48,122 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:48,122 DEBUG ~ resolving associations for [models.User#2]
15 10 2010 15:34:48,122 DEBUG ~ done materializing entity [models.User#2]
15 10 2010 15:34:48,122 DEBUG ~ done entity load
15 10 2010 15:34:48,122 DEBUG ~ done materializing entity [models.Post#3]
15 10 2010 15:34:48,122 DEBUG ~ initializing non-lazy collections
15 10 2010 15:34:48,124 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:48,124 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:48,125 DEBUG ~ result row: EntityKey[models.Post#1]
15 10 2010 15:34:48,125 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:48,125 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:48,125 DEBUG ~ resolving associations for [models.Post#1]
15 10 2010 15:34:48,125 DEBUG ~ loading entity: [models.User#1]
15 10 2010 15:34:48,125 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:48,125 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:48,125 DEBUG ~ result row: EntityKey[models.User#1]
15 10 2010 15:34:48,139 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:48,140 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:48,140 DEBUG ~ resolving associations for [models.User#1]
15 10 2010 15:34:48,140 DEBUG ~ done materializing entity [models.User#1]
15 10 2010 15:34:48,140 DEBUG ~ done entity load
15 10 2010 15:34:48,140 DEBUG ~ done materializing entity [models.Post#1]
15 10 2010 15:34:48,140 DEBUG ~ initializing non-lazy collections
15 10 2010 15:34:48,141 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:48,141 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:48,141 DEBUG ~ result row: EntityKey[models.Post#1]
15 10 2010 15:34:48,141 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:48,141 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:48,141 DEBUG ~ initializing non-lazy collections
15 10 2010 15:34:48,142 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:48,143 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:48,143 DEBUG ~ result row: EntityKey[models.Post#1]
15 10 2010 15:34:48,143 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:48,143 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:48,143 DEBUG ~ initializing non-lazy collections
15 10 2010 15:34:48,143 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:48,144 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:48,144 DEBUG ~ result row: EntityKey[models.Post#2]
15 10 2010 15:34:48,144 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:48,144 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:48,144 DEBUG ~ resolving associations for [models.Post#2]
15 10 2010 15:34:48,144 DEBUG ~ done materializing entity [models.Post#2]
15 10 2010 15:34:48,144 DEBUG ~ initializing non-lazy collections
15 10 2010 15:34:48,145 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:48,145 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:48,150 DEBUG ~ result row: EntityKey[models.Post#2]
15 10 2010 15:34:48,150 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:48,150 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:48,150 DEBUG ~ initializing non-lazy collections
15 10 2010 15:34:48,151 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:48,152 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:48,152 DEBUG ~ result row: EntityKey[models.Post#2]
15 10 2010 15:34:48,152 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:48,152 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:48,152 DEBUG ~ initializing non-lazy collections
15 10 2010 15:34:48,160 DEBUG ~ loading collection: [models.Post.comments#3]
15 10 2010 15:34:48,160 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:48,160 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:48,160 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#3]
15 10 2010 15:34:48,160 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:48,160 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:48,161 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
15 10 2010 15:34:48,161 DEBUG ~ collection fully initialized: [models.Post.comments#3]
15 10 2010 15:34:48,161 DEBUG ~ 1 collections initialized for role: models.Post.comments
15 10 2010 15:34:48,161 DEBUG ~ initializing non-lazy collections
15 10 2010 15:34:48,161 DEBUG ~ done loading collection
15 10 2010 15:34:48,215 DEBUG ~ commit
15 10 2010 15:34:48,215 DEBUG ~ processing flush-time cascades
15 10 2010 15:34:48,215 DEBUG ~ dirty checking collections
15 10 2010 15:34:48,215 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
15 10 2010 15:34:48,215 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (uninitialized)
15 10 2010 15:34:48,215 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (uninitialized)
15 10 2010 15:34:48,215 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 5 objects
15 10 2010 15:34:48,216 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
15 10 2010 15:34:48,216 DEBUG ~ listing entities:
15 10 2010 15:34:48,216 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:34:48,216 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:34:48,216 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=<uninitialized>, postedAt=2009-06-14 09:00:00}
15 10 2010 15:34:48,216 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=<uninitialized>, postedAt=2009-03-25 09:00:00}
15 10 2010 15:34:48,216 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
15 10 2010 15:34:48,217 DEBUG ~ re-enabling autocommit
15 10 2010 15:34:48,217 DEBUG ~ committed JDBC Connection
15 10 2010 15:34:48,217 DEBUG ~ aggressively releasing JDBC connection
15 10 2010 15:34:48,217 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
15 10 2010 15:34:53,765 DEBUG ~ opened session at timestamp: 12871244937
15 10 2010 15:34:53,766 DEBUG ~ begin
15 10 2010 15:34:53,766 DEBUG ~ opening JDBC connection
15 10 2010 15:34:53,766 DEBUG ~ current autocommit status: true
15 10 2010 15:34:53,766 DEBUG ~ disabling autocommit
15 10 2010 15:34:53,767 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:53,768 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:53,768 DEBUG ~ result row: EntityKey[models.Post#1]
15 10 2010 15:34:53,768 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:53,768 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:53,768 DEBUG ~ resolving associations for [models.Post#1]
15 10 2010 15:34:53,768 DEBUG ~ loading entity: [models.User#1]
15 10 2010 15:34:53,768 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:53,768 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:53,768 DEBUG ~ result row: EntityKey[models.User#1]
15 10 2010 15:34:53,768 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:53,769 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:53,769 DEBUG ~ resolving associations for [models.User#1]
15 10 2010 15:34:53,769 DEBUG ~ done materializing entity [models.User#1]
15 10 2010 15:34:53,769 DEBUG ~ done entity load
15 10 2010 15:34:53,769 DEBUG ~ done materializing entity [models.Post#1]
15 10 2010 15:34:53,769 DEBUG ~ initializing non-lazy collections
15 10 2010 15:34:53,771 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:53,771 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:53,771 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:53,771 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:53,771 DEBUG ~ initializing non-lazy collections
15 10 2010 15:34:53,771 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:53,772 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:53,772 DEBUG ~ result row: EntityKey[models.Post#3]
15 10 2010 15:34:53,772 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:53,772 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:53,772 DEBUG ~ resolving associations for [models.Post#3]
15 10 2010 15:34:53,772 DEBUG ~ loading entity: [models.User#2]
15 10 2010 15:34:53,772 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:53,772 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:53,772 DEBUG ~ result row: EntityKey[models.User#2]
15 10 2010 15:34:53,772 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:53,772 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:53,772 DEBUG ~ resolving associations for [models.User#2]
15 10 2010 15:34:53,772 DEBUG ~ done materializing entity [models.User#2]
15 10 2010 15:34:53,772 DEBUG ~ done entity load
15 10 2010 15:34:53,773 DEBUG ~ done materializing entity [models.Post#3]
15 10 2010 15:34:53,773 DEBUG ~ initializing non-lazy collections
15 10 2010 15:34:53,773 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:53,773 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:53,773 DEBUG ~ result row: EntityKey[models.Post#3]
15 10 2010 15:34:53,773 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:53,773 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:53,773 DEBUG ~ initializing non-lazy collections
15 10 2010 15:34:53,774 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:53,774 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:53,774 DEBUG ~ result row: EntityKey[models.Post#3]
15 10 2010 15:34:53,774 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:53,774 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:53,774 DEBUG ~ initializing non-lazy collections
15 10 2010 15:34:53,776 DEBUG ~ loading collection: [models.Post.comments#1]
15 10 2010 15:34:53,777 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:53,777 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:53,777 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
15 10 2010 15:34:53,777 DEBUG ~ result row: EntityKey[models.Comment#1]
15 10 2010 15:34:53,777 DEBUG ~ found row of collection: [models.Post.comments#1]
15 10 2010 15:34:53,777 DEBUG ~ result row: EntityKey[models.Comment#2]
15 10 2010 15:34:53,777 DEBUG ~ found row of collection: [models.Post.comments#1]
15 10 2010 15:34:53,777 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:53,777 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:53,777 DEBUG ~ resolving associations for [models.Comment#1]
15 10 2010 15:34:53,778 DEBUG ~ done materializing entity [models.Comment#1]
15 10 2010 15:34:53,778 DEBUG ~ resolving associations for [models.Comment#2]
15 10 2010 15:34:53,778 DEBUG ~ done materializing entity [models.Comment#2]
15 10 2010 15:34:53,778 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
15 10 2010 15:34:53,778 DEBUG ~ collection fully initialized: [models.Post.comments#1]
15 10 2010 15:34:53,778 DEBUG ~ 1 collections initialized for role: models.Post.comments
15 10 2010 15:34:53,778 DEBUG ~ initializing non-lazy collections
15 10 2010 15:34:53,778 DEBUG ~ done loading collection
15 10 2010 15:34:53,783 DEBUG ~ commit
15 10 2010 15:34:53,783 DEBUG ~ processing flush-time cascades
15 10 2010 15:34:53,784 DEBUG ~ dirty checking collections
15 10 2010 15:34:53,784 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:34:53,784 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (uninitialized)
15 10 2010 15:34:53,785 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
15 10 2010 15:34:53,785 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
15 10 2010 15:34:53,785 DEBUG ~ listing entities:
15 10 2010 15:34:53,785 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
15 10 2010 15:34:53,785 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:34:53,785 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:34:53,785 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2], postedAt=2009-06-14 09:00:00}
15 10 2010 15:34:53,785 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
15 10 2010 15:34:53,786 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=<uninitialized>, postedAt=2009-06-06 09:00:00}
15 10 2010 15:34:53,786 DEBUG ~ re-enabling autocommit
15 10 2010 15:34:53,786 DEBUG ~ committed JDBC Connection
15 10 2010 15:34:53,786 DEBUG ~ aggressively releasing JDBC connection
15 10 2010 15:34:53,786 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
15 10 2010 15:34:55,138 DEBUG ~ opened session at timestamp: 12871244951
15 10 2010 15:34:55,138 DEBUG ~ begin
15 10 2010 15:34:55,138 DEBUG ~ opening JDBC connection
15 10 2010 15:34:55,138 DEBUG ~ current autocommit status: true
15 10 2010 15:34:55,138 DEBUG ~ disabling autocommit
15 10 2010 15:34:55,139 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:55,140 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:55,140 DEBUG ~ result row: EntityKey[models.Post#1]
15 10 2010 15:34:55,140 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:55,140 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:55,140 DEBUG ~ resolving associations for [models.Post#1]
15 10 2010 15:34:55,140 DEBUG ~ loading entity: [models.User#1]
15 10 2010 15:34:55,141 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:55,141 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:55,141 DEBUG ~ result row: EntityKey[models.User#1]
15 10 2010 15:34:55,141 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:55,141 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:55,141 DEBUG ~ resolving associations for [models.User#1]
15 10 2010 15:34:55,141 DEBUG ~ done materializing entity [models.User#1]
15 10 2010 15:34:55,141 DEBUG ~ done entity load
15 10 2010 15:34:55,141 DEBUG ~ done materializing entity [models.Post#1]
15 10 2010 15:34:55,141 DEBUG ~ initializing non-lazy collections
15 10 2010 15:34:55,142 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:55,142 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:55,142 DEBUG ~ result row: EntityKey[models.Post#3]
15 10 2010 15:34:55,142 DEBUG ~ result row: EntityKey[models.Post#2]
15 10 2010 15:34:55,142 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:55,142 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:55,142 DEBUG ~ resolving associations for [models.Post#3]
15 10 2010 15:34:55,142 DEBUG ~ loading entity: [models.User#2]
15 10 2010 15:34:55,142 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:55,143 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:55,143 DEBUG ~ result row: EntityKey[models.User#2]
15 10 2010 15:34:55,143 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:55,143 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:55,143 DEBUG ~ resolving associations for [models.User#2]
15 10 2010 15:34:55,143 DEBUG ~ done materializing entity [models.User#2]
15 10 2010 15:34:55,143 DEBUG ~ done entity load
15 10 2010 15:34:55,143 DEBUG ~ done materializing entity [models.Post#3]
15 10 2010 15:34:55,143 DEBUG ~ resolving associations for [models.Post#2]
15 10 2010 15:34:55,143 DEBUG ~ done materializing entity [models.Post#2]
15 10 2010 15:34:55,143 DEBUG ~ initializing non-lazy collections
15 10 2010 15:34:55,148 DEBUG ~ loading collection: [models.Post.comments#1]
15 10 2010 15:34:55,148 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:55,148 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:55,148 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
15 10 2010 15:34:55,148 DEBUG ~ result row: EntityKey[models.Comment#1]
15 10 2010 15:34:55,148 DEBUG ~ found row of collection: [models.Post.comments#1]
15 10 2010 15:34:55,149 DEBUG ~ result row: EntityKey[models.Comment#2]
15 10 2010 15:34:55,149 DEBUG ~ found row of collection: [models.Post.comments#1]
15 10 2010 15:34:55,149 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:55,149 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:55,149 DEBUG ~ resolving associations for [models.Comment#1]
15 10 2010 15:34:55,149 DEBUG ~ done materializing entity [models.Comment#1]
15 10 2010 15:34:55,149 DEBUG ~ resolving associations for [models.Comment#2]
15 10 2010 15:34:55,149 DEBUG ~ done materializing entity [models.Comment#2]
15 10 2010 15:34:55,149 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
15 10 2010 15:34:55,149 DEBUG ~ collection fully initialized: [models.Post.comments#1]
15 10 2010 15:34:55,149 DEBUG ~ 1 collections initialized for role: models.Post.comments
15 10 2010 15:34:55,149 DEBUG ~ initializing non-lazy collections
15 10 2010 15:34:55,149 DEBUG ~ done loading collection
15 10 2010 15:34:55,155 DEBUG ~ loading collection: [models.Post.comments#3]
15 10 2010 15:34:55,155 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:55,156 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:55,156 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#3]
15 10 2010 15:34:55,156 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:55,156 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:55,156 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
15 10 2010 15:34:55,156 DEBUG ~ collection fully initialized: [models.Post.comments#3]
15 10 2010 15:34:55,156 DEBUG ~ 1 collections initialized for role: models.Post.comments
15 10 2010 15:34:55,156 DEBUG ~ initializing non-lazy collections
15 10 2010 15:34:55,156 DEBUG ~ done loading collection
15 10 2010 15:34:55,162 DEBUG ~ loading collection: [models.Post.comments#2]
15 10 2010 15:34:55,162 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
15 10 2010 15:34:55,163 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
15 10 2010 15:34:55,163 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#2]
15 10 2010 15:34:55,163 DEBUG ~ result row: EntityKey[models.Comment#3]
15 10 2010 15:34:55,163 DEBUG ~ found row of collection: [models.Post.comments#2]
15 10 2010 15:34:55,163 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
15 10 2010 15:34:55,163 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
15 10 2010 15:34:55,163 DEBUG ~ resolving associations for [models.Comment#3]
15 10 2010 15:34:55,163 DEBUG ~ done materializing entity [models.Comment#3]
15 10 2010 15:34:55,163 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
15 10 2010 15:34:55,163 DEBUG ~ collection fully initialized: [models.Post.comments#2]
15 10 2010 15:34:55,163 DEBUG ~ 1 collections initialized for role: models.Post.comments
15 10 2010 15:34:55,163 DEBUG ~ initializing non-lazy collections
15 10 2010 15:34:55,163 DEBUG ~ done loading collection
15 10 2010 15:34:55,206 DEBUG ~ commit
15 10 2010 15:34:55,206 DEBUG ~ processing flush-time cascades
15 10 2010 15:34:55,206 DEBUG ~ dirty checking collections
15 10 2010 15:34:55,207 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
15 10 2010 15:34:55,207 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
15 10 2010 15:34:55,207 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
15 10 2010 15:34:55,207 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
15 10 2010 15:34:55,207 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
15 10 2010 15:34:55,207 DEBUG ~ listing entities:
15 10 2010 15:34:55,207 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
15 10 2010 15:34:55,207 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
15 10 2010 15:34:55,207 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
15 10 2010 15:34:55,208 DEBUG ~ models.Comment{content=This post is useless ?
, id=3, author=Tom, post=models.Post#2, postedAt=2009-04-05 09:00:00}
15 10 2010 15:34:55,208 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2], postedAt=2009-06-14 09:00:00}
15 10 2010 15:34:55,208 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
15 10 2010 15:34:55,208 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[models.Comment#3], postedAt=2009-03-25 09:00:00}
15 10 2010 15:34:55,208 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
15 10 2010 15:34:55,208 DEBUG ~ re-enabling autocommit
15 10 2010 15:34:55,208 DEBUG ~ committed JDBC Connection
15 10 2010 15:34:55,208 DEBUG ~ aggressively releasing JDBC connection
15 10 2010 15:34:55,208 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
