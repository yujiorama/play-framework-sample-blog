20 10 2010 18:57:35,001 INFO  ~ Starting D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog
20 10 2010 18:57:35,005 INFO  ~ Module scala is available (D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3)
20 10 2010 18:57:36,421 INFO  ~ 
20 10 2010 18:57:36,421 INFO  ~ Go to http://localhost:9000/@tests to run the tests
20 10 2010 18:57:36,421 INFO  ~ 
20 10 2010 18:57:36,421 WARN  ~ You're running Play! in DEV mode
20 10 2010 18:57:36,625 INFO  ~ Listening for HTTP on port 9000 (Waiting a first request to start) ...
20 10 2010 18:58:07,675 DEBUG ~ Creating new CacheManager with default config
20 10 2010 18:58:07,678 DEBUG ~ Configuring ehcache from classpath.
20 10 2010 18:58:07,694 DEBUG ~ Configuring ehcache from ehcache.xml found in the classpath: jar:file:/D:/cygwin/home/yuji-okazawa/work/j/play-1.1-beta2/framework/play.jar!/ehcache.xml
20 10 2010 18:58:07,695 DEBUG ~ Configuring ehcache from URL: jar:file:/D:/cygwin/home/yuji-okazawa/work/j/play-1.1-beta2/framework/play.jar!/ehcache.xml
20 10 2010 18:58:07,695 DEBUG ~ Configuring ehcache from InputStream
20 10 2010 18:58:07,838 DEBUG ~ Ignoring ehcache attribute xmlns:xsi
20 10 2010 18:58:07,839 DEBUG ~ Ignoring ehcache attribute xsi:noNamespaceSchemaLocation
20 10 2010 18:58:07,841 DEBUG ~ Disk Store Path: C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\
20 10 2010 18:58:07,854 DEBUG ~ propertiesString is null.
20 10 2010 18:58:07,856 DEBUG ~ No disk store path defined. Skipping disk store path conflict test.
20 10 2010 18:58:07,856 DEBUG ~ No CacheManagerEventListenerFactory class specified. Skipping...
20 10 2010 18:58:07,902 DEBUG ~ No BootstrapCacheLoaderFactory class specified. Skipping...
20 10 2010 18:58:07,902 DEBUG ~ CacheWriter factory not configured. Skipping...
20 10 2010 18:58:07,902 DEBUG ~ No CacheExceptionHandlerFactory class specified. Skipping...
20 10 2010 18:58:07,924 DEBUG ~ Initialized net.sf.ehcache.store.MemoryStore for play
20 10 2010 18:58:07,926 DEBUG ~ Initialised cache: play
20 10 2010 18:58:08,549 INFO  ~ Connected to jdbc:hsqldb:mem:playembed
20 10 2010 18:58:08,791 INFO  ~ Hibernate Annotations 3.5.3-Final
20 10 2010 18:58:08,832 INFO  ~ Hibernate 3.5.3-Final
20 10 2010 18:58:08,835 INFO  ~ hibernate.properties not found
20 10 2010 18:58:08,844 INFO  ~ Bytecode provider name : javassist
20 10 2010 18:58:08,850 INFO  ~ using JDK 1.4 java.sql.Timestamp handling
20 10 2010 18:58:09,043 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
20 10 2010 18:58:09,064 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
20 10 2010 18:58:09,064 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
20 10 2010 18:58:09,067 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
20 10 2010 18:58:09,069 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
20 10 2010 18:58:09,071 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
20 10 2010 18:58:09,071 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
20 10 2010 18:58:09,073 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
20 10 2010 18:58:09,073 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
20 10 2010 18:58:09,074 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
20 10 2010 18:58:09,074 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
20 10 2010 18:58:09,074 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
20 10 2010 18:58:09,077 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
20 10 2010 18:58:09,080 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
20 10 2010 18:58:09,092 INFO  ~ Hibernate Commons Annotations 3.2.0.Final
20 10 2010 18:58:09,101 INFO  ~ Hibernate EntityManager 3.5.3-Final
20 10 2010 18:58:09,102 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
20 10 2010 18:58:09,102 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
20 10 2010 18:58:09,102 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
20 10 2010 18:58:09,102 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
20 10 2010 18:58:09,102 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
20 10 2010 18:58:09,102 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
20 10 2010 18:58:09,102 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
20 10 2010 18:58:09,102 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
20 10 2010 18:58:09,102 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
20 10 2010 18:58:09,102 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
20 10 2010 18:58:09,102 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
20 10 2010 18:58:09,102 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
20 10 2010 18:58:09,102 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
20 10 2010 18:58:09,102 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
20 10 2010 18:58:09,173 DEBUG ~ Execute first pass mapping processing
20 10 2010 18:58:09,225 DEBUG ~ Process hbm files
20 10 2010 18:58:09,226 DEBUG ~ Process annotated classes
20 10 2010 18:58:09,252 INFO  ~ Binding entity from annotated class: models.Comment
20 10 2010 18:58:09,264 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
20 10 2010 18:58:09,267 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
20 10 2010 18:58:09,278 DEBUG ~ Import with entity name Comment
20 10 2010 18:58:09,282 INFO  ~ Bind entity models.Comment on table Comment
20 10 2010 18:58:09,328 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=id, insertable=true, updatable=true, unique=false}
20 10 2010 18:58:09,331 DEBUG ~ binding property id with lazy=false
20 10 2010 18:58:09,333 DEBUG ~ building SimpleValue for id
20 10 2010 18:58:09,335 DEBUG ~ Building property id
20 10 2010 18:58:09,337 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=author, insertable=true, updatable=true, unique=false}
20 10 2010 18:58:09,337 DEBUG ~ binding property author with lazy=false
20 10 2010 18:58:09,337 DEBUG ~ building SimpleValue for author
20 10 2010 18:58:09,337 DEBUG ~ Building property author
20 10 2010 18:58:09,337 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=content, insertable=true, updatable=true, unique=false}
20 10 2010 18:58:09,338 DEBUG ~ binding property content with lazy=false
20 10 2010 18:58:09,376 DEBUG ~ building SimpleValue for content
20 10 2010 18:58:09,376 DEBUG ~ Building property content
20 10 2010 18:58:09,378 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
20 10 2010 18:58:09,378 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=post, insertable=true, updatable=true, unique=false}
20 10 2010 18:58:09,395 DEBUG ~ Building property post
20 10 2010 18:58:09,396 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
20 10 2010 18:58:09,396 DEBUG ~ binding property postedAt with lazy=false
20 10 2010 18:58:09,396 DEBUG ~ building SimpleValue for postedAt
20 10 2010 18:58:09,396 DEBUG ~ Building property postedAt
20 10 2010 18:58:09,397 INFO  ~ Binding entity from annotated class: models.User
20 10 2010 18:58:09,397 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
20 10 2010 18:58:09,397 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
20 10 2010 18:58:09,398 DEBUG ~ Import with entity name User
20 10 2010 18:58:09,398 INFO  ~ Bind entity models.User on table User
20 10 2010 18:58:09,399 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
20 10 2010 18:58:09,400 DEBUG ~ binding property id with lazy=false
20 10 2010 18:58:09,400 DEBUG ~ building SimpleValue for id
20 10 2010 18:58:09,400 DEBUG ~ Building property id
20 10 2010 18:58:09,400 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
20 10 2010 18:58:09,400 DEBUG ~ binding property email with lazy=false
20 10 2010 18:58:09,400 DEBUG ~ building SimpleValue for email
20 10 2010 18:58:09,400 DEBUG ~ Building property email
20 10 2010 18:58:09,400 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
20 10 2010 18:58:09,400 DEBUG ~ binding property fullname with lazy=false
20 10 2010 18:58:09,400 DEBUG ~ building SimpleValue for fullname
20 10 2010 18:58:09,400 DEBUG ~ Building property fullname
20 10 2010 18:58:09,400 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
20 10 2010 18:58:09,401 DEBUG ~ binding property isAdmin with lazy=false
20 10 2010 18:58:09,401 DEBUG ~ building SimpleValue for isAdmin
20 10 2010 18:58:09,401 DEBUG ~ Building property isAdmin
20 10 2010 18:58:09,401 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
20 10 2010 18:58:09,401 DEBUG ~ binding property password with lazy=false
20 10 2010 18:58:09,401 DEBUG ~ building SimpleValue for password
20 10 2010 18:58:09,401 DEBUG ~ Building property password
20 10 2010 18:58:09,401 INFO  ~ Binding entity from annotated class: models.Post
20 10 2010 18:58:09,401 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
20 10 2010 18:58:09,401 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
20 10 2010 18:58:09,401 DEBUG ~ Import with entity name Post
20 10 2010 18:58:09,402 INFO  ~ Bind entity models.Post on table Post
20 10 2010 18:58:09,408 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=id, insertable=true, updatable=true, unique=false}
20 10 2010 18:58:09,408 DEBUG ~ binding property id with lazy=false
20 10 2010 18:58:09,408 DEBUG ~ building SimpleValue for id
20 10 2010 18:58:09,408 DEBUG ~ Building property id
20 10 2010 18:58:09,408 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
20 10 2010 18:58:09,409 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=author, insertable=true, updatable=true, unique=false}
20 10 2010 18:58:09,409 DEBUG ~ Building property author
20 10 2010 18:58:09,409 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
20 10 2010 18:58:09,409 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments, insertable=true, updatable=true, unique=false}
20 10 2010 18:58:09,410 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=null, insertable=true, updatable=true, unique=false}
20 10 2010 18:58:09,424 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=element, insertable=true, updatable=true, unique=false}
20 10 2010 18:58:09,424 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments_KEY, insertable=true, updatable=true, unique=false}
20 10 2010 18:58:09,425 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='comments_KEY', referencedColumn='null', mappedBy='null'}
20 10 2010 18:58:09,426 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
20 10 2010 18:58:09,426 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
20 10 2010 18:58:09,427 DEBUG ~ Collection role: models.Post.comments
20 10 2010 18:58:09,428 DEBUG ~ Building property comments
20 10 2010 18:58:09,428 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=content, insertable=true, updatable=true, unique=false}
20 10 2010 18:58:09,429 DEBUG ~ binding property content with lazy=false
20 10 2010 18:58:09,429 DEBUG ~ building SimpleValue for content
20 10 2010 18:58:09,429 DEBUG ~ Building property content
20 10 2010 18:58:09,429 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
20 10 2010 18:58:09,429 DEBUG ~ binding property postedAt with lazy=false
20 10 2010 18:58:09,429 DEBUG ~ building SimpleValue for postedAt
20 10 2010 18:58:09,429 DEBUG ~ Building property postedAt
20 10 2010 18:58:09,429 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=title, insertable=true, updatable=true, unique=false}
20 10 2010 18:58:09,429 DEBUG ~ binding property title with lazy=false
20 10 2010 18:58:09,429 DEBUG ~ building SimpleValue for title
20 10 2010 18:58:09,429 DEBUG ~ Building property title
20 10 2010 18:58:09,430 DEBUG ~ setting SimpleValue typeName for id
20 10 2010 18:58:09,430 DEBUG ~ setting SimpleValue typeName for author
20 10 2010 18:58:09,430 DEBUG ~ setting SimpleValue typeName for content
20 10 2010 18:58:09,430 DEBUG ~ setting SimpleValue typeName for postedAt
20 10 2010 18:58:09,430 DEBUG ~ setting SimpleValue typeName for id
20 10 2010 18:58:09,430 DEBUG ~ setting SimpleValue typeName for email
20 10 2010 18:58:09,430 DEBUG ~ setting SimpleValue typeName for fullname
20 10 2010 18:58:09,430 DEBUG ~ setting SimpleValue typeName for isAdmin
20 10 2010 18:58:09,430 DEBUG ~ setting SimpleValue typeName for password
20 10 2010 18:58:09,430 DEBUG ~ setting SimpleValue typeName for id
20 10 2010 18:58:09,430 DEBUG ~ setting SimpleValue typeName for content
20 10 2010 18:58:09,430 DEBUG ~ setting SimpleValue typeName for postedAt
20 10 2010 18:58:09,430 DEBUG ~ setting SimpleValue typeName for title
20 10 2010 18:58:09,431 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 18:58:09,455 DEBUG ~ processing extends queue
20 10 2010 18:58:09,456 DEBUG ~ processing collection mappings
20 10 2010 18:58:09,456 DEBUG ~ Second pass for collection: models.Post.comments
20 10 2010 18:58:09,459 DEBUG ~ Binding a OneToMany: models.Post.comments through a foreign key
20 10 2010 18:58:09,460 INFO  ~ Mapping collection: models.Post.comments -> Comment
20 10 2010 18:58:09,461 DEBUG ~ Retrieving property models.Comment.post
20 10 2010 18:58:09,461 DEBUG ~ Mapped collection key: post_id, one-to-many: models.Comment
20 10 2010 18:58:09,461 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 18:58:09,461 DEBUG ~ processing association property references
20 10 2010 18:58:09,461 DEBUG ~ processing foreign key constraints
20 10 2010 18:58:09,461 DEBUG ~ resolving reference to class: models.Post
20 10 2010 18:58:09,462 DEBUG ~ resolving reference to class: models.User
20 10 2010 18:58:09,469 INFO  ~ Hibernate Validator not found: ignoring
20 10 2010 18:58:09,508 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
20 10 2010 18:58:09,527 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
20 10 2010 18:58:09,530 DEBUG ~ Search not present in classpath, ignoring event listener registration.
20 10 2010 18:58:09,530 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
20 10 2010 18:58:09,530 DEBUG ~ Preparing to build session factory with filters : {}
20 10 2010 18:58:09,530 DEBUG ~ Execute first pass mapping processing
20 10 2010 18:58:09,530 DEBUG ~ Process hbm files
20 10 2010 18:58:09,530 DEBUG ~ Process annotated classes
20 10 2010 18:58:09,530 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 18:58:09,530 DEBUG ~ processing extends queue
20 10 2010 18:58:09,530 DEBUG ~ processing collection mappings
20 10 2010 18:58:09,530 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 18:58:09,530 DEBUG ~ processing association property references
20 10 2010 18:58:09,530 DEBUG ~ processing foreign key constraints
20 10 2010 18:58:09,530 DEBUG ~ resolving reference to class: models.Post
20 10 2010 18:58:09,530 DEBUG ~ resolving reference to class: models.User
20 10 2010 18:58:09,535 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
20 10 2010 18:58:09,537 INFO  ~ Using provided datasource
20 10 2010 18:58:09,582 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
20 10 2010 18:58:09,582 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
20 10 2010 18:58:09,644 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
20 10 2010 18:58:09,650 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
20 10 2010 18:58:09,651 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
20 10 2010 18:58:09,656 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
20 10 2010 18:58:09,656 INFO  ~ Automatic flush during beforeCompletion(): disabled
20 10 2010 18:58:09,656 INFO  ~ Automatic session close at end of transaction: disabled
20 10 2010 18:58:09,656 INFO  ~ JDBC batch size: 15
20 10 2010 18:58:09,656 INFO  ~ JDBC batch updates for versioned data: disabled
20 10 2010 18:58:09,657 INFO  ~ Scrollable result sets: enabled
20 10 2010 18:58:09,657 DEBUG ~ Wrap result sets: disabled
20 10 2010 18:58:09,657 INFO  ~ JDBC3 getGeneratedKeys(): disabled
20 10 2010 18:58:09,657 INFO  ~ Connection release mode: auto
20 10 2010 18:58:09,659 INFO  ~ Default batch fetch size: 1
20 10 2010 18:58:09,659 INFO  ~ Generate SQL with comments: disabled
20 10 2010 18:58:09,659 INFO  ~ Order SQL updates by primary key: disabled
20 10 2010 18:58:09,659 INFO  ~ Order SQL inserts for batching: disabled
20 10 2010 18:58:09,659 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
20 10 2010 18:58:09,665 INFO  ~ Using ASTQueryTranslatorFactory
20 10 2010 18:58:09,665 INFO  ~ Query language substitutions: {}
20 10 2010 18:58:09,665 INFO  ~ JPA-QL strict compliance: enabled
20 10 2010 18:58:09,665 INFO  ~ Second-level cache: enabled
20 10 2010 18:58:09,665 INFO  ~ Query cache: disabled
20 10 2010 18:58:09,665 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
20 10 2010 18:58:09,665 INFO  ~ Optimize cache for minimal puts: disabled
20 10 2010 18:58:09,665 INFO  ~ Structured second-level cache entries: disabled
20 10 2010 18:58:09,671 INFO  ~ Statistics: disabled
20 10 2010 18:58:09,671 INFO  ~ Deleted entity synthetic identifier rollback: disabled
20 10 2010 18:58:09,672 INFO  ~ Default entity-mode: pojo
20 10 2010 18:58:09,672 INFO  ~ Named query checking : enabled
20 10 2010 18:58:09,672 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
20 10 2010 18:58:09,741 INFO  ~ building session factory
20 10 2010 18:58:09,749 DEBUG ~ Session factory constructed with filter configurations : {}
20 10 2010 18:58:09,749 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
20 10 2010 18:58:09,750 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 18:58:09,750 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 18:58:09,750 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 18:58:09,912 DEBUG ~ Static SQL for entity: models.Comment
20 10 2010 18:58:09,912 DEBUG ~  Version select: select id from Comment where id =?
20 10 2010 18:58:09,912 DEBUG ~  Snapshot select: select comment_.id, comment_.author as author0_, comment_.content as content0_, comment_.post_id as post5_0_, comment_.postedAt as postedAt0_ from Comment comment_ where comment_.id=?
20 10 2010 18:58:09,912 DEBUG ~  Insert 0: insert into Comment (author, content, post_id, postedAt, id) values (?, ?, ?, ?, ?)
20 10 2010 18:58:09,912 DEBUG ~  Update 0: update Comment set author=?, content=?, post_id=?, postedAt=? where id=?
20 10 2010 18:58:09,912 DEBUG ~  Delete 0: delete from Comment where id=?
20 10 2010 18:58:09,912 DEBUG ~  Identity insert: insert into Comment (id, author, content, post_id, postedAt) values (null, ?, ?, ?, ?)
20 10 2010 18:58:09,921 DEBUG ~ Static SQL for entity: models.Post
20 10 2010 18:58:09,921 DEBUG ~  Version select: select id from Post where id =?
20 10 2010 18:58:09,921 DEBUG ~  Snapshot select: select post_.id, post_.author_id as author5_2_, post_.content as content2_, post_.postedAt as postedAt2_, post_.title as title2_ from Post post_ where post_.id=?
20 10 2010 18:58:09,921 DEBUG ~  Insert 0: insert into Post (author_id, content, postedAt, title, id) values (?, ?, ?, ?, ?)
20 10 2010 18:58:09,921 DEBUG ~  Update 0: update Post set author_id=?, content=?, postedAt=?, title=? where id=?
20 10 2010 18:58:09,921 DEBUG ~  Delete 0: delete from Post where id=?
20 10 2010 18:58:09,921 DEBUG ~  Identity insert: insert into Post (id, author_id, content, postedAt, title) values (null, ?, ?, ?, ?)
20 10 2010 18:58:09,927 DEBUG ~ Static SQL for entity: models.User
20 10 2010 18:58:09,927 DEBUG ~  Version select: select id from User where id =?
20 10 2010 18:58:09,927 DEBUG ~  Snapshot select: select user_.id, user_.email as email1_, user_.fullname as fullname1_, user_.isAdmin as isAdmin1_, user_.password as password1_ from User user_ where user_.id=?
20 10 2010 18:58:09,927 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
20 10 2010 18:58:09,927 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
20 10 2010 18:58:09,927 DEBUG ~  Delete 0: delete from User where id=?
20 10 2010 18:58:09,927 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
20 10 2010 18:58:09,933 DEBUG ~ Static SQL for collection: models.Post.comments
20 10 2010 18:58:09,933 DEBUG ~  Row insert: update Comment set post_id=? where id=?
20 10 2010 18:58:09,933 DEBUG ~  Row delete: update Comment set post_id=null where post_id=? and id=?
20 10 2010 18:58:09,934 DEBUG ~  One-shot delete: update Comment set post_id=null where post_id=?
20 10 2010 18:58:09,960 DEBUG ~ Static select for entity models.Comment [NONE]: select comment0_.id as id0_2_, comment0_.author as author0_2_, comment0_.content as content0_2_, comment0_.post_id as post5_0_2_, comment0_.postedAt as postedAt0_2_, post1_.id as id2_0_, post1_.author_id as author5_2_0_, post1_.content as content2_0_, post1_.postedAt as postedAt2_0_, post1_.title as title2_0_, user2_.id as id1_1_, user2_.email as email1_1_, user2_.fullname as fullname1_1_, user2_.isAdmin as isAdmin1_1_, user2_.password as password1_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
20 10 2010 18:58:09,961 DEBUG ~ Static select for entity models.Comment [READ]: select comment0_.id as id0_2_, comment0_.author as author0_2_, comment0_.content as content0_2_, comment0_.post_id as post5_0_2_, comment0_.postedAt as postedAt0_2_, post1_.id as id2_0_, post1_.author_id as author5_2_0_, post1_.content as content2_0_, post1_.postedAt as postedAt2_0_, post1_.title as title2_0_, user2_.id as id1_1_, user2_.email as email1_1_, user2_.fullname as fullname1_1_, user2_.isAdmin as isAdmin1_1_, user2_.password as password1_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
20 10 2010 18:58:09,961 DEBUG ~ Static select for entity models.Comment [UPGRADE]: select comment0_.id as id0_0_, comment0_.author as author0_0_, comment0_.content as content0_0_, comment0_.post_id as post5_0_0_, comment0_.postedAt as postedAt0_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 18:58:09,961 DEBUG ~ Static select for entity models.Comment [UPGRADE_NOWAIT]: select comment0_.id as id0_0_, comment0_.author as author0_0_, comment0_.content as content0_0_, comment0_.post_id as post5_0_0_, comment0_.postedAt as postedAt0_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 18:58:09,961 DEBUG ~ Static select for entity models.Comment [FORCE]: select comment0_.id as id0_0_, comment0_.author as author0_0_, comment0_.content as content0_0_, comment0_.post_id as post5_0_0_, comment0_.postedAt as postedAt0_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 18:58:09,961 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_READ]: select comment0_.id as id0_0_, comment0_.author as author0_0_, comment0_.content as content0_0_, comment0_.post_id as post5_0_0_, comment0_.postedAt as postedAt0_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 18:58:09,962 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_WRITE]: select comment0_.id as id0_0_, comment0_.author as author0_0_, comment0_.content as content0_0_, comment0_.post_id as post5_0_0_, comment0_.postedAt as postedAt0_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 18:58:09,962 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_FORCE_INCREMENT]: select comment0_.id as id0_0_, comment0_.author as author0_0_, comment0_.content as content0_0_, comment0_.post_id as post5_0_0_, comment0_.postedAt as postedAt0_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 18:58:09,962 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC]: select comment0_.id as id0_2_, comment0_.author as author0_2_, comment0_.content as content0_2_, comment0_.post_id as post5_0_2_, comment0_.postedAt as postedAt0_2_, post1_.id as id2_0_, post1_.author_id as author5_2_0_, post1_.content as content2_0_, post1_.postedAt as postedAt2_0_, post1_.title as title2_0_, user2_.id as id1_1_, user2_.email as email1_1_, user2_.fullname as fullname1_1_, user2_.isAdmin as isAdmin1_1_, user2_.password as password1_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
20 10 2010 18:58:09,963 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC_FORCE_INCREMENT]: select comment0_.id as id0_2_, comment0_.author as author0_2_, comment0_.content as content0_2_, comment0_.post_id as post5_0_2_, comment0_.postedAt as postedAt0_2_, post1_.id as id2_0_, post1_.author_id as author5_2_0_, post1_.content as content2_0_, post1_.postedAt as postedAt2_0_, post1_.title as title2_0_, user2_.id as id1_1_, user2_.email as email1_1_, user2_.fullname as fullname1_1_, user2_.isAdmin as isAdmin1_1_, user2_.password as password1_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
20 10 2010 18:58:09,971 DEBUG ~ Static select for action ACTION_MERGE on entity models.Comment: select comment0_.id as id0_0_, comment0_.author as author0_0_, comment0_.content as content0_0_, comment0_.post_id as post5_0_0_, comment0_.postedAt as postedAt0_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 18:58:09,971 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Comment: select comment0_.id as id0_0_, comment0_.author as author0_0_, comment0_.content as content0_0_, comment0_.post_id as post5_0_0_, comment0_.postedAt as postedAt0_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 18:58:09,973 DEBUG ~ Static select for entity models.Post [NONE]: select post0_.id as id2_1_, post0_.author_id as author5_2_1_, post0_.content as content2_1_, post0_.postedAt as postedAt2_1_, post0_.title as title2_1_, user1_.id as id1_0_, user1_.email as email1_0_, user1_.fullname as fullname1_0_, user1_.isAdmin as isAdmin1_0_, user1_.password as password1_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
20 10 2010 18:58:09,973 DEBUG ~ Static select for entity models.Post [READ]: select post0_.id as id2_1_, post0_.author_id as author5_2_1_, post0_.content as content2_1_, post0_.postedAt as postedAt2_1_, post0_.title as title2_1_, user1_.id as id1_0_, user1_.email as email1_0_, user1_.fullname as fullname1_0_, user1_.isAdmin as isAdmin1_0_, user1_.password as password1_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
20 10 2010 18:58:09,974 DEBUG ~ Static select for entity models.Post [UPGRADE]: select post0_.id as id2_0_, post0_.author_id as author5_2_0_, post0_.content as content2_0_, post0_.postedAt as postedAt2_0_, post0_.title as title2_0_ from Post post0_ where post0_.id=?
20 10 2010 18:58:09,974 DEBUG ~ Static select for entity models.Post [UPGRADE_NOWAIT]: select post0_.id as id2_0_, post0_.author_id as author5_2_0_, post0_.content as content2_0_, post0_.postedAt as postedAt2_0_, post0_.title as title2_0_ from Post post0_ where post0_.id=?
20 10 2010 18:58:09,974 DEBUG ~ Static select for entity models.Post [FORCE]: select post0_.id as id2_0_, post0_.author_id as author5_2_0_, post0_.content as content2_0_, post0_.postedAt as postedAt2_0_, post0_.title as title2_0_ from Post post0_ where post0_.id=?
20 10 2010 18:58:09,974 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_READ]: select post0_.id as id2_0_, post0_.author_id as author5_2_0_, post0_.content as content2_0_, post0_.postedAt as postedAt2_0_, post0_.title as title2_0_ from Post post0_ where post0_.id=?
20 10 2010 18:58:09,974 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_WRITE]: select post0_.id as id2_0_, post0_.author_id as author5_2_0_, post0_.content as content2_0_, post0_.postedAt as postedAt2_0_, post0_.title as title2_0_ from Post post0_ where post0_.id=?
20 10 2010 18:58:09,974 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_FORCE_INCREMENT]: select post0_.id as id2_0_, post0_.author_id as author5_2_0_, post0_.content as content2_0_, post0_.postedAt as postedAt2_0_, post0_.title as title2_0_ from Post post0_ where post0_.id=?
20 10 2010 18:58:09,975 DEBUG ~ Static select for entity models.Post [OPTIMISTIC]: select post0_.id as id2_1_, post0_.author_id as author5_2_1_, post0_.content as content2_1_, post0_.postedAt as postedAt2_1_, post0_.title as title2_1_, user1_.id as id1_0_, user1_.email as email1_0_, user1_.fullname as fullname1_0_, user1_.isAdmin as isAdmin1_0_, user1_.password as password1_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
20 10 2010 18:58:09,975 DEBUG ~ Static select for entity models.Post [OPTIMISTIC_FORCE_INCREMENT]: select post0_.id as id2_1_, post0_.author_id as author5_2_1_, post0_.content as content2_1_, post0_.postedAt as postedAt2_1_, post0_.title as title2_1_, user1_.id as id1_0_, user1_.email as email1_0_, user1_.fullname as fullname1_0_, user1_.isAdmin as isAdmin1_0_, user1_.password as password1_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
20 10 2010 18:58:09,979 DEBUG ~ Static select for action ACTION_MERGE on entity models.Post: select post0_.id as id2_1_, post0_.author_id as author5_2_1_, post0_.content as content2_1_, post0_.postedAt as postedAt2_1_, post0_.title as title2_1_, comments1_.post_id as post5_2_3_, comments1_.id as id3_, comments1_.id as id0_0_, comments1_.author as author0_0_, comments1_.content as content0_0_, comments1_.post_id as post5_0_0_, comments1_.postedAt as postedAt0_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post_id where post0_.id=?
20 10 2010 18:58:09,979 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Post: select post0_.id as id2_1_, post0_.author_id as author5_2_1_, post0_.content as content2_1_, post0_.postedAt as postedAt2_1_, post0_.title as title2_1_, comments1_.post_id as post5_2_3_, comments1_.id as id3_, comments1_.id as id0_0_, comments1_.author as author0_0_, comments1_.content as content0_0_, comments1_.post_id as post5_0_0_, comments1_.postedAt as postedAt0_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post_id where post0_.id=?
20 10 2010 18:58:09,979 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
20 10 2010 18:58:09,980 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
20 10 2010 18:58:09,980 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
20 10 2010 18:58:09,980 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
20 10 2010 18:58:09,980 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
20 10 2010 18:58:09,980 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
20 10 2010 18:58:09,980 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
20 10 2010 18:58:09,981 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
20 10 2010 18:58:09,981 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
20 10 2010 18:58:09,981 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
20 10 2010 18:58:09,981 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
20 10 2010 18:58:09,981 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id1_0_, user0_.email as email1_0_, user0_.fullname as fullname1_0_, user0_.isAdmin as isAdmin1_0_, user0_.password as password1_0_ from User user0_ where user0_.id=?
20 10 2010 18:58:09,987 DEBUG ~ Static select for one-to-many models.Post.comments: select comments0_.post_id as post5_2_1_, comments0_.id as id1_, comments0_.id as id0_0_, comments0_.author as author0_0_, comments0_.content as content0_0_, comments0_.post_id as post5_0_0_, comments0_.postedAt as postedAt0_0_ from Comment comments0_ where comments0_.post_id=?
20 10 2010 18:58:09,989 DEBUG ~ initializing class SessionFactoryObjectFactory
20 10 2010 18:58:09,990 DEBUG ~ registered: 2c9082cd2bc91307012bc9130b430000 (unnamed)
20 10 2010 18:58:09,990 INFO  ~ Not binding factory to JNDI, no JNDI name configured
20 10 2010 18:58:09,990 DEBUG ~ instantiated session factory
20 10 2010 18:58:09,993 DEBUG ~ Execute first pass mapping processing
20 10 2010 18:58:09,993 DEBUG ~ Process hbm files
20 10 2010 18:58:09,993 DEBUG ~ Process annotated classes
20 10 2010 18:58:09,993 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 18:58:09,993 DEBUG ~ processing extends queue
20 10 2010 18:58:09,993 DEBUG ~ processing collection mappings
20 10 2010 18:58:09,993 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 18:58:09,993 DEBUG ~ processing association property references
20 10 2010 18:58:09,993 DEBUG ~ processing foreign key constraints
20 10 2010 18:58:09,993 DEBUG ~ resolving reference to class: models.Post
20 10 2010 18:58:09,993 DEBUG ~ resolving reference to class: models.User
20 10 2010 18:58:09,995 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 18:58:09,996 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 18:58:09,996 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 18:58:09,996 DEBUG ~ Execute first pass mapping processing
20 10 2010 18:58:09,996 DEBUG ~ Process hbm files
20 10 2010 18:58:09,996 DEBUG ~ Process annotated classes
20 10 2010 18:58:09,996 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 18:58:09,996 DEBUG ~ processing extends queue
20 10 2010 18:58:09,996 DEBUG ~ processing collection mappings
20 10 2010 18:58:09,996 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 18:58:09,996 DEBUG ~ processing association property references
20 10 2010 18:58:09,997 DEBUG ~ processing foreign key constraints
20 10 2010 18:58:09,997 DEBUG ~ resolving reference to class: models.Post
20 10 2010 18:58:09,997 DEBUG ~ resolving reference to class: models.User
20 10 2010 18:58:09,998 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 18:58:09,999 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 18:58:09,999 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 18:58:09,999 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 18:58:09,999 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 18:58:09,999 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 18:58:10,002 INFO  ~ Running hbm2ddl schema export
20 10 2010 18:58:10,002 DEBUG ~ import file not found: /import.sql
20 10 2010 18:58:10,002 INFO  ~ exporting generated schema to database
20 10 2010 18:58:10,005 DEBUG ~ alter table Comment drop constraint FK9BDE863F388562DE
20 10 2010 18:58:10,007 DEBUG ~ Unsuccessful: alter table Comment drop constraint FK9BDE863F388562DE
20 10 2010 18:58:10,007 DEBUG ~ Table not found: COMMENT in statement [alter table Comment]
20 10 2010 18:58:10,008 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
20 10 2010 18:58:10,008 DEBUG ~ Unsuccessful: alter table Post drop constraint FK260CC0A7CD013E
20 10 2010 18:58:10,008 DEBUG ~ Table not found: POST in statement [alter table Post]
20 10 2010 18:58:10,008 DEBUG ~ drop table Comment if exists
20 10 2010 18:58:10,009 DEBUG ~ drop table Post if exists
20 10 2010 18:58:10,009 DEBUG ~ drop table User if exists
20 10 2010 18:58:10,009 DEBUG ~ create table Comment (id bigint generated by default as identity (start with 1), author varchar(255), content longvarchar, postedAt timestamp, post_id bigint, primary key (id))
20 10 2010 18:58:10,011 DEBUG ~ create table Post (id bigint generated by default as identity (start with 1), content longvarchar, postedAt timestamp, title varchar(255), author_id bigint, primary key (id))
20 10 2010 18:58:10,011 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
20 10 2010 18:58:10,012 DEBUG ~ alter table Comment add constraint FK9BDE863F388562DE foreign key (post_id) references Post
20 10 2010 18:58:10,014 DEBUG ~ alter table Post add constraint FK260CC0A7CD013E foreign key (author_id) references User
20 10 2010 18:58:10,014 INFO  ~ schema export complete
20 10 2010 18:58:10,015 DEBUG ~ Execute first pass mapping processing
20 10 2010 18:58:10,015 DEBUG ~ Process hbm files
20 10 2010 18:58:10,015 DEBUG ~ Process annotated classes
20 10 2010 18:58:10,015 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 18:58:10,015 DEBUG ~ processing extends queue
20 10 2010 18:58:10,016 DEBUG ~ processing collection mappings
20 10 2010 18:58:10,016 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 18:58:10,016 DEBUG ~ processing association property references
20 10 2010 18:58:10,016 DEBUG ~ processing foreign key constraints
20 10 2010 18:58:10,016 DEBUG ~ resolving reference to class: models.Post
20 10 2010 18:58:10,016 DEBUG ~ resolving reference to class: models.User
20 10 2010 18:58:10,019 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 18:58:10,019 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 18:58:10,019 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 18:58:10,019 DEBUG ~ Execute first pass mapping processing
20 10 2010 18:58:10,019 DEBUG ~ Process hbm files
20 10 2010 18:58:10,019 DEBUG ~ Process annotated classes
20 10 2010 18:58:10,019 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 18:58:10,019 DEBUG ~ processing extends queue
20 10 2010 18:58:10,019 DEBUG ~ processing collection mappings
20 10 2010 18:58:10,019 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 18:58:10,020 DEBUG ~ processing association property references
20 10 2010 18:58:10,020 DEBUG ~ processing foreign key constraints
20 10 2010 18:58:10,020 DEBUG ~ resolving reference to class: models.Post
20 10 2010 18:58:10,020 DEBUG ~ resolving reference to class: models.User
20 10 2010 18:58:10,022 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 18:58:10,022 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 18:58:10,022 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 18:58:10,022 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 18:58:10,022 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 18:58:10,022 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 18:58:10,023 DEBUG ~ Checking 0 named HQL queries
20 10 2010 18:58:10,023 DEBUG ~ Checking 0 named SQL queries
20 10 2010 18:58:10,213 INFO  ~ Application 'blog' is now started !
20 10 2010 18:58:10,367 DEBUG ~ opened session at timestamp: 12875686903
20 10 2010 18:58:10,373 DEBUG ~ begin
20 10 2010 18:58:10,373 DEBUG ~ opening JDBC connection
20 10 2010 18:58:10,373 DEBUG ~ current autocommit status: true
20 10 2010 18:58:10,373 DEBUG ~ disabling autocommit
20 10 2010 18:58:10,485 DEBUG ~ parse() - HQL: select count(e) from models.User e
20 10 2010 18:58:10,501 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'User'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

20 10 2010 18:58:10,501 DEBUG ~ throwQueryException() : no errors
20 10 2010 18:58:10,575 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 18:58:10,597 DEBUG ~ FromClause{level=1} :  models.User (e) -> user0_
20 10 2010 18:58:10,599 DEBUG ~ Resolved :  e -> user0_.id
20 10 2010 18:58:10,601 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 18:58:10,601 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count user0_.id ) ) ( FromClause{level=1} User user0_ ) )
20 10 2010 18:58:10,609 DEBUG ~ Using FROM fragment [User user0_]
20 10 2010 18:58:10,609 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 18:58:10,610 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'user0_.id' {alias=e, className=models.User, tableAlias=user0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}

20 10 2010 18:58:10,610 DEBUG ~ throwQueryException() : no errors
20 10 2010 18:58:10,628 DEBUG ~ HQL: select count(e) from models.User e
20 10 2010 18:58:10,628 DEBUG ~ SQL: select count(user0_.id) as col_0_0_ from User user0_
20 10 2010 18:58:10,628 DEBUG ~ throwQueryException() : no errors
20 10 2010 18:58:10,641 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:10,654 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 18:58:10,655 DEBUG ~ result row: 
20 10 2010 18:58:10,655 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 18:58:10,655 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:10,657 DEBUG ~ initializing non-lazy collections
20 10 2010 18:58:11,291 DEBUG ~ executing identity-insert immediately
20 10 2010 18:58:11,292 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:11,293 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:11,293 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:11,295 DEBUG ~ Natively generated identity: 1
20 10 2010 18:58:11,295 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:11,299 DEBUG ~ processing flush-time cascades
20 10 2010 18:58:11,299 DEBUG ~ dirty checking collections
20 10 2010 18:58:11,317 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
20 10 2010 18:58:11,317 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
20 10 2010 18:58:11,318 DEBUG ~ listing entities:
20 10 2010 18:58:11,318 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 18:58:11,322 DEBUG ~ executing identity-insert immediately
20 10 2010 18:58:11,322 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:11,323 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:11,323 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:11,323 DEBUG ~ Natively generated identity: 2
20 10 2010 18:58:11,323 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:11,323 DEBUG ~ processing flush-time cascades
20 10 2010 18:58:11,323 DEBUG ~ dirty checking collections
20 10 2010 18:58:11,323 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
20 10 2010 18:58:11,323 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
20 10 2010 18:58:11,323 DEBUG ~ listing entities:
20 10 2010 18:58:11,323 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 18:58:11,324 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 18:58:11,328 DEBUG ~ parse() - HQL: from models.User where id = ?
20 10 2010 18:58:11,332 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

20 10 2010 18:58:11,332 DEBUG ~ throwQueryException() : no errors
20 10 2010 18:58:11,333 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 18:58:11,333 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
20 10 2010 18:58:11,346 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 18:58:11,347 DEBUG ~ getDataType() : id -> org.hibernate.type.LongType@34521982
20 10 2010 18:58:11,348 DEBUG ~ Resolved :  {synthetic-alias}.id -> user0_.id
20 10 2010 18:58:11,350 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 18:58:11,350 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.id {synthetic-alias} id ) ? ) ) )
20 10 2010 18:58:11,353 DEBUG ~ Derived SELECT clause created.
20 10 2010 18:58:11,353 DEBUG ~ Using FROM fragment [User user0_]
20 10 2010 18:58:11,353 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 18:58:11,354 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id1_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email1_, user0_.fullname as fullname1_, user0_.isAdmin as isAdmin1_, user0_.password as password1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.id' {propertyName=id,dereferenceType=ALL,propertyPath=id,path={synthetic-alias}.id,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.LongType@34521982}

20 10 2010 18:58:11,354 DEBUG ~ throwQueryException() : no errors
20 10 2010 18:58:11,354 DEBUG ~ HQL: from models.User where id = ?
20 10 2010 18:58:11,355 DEBUG ~ SQL: select user0_.id as id1_, user0_.email as email1_, user0_.fullname as fullname1_, user0_.isAdmin as isAdmin1_, user0_.password as password1_ from User user0_ where user0_.id=?
20 10 2010 18:58:11,355 DEBUG ~ throwQueryException() : no errors
20 10 2010 18:58:11,356 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:11,357 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 18:58:11,359 DEBUG ~ result row: EntityKey[models.User#1]
20 10 2010 18:58:11,359 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 18:58:11,359 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:11,359 DEBUG ~ initializing non-lazy collections
20 10 2010 18:58:11,394 DEBUG ~ executing identity-insert immediately
20 10 2010 18:58:11,394 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:11,395 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:11,395 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:11,395 DEBUG ~ Natively generated identity: 1
20 10 2010 18:58:11,395 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:11,404 DEBUG ~ processing flush-time cascades
20 10 2010 18:58:11,405 DEBUG ~ dirty checking collections
20 10 2010 18:58:11,413 DEBUG ~ Collection found: [models.Post.comments#1], was: [<unreferenced>] (initialized)
20 10 2010 18:58:11,421 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
20 10 2010 18:58:11,421 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
20 10 2010 18:58:11,421 DEBUG ~ listing entities:
20 10 2010 18:58:11,421 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 18:58:11,421 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 18:58:11,421 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 18:58:11,433 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:11,434 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 18:58:11,434 DEBUG ~ result row: EntityKey[models.User#1]
20 10 2010 18:58:11,434 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 18:58:11,434 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:11,434 DEBUG ~ initializing non-lazy collections
20 10 2010 18:58:11,438 DEBUG ~ executing identity-insert immediately
20 10 2010 18:58:11,438 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:11,438 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:11,438 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:11,438 DEBUG ~ Natively generated identity: 2
20 10 2010 18:58:11,438 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:11,439 DEBUG ~ processing flush-time cascades
20 10 2010 18:58:11,439 DEBUG ~ dirty checking collections
20 10 2010 18:58:11,439 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 18:58:11,439 DEBUG ~ Collection found: [models.Post.comments#2], was: [<unreferenced>] (initialized)
20 10 2010 18:58:11,439 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
20 10 2010 18:58:11,440 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 2 collections
20 10 2010 18:58:11,440 DEBUG ~ listing entities:
20 10 2010 18:58:11,440 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 18:58:11,440 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 18:58:11,440 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 18:58:11,440 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
20 10 2010 18:58:11,444 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:11,445 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 18:58:11,445 DEBUG ~ result row: EntityKey[models.User#2]
20 10 2010 18:58:11,445 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 18:58:11,445 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:11,445 DEBUG ~ initializing non-lazy collections
20 10 2010 18:58:11,448 DEBUG ~ executing identity-insert immediately
20 10 2010 18:58:11,448 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:11,448 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:11,449 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:11,449 DEBUG ~ Natively generated identity: 3
20 10 2010 18:58:11,449 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:11,451 DEBUG ~ processing flush-time cascades
20 10 2010 18:58:11,452 DEBUG ~ dirty checking collections
20 10 2010 18:58:11,452 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 18:58:11,453 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
20 10 2010 18:58:11,453 DEBUG ~ Collection found: [models.Post.comments#3], was: [<unreferenced>] (initialized)
20 10 2010 18:58:11,453 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 5 objects
20 10 2010 18:58:11,453 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 3 collections
20 10 2010 18:58:11,453 DEBUG ~ listing entities:
20 10 2010 18:58:11,453 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 18:58:11,453 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 18:58:11,453 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 18:58:11,454 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
20 10 2010 18:58:11,454 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
20 10 2010 18:58:11,458 DEBUG ~ parse() - HQL: from models.Post where id = ?
20 10 2010 18:58:11,465 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

20 10 2010 18:58:11,465 DEBUG ~ throwQueryException() : no errors
20 10 2010 18:58:11,466 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 18:58:11,466 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
20 10 2010 18:58:11,466 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 18:58:11,466 DEBUG ~ getDataType() : id -> org.hibernate.type.LongType@34521982
20 10 2010 18:58:11,466 DEBUG ~ Resolved :  {synthetic-alias}.id -> post0_.id
20 10 2010 18:58:11,466 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 18:58:11,467 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( = ( post0_.id {synthetic-alias} id ) ? ) ) )
20 10 2010 18:58:11,467 DEBUG ~ Derived SELECT clause created.
20 10 2010 18:58:11,467 DEBUG ~ Using FROM fragment [Post post0_]
20 10 2010 18:58:11,467 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 18:58:11,468 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id2_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_2_, post0_.content as content2_, post0_.postedAt as postedAt2_, post0_.title as title2_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'post0_.id' {propertyName=id,dereferenceType=ALL,propertyPath=id,path={synthetic-alias}.id,tableAlias=post0_,className=models.Post,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.LongType@34521982}

20 10 2010 18:58:11,468 DEBUG ~ throwQueryException() : no errors
20 10 2010 18:58:11,468 DEBUG ~ HQL: from models.Post where id = ?
20 10 2010 18:58:11,468 DEBUG ~ SQL: select post0_.id as id2_, post0_.author_id as author5_2_, post0_.content as content2_, post0_.postedAt as postedAt2_, post0_.title as title2_ from Post post0_ where post0_.id=?
20 10 2010 18:58:11,468 DEBUG ~ throwQueryException() : no errors
20 10 2010 18:58:11,469 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:11,470 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 18:58:11,470 DEBUG ~ result row: EntityKey[models.Post#1]
20 10 2010 18:58:11,470 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 18:58:11,470 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:11,470 DEBUG ~ initializing non-lazy collections
20 10 2010 18:58:11,473 DEBUG ~ executing identity-insert immediately
20 10 2010 18:58:11,473 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:11,473 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:11,473 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:11,474 DEBUG ~ Natively generated identity: 1
20 10 2010 18:58:11,474 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:11,477 DEBUG ~ processing flush-time cascades
20 10 2010 18:58:11,478 DEBUG ~ dirty checking collections
20 10 2010 18:58:11,478 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 18:58:11,478 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
20 10 2010 18:58:11,479 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
20 10 2010 18:58:11,479 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
20 10 2010 18:58:11,479 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
20 10 2010 18:58:11,479 DEBUG ~ listing entities:
20 10 2010 18:58:11,479 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 18:58:11,479 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 18:58:11,479 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 18:58:11,479 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 18:58:11,480 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
20 10 2010 18:58:11,480 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
20 10 2010 18:58:11,484 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:11,485 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 18:58:11,485 DEBUG ~ result row: EntityKey[models.Post#1]
20 10 2010 18:58:11,486 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 18:58:11,486 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:11,486 DEBUG ~ initializing non-lazy collections
20 10 2010 18:58:11,489 DEBUG ~ executing identity-insert immediately
20 10 2010 18:58:11,489 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:11,489 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:11,489 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:11,489 DEBUG ~ Natively generated identity: 2
20 10 2010 18:58:11,489 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:11,490 DEBUG ~ processing flush-time cascades
20 10 2010 18:58:11,490 DEBUG ~ dirty checking collections
20 10 2010 18:58:11,491 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 18:58:11,491 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
20 10 2010 18:58:11,491 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
20 10 2010 18:58:11,491 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 7 objects
20 10 2010 18:58:11,491 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
20 10 2010 18:58:11,491 DEBUG ~ listing entities:
20 10 2010 18:58:11,492 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
20 10 2010 18:58:11,492 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 18:58:11,492 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 18:58:11,492 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 18:58:11,492 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 18:58:11,493 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
20 10 2010 18:58:11,494 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 18:58:11,497 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:11,497 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 18:58:11,497 DEBUG ~ result row: EntityKey[models.Post#2]
20 10 2010 18:58:11,498 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 18:58:11,498 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:11,498 DEBUG ~ initializing non-lazy collections
20 10 2010 18:58:11,500 DEBUG ~ executing identity-insert immediately
20 10 2010 18:58:11,500 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:11,501 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:11,501 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:11,501 DEBUG ~ Natively generated identity: 3
20 10 2010 18:58:11,501 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:11,501 DEBUG ~ processing flush-time cascades
20 10 2010 18:58:11,502 DEBUG ~ dirty checking collections
20 10 2010 18:58:11,502 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 18:58:11,502 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
20 10 2010 18:58:11,502 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
20 10 2010 18:58:11,502 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
20 10 2010 18:58:11,502 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
20 10 2010 18:58:11,502 DEBUG ~ listing entities:
20 10 2010 18:58:11,503 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
20 10 2010 18:58:11,503 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 18:58:11,503 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 18:58:11,503 DEBUG ~ models.Comment{content=This post is useless ?
, id=3, author=Tom, post=models.Post#2, postedAt=2009-04-05 09:00:00}
20 10 2010 18:58:11,503 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 18:58:11,503 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 18:58:11,504 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
20 10 2010 18:58:11,504 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 18:58:11,507 DEBUG ~ commit
20 10 2010 18:58:11,507 DEBUG ~ re-enabling autocommit
20 10 2010 18:58:11,507 DEBUG ~ committed JDBC Connection
20 10 2010 18:58:11,507 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 18:58:11,508 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 18:58:11,510 DEBUG ~ opened session at timestamp: 12875686915
20 10 2010 18:58:11,511 DEBUG ~ begin
20 10 2010 18:58:11,511 DEBUG ~ opening JDBC connection
20 10 2010 18:58:11,511 DEBUG ~ current autocommit status: true
20 10 2010 18:58:11,511 DEBUG ~ disabling autocommit
20 10 2010 18:58:12,048 DEBUG ~ parse() - HQL: from models.Post order by postedAt desc
20 10 2010 18:58:12,050 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[ORDER] Node: 'order'
       +-[IDENT] Node: 'postedAt'
       \-[DESCENDING] Node: 'desc'

20 10 2010 18:58:12,050 DEBUG ~ throwQueryException() : no errors
20 10 2010 18:58:12,051 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 18:58:12,051 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
20 10 2010 18:58:12,052 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 18:58:12,052 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@5cf99513
20 10 2010 18:58:12,052 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
20 10 2010 18:58:12,052 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 18:58:12,052 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( order ( post0_.postedAt {synthetic-alias} postedAt ) desc ) )
20 10 2010 18:58:12,052 DEBUG ~ Derived SELECT clause created.
20 10 2010 18:58:12,052 DEBUG ~ Using FROM fragment [Post post0_]
20 10 2010 18:58:12,052 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 18:58:12,053 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id2_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_2_, post0_.content as content2_, post0_.postedAt as postedAt2_, post0_.title as title2_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[ORDER] OrderByClause: 'order'
       +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
       |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
       |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
       \-[DESCENDING] SqlNode: 'desc'

20 10 2010 18:58:12,053 DEBUG ~ throwQueryException() : no errors
20 10 2010 18:58:12,053 DEBUG ~ HQL: from models.Post order by postedAt desc
20 10 2010 18:58:12,053 DEBUG ~ SQL: select post0_.id as id2_, post0_.author_id as author5_2_, post0_.content as content2_, post0_.postedAt as postedAt2_, post0_.title as title2_ from Post post0_ order by post0_.postedAt desc
20 10 2010 18:58:12,053 DEBUG ~ throwQueryException() : no errors
20 10 2010 18:58:12,054 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:12,076 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 18:58:12,076 DEBUG ~ result row: EntityKey[models.Post#1]
20 10 2010 18:58:12,084 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 18:58:12,084 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:12,084 DEBUG ~ resolving associations for [models.Post#1]
20 10 2010 18:58:12,085 DEBUG ~ loading entity: [models.User#1]
20 10 2010 18:58:12,085 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:12,086 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 18:58:12,086 DEBUG ~ result row: EntityKey[models.User#1]
20 10 2010 18:58:12,087 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 18:58:12,087 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:12,087 DEBUG ~ resolving associations for [models.User#1]
20 10 2010 18:58:12,087 DEBUG ~ done materializing entity [models.User#1]
20 10 2010 18:58:12,087 DEBUG ~ done entity load
20 10 2010 18:58:12,099 DEBUG ~ done materializing entity [models.Post#1]
20 10 2010 18:58:12,099 DEBUG ~ initializing non-lazy collections
20 10 2010 18:58:12,100 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:12,101 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 18:58:12,101 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 18:58:12,101 DEBUG ~ result row: EntityKey[models.Post#2]
20 10 2010 18:58:12,101 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 18:58:12,101 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:12,101 DEBUG ~ resolving associations for [models.Post#3]
20 10 2010 18:58:12,101 DEBUG ~ loading entity: [models.User#2]
20 10 2010 18:58:12,101 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:12,102 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 18:58:12,102 DEBUG ~ result row: EntityKey[models.User#2]
20 10 2010 18:58:12,102 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 18:58:12,102 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:12,102 DEBUG ~ resolving associations for [models.User#2]
20 10 2010 18:58:12,102 DEBUG ~ done materializing entity [models.User#2]
20 10 2010 18:58:12,102 DEBUG ~ done entity load
20 10 2010 18:58:12,102 DEBUG ~ done materializing entity [models.Post#3]
20 10 2010 18:58:12,102 DEBUG ~ resolving associations for [models.Post#2]
20 10 2010 18:58:12,103 DEBUG ~ done materializing entity [models.Post#2]
20 10 2010 18:58:12,103 DEBUG ~ initializing non-lazy collections
20 10 2010 18:58:13,080 DEBUG ~ loading collection: [models.Post.comments#1]
20 10 2010 18:58:13,080 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:13,081 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 18:58:13,081 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
20 10 2010 18:58:13,083 DEBUG ~ result row: EntityKey[models.Comment#1]
20 10 2010 18:58:13,083 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 18:58:13,083 DEBUG ~ result row: EntityKey[models.Comment#2]
20 10 2010 18:58:13,083 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 18:58:13,084 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 18:58:13,084 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:13,084 DEBUG ~ resolving associations for [models.Comment#1]
20 10 2010 18:58:13,084 DEBUG ~ done materializing entity [models.Comment#1]
20 10 2010 18:58:13,084 DEBUG ~ resolving associations for [models.Comment#2]
20 10 2010 18:58:13,084 DEBUG ~ done materializing entity [models.Comment#2]
20 10 2010 18:58:13,084 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
20 10 2010 18:58:13,084 DEBUG ~ collection fully initialized: [models.Post.comments#1]
20 10 2010 18:58:13,084 DEBUG ~ 1 collections initialized for role: models.Post.comments
20 10 2010 18:58:13,084 DEBUG ~ initializing non-lazy collections
20 10 2010 18:58:13,084 DEBUG ~ done loading collection
20 10 2010 18:58:13,224 DEBUG ~ loading collection: [models.Post.comments#3]
20 10 2010 18:58:13,225 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:13,225 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 18:58:13,225 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#3]
20 10 2010 18:58:13,225 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 18:58:13,225 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:13,225 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
20 10 2010 18:58:13,225 DEBUG ~ collection fully initialized: [models.Post.comments#3]
20 10 2010 18:58:13,226 DEBUG ~ 1 collections initialized for role: models.Post.comments
20 10 2010 18:58:13,226 DEBUG ~ initializing non-lazy collections
20 10 2010 18:58:13,226 DEBUG ~ done loading collection
20 10 2010 18:58:13,231 DEBUG ~ loading collection: [models.Post.comments#2]
20 10 2010 18:58:13,232 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 18:58:13,232 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 18:58:13,232 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#2]
20 10 2010 18:58:13,232 DEBUG ~ result row: EntityKey[models.Comment#3]
20 10 2010 18:58:13,232 DEBUG ~ found row of collection: [models.Post.comments#2]
20 10 2010 18:58:13,233 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 18:58:13,233 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 18:58:13,233 DEBUG ~ resolving associations for [models.Comment#3]
20 10 2010 18:58:13,233 DEBUG ~ done materializing entity [models.Comment#3]
20 10 2010 18:58:13,233 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
20 10 2010 18:58:13,233 DEBUG ~ collection fully initialized: [models.Post.comments#2]
20 10 2010 18:58:13,233 DEBUG ~ 1 collections initialized for role: models.Post.comments
20 10 2010 18:58:13,233 DEBUG ~ initializing non-lazy collections
20 10 2010 18:58:13,233 DEBUG ~ done loading collection
20 10 2010 18:58:13,314 DEBUG ~ commit
20 10 2010 18:58:13,315 DEBUG ~ processing flush-time cascades
20 10 2010 18:58:13,315 DEBUG ~ dirty checking collections
20 10 2010 18:58:13,315 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 18:58:13,315 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
20 10 2010 18:58:13,316 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
20 10 2010 18:58:13,316 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
20 10 2010 18:58:13,316 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
20 10 2010 18:58:13,316 DEBUG ~ listing entities:
20 10 2010 18:58:13,316 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
20 10 2010 18:58:13,316 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 18:58:13,316 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 18:58:13,317 DEBUG ~ models.Comment{content=This post is useless ?
, id=3, author=Tom, post=models.Post#2, postedAt=2009-04-05 09:00:00}
20 10 2010 18:58:13,317 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2], postedAt=2009-06-14 09:00:00}
20 10 2010 18:58:13,317 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 18:58:13,317 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[models.Comment#3], postedAt=2009-03-25 09:00:00}
20 10 2010 18:58:13,317 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 18:58:13,317 DEBUG ~ re-enabling autocommit
20 10 2010 18:58:13,317 DEBUG ~ committed JDBC Connection
20 10 2010 18:58:13,317 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 18:58:13,317 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:00:35,265 DEBUG ~ opened session at timestamp: 12875688352
20 10 2010 19:00:35,265 DEBUG ~ begin
20 10 2010 19:00:35,265 DEBUG ~ opening JDBC connection
20 10 2010 19:00:35,266 DEBUG ~ current autocommit status: true
20 10 2010 19:00:35,266 DEBUG ~ disabling autocommit
20 10 2010 19:00:35,268 DEBUG ~ loading entity: [models.Post#1]
20 10 2010 19:00:35,268 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:00:35,268 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:00:35,269 DEBUG ~ result row: EntityKey[models.User#1], EntityKey[models.Post#1]
20 10 2010 19:00:35,269 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:00:35,269 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:00:35,269 DEBUG ~ resolving associations for [models.User#1]
20 10 2010 19:00:35,269 DEBUG ~ done materializing entity [models.User#1]
20 10 2010 19:00:35,269 DEBUG ~ resolving associations for [models.Post#1]
20 10 2010 19:00:35,269 DEBUG ~ done materializing entity [models.Post#1]
20 10 2010 19:00:35,269 DEBUG ~ initializing non-lazy collections
20 10 2010 19:00:35,269 DEBUG ~ done entity load
20 10 2010 19:00:35,354 DEBUG ~ parse() - HQL: from models.Post where postedAt > ? order by postedAt asc
20 10 2010 19:00:35,357 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    +-[WHERE] Node: 'where'
    |  \-[GT] Node: '>'
    |     +-[IDENT] Node: 'postedAt'
    |     \-[PARAM] Node: '?'
    \-[ORDER] Node: 'order'
       +-[IDENT] Node: 'postedAt'
       \-[ASCENDING] Node: 'asc'

20 10 2010 19:00:35,357 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:00:35,357 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 19:00:35,358 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
20 10 2010 19:00:35,358 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:00:35,358 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@5cf99513
20 10 2010 19:00:35,358 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
20 10 2010 19:00:35,358 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:00:35,358 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@5cf99513
20 10 2010 19:00:35,359 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
20 10 2010 19:00:35,359 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 19:00:35,359 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( > ( post0_.postedAt {synthetic-alias} postedAt ) ? ) ) ( order ( post0_.postedAt {synthetic-alias} postedAt ) asc ) )
20 10 2010 19:00:35,359 DEBUG ~ Derived SELECT clause created.
20 10 2010 19:00:35,359 DEBUG ~ Using FROM fragment [Post post0_]
20 10 2010 19:00:35,359 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 19:00:35,360 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id2_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_2_, post0_.content as content2_, post0_.postedAt as postedAt2_, post0_.title as title2_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    +-[WHERE] SqlNode: 'where'
    |  \-[GT] BinaryLogicOperatorNode: '>'
    |     +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
    |     |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
    |     \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.TimestampType@5cf99513}
    \-[ORDER] OrderByClause: 'order'
       +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
       |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
       |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
       \-[ASCENDING] SqlNode: 'asc'

20 10 2010 19:00:35,360 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:00:35,361 DEBUG ~ HQL: from models.Post where postedAt > ? order by postedAt asc
20 10 2010 19:00:35,361 DEBUG ~ SQL: select post0_.id as id2_, post0_.author_id as author5_2_, post0_.content as content2_, post0_.postedAt as postedAt2_, post0_.title as title2_ from Post post0_ where post0_.postedAt>? order by post0_.postedAt asc
20 10 2010 19:00:35,361 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:00:35,361 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:00:35,362 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:00:35,362 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:00:35,362 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:00:35,362 DEBUG ~ initializing non-lazy collections
20 10 2010 19:00:35,365 DEBUG ~ parse() - HQL: from models.Post where postedAt < ? order by postedAt desc
20 10 2010 19:00:35,367 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    +-[WHERE] Node: 'where'
    |  \-[LT] Node: '<'
    |     +-[IDENT] Node: 'postedAt'
    |     \-[PARAM] Node: '?'
    \-[ORDER] Node: 'order'
       +-[IDENT] Node: 'postedAt'
       \-[DESCENDING] Node: 'desc'

20 10 2010 19:00:35,367 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:00:35,368 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 19:00:35,368 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
20 10 2010 19:00:35,368 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:00:35,368 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@5cf99513
20 10 2010 19:00:35,368 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
20 10 2010 19:00:35,368 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:00:35,368 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@5cf99513
20 10 2010 19:00:35,368 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
20 10 2010 19:00:35,369 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 19:00:35,369 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( < ( post0_.postedAt {synthetic-alias} postedAt ) ? ) ) ( order ( post0_.postedAt {synthetic-alias} postedAt ) desc ) )
20 10 2010 19:00:35,369 DEBUG ~ Derived SELECT clause created.
20 10 2010 19:00:35,369 DEBUG ~ Using FROM fragment [Post post0_]
20 10 2010 19:00:35,369 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 19:00:35,370 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id2_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_2_, post0_.content as content2_, post0_.postedAt as postedAt2_, post0_.title as title2_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    +-[WHERE] SqlNode: 'where'
    |  \-[LT] BinaryLogicOperatorNode: '<'
    |     +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
    |     |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
    |     \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.TimestampType@5cf99513}
    \-[ORDER] OrderByClause: 'order'
       +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
       |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
       |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
       \-[DESCENDING] SqlNode: 'desc'

20 10 2010 19:00:35,370 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:00:35,371 DEBUG ~ HQL: from models.Post where postedAt < ? order by postedAt desc
20 10 2010 19:00:35,371 DEBUG ~ SQL: select post0_.id as id2_, post0_.author_id as author5_2_, post0_.content as content2_, post0_.postedAt as postedAt2_, post0_.title as title2_ from Post post0_ where post0_.postedAt<? order by post0_.postedAt desc
20 10 2010 19:00:35,371 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:00:35,371 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:00:35,372 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:00:35,372 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:00:35,372 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:00:35,372 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:00:35,372 DEBUG ~ resolving associations for [models.Post#3]
20 10 2010 19:00:35,372 DEBUG ~ loading entity: [models.User#2]
20 10 2010 19:00:35,372 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:00:35,372 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:00:35,373 DEBUG ~ result row: EntityKey[models.User#2]
20 10 2010 19:00:35,373 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:00:35,373 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:00:35,373 DEBUG ~ resolving associations for [models.User#2]
20 10 2010 19:00:35,373 DEBUG ~ done materializing entity [models.User#2]
20 10 2010 19:00:35,373 DEBUG ~ done entity load
20 10 2010 19:00:35,373 DEBUG ~ done materializing entity [models.Post#3]
20 10 2010 19:00:35,373 DEBUG ~ initializing non-lazy collections
20 10 2010 19:00:35,374 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:00:35,374 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:00:35,374 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:00:35,374 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:00:35,374 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:00:35,374 DEBUG ~ initializing non-lazy collections
20 10 2010 19:00:35,375 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:00:35,375 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:00:35,375 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:00:35,375 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:00:35,375 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:00:35,376 DEBUG ~ initializing non-lazy collections
20 10 2010 19:00:35,383 DEBUG ~ loading collection: [models.Post.comments#1]
20 10 2010 19:00:35,383 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:00:35,384 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:00:35,384 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
20 10 2010 19:00:35,384 DEBUG ~ result row: EntityKey[models.Comment#1]
20 10 2010 19:00:35,384 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:00:35,387 DEBUG ~ result row: EntityKey[models.Comment#2]
20 10 2010 19:00:35,387 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:00:35,388 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:00:35,388 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:00:35,388 DEBUG ~ resolving associations for [models.Comment#1]
20 10 2010 19:00:35,388 DEBUG ~ done materializing entity [models.Comment#1]
20 10 2010 19:00:35,388 DEBUG ~ resolving associations for [models.Comment#2]
20 10 2010 19:00:35,388 DEBUG ~ done materializing entity [models.Comment#2]
20 10 2010 19:00:35,388 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
20 10 2010 19:00:35,388 DEBUG ~ collection fully initialized: [models.Post.comments#1]
20 10 2010 19:00:35,388 DEBUG ~ 1 collections initialized for role: models.Post.comments
20 10 2010 19:00:35,388 DEBUG ~ initializing non-lazy collections
20 10 2010 19:00:35,388 DEBUG ~ done loading collection
20 10 2010 19:00:35,414 DEBUG ~ commit
20 10 2010 19:00:35,414 DEBUG ~ processing flush-time cascades
20 10 2010 19:00:35,415 DEBUG ~ dirty checking collections
20 10 2010 19:00:35,415 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:00:35,415 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (uninitialized)
20 10 2010 19:00:35,415 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
20 10 2010 19:00:35,415 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
20 10 2010 19:00:35,415 DEBUG ~ listing entities:
20 10 2010 19:00:35,415 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:00:35,415 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:00:35,416 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2], postedAt=2009-06-14 09:00:00}
20 10 2010 19:00:35,416 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:00:35,416 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 19:00:35,416 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=<uninitialized>, postedAt=2009-06-06 09:00:00}
20 10 2010 19:00:35,416 DEBUG ~ re-enabling autocommit
20 10 2010 19:00:35,416 DEBUG ~ committed JDBC Connection
20 10 2010 19:00:35,416 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:00:35,416 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:00:35,558 DEBUG ~ opened session at timestamp: 12875688355
20 10 2010 19:00:35,558 DEBUG ~ begin
20 10 2010 19:00:35,558 DEBUG ~ opening JDBC connection
20 10 2010 19:00:35,559 DEBUG ~ current autocommit status: true
20 10 2010 19:00:35,559 DEBUG ~ disabling autocommit
20 10 2010 19:00:39,831 DEBUG ~ commit
20 10 2010 19:00:39,832 DEBUG ~ re-enabling autocommit
20 10 2010 19:00:39,832 DEBUG ~ committed JDBC Connection
20 10 2010 19:00:39,832 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:00:39,832 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:00:45,379 DEBUG ~ opened session at timestamp: 12875688453
20 10 2010 19:00:45,379 DEBUG ~ begin
20 10 2010 19:00:45,379 DEBUG ~ opening JDBC connection
20 10 2010 19:00:45,380 DEBUG ~ current autocommit status: true
20 10 2010 19:00:45,380 DEBUG ~ disabling autocommit
20 10 2010 19:00:45,836 DEBUG ~ loading entity: [models.Post#1]
20 10 2010 19:00:45,837 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:00:45,837 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:00:45,837 DEBUG ~ result row: EntityKey[models.User#1], EntityKey[models.Post#1]
20 10 2010 19:00:45,837 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:00:45,837 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:00:45,837 DEBUG ~ resolving associations for [models.User#1]
20 10 2010 19:00:45,838 DEBUG ~ done materializing entity [models.User#1]
20 10 2010 19:00:45,838 DEBUG ~ resolving associations for [models.Post#1]
20 10 2010 19:00:45,838 DEBUG ~ done materializing entity [models.Post#1]
20 10 2010 19:00:45,838 DEBUG ~ initializing non-lazy collections
20 10 2010 19:00:45,838 DEBUG ~ done entity load
20 10 2010 19:00:45,839 DEBUG ~ playCache: playMemoryStore hit for 5bc4bc17-5735-4f4f-87e5-818c7b8f0e09
20 10 2010 19:00:45,842 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:00:45,843 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:00:45,843 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:00:45,843 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:00:45,843 DEBUG ~ initializing non-lazy collections
20 10 2010 19:00:45,843 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:00:45,844 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:00:45,844 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:00:45,844 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:00:45,844 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:00:45,844 DEBUG ~ resolving associations for [models.Post#3]
20 10 2010 19:00:45,844 DEBUG ~ loading entity: [models.User#2]
20 10 2010 19:00:45,844 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:00:45,844 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:00:45,844 DEBUG ~ result row: EntityKey[models.User#2]
20 10 2010 19:00:45,844 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:00:45,844 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:00:45,844 DEBUG ~ resolving associations for [models.User#2]
20 10 2010 19:00:45,845 DEBUG ~ done materializing entity [models.User#2]
20 10 2010 19:00:45,845 DEBUG ~ done entity load
20 10 2010 19:00:45,845 DEBUG ~ done materializing entity [models.Post#3]
20 10 2010 19:00:45,845 DEBUG ~ initializing non-lazy collections
20 10 2010 19:00:45,845 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:00:45,846 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:00:45,846 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:00:45,846 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:00:45,846 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:00:45,846 DEBUG ~ initializing non-lazy collections
20 10 2010 19:00:45,846 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:00:45,847 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:00:45,847 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:00:45,847 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:00:45,847 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:00:45,847 DEBUG ~ initializing non-lazy collections
20 10 2010 19:00:45,849 DEBUG ~ loading collection: [models.Post.comments#1]
20 10 2010 19:00:45,849 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:00:45,850 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:00:45,850 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
20 10 2010 19:00:45,850 DEBUG ~ result row: EntityKey[models.Comment#1]
20 10 2010 19:00:45,850 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:00:45,850 DEBUG ~ result row: EntityKey[models.Comment#2]
20 10 2010 19:00:45,850 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:00:45,850 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:00:45,850 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:00:45,850 DEBUG ~ resolving associations for [models.Comment#1]
20 10 2010 19:00:45,851 DEBUG ~ done materializing entity [models.Comment#1]
20 10 2010 19:00:45,851 DEBUG ~ resolving associations for [models.Comment#2]
20 10 2010 19:00:45,851 DEBUG ~ done materializing entity [models.Comment#2]
20 10 2010 19:00:45,851 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
20 10 2010 19:00:45,851 DEBUG ~ collection fully initialized: [models.Post.comments#1]
20 10 2010 19:00:45,851 DEBUG ~ 1 collections initialized for role: models.Post.comments
20 10 2010 19:00:45,851 DEBUG ~ initializing non-lazy collections
20 10 2010 19:00:45,851 DEBUG ~ done loading collection
20 10 2010 19:00:45,866 DEBUG ~ commit
20 10 2010 19:00:45,866 DEBUG ~ processing flush-time cascades
20 10 2010 19:00:45,867 DEBUG ~ dirty checking collections
20 10 2010 19:00:45,867 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:00:45,867 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (uninitialized)
20 10 2010 19:00:45,868 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
20 10 2010 19:00:45,868 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
20 10 2010 19:00:45,868 DEBUG ~ listing entities:
20 10 2010 19:00:45,868 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:00:45,868 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:00:45,869 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2], postedAt=2009-06-14 09:00:00}
20 10 2010 19:00:45,869 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:00:45,869 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 19:00:45,869 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=<uninitialized>, postedAt=2009-06-06 09:00:00}
20 10 2010 19:00:45,869 DEBUG ~ re-enabling autocommit
20 10 2010 19:00:45,869 DEBUG ~ committed JDBC Connection
20 10 2010 19:00:45,869 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:00:45,869 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:00:45,952 DEBUG ~ opened session at timestamp: 12875688459
20 10 2010 19:00:45,952 DEBUG ~ begin
20 10 2010 19:00:45,952 DEBUG ~ opening JDBC connection
20 10 2010 19:00:45,952 DEBUG ~ current autocommit status: true
20 10 2010 19:00:45,952 DEBUG ~ disabling autocommit
20 10 2010 19:00:46,034 DEBUG ~ commit
20 10 2010 19:00:46,034 DEBUG ~ re-enabling autocommit
20 10 2010 19:00:46,034 DEBUG ~ committed JDBC Connection
20 10 2010 19:00:46,034 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:00:46,034 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:20:28,995 INFO  ~ closing
20 10 2010 19:20:28,995 INFO  ~ Running hbm2ddl schema export
20 10 2010 19:20:28,996 DEBUG ~ import file not found: /import.sql
20 10 2010 19:20:28,996 INFO  ~ exporting generated schema to database
20 10 2010 19:20:28,996 DEBUG ~ alter table Comment drop constraint FK9BDE863F388562DE
20 10 2010 19:20:28,997 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
20 10 2010 19:20:28,997 DEBUG ~ drop table Comment if exists
20 10 2010 19:20:28,997 DEBUG ~ drop table Post if exists
20 10 2010 19:20:28,997 DEBUG ~ drop table User if exists
20 10 2010 19:20:28,997 INFO  ~ schema export complete
20 10 2010 19:20:29,135 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
20 10 2010 19:20:29,135 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
20 10 2010 19:20:29,135 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
20 10 2010 19:20:29,135 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
20 10 2010 19:20:29,136 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
20 10 2010 19:20:29,136 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
20 10 2010 19:20:29,136 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
20 10 2010 19:20:29,136 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
20 10 2010 19:20:29,136 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
20 10 2010 19:20:29,136 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
20 10 2010 19:20:29,136 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
20 10 2010 19:20:29,136 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
20 10 2010 19:20:29,136 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
20 10 2010 19:20:29,136 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
20 10 2010 19:20:29,137 DEBUG ~ Execute first pass mapping processing
20 10 2010 19:20:29,137 DEBUG ~ Process hbm files
20 10 2010 19:20:29,137 DEBUG ~ Process annotated classes
20 10 2010 19:20:29,137 INFO  ~ Binding entity from annotated class: models.Comment
20 10 2010 19:20:29,137 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
20 10 2010 19:20:29,137 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
20 10 2010 19:20:29,138 DEBUG ~ Import with entity name Comment
20 10 2010 19:20:29,138 INFO  ~ Bind entity models.Comment on table Comment
20 10 2010 19:20:29,150 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=id, insertable=true, updatable=true, unique=false}
20 10 2010 19:20:29,150 DEBUG ~ binding property id with lazy=false
20 10 2010 19:20:29,151 DEBUG ~ building SimpleValue for id
20 10 2010 19:20:29,151 DEBUG ~ Building property id
20 10 2010 19:20:29,151 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=author, insertable=true, updatable=true, unique=false}
20 10 2010 19:20:29,151 DEBUG ~ binding property author with lazy=false
20 10 2010 19:20:29,151 DEBUG ~ building SimpleValue for author
20 10 2010 19:20:29,151 DEBUG ~ Building property author
20 10 2010 19:20:29,151 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=content, insertable=true, updatable=true, unique=false}
20 10 2010 19:20:29,151 DEBUG ~ binding property content with lazy=false
20 10 2010 19:20:29,151 DEBUG ~ building SimpleValue for content
20 10 2010 19:20:29,151 DEBUG ~ Building property content
20 10 2010 19:20:29,151 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
20 10 2010 19:20:29,151 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=post, insertable=true, updatable=true, unique=false}
20 10 2010 19:20:29,152 DEBUG ~ Building property post
20 10 2010 19:20:29,152 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
20 10 2010 19:20:29,152 DEBUG ~ binding property postedAt with lazy=false
20 10 2010 19:20:29,152 DEBUG ~ building SimpleValue for postedAt
20 10 2010 19:20:29,152 DEBUG ~ Building property postedAt
20 10 2010 19:20:29,152 INFO  ~ Binding entity from annotated class: models.User
20 10 2010 19:20:29,152 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
20 10 2010 19:20:29,152 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
20 10 2010 19:20:29,152 DEBUG ~ Import with entity name User
20 10 2010 19:20:29,152 INFO  ~ Bind entity models.User on table User
20 10 2010 19:20:29,154 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
20 10 2010 19:20:29,154 DEBUG ~ binding property id with lazy=false
20 10 2010 19:20:29,154 DEBUG ~ building SimpleValue for id
20 10 2010 19:20:29,154 DEBUG ~ Building property id
20 10 2010 19:20:29,154 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
20 10 2010 19:20:29,154 DEBUG ~ binding property email with lazy=false
20 10 2010 19:20:29,155 DEBUG ~ building SimpleValue for email
20 10 2010 19:20:29,155 DEBUG ~ Building property email
20 10 2010 19:20:29,155 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
20 10 2010 19:20:29,155 DEBUG ~ binding property fullname with lazy=false
20 10 2010 19:20:29,155 DEBUG ~ building SimpleValue for fullname
20 10 2010 19:20:29,155 DEBUG ~ Building property fullname
20 10 2010 19:20:29,155 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
20 10 2010 19:20:29,155 DEBUG ~ binding property isAdmin with lazy=false
20 10 2010 19:20:29,155 DEBUG ~ building SimpleValue for isAdmin
20 10 2010 19:20:29,155 DEBUG ~ Building property isAdmin
20 10 2010 19:20:29,155 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
20 10 2010 19:20:29,155 DEBUG ~ binding property password with lazy=false
20 10 2010 19:20:29,155 DEBUG ~ building SimpleValue for password
20 10 2010 19:20:29,155 DEBUG ~ Building property password
20 10 2010 19:20:29,156 INFO  ~ Binding entity from annotated class: models.Post
20 10 2010 19:20:29,156 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
20 10 2010 19:20:29,156 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
20 10 2010 19:20:29,156 DEBUG ~ Import with entity name Post
20 10 2010 19:20:29,156 INFO  ~ Bind entity models.Post on table Post
20 10 2010 19:20:29,158 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=id, insertable=true, updatable=true, unique=false}
20 10 2010 19:20:29,159 DEBUG ~ binding property id with lazy=false
20 10 2010 19:20:29,159 DEBUG ~ building SimpleValue for id
20 10 2010 19:20:29,159 DEBUG ~ Building property id
20 10 2010 19:20:29,159 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
20 10 2010 19:20:29,159 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=author, insertable=true, updatable=true, unique=false}
20 10 2010 19:20:29,159 DEBUG ~ Building property author
20 10 2010 19:20:29,159 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
20 10 2010 19:20:29,159 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments, insertable=true, updatable=true, unique=false}
20 10 2010 19:20:29,159 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=null, insertable=true, updatable=true, unique=false}
20 10 2010 19:20:29,159 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=element, insertable=true, updatable=true, unique=false}
20 10 2010 19:20:29,159 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments_KEY, insertable=true, updatable=true, unique=false}
20 10 2010 19:20:29,160 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='comments_KEY', referencedColumn='null', mappedBy='null'}
20 10 2010 19:20:29,160 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
20 10 2010 19:20:29,160 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
20 10 2010 19:20:29,160 DEBUG ~ Collection role: models.Post.comments
20 10 2010 19:20:29,160 DEBUG ~ Building property comments
20 10 2010 19:20:29,160 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=content, insertable=true, updatable=true, unique=false}
20 10 2010 19:20:29,160 DEBUG ~ binding property content with lazy=false
20 10 2010 19:20:29,160 DEBUG ~ building SimpleValue for content
20 10 2010 19:20:29,160 DEBUG ~ Building property content
20 10 2010 19:20:29,160 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
20 10 2010 19:20:29,160 DEBUG ~ binding property postedAt with lazy=false
20 10 2010 19:20:29,160 DEBUG ~ building SimpleValue for postedAt
20 10 2010 19:20:29,160 DEBUG ~ Building property postedAt
20 10 2010 19:20:29,160 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=title, insertable=true, updatable=true, unique=false}
20 10 2010 19:20:29,161 DEBUG ~ binding property title with lazy=false
20 10 2010 19:20:29,161 DEBUG ~ building SimpleValue for title
20 10 2010 19:20:29,161 DEBUG ~ Building property title
20 10 2010 19:20:29,161 DEBUG ~ setting SimpleValue typeName for id
20 10 2010 19:20:29,161 DEBUG ~ setting SimpleValue typeName for author
20 10 2010 19:20:29,161 DEBUG ~ setting SimpleValue typeName for content
20 10 2010 19:20:29,161 DEBUG ~ setting SimpleValue typeName for postedAt
20 10 2010 19:20:29,161 DEBUG ~ setting SimpleValue typeName for id
20 10 2010 19:20:29,161 DEBUG ~ setting SimpleValue typeName for email
20 10 2010 19:20:29,161 DEBUG ~ setting SimpleValue typeName for fullname
20 10 2010 19:20:29,161 DEBUG ~ setting SimpleValue typeName for isAdmin
20 10 2010 19:20:29,161 DEBUG ~ setting SimpleValue typeName for password
20 10 2010 19:20:29,161 DEBUG ~ setting SimpleValue typeName for id
20 10 2010 19:20:29,161 DEBUG ~ setting SimpleValue typeName for content
20 10 2010 19:20:29,161 DEBUG ~ setting SimpleValue typeName for postedAt
20 10 2010 19:20:29,161 DEBUG ~ setting SimpleValue typeName for title
20 10 2010 19:20:29,161 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 19:20:29,162 DEBUG ~ processing extends queue
20 10 2010 19:20:29,162 DEBUG ~ processing collection mappings
20 10 2010 19:20:29,162 DEBUG ~ Second pass for collection: models.Post.comments
20 10 2010 19:20:29,162 DEBUG ~ Binding a OneToMany: models.Post.comments through a foreign key
20 10 2010 19:20:29,162 INFO  ~ Mapping collection: models.Post.comments -> Comment
20 10 2010 19:20:29,162 DEBUG ~ Retrieving property models.Comment.post
20 10 2010 19:20:29,162 DEBUG ~ Mapped collection key: post_id, one-to-many: models.Comment
20 10 2010 19:20:29,162 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 19:20:29,162 DEBUG ~ processing association property references
20 10 2010 19:20:29,162 DEBUG ~ processing foreign key constraints
20 10 2010 19:20:29,162 DEBUG ~ resolving reference to class: models.Post
20 10 2010 19:20:29,162 DEBUG ~ resolving reference to class: models.User
20 10 2010 19:20:29,170 INFO  ~ Hibernate Validator not found: ignoring
20 10 2010 19:20:29,188 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
20 10 2010 19:20:29,189 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
20 10 2010 19:20:29,194 DEBUG ~ Search not present in classpath, ignoring event listener registration.
20 10 2010 19:20:29,194 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
20 10 2010 19:20:29,194 DEBUG ~ Preparing to build session factory with filters : {}
20 10 2010 19:20:29,194 DEBUG ~ Execute first pass mapping processing
20 10 2010 19:20:29,194 DEBUG ~ Process hbm files
20 10 2010 19:20:29,194 DEBUG ~ Process annotated classes
20 10 2010 19:20:29,194 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 19:20:29,194 DEBUG ~ processing extends queue
20 10 2010 19:20:29,194 DEBUG ~ processing collection mappings
20 10 2010 19:20:29,194 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 19:20:29,194 DEBUG ~ processing association property references
20 10 2010 19:20:29,194 DEBUG ~ processing foreign key constraints
20 10 2010 19:20:29,194 DEBUG ~ resolving reference to class: models.Post
20 10 2010 19:20:29,194 DEBUG ~ resolving reference to class: models.User
20 10 2010 19:20:29,196 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
20 10 2010 19:20:29,197 INFO  ~ Using provided datasource
20 10 2010 19:20:29,197 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
20 10 2010 19:20:29,197 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
20 10 2010 19:20:29,197 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
20 10 2010 19:20:29,197 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
20 10 2010 19:20:29,197 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
20 10 2010 19:20:29,198 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
20 10 2010 19:20:29,198 INFO  ~ Automatic flush during beforeCompletion(): disabled
20 10 2010 19:20:29,198 INFO  ~ Automatic session close at end of transaction: disabled
20 10 2010 19:20:29,198 INFO  ~ JDBC batch size: 15
20 10 2010 19:20:29,198 INFO  ~ JDBC batch updates for versioned data: disabled
20 10 2010 19:20:29,198 INFO  ~ Scrollable result sets: enabled
20 10 2010 19:20:29,198 DEBUG ~ Wrap result sets: disabled
20 10 2010 19:20:29,198 INFO  ~ JDBC3 getGeneratedKeys(): disabled
20 10 2010 19:20:29,198 INFO  ~ Connection release mode: auto
20 10 2010 19:20:29,198 INFO  ~ Default batch fetch size: 1
20 10 2010 19:20:29,198 INFO  ~ Generate SQL with comments: disabled
20 10 2010 19:20:29,198 INFO  ~ Order SQL updates by primary key: disabled
20 10 2010 19:20:29,198 INFO  ~ Order SQL inserts for batching: disabled
20 10 2010 19:20:29,198 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
20 10 2010 19:20:29,198 INFO  ~ Using ASTQueryTranslatorFactory
20 10 2010 19:20:29,198 INFO  ~ Query language substitutions: {}
20 10 2010 19:20:29,199 INFO  ~ JPA-QL strict compliance: enabled
20 10 2010 19:20:29,199 INFO  ~ Second-level cache: enabled
20 10 2010 19:20:29,199 INFO  ~ Query cache: disabled
20 10 2010 19:20:29,199 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
20 10 2010 19:20:29,199 INFO  ~ Optimize cache for minimal puts: disabled
20 10 2010 19:20:29,199 INFO  ~ Structured second-level cache entries: disabled
20 10 2010 19:20:29,199 INFO  ~ Statistics: disabled
20 10 2010 19:20:29,199 INFO  ~ Deleted entity synthetic identifier rollback: disabled
20 10 2010 19:20:29,199 INFO  ~ Default entity-mode: pojo
20 10 2010 19:20:29,199 INFO  ~ Named query checking : enabled
20 10 2010 19:20:29,199 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
20 10 2010 19:20:29,203 INFO  ~ building session factory
20 10 2010 19:20:29,204 DEBUG ~ Session factory constructed with filter configurations : {}
20 10 2010 19:20:29,204 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
20 10 2010 19:20:29,204 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:20:29,205 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:20:29,205 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:20:29,213 DEBUG ~ Static SQL for entity: models.Comment
20 10 2010 19:20:29,213 DEBUG ~  Version select: select id from Comment where id =?
20 10 2010 19:20:29,213 DEBUG ~  Snapshot select: select comment_.id, comment_.author as author6_, comment_.content as content6_, comment_.post_id as post5_6_, comment_.postedAt as postedAt6_ from Comment comment_ where comment_.id=?
20 10 2010 19:20:29,213 DEBUG ~  Insert 0: insert into Comment (author, content, post_id, postedAt, id) values (?, ?, ?, ?, ?)
20 10 2010 19:20:29,214 DEBUG ~  Update 0: update Comment set author=?, content=?, post_id=?, postedAt=? where id=?
20 10 2010 19:20:29,214 DEBUG ~  Delete 0: delete from Comment where id=?
20 10 2010 19:20:29,214 DEBUG ~  Identity insert: insert into Comment (id, author, content, post_id, postedAt) values (null, ?, ?, ?, ?)
20 10 2010 19:20:29,227 DEBUG ~ Static SQL for entity: models.Post
20 10 2010 19:20:29,227 DEBUG ~  Version select: select id from Post where id =?
20 10 2010 19:20:29,227 DEBUG ~  Snapshot select: select post_.id, post_.author_id as author5_8_, post_.content as content8_, post_.postedAt as postedAt8_, post_.title as title8_ from Post post_ where post_.id=?
20 10 2010 19:20:29,227 DEBUG ~  Insert 0: insert into Post (author_id, content, postedAt, title, id) values (?, ?, ?, ?, ?)
20 10 2010 19:20:29,227 DEBUG ~  Update 0: update Post set author_id=?, content=?, postedAt=?, title=? where id=?
20 10 2010 19:20:29,227 DEBUG ~  Delete 0: delete from Post where id=?
20 10 2010 19:20:29,227 DEBUG ~  Identity insert: insert into Post (id, author_id, content, postedAt, title) values (null, ?, ?, ?, ?)
20 10 2010 19:20:29,236 DEBUG ~ Static SQL for entity: models.User
20 10 2010 19:20:29,236 DEBUG ~  Version select: select id from User where id =?
20 10 2010 19:20:29,236 DEBUG ~  Snapshot select: select user_.id, user_.email as email7_, user_.fullname as fullname7_, user_.isAdmin as isAdmin7_, user_.password as password7_ from User user_ where user_.id=?
20 10 2010 19:20:29,236 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
20 10 2010 19:20:29,236 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
20 10 2010 19:20:29,236 DEBUG ~  Delete 0: delete from User where id=?
20 10 2010 19:20:29,236 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
20 10 2010 19:20:29,236 DEBUG ~ Static SQL for collection: models.Post.comments
20 10 2010 19:20:29,236 DEBUG ~  Row insert: update Comment set post_id=? where id=?
20 10 2010 19:20:29,236 DEBUG ~  Row delete: update Comment set post_id=null where post_id=? and id=?
20 10 2010 19:20:29,236 DEBUG ~  One-shot delete: update Comment set post_id=null where post_id=?
20 10 2010 19:20:29,237 DEBUG ~ Static select for entity models.Comment [NONE]: select comment0_.id as id6_2_, comment0_.author as author6_2_, comment0_.content as content6_2_, comment0_.post_id as post5_6_2_, comment0_.postedAt as postedAt6_2_, post1_.id as id8_0_, post1_.author_id as author5_8_0_, post1_.content as content8_0_, post1_.postedAt as postedAt8_0_, post1_.title as title8_0_, user2_.id as id7_1_, user2_.email as email7_1_, user2_.fullname as fullname7_1_, user2_.isAdmin as isAdmin7_1_, user2_.password as password7_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
20 10 2010 19:20:29,237 DEBUG ~ Static select for entity models.Comment [READ]: select comment0_.id as id6_2_, comment0_.author as author6_2_, comment0_.content as content6_2_, comment0_.post_id as post5_6_2_, comment0_.postedAt as postedAt6_2_, post1_.id as id8_0_, post1_.author_id as author5_8_0_, post1_.content as content8_0_, post1_.postedAt as postedAt8_0_, post1_.title as title8_0_, user2_.id as id7_1_, user2_.email as email7_1_, user2_.fullname as fullname7_1_, user2_.isAdmin as isAdmin7_1_, user2_.password as password7_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
20 10 2010 19:20:29,237 DEBUG ~ Static select for entity models.Comment [UPGRADE]: select comment0_.id as id6_0_, comment0_.author as author6_0_, comment0_.content as content6_0_, comment0_.post_id as post5_6_0_, comment0_.postedAt as postedAt6_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:20:29,237 DEBUG ~ Static select for entity models.Comment [UPGRADE_NOWAIT]: select comment0_.id as id6_0_, comment0_.author as author6_0_, comment0_.content as content6_0_, comment0_.post_id as post5_6_0_, comment0_.postedAt as postedAt6_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:20:29,238 DEBUG ~ Static select for entity models.Comment [FORCE]: select comment0_.id as id6_0_, comment0_.author as author6_0_, comment0_.content as content6_0_, comment0_.post_id as post5_6_0_, comment0_.postedAt as postedAt6_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:20:29,238 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_READ]: select comment0_.id as id6_0_, comment0_.author as author6_0_, comment0_.content as content6_0_, comment0_.post_id as post5_6_0_, comment0_.postedAt as postedAt6_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:20:29,238 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_WRITE]: select comment0_.id as id6_0_, comment0_.author as author6_0_, comment0_.content as content6_0_, comment0_.post_id as post5_6_0_, comment0_.postedAt as postedAt6_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:20:29,238 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_FORCE_INCREMENT]: select comment0_.id as id6_0_, comment0_.author as author6_0_, comment0_.content as content6_0_, comment0_.post_id as post5_6_0_, comment0_.postedAt as postedAt6_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:20:29,238 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC]: select comment0_.id as id6_2_, comment0_.author as author6_2_, comment0_.content as content6_2_, comment0_.post_id as post5_6_2_, comment0_.postedAt as postedAt6_2_, post1_.id as id8_0_, post1_.author_id as author5_8_0_, post1_.content as content8_0_, post1_.postedAt as postedAt8_0_, post1_.title as title8_0_, user2_.id as id7_1_, user2_.email as email7_1_, user2_.fullname as fullname7_1_, user2_.isAdmin as isAdmin7_1_, user2_.password as password7_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
20 10 2010 19:20:29,239 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC_FORCE_INCREMENT]: select comment0_.id as id6_2_, comment0_.author as author6_2_, comment0_.content as content6_2_, comment0_.post_id as post5_6_2_, comment0_.postedAt as postedAt6_2_, post1_.id as id8_0_, post1_.author_id as author5_8_0_, post1_.content as content8_0_, post1_.postedAt as postedAt8_0_, post1_.title as title8_0_, user2_.id as id7_1_, user2_.email as email7_1_, user2_.fullname as fullname7_1_, user2_.isAdmin as isAdmin7_1_, user2_.password as password7_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
20 10 2010 19:20:29,239 DEBUG ~ Static select for action ACTION_MERGE on entity models.Comment: select comment0_.id as id6_0_, comment0_.author as author6_0_, comment0_.content as content6_0_, comment0_.post_id as post5_6_0_, comment0_.postedAt as postedAt6_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:20:29,239 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Comment: select comment0_.id as id6_0_, comment0_.author as author6_0_, comment0_.content as content6_0_, comment0_.post_id as post5_6_0_, comment0_.postedAt as postedAt6_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:20:29,239 DEBUG ~ Static select for entity models.Post [NONE]: select post0_.id as id8_1_, post0_.author_id as author5_8_1_, post0_.content as content8_1_, post0_.postedAt as postedAt8_1_, post0_.title as title8_1_, user1_.id as id7_0_, user1_.email as email7_0_, user1_.fullname as fullname7_0_, user1_.isAdmin as isAdmin7_0_, user1_.password as password7_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
20 10 2010 19:20:29,239 DEBUG ~ Static select for entity models.Post [READ]: select post0_.id as id8_1_, post0_.author_id as author5_8_1_, post0_.content as content8_1_, post0_.postedAt as postedAt8_1_, post0_.title as title8_1_, user1_.id as id7_0_, user1_.email as email7_0_, user1_.fullname as fullname7_0_, user1_.isAdmin as isAdmin7_0_, user1_.password as password7_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
20 10 2010 19:20:29,240 DEBUG ~ Static select for entity models.Post [UPGRADE]: select post0_.id as id8_0_, post0_.author_id as author5_8_0_, post0_.content as content8_0_, post0_.postedAt as postedAt8_0_, post0_.title as title8_0_ from Post post0_ where post0_.id=?
20 10 2010 19:20:29,240 DEBUG ~ Static select for entity models.Post [UPGRADE_NOWAIT]: select post0_.id as id8_0_, post0_.author_id as author5_8_0_, post0_.content as content8_0_, post0_.postedAt as postedAt8_0_, post0_.title as title8_0_ from Post post0_ where post0_.id=?
20 10 2010 19:20:29,240 DEBUG ~ Static select for entity models.Post [FORCE]: select post0_.id as id8_0_, post0_.author_id as author5_8_0_, post0_.content as content8_0_, post0_.postedAt as postedAt8_0_, post0_.title as title8_0_ from Post post0_ where post0_.id=?
20 10 2010 19:20:29,240 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_READ]: select post0_.id as id8_0_, post0_.author_id as author5_8_0_, post0_.content as content8_0_, post0_.postedAt as postedAt8_0_, post0_.title as title8_0_ from Post post0_ where post0_.id=?
20 10 2010 19:20:29,240 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_WRITE]: select post0_.id as id8_0_, post0_.author_id as author5_8_0_, post0_.content as content8_0_, post0_.postedAt as postedAt8_0_, post0_.title as title8_0_ from Post post0_ where post0_.id=?
20 10 2010 19:20:29,240 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_FORCE_INCREMENT]: select post0_.id as id8_0_, post0_.author_id as author5_8_0_, post0_.content as content8_0_, post0_.postedAt as postedAt8_0_, post0_.title as title8_0_ from Post post0_ where post0_.id=?
20 10 2010 19:20:29,241 DEBUG ~ Static select for entity models.Post [OPTIMISTIC]: select post0_.id as id8_1_, post0_.author_id as author5_8_1_, post0_.content as content8_1_, post0_.postedAt as postedAt8_1_, post0_.title as title8_1_, user1_.id as id7_0_, user1_.email as email7_0_, user1_.fullname as fullname7_0_, user1_.isAdmin as isAdmin7_0_, user1_.password as password7_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
20 10 2010 19:20:29,241 DEBUG ~ Static select for entity models.Post [OPTIMISTIC_FORCE_INCREMENT]: select post0_.id as id8_1_, post0_.author_id as author5_8_1_, post0_.content as content8_1_, post0_.postedAt as postedAt8_1_, post0_.title as title8_1_, user1_.id as id7_0_, user1_.email as email7_0_, user1_.fullname as fullname7_0_, user1_.isAdmin as isAdmin7_0_, user1_.password as password7_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
20 10 2010 19:20:29,241 DEBUG ~ Static select for action ACTION_MERGE on entity models.Post: select post0_.id as id8_1_, post0_.author_id as author5_8_1_, post0_.content as content8_1_, post0_.postedAt as postedAt8_1_, post0_.title as title8_1_, comments1_.post_id as post5_8_3_, comments1_.id as id3_, comments1_.id as id6_0_, comments1_.author as author6_0_, comments1_.content as content6_0_, comments1_.post_id as post5_6_0_, comments1_.postedAt as postedAt6_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post_id where post0_.id=?
20 10 2010 19:20:29,242 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Post: select post0_.id as id8_1_, post0_.author_id as author5_8_1_, post0_.content as content8_1_, post0_.postedAt as postedAt8_1_, post0_.title as title8_1_, comments1_.post_id as post5_8_3_, comments1_.id as id3_, comments1_.id as id6_0_, comments1_.author as author6_0_, comments1_.content as content6_0_, comments1_.post_id as post5_6_0_, comments1_.postedAt as postedAt6_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post_id where post0_.id=?
20 10 2010 19:20:29,242 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
20 10 2010 19:20:29,242 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
20 10 2010 19:20:29,242 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
20 10 2010 19:20:29,242 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
20 10 2010 19:20:29,242 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
20 10 2010 19:20:29,242 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
20 10 2010 19:20:29,243 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
20 10 2010 19:20:29,243 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
20 10 2010 19:20:29,243 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
20 10 2010 19:20:29,243 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
20 10 2010 19:20:29,243 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
20 10 2010 19:20:29,243 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id7_0_, user0_.email as email7_0_, user0_.fullname as fullname7_0_, user0_.isAdmin as isAdmin7_0_, user0_.password as password7_0_ from User user0_ where user0_.id=?
20 10 2010 19:20:29,243 DEBUG ~ Static select for one-to-many models.Post.comments: select comments0_.post_id as post5_8_1_, comments0_.id as id1_, comments0_.id as id6_0_, comments0_.author as author6_0_, comments0_.content as content6_0_, comments0_.post_id as post5_6_0_, comments0_.postedAt as postedAt6_0_ from Comment comments0_ where comments0_.post_id=?
20 10 2010 19:20:29,244 DEBUG ~ registered: 2c9082cd2bc91307012bc9277abc0001 (unnamed)
20 10 2010 19:20:29,244 INFO  ~ Not binding factory to JNDI, no JNDI name configured
20 10 2010 19:20:29,244 DEBUG ~ instantiated session factory
20 10 2010 19:20:29,244 DEBUG ~ Execute first pass mapping processing
20 10 2010 19:20:29,244 DEBUG ~ Process hbm files
20 10 2010 19:20:29,244 DEBUG ~ Process annotated classes
20 10 2010 19:20:29,244 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 19:20:29,244 DEBUG ~ processing extends queue
20 10 2010 19:20:29,244 DEBUG ~ processing collection mappings
20 10 2010 19:20:29,244 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 19:20:29,244 DEBUG ~ processing association property references
20 10 2010 19:20:29,244 DEBUG ~ processing foreign key constraints
20 10 2010 19:20:29,244 DEBUG ~ resolving reference to class: models.Post
20 10 2010 19:20:29,244 DEBUG ~ resolving reference to class: models.User
20 10 2010 19:20:29,246 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:20:29,250 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:20:29,250 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:20:29,250 DEBUG ~ Execute first pass mapping processing
20 10 2010 19:20:29,250 DEBUG ~ Process hbm files
20 10 2010 19:20:29,250 DEBUG ~ Process annotated classes
20 10 2010 19:20:29,251 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 19:20:29,251 DEBUG ~ processing extends queue
20 10 2010 19:20:29,251 DEBUG ~ processing collection mappings
20 10 2010 19:20:29,251 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 19:20:29,251 DEBUG ~ processing association property references
20 10 2010 19:20:29,251 DEBUG ~ processing foreign key constraints
20 10 2010 19:20:29,251 DEBUG ~ resolving reference to class: models.Post
20 10 2010 19:20:29,251 DEBUG ~ resolving reference to class: models.User
20 10 2010 19:20:29,252 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:20:29,253 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:20:29,253 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:20:29,253 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:20:29,253 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:20:29,253 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:20:29,253 INFO  ~ Running hbm2ddl schema export
20 10 2010 19:20:29,254 DEBUG ~ import file not found: /import.sql
20 10 2010 19:20:29,254 INFO  ~ exporting generated schema to database
20 10 2010 19:20:29,254 DEBUG ~ alter table Comment drop constraint FK9BDE863F388562DE
20 10 2010 19:20:29,254 DEBUG ~ Unsuccessful: alter table Comment drop constraint FK9BDE863F388562DE
20 10 2010 19:20:29,254 DEBUG ~ Table not found: COMMENT in statement [alter table Comment]
20 10 2010 19:20:29,254 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
20 10 2010 19:20:29,254 DEBUG ~ Unsuccessful: alter table Post drop constraint FK260CC0A7CD013E
20 10 2010 19:20:29,254 DEBUG ~ Table not found: POST in statement [alter table Post]
20 10 2010 19:20:29,254 DEBUG ~ drop table Comment if exists
20 10 2010 19:20:29,255 DEBUG ~ drop table Post if exists
20 10 2010 19:20:29,255 DEBUG ~ drop table User if exists
20 10 2010 19:20:29,255 DEBUG ~ create table Comment (id bigint generated by default as identity (start with 1), author varchar(255), content longvarchar, postedAt timestamp, post_id bigint, primary key (id))
20 10 2010 19:20:29,255 DEBUG ~ create table Post (id bigint generated by default as identity (start with 1), content longvarchar, postedAt timestamp, title varchar(255), author_id bigint, primary key (id))
20 10 2010 19:20:29,255 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
20 10 2010 19:20:29,255 DEBUG ~ alter table Comment add constraint FK9BDE863F388562DE foreign key (post_id) references Post
20 10 2010 19:20:29,255 DEBUG ~ alter table Post add constraint FK260CC0A7CD013E foreign key (author_id) references User
20 10 2010 19:20:29,256 INFO  ~ schema export complete
20 10 2010 19:20:29,256 DEBUG ~ Execute first pass mapping processing
20 10 2010 19:20:29,256 DEBUG ~ Process hbm files
20 10 2010 19:20:29,257 DEBUG ~ Process annotated classes
20 10 2010 19:20:29,257 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 19:20:29,257 DEBUG ~ processing extends queue
20 10 2010 19:20:29,257 DEBUG ~ processing collection mappings
20 10 2010 19:20:29,257 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 19:20:29,257 DEBUG ~ processing association property references
20 10 2010 19:20:29,257 DEBUG ~ processing foreign key constraints
20 10 2010 19:20:29,257 DEBUG ~ resolving reference to class: models.Post
20 10 2010 19:20:29,257 DEBUG ~ resolving reference to class: models.User
20 10 2010 19:20:29,259 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:20:29,259 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:20:29,259 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:20:29,259 DEBUG ~ Execute first pass mapping processing
20 10 2010 19:20:29,259 DEBUG ~ Process hbm files
20 10 2010 19:20:29,259 DEBUG ~ Process annotated classes
20 10 2010 19:20:29,259 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 19:20:29,259 DEBUG ~ processing extends queue
20 10 2010 19:20:29,259 DEBUG ~ processing collection mappings
20 10 2010 19:20:29,259 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 19:20:29,259 DEBUG ~ processing association property references
20 10 2010 19:20:29,259 DEBUG ~ processing foreign key constraints
20 10 2010 19:20:29,259 DEBUG ~ resolving reference to class: models.Post
20 10 2010 19:20:29,259 DEBUG ~ resolving reference to class: models.User
20 10 2010 19:20:29,261 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:20:29,261 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:20:29,261 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:20:29,261 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:20:29,261 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:20:29,261 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:20:29,261 DEBUG ~ Checking 0 named HQL queries
20 10 2010 19:20:29,261 DEBUG ~ Checking 0 named SQL queries
20 10 2010 19:20:29,275 DEBUG ~ opened session at timestamp: 12875700292
20 10 2010 19:20:29,275 DEBUG ~ begin
20 10 2010 19:20:29,276 DEBUG ~ opening JDBC connection
20 10 2010 19:20:29,276 DEBUG ~ current autocommit status: true
20 10 2010 19:20:29,276 DEBUG ~ disabling autocommit
20 10 2010 19:20:29,277 DEBUG ~ parse() - HQL: select count(e) from models.User e
20 10 2010 19:20:29,279 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'User'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

20 10 2010 19:20:29,279 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:20:29,279 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 19:20:29,279 DEBUG ~ FromClause{level=1} :  models.User (e) -> user0_
20 10 2010 19:20:29,280 DEBUG ~ Resolved :  e -> user0_.id
20 10 2010 19:20:29,280 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 19:20:29,280 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count user0_.id ) ) ( FromClause{level=1} User user0_ ) )
20 10 2010 19:20:29,280 DEBUG ~ Using FROM fragment [User user0_]
20 10 2010 19:20:29,280 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 19:20:29,281 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'user0_.id' {alias=e, className=models.User, tableAlias=user0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}

20 10 2010 19:20:29,281 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:20:29,281 DEBUG ~ HQL: select count(e) from models.User e
20 10 2010 19:20:29,281 DEBUG ~ SQL: select count(user0_.id) as col_0_0_ from User user0_
20 10 2010 19:20:29,281 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:20:29,282 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,282 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:20:29,282 DEBUG ~ result row: 
20 10 2010 19:20:29,282 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:20:29,282 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,282 DEBUG ~ initializing non-lazy collections
20 10 2010 19:20:29,297 DEBUG ~ executing identity-insert immediately
20 10 2010 19:20:29,297 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,298 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,298 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,298 DEBUG ~ Natively generated identity: 1
20 10 2010 19:20:29,298 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,298 DEBUG ~ processing flush-time cascades
20 10 2010 19:20:29,298 DEBUG ~ dirty checking collections
20 10 2010 19:20:29,298 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
20 10 2010 19:20:29,298 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
20 10 2010 19:20:29,298 DEBUG ~ listing entities:
20 10 2010 19:20:29,299 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:20:29,300 DEBUG ~ executing identity-insert immediately
20 10 2010 19:20:29,301 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,301 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,301 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,301 DEBUG ~ Natively generated identity: 2
20 10 2010 19:20:29,301 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,301 DEBUG ~ processing flush-time cascades
20 10 2010 19:20:29,301 DEBUG ~ dirty checking collections
20 10 2010 19:20:29,302 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
20 10 2010 19:20:29,302 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
20 10 2010 19:20:29,302 DEBUG ~ listing entities:
20 10 2010 19:20:29,308 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:20:29,308 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:20:29,322 DEBUG ~ parse() - HQL: from models.User where id = ?
20 10 2010 19:20:29,339 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

20 10 2010 19:20:29,339 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:20:29,339 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 19:20:29,339 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
20 10 2010 19:20:29,340 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:20:29,340 DEBUG ~ getDataType() : id -> org.hibernate.type.LongType@34521982
20 10 2010 19:20:29,340 DEBUG ~ Resolved :  {synthetic-alias}.id -> user0_.id
20 10 2010 19:20:29,340 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 19:20:29,340 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.id {synthetic-alias} id ) ? ) ) )
20 10 2010 19:20:29,340 DEBUG ~ Derived SELECT clause created.
20 10 2010 19:20:29,340 DEBUG ~ Using FROM fragment [User user0_]
20 10 2010 19:20:29,341 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 19:20:29,341 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id7_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email7_, user0_.fullname as fullname7_, user0_.isAdmin as isAdmin7_, user0_.password as password7_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.id' {propertyName=id,dereferenceType=ALL,propertyPath=id,path={synthetic-alias}.id,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.LongType@34521982}

20 10 2010 19:20:29,341 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:20:29,342 DEBUG ~ HQL: from models.User where id = ?
20 10 2010 19:20:29,342 DEBUG ~ SQL: select user0_.id as id7_, user0_.email as email7_, user0_.fullname as fullname7_, user0_.isAdmin as isAdmin7_, user0_.password as password7_ from User user0_ where user0_.id=?
20 10 2010 19:20:29,342 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:20:29,342 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,343 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:20:29,343 DEBUG ~ result row: EntityKey[models.User#1]
20 10 2010 19:20:29,343 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:20:29,343 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,343 DEBUG ~ initializing non-lazy collections
20 10 2010 19:20:29,350 DEBUG ~ executing identity-insert immediately
20 10 2010 19:20:29,350 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,351 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,351 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,351 DEBUG ~ Natively generated identity: 1
20 10 2010 19:20:29,351 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,352 DEBUG ~ processing flush-time cascades
20 10 2010 19:20:29,353 DEBUG ~ dirty checking collections
20 10 2010 19:20:29,353 DEBUG ~ Collection found: [models.Post.comments#1], was: [<unreferenced>] (initialized)
20 10 2010 19:20:29,354 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
20 10 2010 19:20:29,356 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
20 10 2010 19:20:29,356 DEBUG ~ listing entities:
20 10 2010 19:20:29,356 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:20:29,356 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 19:20:29,356 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:20:29,360 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,361 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:20:29,361 DEBUG ~ result row: EntityKey[models.User#1]
20 10 2010 19:20:29,361 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:20:29,361 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,361 DEBUG ~ initializing non-lazy collections
20 10 2010 19:20:29,364 DEBUG ~ executing identity-insert immediately
20 10 2010 19:20:29,364 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,364 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,364 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,364 DEBUG ~ Natively generated identity: 2
20 10 2010 19:20:29,364 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,365 DEBUG ~ processing flush-time cascades
20 10 2010 19:20:29,365 DEBUG ~ dirty checking collections
20 10 2010 19:20:29,365 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:20:29,365 DEBUG ~ Collection found: [models.Post.comments#2], was: [<unreferenced>] (initialized)
20 10 2010 19:20:29,365 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
20 10 2010 19:20:29,365 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 2 collections
20 10 2010 19:20:29,365 DEBUG ~ listing entities:
20 10 2010 19:20:29,365 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:20:29,366 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 19:20:29,366 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:20:29,366 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
20 10 2010 19:20:29,370 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,371 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:20:29,371 DEBUG ~ result row: EntityKey[models.User#2]
20 10 2010 19:20:29,371 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:20:29,371 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,371 DEBUG ~ initializing non-lazy collections
20 10 2010 19:20:29,374 DEBUG ~ executing identity-insert immediately
20 10 2010 19:20:29,374 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,374 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,375 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,375 DEBUG ~ Natively generated identity: 3
20 10 2010 19:20:29,375 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,376 DEBUG ~ processing flush-time cascades
20 10 2010 19:20:29,376 DEBUG ~ dirty checking collections
20 10 2010 19:20:29,376 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:20:29,377 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
20 10 2010 19:20:29,377 DEBUG ~ Collection found: [models.Post.comments#3], was: [<unreferenced>] (initialized)
20 10 2010 19:20:29,377 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 5 objects
20 10 2010 19:20:29,377 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 3 collections
20 10 2010 19:20:29,377 DEBUG ~ listing entities:
20 10 2010 19:20:29,377 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:20:29,378 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 19:20:29,378 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:20:29,378 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
20 10 2010 19:20:29,378 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
20 10 2010 19:20:29,383 DEBUG ~ parse() - HQL: from models.Post where id = ?
20 10 2010 19:20:29,391 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

20 10 2010 19:20:29,391 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:20:29,391 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 19:20:29,392 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
20 10 2010 19:20:29,392 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:20:29,392 DEBUG ~ getDataType() : id -> org.hibernate.type.LongType@34521982
20 10 2010 19:20:29,392 DEBUG ~ Resolved :  {synthetic-alias}.id -> post0_.id
20 10 2010 19:20:29,392 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 19:20:29,392 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( = ( post0_.id {synthetic-alias} id ) ? ) ) )
20 10 2010 19:20:29,392 DEBUG ~ Derived SELECT clause created.
20 10 2010 19:20:29,392 DEBUG ~ Using FROM fragment [Post post0_]
20 10 2010 19:20:29,392 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 19:20:29,393 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id8_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_8_, post0_.content as content8_, post0_.postedAt as postedAt8_, post0_.title as title8_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'post0_.id' {propertyName=id,dereferenceType=ALL,propertyPath=id,path={synthetic-alias}.id,tableAlias=post0_,className=models.Post,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.LongType@34521982}

20 10 2010 19:20:29,393 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:20:29,394 DEBUG ~ HQL: from models.Post where id = ?
20 10 2010 19:20:29,394 DEBUG ~ SQL: select post0_.id as id8_, post0_.author_id as author5_8_, post0_.content as content8_, post0_.postedAt as postedAt8_, post0_.title as title8_ from Post post0_ where post0_.id=?
20 10 2010 19:20:29,394 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:20:29,394 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,395 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:20:29,395 DEBUG ~ result row: EntityKey[models.Post#1]
20 10 2010 19:20:29,395 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:20:29,395 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,397 DEBUG ~ initializing non-lazy collections
20 10 2010 19:20:29,399 DEBUG ~ executing identity-insert immediately
20 10 2010 19:20:29,399 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,400 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,400 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,400 DEBUG ~ Natively generated identity: 1
20 10 2010 19:20:29,400 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,401 DEBUG ~ processing flush-time cascades
20 10 2010 19:20:29,402 DEBUG ~ dirty checking collections
20 10 2010 19:20:29,402 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:20:29,402 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
20 10 2010 19:20:29,403 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
20 10 2010 19:20:29,403 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
20 10 2010 19:20:29,403 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
20 10 2010 19:20:29,403 DEBUG ~ listing entities:
20 10 2010 19:20:29,403 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:20:29,404 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:20:29,404 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 19:20:29,404 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:20:29,404 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
20 10 2010 19:20:29,405 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
20 10 2010 19:20:29,408 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,409 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:20:29,409 DEBUG ~ result row: EntityKey[models.Post#1]
20 10 2010 19:20:29,410 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:20:29,410 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,410 DEBUG ~ initializing non-lazy collections
20 10 2010 19:20:29,412 DEBUG ~ executing identity-insert immediately
20 10 2010 19:20:29,412 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,413 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,413 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,413 DEBUG ~ Natively generated identity: 2
20 10 2010 19:20:29,413 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,414 DEBUG ~ processing flush-time cascades
20 10 2010 19:20:29,414 DEBUG ~ dirty checking collections
20 10 2010 19:20:29,414 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:20:29,414 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
20 10 2010 19:20:29,414 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
20 10 2010 19:20:29,414 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 7 objects
20 10 2010 19:20:29,414 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
20 10 2010 19:20:29,414 DEBUG ~ listing entities:
20 10 2010 19:20:29,415 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
20 10 2010 19:20:29,415 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:20:29,415 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:20:29,415 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:20:29,415 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 19:20:29,416 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
20 10 2010 19:20:29,416 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 19:20:29,419 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,420 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:20:29,420 DEBUG ~ result row: EntityKey[models.Post#2]
20 10 2010 19:20:29,420 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:20:29,420 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,420 DEBUG ~ initializing non-lazy collections
20 10 2010 19:20:29,422 DEBUG ~ executing identity-insert immediately
20 10 2010 19:20:29,422 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,423 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,423 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,423 DEBUG ~ Natively generated identity: 3
20 10 2010 19:20:29,423 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,423 DEBUG ~ processing flush-time cascades
20 10 2010 19:20:29,423 DEBUG ~ dirty checking collections
20 10 2010 19:20:29,424 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:20:29,424 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
20 10 2010 19:20:29,424 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
20 10 2010 19:20:29,424 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
20 10 2010 19:20:29,424 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
20 10 2010 19:20:29,424 DEBUG ~ listing entities:
20 10 2010 19:20:29,424 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
20 10 2010 19:20:29,424 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:20:29,425 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:20:29,425 DEBUG ~ models.Comment{content=This post is useless ?
, id=3, author=Tom, post=models.Post#2, postedAt=2009-04-05 09:00:00}
20 10 2010 19:20:29,425 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:20:29,425 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 19:20:29,425 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
20 10 2010 19:20:29,425 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 19:20:29,426 DEBUG ~ commit
20 10 2010 19:20:29,426 DEBUG ~ re-enabling autocommit
20 10 2010 19:20:29,427 DEBUG ~ committed JDBC Connection
20 10 2010 19:20:29,427 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:20:29,427 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:20:29,428 DEBUG ~ opened session at timestamp: 12875700294
20 10 2010 19:20:29,428 DEBUG ~ begin
20 10 2010 19:20:29,428 DEBUG ~ opening JDBC connection
20 10 2010 19:20:29,428 DEBUG ~ current autocommit status: true
20 10 2010 19:20:29,428 DEBUG ~ disabling autocommit
20 10 2010 19:20:29,439 DEBUG ~ loading entity: [models.Post#1]
20 10 2010 19:20:29,439 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,440 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:20:29,440 DEBUG ~ result row: EntityKey[models.User#1], EntityKey[models.Post#1]
20 10 2010 19:20:29,440 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:20:29,440 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,440 DEBUG ~ resolving associations for [models.User#1]
20 10 2010 19:20:29,440 DEBUG ~ done materializing entity [models.User#1]
20 10 2010 19:20:29,440 DEBUG ~ resolving associations for [models.Post#1]
20 10 2010 19:20:29,440 DEBUG ~ done materializing entity [models.Post#1]
20 10 2010 19:20:29,440 DEBUG ~ initializing non-lazy collections
20 10 2010 19:20:29,440 DEBUG ~ done entity load
20 10 2010 19:20:29,442 DEBUG ~ playCache: playMemoryStore miss for 5bc4bc17-5735-4f4f-87e5-818c7b8f0e09
20 10 2010 19:20:29,442 DEBUG ~ play cache - Miss
20 10 2010 19:20:29,442 DEBUG ~ playCache: playMemoryStore miss for 5bc4bc17-5735-4f4f-87e5-818c7b8f0e09
20 10 2010 19:20:29,442 DEBUG ~ play cache - Miss
20 10 2010 19:20:29,497 DEBUG ~ parse() - HQL: from models.Post where postedAt > ? order by postedAt asc
20 10 2010 19:20:29,500 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    +-[WHERE] Node: 'where'
    |  \-[GT] Node: '>'
    |     +-[IDENT] Node: 'postedAt'
    |     \-[PARAM] Node: '?'
    \-[ORDER] Node: 'order'
       +-[IDENT] Node: 'postedAt'
       \-[ASCENDING] Node: 'asc'

20 10 2010 19:20:29,500 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:20:29,500 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 19:20:29,501 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
20 10 2010 19:20:29,501 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:20:29,501 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@5cf99513
20 10 2010 19:20:29,501 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
20 10 2010 19:20:29,501 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:20:29,501 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@5cf99513
20 10 2010 19:20:29,501 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
20 10 2010 19:20:29,501 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 19:20:29,501 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( > ( post0_.postedAt {synthetic-alias} postedAt ) ? ) ) ( order ( post0_.postedAt {synthetic-alias} postedAt ) asc ) )
20 10 2010 19:20:29,501 DEBUG ~ Derived SELECT clause created.
20 10 2010 19:20:29,501 DEBUG ~ Using FROM fragment [Post post0_]
20 10 2010 19:20:29,502 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 19:20:29,502 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id8_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_8_, post0_.content as content8_, post0_.postedAt as postedAt8_, post0_.title as title8_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    +-[WHERE] SqlNode: 'where'
    |  \-[GT] BinaryLogicOperatorNode: '>'
    |     +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
    |     |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
    |     \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.TimestampType@5cf99513}
    \-[ORDER] OrderByClause: 'order'
       +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
       |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
       |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
       \-[ASCENDING] SqlNode: 'asc'

20 10 2010 19:20:29,502 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:20:29,503 DEBUG ~ HQL: from models.Post where postedAt > ? order by postedAt asc
20 10 2010 19:20:29,503 DEBUG ~ SQL: select post0_.id as id8_, post0_.author_id as author5_8_, post0_.content as content8_, post0_.postedAt as postedAt8_, post0_.title as title8_ from Post post0_ where post0_.postedAt>? order by post0_.postedAt asc
20 10 2010 19:20:29,503 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:20:29,503 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,504 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:20:29,504 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:20:29,504 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,504 DEBUG ~ initializing non-lazy collections
20 10 2010 19:20:29,506 DEBUG ~ parse() - HQL: from models.Post where postedAt < ? order by postedAt desc
20 10 2010 19:20:29,508 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    +-[WHERE] Node: 'where'
    |  \-[LT] Node: '<'
    |     +-[IDENT] Node: 'postedAt'
    |     \-[PARAM] Node: '?'
    \-[ORDER] Node: 'order'
       +-[IDENT] Node: 'postedAt'
       \-[DESCENDING] Node: 'desc'

20 10 2010 19:20:29,508 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:20:29,509 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 19:20:29,509 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
20 10 2010 19:20:29,509 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:20:29,509 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@5cf99513
20 10 2010 19:20:29,509 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
20 10 2010 19:20:29,510 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:20:29,510 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@5cf99513
20 10 2010 19:20:29,510 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
20 10 2010 19:20:29,510 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 19:20:29,510 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( < ( post0_.postedAt {synthetic-alias} postedAt ) ? ) ) ( order ( post0_.postedAt {synthetic-alias} postedAt ) desc ) )
20 10 2010 19:20:29,510 DEBUG ~ Derived SELECT clause created.
20 10 2010 19:20:29,510 DEBUG ~ Using FROM fragment [Post post0_]
20 10 2010 19:20:29,510 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 19:20:29,511 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id8_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_8_, post0_.content as content8_, post0_.postedAt as postedAt8_, post0_.title as title8_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    +-[WHERE] SqlNode: 'where'
    |  \-[LT] BinaryLogicOperatorNode: '<'
    |     +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
    |     |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
    |     \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.TimestampType@5cf99513}
    \-[ORDER] OrderByClause: 'order'
       +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
       |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
       |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
       \-[DESCENDING] SqlNode: 'desc'

20 10 2010 19:20:29,511 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:20:29,512 DEBUG ~ HQL: from models.Post where postedAt < ? order by postedAt desc
20 10 2010 19:20:29,512 DEBUG ~ SQL: select post0_.id as id8_, post0_.author_id as author5_8_, post0_.content as content8_, post0_.postedAt as postedAt8_, post0_.title as title8_ from Post post0_ where post0_.postedAt<? order by post0_.postedAt desc
20 10 2010 19:20:29,512 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:20:29,512 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,512 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:20:29,513 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:20:29,513 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:20:29,513 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,513 DEBUG ~ resolving associations for [models.Post#3]
20 10 2010 19:20:29,513 DEBUG ~ loading entity: [models.User#2]
20 10 2010 19:20:29,513 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,513 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:20:29,513 DEBUG ~ result row: EntityKey[models.User#2]
20 10 2010 19:20:29,513 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:20:29,513 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,513 DEBUG ~ resolving associations for [models.User#2]
20 10 2010 19:20:29,514 DEBUG ~ done materializing entity [models.User#2]
20 10 2010 19:20:29,514 DEBUG ~ done entity load
20 10 2010 19:20:29,514 DEBUG ~ done materializing entity [models.Post#3]
20 10 2010 19:20:29,514 DEBUG ~ initializing non-lazy collections
20 10 2010 19:20:29,514 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,515 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:20:29,515 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:20:29,515 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:20:29,515 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,515 DEBUG ~ initializing non-lazy collections
20 10 2010 19:20:29,516 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,516 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:20:29,516 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:20:29,516 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:20:29,516 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,516 DEBUG ~ initializing non-lazy collections
20 10 2010 19:20:29,541 DEBUG ~ loading collection: [models.Post.comments#1]
20 10 2010 19:20:29,541 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:29,541 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:20:29,541 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
20 10 2010 19:20:29,541 DEBUG ~ result row: EntityKey[models.Comment#1]
20 10 2010 19:20:29,541 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:20:29,542 DEBUG ~ result row: EntityKey[models.Comment#2]
20 10 2010 19:20:29,542 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:20:29,542 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:20:29,542 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:29,542 DEBUG ~ resolving associations for [models.Comment#1]
20 10 2010 19:20:29,542 DEBUG ~ done materializing entity [models.Comment#1]
20 10 2010 19:20:29,542 DEBUG ~ resolving associations for [models.Comment#2]
20 10 2010 19:20:29,542 DEBUG ~ done materializing entity [models.Comment#2]
20 10 2010 19:20:29,542 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
20 10 2010 19:20:29,542 DEBUG ~ collection fully initialized: [models.Post.comments#1]
20 10 2010 19:20:29,542 DEBUG ~ 1 collections initialized for role: models.Post.comments
20 10 2010 19:20:29,542 DEBUG ~ initializing non-lazy collections
20 10 2010 19:20:29,542 DEBUG ~ done loading collection
20 10 2010 19:20:29,598 DEBUG ~ commit
20 10 2010 19:20:29,599 DEBUG ~ processing flush-time cascades
20 10 2010 19:20:29,599 DEBUG ~ dirty checking collections
20 10 2010 19:20:29,599 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:20:29,599 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (uninitialized)
20 10 2010 19:20:29,599 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
20 10 2010 19:20:29,599 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
20 10 2010 19:20:29,600 DEBUG ~ listing entities:
20 10 2010 19:20:29,600 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:20:29,600 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:20:29,600 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2], postedAt=2009-06-14 09:00:00}
20 10 2010 19:20:29,600 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:20:29,600 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 19:20:29,600 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=<uninitialized>, postedAt=2009-06-06 09:00:00}
20 10 2010 19:20:29,601 DEBUG ~ re-enabling autocommit
20 10 2010 19:20:29,601 DEBUG ~ committed JDBC Connection
20 10 2010 19:20:29,601 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:20:29,601 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:20:29,915 DEBUG ~ opened session at timestamp: 12875700299
20 10 2010 19:20:29,915 DEBUG ~ begin
20 10 2010 19:20:29,915 DEBUG ~ opening JDBC connection
20 10 2010 19:20:29,915 DEBUG ~ current autocommit status: true
20 10 2010 19:20:29,915 DEBUG ~ disabling autocommit
20 10 2010 19:20:29,965 DEBUG ~ commit
20 10 2010 19:20:29,969 DEBUG ~ re-enabling autocommit
20 10 2010 19:20:29,969 DEBUG ~ committed JDBC Connection
20 10 2010 19:20:29,969 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:20:29,969 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:20:53,978 DEBUG ~ opened session at timestamp: 12875700539
20 10 2010 19:20:53,978 DEBUG ~ begin
20 10 2010 19:20:53,978 DEBUG ~ opening JDBC connection
20 10 2010 19:20:53,978 DEBUG ~ current autocommit status: true
20 10 2010 19:20:53,978 DEBUG ~ disabling autocommit
20 10 2010 19:20:53,986 DEBUG ~ loading entity: [models.Post#1]
20 10 2010 19:20:53,986 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:53,986 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:20:53,987 DEBUG ~ result row: EntityKey[models.User#1], EntityKey[models.Post#1]
20 10 2010 19:20:53,987 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:20:53,987 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:53,987 DEBUG ~ resolving associations for [models.User#1]
20 10 2010 19:20:53,987 DEBUG ~ done materializing entity [models.User#1]
20 10 2010 19:20:53,987 DEBUG ~ resolving associations for [models.Post#1]
20 10 2010 19:20:53,987 DEBUG ~ done materializing entity [models.Post#1]
20 10 2010 19:20:53,987 DEBUG ~ initializing non-lazy collections
20 10 2010 19:20:53,987 DEBUG ~ done entity load
20 10 2010 19:20:53,987 DEBUG ~ playCache: playMemoryStore hit for 5bc4bc17-5735-4f4f-87e5-818c7b8f0e09
20 10 2010 19:20:53,988 DEBUG ~ playCache: playMemoryStore hit for 5bc4bc17-5735-4f4f-87e5-818c7b8f0e09
20 10 2010 19:20:53,990 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:53,990 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:20:53,990 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:20:53,990 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:53,990 DEBUG ~ initializing non-lazy collections
20 10 2010 19:20:53,991 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:53,991 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:20:53,991 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:20:53,991 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:20:53,991 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:53,991 DEBUG ~ resolving associations for [models.Post#3]
20 10 2010 19:20:53,991 DEBUG ~ loading entity: [models.User#2]
20 10 2010 19:20:53,991 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:53,992 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:20:53,992 DEBUG ~ result row: EntityKey[models.User#2]
20 10 2010 19:20:53,992 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:20:53,992 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:53,992 DEBUG ~ resolving associations for [models.User#2]
20 10 2010 19:20:53,992 DEBUG ~ done materializing entity [models.User#2]
20 10 2010 19:20:53,992 DEBUG ~ done entity load
20 10 2010 19:20:53,992 DEBUG ~ done materializing entity [models.Post#3]
20 10 2010 19:20:53,992 DEBUG ~ initializing non-lazy collections
20 10 2010 19:20:53,993 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:53,993 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:20:53,993 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:20:53,993 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:20:53,993 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:53,993 DEBUG ~ initializing non-lazy collections
20 10 2010 19:20:53,994 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:53,994 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:20:53,994 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:20:53,994 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:20:53,994 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:53,994 DEBUG ~ initializing non-lazy collections
20 10 2010 19:20:53,997 DEBUG ~ loading collection: [models.Post.comments#1]
20 10 2010 19:20:53,997 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:20:53,997 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:20:53,997 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
20 10 2010 19:20:53,997 DEBUG ~ result row: EntityKey[models.Comment#1]
20 10 2010 19:20:53,997 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:20:53,998 DEBUG ~ result row: EntityKey[models.Comment#2]
20 10 2010 19:20:53,998 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:20:53,998 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:20:53,998 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:20:53,998 DEBUG ~ resolving associations for [models.Comment#1]
20 10 2010 19:20:53,998 DEBUG ~ done materializing entity [models.Comment#1]
20 10 2010 19:20:53,998 DEBUG ~ resolving associations for [models.Comment#2]
20 10 2010 19:20:53,998 DEBUG ~ done materializing entity [models.Comment#2]
20 10 2010 19:20:53,998 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
20 10 2010 19:20:53,998 DEBUG ~ collection fully initialized: [models.Post.comments#1]
20 10 2010 19:20:53,998 DEBUG ~ 1 collections initialized for role: models.Post.comments
20 10 2010 19:20:53,998 DEBUG ~ initializing non-lazy collections
20 10 2010 19:20:53,998 DEBUG ~ done loading collection
20 10 2010 19:20:54,007 DEBUG ~ commit
20 10 2010 19:20:54,007 DEBUG ~ processing flush-time cascades
20 10 2010 19:20:54,007 DEBUG ~ dirty checking collections
20 10 2010 19:20:54,007 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:20:54,007 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (uninitialized)
20 10 2010 19:20:54,007 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
20 10 2010 19:20:54,007 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
20 10 2010 19:20:54,007 DEBUG ~ listing entities:
20 10 2010 19:20:54,008 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:20:54,008 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:20:54,008 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2], postedAt=2009-06-14 09:00:00}
20 10 2010 19:20:54,008 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:20:54,008 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 19:20:54,008 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=<uninitialized>, postedAt=2009-06-06 09:00:00}
20 10 2010 19:20:54,008 DEBUG ~ re-enabling autocommit
20 10 2010 19:20:54,008 DEBUG ~ committed JDBC Connection
20 10 2010 19:20:54,009 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:20:54,009 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:20:54,107 DEBUG ~ opened session at timestamp: 12875700541
20 10 2010 19:20:54,107 DEBUG ~ begin
20 10 2010 19:20:54,107 DEBUG ~ opening JDBC connection
20 10 2010 19:20:54,107 DEBUG ~ current autocommit status: true
20 10 2010 19:20:54,107 DEBUG ~ disabling autocommit
20 10 2010 19:20:54,137 DEBUG ~ commit
20 10 2010 19:20:54,138 DEBUG ~ re-enabling autocommit
20 10 2010 19:20:54,138 DEBUG ~ committed JDBC Connection
20 10 2010 19:20:54,138 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:20:54,138 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:21:28,974 DEBUG ~ opened session at timestamp: 12875700889
20 10 2010 19:21:28,974 DEBUG ~ begin
20 10 2010 19:21:28,974 DEBUG ~ opening JDBC connection
20 10 2010 19:21:28,974 DEBUG ~ current autocommit status: true
20 10 2010 19:21:28,974 DEBUG ~ disabling autocommit
20 10 2010 19:21:28,980 DEBUG ~ loading entity: [models.Post#1]
20 10 2010 19:21:28,981 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:21:28,981 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:21:28,981 DEBUG ~ result row: EntityKey[models.User#1], EntityKey[models.Post#1]
20 10 2010 19:21:28,982 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:21:28,982 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:21:28,982 DEBUG ~ resolving associations for [models.User#1]
20 10 2010 19:21:28,982 DEBUG ~ done materializing entity [models.User#1]
20 10 2010 19:21:28,982 DEBUG ~ resolving associations for [models.Post#1]
20 10 2010 19:21:28,982 DEBUG ~ done materializing entity [models.Post#1]
20 10 2010 19:21:28,982 DEBUG ~ initializing non-lazy collections
20 10 2010 19:21:28,982 DEBUG ~ done entity load
20 10 2010 19:21:28,982 DEBUG ~ playCache: playMemoryStore miss for 5bc4bc17-5735-4f4f-87e5-818c7b8f0e09
20 10 2010 19:21:28,982 DEBUG ~ play cache - Miss
20 10 2010 19:21:28,982 DEBUG ~ playCache: playMemoryStore miss for 5bc4bc17-5735-4f4f-87e5-818c7b8f0e09
20 10 2010 19:21:28,982 DEBUG ~ play cache - Miss
20 10 2010 19:21:28,985 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:21:28,985 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:21:28,985 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:21:28,985 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:21:28,985 DEBUG ~ initializing non-lazy collections
20 10 2010 19:21:28,985 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:21:28,986 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:21:28,986 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:21:28,986 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:21:28,986 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:21:28,986 DEBUG ~ resolving associations for [models.Post#3]
20 10 2010 19:21:28,986 DEBUG ~ loading entity: [models.User#2]
20 10 2010 19:21:28,986 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:21:28,986 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:21:28,986 DEBUG ~ result row: EntityKey[models.User#2]
20 10 2010 19:21:28,986 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:21:28,987 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:21:28,987 DEBUG ~ resolving associations for [models.User#2]
20 10 2010 19:21:28,987 DEBUG ~ done materializing entity [models.User#2]
20 10 2010 19:21:28,987 DEBUG ~ done entity load
20 10 2010 19:21:28,987 DEBUG ~ done materializing entity [models.Post#3]
20 10 2010 19:21:28,987 DEBUG ~ initializing non-lazy collections
20 10 2010 19:21:28,987 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:21:28,987 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:21:28,987 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:21:28,988 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:21:28,988 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:21:28,988 DEBUG ~ initializing non-lazy collections
20 10 2010 19:21:28,989 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:21:28,989 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:21:28,989 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:21:28,989 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:21:28,989 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:21:28,989 DEBUG ~ initializing non-lazy collections
20 10 2010 19:21:28,992 DEBUG ~ loading collection: [models.Post.comments#1]
20 10 2010 19:21:28,992 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:21:28,992 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:21:28,992 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
20 10 2010 19:21:28,992 DEBUG ~ result row: EntityKey[models.Comment#1]
20 10 2010 19:21:28,992 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:21:28,992 DEBUG ~ result row: EntityKey[models.Comment#2]
20 10 2010 19:21:28,993 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:21:28,993 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:21:28,993 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:21:28,993 DEBUG ~ resolving associations for [models.Comment#1]
20 10 2010 19:21:28,993 DEBUG ~ done materializing entity [models.Comment#1]
20 10 2010 19:21:28,993 DEBUG ~ resolving associations for [models.Comment#2]
20 10 2010 19:21:28,994 DEBUG ~ done materializing entity [models.Comment#2]
20 10 2010 19:21:28,994 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
20 10 2010 19:21:28,994 DEBUG ~ collection fully initialized: [models.Post.comments#1]
20 10 2010 19:21:28,994 DEBUG ~ 1 collections initialized for role: models.Post.comments
20 10 2010 19:21:28,994 DEBUG ~ initializing non-lazy collections
20 10 2010 19:21:28,994 DEBUG ~ done loading collection
20 10 2010 19:21:29,001 DEBUG ~ commit
20 10 2010 19:21:29,002 DEBUG ~ processing flush-time cascades
20 10 2010 19:21:29,002 DEBUG ~ dirty checking collections
20 10 2010 19:21:29,003 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:21:29,003 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (uninitialized)
20 10 2010 19:21:29,003 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
20 10 2010 19:21:29,003 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
20 10 2010 19:21:29,003 DEBUG ~ listing entities:
20 10 2010 19:21:29,003 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:21:29,003 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:21:29,004 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2], postedAt=2009-06-14 09:00:00}
20 10 2010 19:21:29,004 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:21:29,004 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 19:21:29,004 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=<uninitialized>, postedAt=2009-06-06 09:00:00}
20 10 2010 19:21:29,004 DEBUG ~ re-enabling autocommit
20 10 2010 19:21:29,004 DEBUG ~ committed JDBC Connection
20 10 2010 19:21:29,004 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:21:29,004 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:21:29,064 DEBUG ~ opened session at timestamp: 12875700890
20 10 2010 19:21:29,064 DEBUG ~ begin
20 10 2010 19:21:29,064 DEBUG ~ opening JDBC connection
20 10 2010 19:21:29,064 DEBUG ~ current autocommit status: true
20 10 2010 19:21:29,064 DEBUG ~ disabling autocommit
20 10 2010 19:21:29,082 DEBUG ~ commit
20 10 2010 19:21:29,082 DEBUG ~ re-enabling autocommit
20 10 2010 19:21:29,082 DEBUG ~ committed JDBC Connection
20 10 2010 19:21:29,083 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:21:29,083 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:21:42,844 DEBUG ~ opened session at timestamp: 12875701028
20 10 2010 19:21:42,845 DEBUG ~ begin
20 10 2010 19:21:42,845 DEBUG ~ opening JDBC connection
20 10 2010 19:21:42,845 DEBUG ~ current autocommit status: true
20 10 2010 19:21:42,845 DEBUG ~ disabling autocommit
20 10 2010 19:21:42,850 DEBUG ~ loading entity: [models.Post#1]
20 10 2010 19:21:42,851 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:21:42,851 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:21:42,851 DEBUG ~ result row: EntityKey[models.User#1], EntityKey[models.Post#1]
20 10 2010 19:21:42,851 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:21:42,851 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:21:42,852 DEBUG ~ resolving associations for [models.User#1]
20 10 2010 19:21:42,852 DEBUG ~ done materializing entity [models.User#1]
20 10 2010 19:21:42,852 DEBUG ~ resolving associations for [models.Post#1]
20 10 2010 19:21:42,852 DEBUG ~ done materializing entity [models.Post#1]
20 10 2010 19:21:42,852 DEBUG ~ initializing non-lazy collections
20 10 2010 19:21:42,852 DEBUG ~ done entity load
20 10 2010 19:21:42,852 DEBUG ~ playCache: playMemoryStore hit for 5bc4bc17-5735-4f4f-87e5-818c7b8f0e09
20 10 2010 19:21:42,852 DEBUG ~ playCache: playMemoryStore hit for 5bc4bc17-5735-4f4f-87e5-818c7b8f0e09
20 10 2010 19:21:42,855 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:21:42,855 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:21:42,855 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:21:42,855 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:21:42,855 DEBUG ~ initializing non-lazy collections
20 10 2010 19:21:42,855 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:21:42,856 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:21:42,856 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:21:42,856 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:21:42,856 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:21:42,856 DEBUG ~ resolving associations for [models.Post#3]
20 10 2010 19:21:42,856 DEBUG ~ loading entity: [models.User#2]
20 10 2010 19:21:42,856 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:21:42,856 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:21:42,856 DEBUG ~ result row: EntityKey[models.User#2]
20 10 2010 19:21:42,856 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:21:42,856 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:21:42,857 DEBUG ~ resolving associations for [models.User#2]
20 10 2010 19:21:42,857 DEBUG ~ done materializing entity [models.User#2]
20 10 2010 19:21:42,857 DEBUG ~ done entity load
20 10 2010 19:21:42,857 DEBUG ~ done materializing entity [models.Post#3]
20 10 2010 19:21:42,857 DEBUG ~ initializing non-lazy collections
20 10 2010 19:21:42,857 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:21:42,857 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:21:42,857 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:21:42,858 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:21:42,858 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:21:42,858 DEBUG ~ initializing non-lazy collections
20 10 2010 19:21:42,858 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:21:42,858 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:21:42,859 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:21:42,859 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:21:42,859 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:21:42,859 DEBUG ~ initializing non-lazy collections
20 10 2010 19:21:42,862 DEBUG ~ loading collection: [models.Post.comments#1]
20 10 2010 19:21:42,862 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:21:42,862 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:21:42,862 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
20 10 2010 19:21:42,862 DEBUG ~ result row: EntityKey[models.Comment#1]
20 10 2010 19:21:42,862 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:21:42,862 DEBUG ~ result row: EntityKey[models.Comment#2]
20 10 2010 19:21:42,862 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:21:42,863 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:21:42,863 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:21:42,863 DEBUG ~ resolving associations for [models.Comment#1]
20 10 2010 19:21:42,863 DEBUG ~ done materializing entity [models.Comment#1]
20 10 2010 19:21:42,863 DEBUG ~ resolving associations for [models.Comment#2]
20 10 2010 19:21:42,863 DEBUG ~ done materializing entity [models.Comment#2]
20 10 2010 19:21:42,863 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
20 10 2010 19:21:42,863 DEBUG ~ collection fully initialized: [models.Post.comments#1]
20 10 2010 19:21:42,863 DEBUG ~ 1 collections initialized for role: models.Post.comments
20 10 2010 19:21:42,863 DEBUG ~ initializing non-lazy collections
20 10 2010 19:21:42,863 DEBUG ~ done loading collection
20 10 2010 19:21:42,872 DEBUG ~ commit
20 10 2010 19:21:42,873 DEBUG ~ processing flush-time cascades
20 10 2010 19:21:42,873 DEBUG ~ dirty checking collections
20 10 2010 19:21:42,873 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:21:42,873 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (uninitialized)
20 10 2010 19:21:42,873 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
20 10 2010 19:21:42,873 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
20 10 2010 19:21:42,874 DEBUG ~ listing entities:
20 10 2010 19:21:42,874 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:21:42,874 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:21:42,874 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2], postedAt=2009-06-14 09:00:00}
20 10 2010 19:21:42,874 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:21:42,874 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 19:21:42,874 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=<uninitialized>, postedAt=2009-06-06 09:00:00}
20 10 2010 19:21:42,875 DEBUG ~ re-enabling autocommit
20 10 2010 19:21:42,875 DEBUG ~ committed JDBC Connection
20 10 2010 19:21:42,875 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:21:42,875 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:21:42,954 DEBUG ~ opened session at timestamp: 12875701029
20 10 2010 19:21:42,954 DEBUG ~ begin
20 10 2010 19:21:42,954 DEBUG ~ opening JDBC connection
20 10 2010 19:21:42,954 DEBUG ~ current autocommit status: true
20 10 2010 19:21:42,954 DEBUG ~ disabling autocommit
20 10 2010 19:21:42,975 DEBUG ~ commit
20 10 2010 19:21:42,978 DEBUG ~ re-enabling autocommit
20 10 2010 19:21:42,978 DEBUG ~ committed JDBC Connection
20 10 2010 19:21:42,978 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:21:42,978 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:25:31,389 INFO  ~ closing
20 10 2010 19:25:31,390 INFO  ~ Running hbm2ddl schema export
20 10 2010 19:25:31,390 DEBUG ~ import file not found: /import.sql
20 10 2010 19:25:31,390 INFO  ~ exporting generated schema to database
20 10 2010 19:25:31,390 DEBUG ~ alter table Comment drop constraint FK9BDE863F388562DE
20 10 2010 19:25:31,391 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
20 10 2010 19:25:31,391 DEBUG ~ drop table Comment if exists
20 10 2010 19:25:31,391 DEBUG ~ drop table Post if exists
20 10 2010 19:25:31,391 DEBUG ~ drop table User if exists
20 10 2010 19:25:31,391 INFO  ~ schema export complete
20 10 2010 19:25:31,435 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
20 10 2010 19:25:31,435 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
20 10 2010 19:25:31,435 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
20 10 2010 19:25:31,435 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
20 10 2010 19:25:31,435 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
20 10 2010 19:25:31,436 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
20 10 2010 19:25:31,436 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
20 10 2010 19:25:31,436 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
20 10 2010 19:25:31,436 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
20 10 2010 19:25:31,436 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
20 10 2010 19:25:31,436 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
20 10 2010 19:25:31,436 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
20 10 2010 19:25:31,436 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
20 10 2010 19:25:31,436 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
20 10 2010 19:25:31,437 DEBUG ~ Execute first pass mapping processing
20 10 2010 19:25:31,437 DEBUG ~ Process hbm files
20 10 2010 19:25:31,437 DEBUG ~ Process annotated classes
20 10 2010 19:25:31,437 INFO  ~ Binding entity from annotated class: models.Comment
20 10 2010 19:25:31,437 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
20 10 2010 19:25:31,437 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
20 10 2010 19:25:31,438 DEBUG ~ Import with entity name Comment
20 10 2010 19:25:31,438 INFO  ~ Bind entity models.Comment on table Comment
20 10 2010 19:25:31,441 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=id, insertable=true, updatable=true, unique=false}
20 10 2010 19:25:31,441 DEBUG ~ binding property id with lazy=false
20 10 2010 19:25:31,441 DEBUG ~ building SimpleValue for id
20 10 2010 19:25:31,442 DEBUG ~ Building property id
20 10 2010 19:25:31,442 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=author, insertable=true, updatable=true, unique=false}
20 10 2010 19:25:31,442 DEBUG ~ binding property author with lazy=false
20 10 2010 19:25:31,442 DEBUG ~ building SimpleValue for author
20 10 2010 19:25:31,442 DEBUG ~ Building property author
20 10 2010 19:25:31,442 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=content, insertable=true, updatable=true, unique=false}
20 10 2010 19:25:31,442 DEBUG ~ binding property content with lazy=false
20 10 2010 19:25:31,442 DEBUG ~ building SimpleValue for content
20 10 2010 19:25:31,442 DEBUG ~ Building property content
20 10 2010 19:25:31,442 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
20 10 2010 19:25:31,442 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=post, insertable=true, updatable=true, unique=false}
20 10 2010 19:25:31,443 DEBUG ~ Building property post
20 10 2010 19:25:31,443 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
20 10 2010 19:25:31,443 DEBUG ~ binding property postedAt with lazy=false
20 10 2010 19:25:31,443 DEBUG ~ building SimpleValue for postedAt
20 10 2010 19:25:31,443 DEBUG ~ Building property postedAt
20 10 2010 19:25:31,443 INFO  ~ Binding entity from annotated class: models.User
20 10 2010 19:25:31,443 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
20 10 2010 19:25:31,443 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
20 10 2010 19:25:31,443 DEBUG ~ Import with entity name User
20 10 2010 19:25:31,443 INFO  ~ Bind entity models.User on table User
20 10 2010 19:25:31,445 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
20 10 2010 19:25:31,445 DEBUG ~ binding property id with lazy=false
20 10 2010 19:25:31,445 DEBUG ~ building SimpleValue for id
20 10 2010 19:25:31,445 DEBUG ~ Building property id
20 10 2010 19:25:31,445 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
20 10 2010 19:25:31,445 DEBUG ~ binding property email with lazy=false
20 10 2010 19:25:31,445 DEBUG ~ building SimpleValue for email
20 10 2010 19:25:31,445 DEBUG ~ Building property email
20 10 2010 19:25:31,445 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
20 10 2010 19:25:31,446 DEBUG ~ binding property fullname with lazy=false
20 10 2010 19:25:31,446 DEBUG ~ building SimpleValue for fullname
20 10 2010 19:25:31,446 DEBUG ~ Building property fullname
20 10 2010 19:25:31,446 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
20 10 2010 19:25:31,446 DEBUG ~ binding property isAdmin with lazy=false
20 10 2010 19:25:31,446 DEBUG ~ building SimpleValue for isAdmin
20 10 2010 19:25:31,446 DEBUG ~ Building property isAdmin
20 10 2010 19:25:31,446 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
20 10 2010 19:25:31,446 DEBUG ~ binding property password with lazy=false
20 10 2010 19:25:31,446 DEBUG ~ building SimpleValue for password
20 10 2010 19:25:31,446 DEBUG ~ Building property password
20 10 2010 19:25:31,446 INFO  ~ Binding entity from annotated class: models.Post
20 10 2010 19:25:31,446 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
20 10 2010 19:25:31,447 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
20 10 2010 19:25:31,447 DEBUG ~ Import with entity name Post
20 10 2010 19:25:31,447 INFO  ~ Bind entity models.Post on table Post
20 10 2010 19:25:31,449 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=id, insertable=true, updatable=true, unique=false}
20 10 2010 19:25:31,449 DEBUG ~ binding property id with lazy=false
20 10 2010 19:25:31,449 DEBUG ~ building SimpleValue for id
20 10 2010 19:25:31,449 DEBUG ~ Building property id
20 10 2010 19:25:31,450 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
20 10 2010 19:25:31,450 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=author, insertable=true, updatable=true, unique=false}
20 10 2010 19:25:31,450 DEBUG ~ Building property author
20 10 2010 19:25:31,450 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
20 10 2010 19:25:31,450 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments, insertable=true, updatable=true, unique=false}
20 10 2010 19:25:31,450 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=null, insertable=true, updatable=true, unique=false}
20 10 2010 19:25:31,450 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=element, insertable=true, updatable=true, unique=false}
20 10 2010 19:25:31,450 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments_KEY, insertable=true, updatable=true, unique=false}
20 10 2010 19:25:31,450 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='comments_KEY', referencedColumn='null', mappedBy='null'}
20 10 2010 19:25:31,451 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
20 10 2010 19:25:31,451 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
20 10 2010 19:25:31,451 DEBUG ~ Collection role: models.Post.comments
20 10 2010 19:25:31,451 DEBUG ~ Building property comments
20 10 2010 19:25:31,451 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=content, insertable=true, updatable=true, unique=false}
20 10 2010 19:25:31,451 DEBUG ~ binding property content with lazy=false
20 10 2010 19:25:31,451 DEBUG ~ building SimpleValue for content
20 10 2010 19:25:31,451 DEBUG ~ Building property content
20 10 2010 19:25:31,451 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
20 10 2010 19:25:31,451 DEBUG ~ binding property postedAt with lazy=false
20 10 2010 19:25:31,451 DEBUG ~ building SimpleValue for postedAt
20 10 2010 19:25:31,451 DEBUG ~ Building property postedAt
20 10 2010 19:25:31,452 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=title, insertable=true, updatable=true, unique=false}
20 10 2010 19:25:31,452 DEBUG ~ binding property title with lazy=false
20 10 2010 19:25:31,452 DEBUG ~ building SimpleValue for title
20 10 2010 19:25:31,452 DEBUG ~ Building property title
20 10 2010 19:25:31,452 DEBUG ~ setting SimpleValue typeName for id
20 10 2010 19:25:31,452 DEBUG ~ setting SimpleValue typeName for author
20 10 2010 19:25:31,452 DEBUG ~ setting SimpleValue typeName for content
20 10 2010 19:25:31,452 DEBUG ~ setting SimpleValue typeName for postedAt
20 10 2010 19:25:31,452 DEBUG ~ setting SimpleValue typeName for id
20 10 2010 19:25:31,452 DEBUG ~ setting SimpleValue typeName for email
20 10 2010 19:25:31,452 DEBUG ~ setting SimpleValue typeName for fullname
20 10 2010 19:25:31,452 DEBUG ~ setting SimpleValue typeName for isAdmin
20 10 2010 19:25:31,452 DEBUG ~ setting SimpleValue typeName for password
20 10 2010 19:25:31,452 DEBUG ~ setting SimpleValue typeName for id
20 10 2010 19:25:31,452 DEBUG ~ setting SimpleValue typeName for content
20 10 2010 19:25:31,452 DEBUG ~ setting SimpleValue typeName for postedAt
20 10 2010 19:25:31,452 DEBUG ~ setting SimpleValue typeName for title
20 10 2010 19:25:31,452 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 19:25:31,453 DEBUG ~ processing extends queue
20 10 2010 19:25:31,453 DEBUG ~ processing collection mappings
20 10 2010 19:25:31,453 DEBUG ~ Second pass for collection: models.Post.comments
20 10 2010 19:25:31,453 DEBUG ~ Binding a OneToMany: models.Post.comments through a foreign key
20 10 2010 19:25:31,453 INFO  ~ Mapping collection: models.Post.comments -> Comment
20 10 2010 19:25:31,453 DEBUG ~ Retrieving property models.Comment.post
20 10 2010 19:25:31,453 DEBUG ~ Mapped collection key: post_id, one-to-many: models.Comment
20 10 2010 19:25:31,453 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 19:25:31,453 DEBUG ~ processing association property references
20 10 2010 19:25:31,453 DEBUG ~ processing foreign key constraints
20 10 2010 19:25:31,453 DEBUG ~ resolving reference to class: models.Post
20 10 2010 19:25:31,453 DEBUG ~ resolving reference to class: models.User
20 10 2010 19:25:31,454 INFO  ~ Hibernate Validator not found: ignoring
20 10 2010 19:25:31,466 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
20 10 2010 19:25:31,467 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
20 10 2010 19:25:31,469 DEBUG ~ Search not present in classpath, ignoring event listener registration.
20 10 2010 19:25:31,469 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
20 10 2010 19:25:31,469 DEBUG ~ Preparing to build session factory with filters : {}
20 10 2010 19:25:31,469 DEBUG ~ Execute first pass mapping processing
20 10 2010 19:25:31,470 DEBUG ~ Process hbm files
20 10 2010 19:25:31,470 DEBUG ~ Process annotated classes
20 10 2010 19:25:31,470 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 19:25:31,470 DEBUG ~ processing extends queue
20 10 2010 19:25:31,470 DEBUG ~ processing collection mappings
20 10 2010 19:25:31,470 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 19:25:31,470 DEBUG ~ processing association property references
20 10 2010 19:25:31,470 DEBUG ~ processing foreign key constraints
20 10 2010 19:25:31,470 DEBUG ~ resolving reference to class: models.Post
20 10 2010 19:25:31,470 DEBUG ~ resolving reference to class: models.User
20 10 2010 19:25:31,472 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
20 10 2010 19:25:31,472 INFO  ~ Using provided datasource
20 10 2010 19:25:31,473 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
20 10 2010 19:25:31,473 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
20 10 2010 19:25:31,473 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
20 10 2010 19:25:31,473 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
20 10 2010 19:25:31,474 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
20 10 2010 19:25:31,474 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
20 10 2010 19:25:31,474 INFO  ~ Automatic flush during beforeCompletion(): disabled
20 10 2010 19:25:31,474 INFO  ~ Automatic session close at end of transaction: disabled
20 10 2010 19:25:31,474 INFO  ~ JDBC batch size: 15
20 10 2010 19:25:31,474 INFO  ~ JDBC batch updates for versioned data: disabled
20 10 2010 19:25:31,474 INFO  ~ Scrollable result sets: enabled
20 10 2010 19:25:31,474 DEBUG ~ Wrap result sets: disabled
20 10 2010 19:25:31,474 INFO  ~ JDBC3 getGeneratedKeys(): disabled
20 10 2010 19:25:31,474 INFO  ~ Connection release mode: auto
20 10 2010 19:25:31,474 INFO  ~ Default batch fetch size: 1
20 10 2010 19:25:31,474 INFO  ~ Generate SQL with comments: disabled
20 10 2010 19:25:31,475 INFO  ~ Order SQL updates by primary key: disabled
20 10 2010 19:25:31,475 INFO  ~ Order SQL inserts for batching: disabled
20 10 2010 19:25:31,475 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
20 10 2010 19:25:31,475 INFO  ~ Using ASTQueryTranslatorFactory
20 10 2010 19:25:31,475 INFO  ~ Query language substitutions: {}
20 10 2010 19:25:31,475 INFO  ~ JPA-QL strict compliance: enabled
20 10 2010 19:25:31,475 INFO  ~ Second-level cache: enabled
20 10 2010 19:25:31,475 INFO  ~ Query cache: disabled
20 10 2010 19:25:31,475 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
20 10 2010 19:25:31,475 INFO  ~ Optimize cache for minimal puts: disabled
20 10 2010 19:25:31,475 INFO  ~ Structured second-level cache entries: disabled
20 10 2010 19:25:31,475 INFO  ~ Statistics: disabled
20 10 2010 19:25:31,475 INFO  ~ Deleted entity synthetic identifier rollback: disabled
20 10 2010 19:25:31,475 INFO  ~ Default entity-mode: pojo
20 10 2010 19:25:31,476 INFO  ~ Named query checking : enabled
20 10 2010 19:25:31,476 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
20 10 2010 19:25:31,479 INFO  ~ building session factory
20 10 2010 19:25:31,480 DEBUG ~ Session factory constructed with filter configurations : {}
20 10 2010 19:25:31,480 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
20 10 2010 19:25:31,480 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:25:31,480 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:25:31,480 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:25:31,487 DEBUG ~ Static SQL for entity: models.Comment
20 10 2010 19:25:31,487 DEBUG ~  Version select: select id from Comment where id =?
20 10 2010 19:25:31,487 DEBUG ~  Snapshot select: select comment_.id, comment_.author as author12_, comment_.content as content12_, comment_.post_id as post5_12_, comment_.postedAt as postedAt12_ from Comment comment_ where comment_.id=?
20 10 2010 19:25:31,487 DEBUG ~  Insert 0: insert into Comment (author, content, post_id, postedAt, id) values (?, ?, ?, ?, ?)
20 10 2010 19:25:31,487 DEBUG ~  Update 0: update Comment set author=?, content=?, post_id=?, postedAt=? where id=?
20 10 2010 19:25:31,487 DEBUG ~  Delete 0: delete from Comment where id=?
20 10 2010 19:25:31,487 DEBUG ~  Identity insert: insert into Comment (id, author, content, post_id, postedAt) values (null, ?, ?, ?, ?)
20 10 2010 19:25:31,493 DEBUG ~ Static SQL for entity: models.Post
20 10 2010 19:25:31,493 DEBUG ~  Version select: select id from Post where id =?
20 10 2010 19:25:31,493 DEBUG ~  Snapshot select: select post_.id, post_.author_id as author5_14_, post_.content as content14_, post_.postedAt as postedAt14_, post_.title as title14_ from Post post_ where post_.id=?
20 10 2010 19:25:31,493 DEBUG ~  Insert 0: insert into Post (author_id, content, postedAt, title, id) values (?, ?, ?, ?, ?)
20 10 2010 19:25:31,493 DEBUG ~  Update 0: update Post set author_id=?, content=?, postedAt=?, title=? where id=?
20 10 2010 19:25:31,493 DEBUG ~  Delete 0: delete from Post where id=?
20 10 2010 19:25:31,493 DEBUG ~  Identity insert: insert into Post (id, author_id, content, postedAt, title) values (null, ?, ?, ?, ?)
20 10 2010 19:25:31,497 DEBUG ~ Static SQL for entity: models.User
20 10 2010 19:25:31,497 DEBUG ~  Version select: select id from User where id =?
20 10 2010 19:25:31,497 DEBUG ~  Snapshot select: select user_.id, user_.email as email13_, user_.fullname as fullname13_, user_.isAdmin as isAdmin13_, user_.password as password13_ from User user_ where user_.id=?
20 10 2010 19:25:31,498 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
20 10 2010 19:25:31,498 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
20 10 2010 19:25:31,498 DEBUG ~  Delete 0: delete from User where id=?
20 10 2010 19:25:31,498 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
20 10 2010 19:25:31,498 DEBUG ~ Static SQL for collection: models.Post.comments
20 10 2010 19:25:31,498 DEBUG ~  Row insert: update Comment set post_id=? where id=?
20 10 2010 19:25:31,498 DEBUG ~  Row delete: update Comment set post_id=null where post_id=? and id=?
20 10 2010 19:25:31,498 DEBUG ~  One-shot delete: update Comment set post_id=null where post_id=?
20 10 2010 19:25:31,499 DEBUG ~ Static select for entity models.Comment [NONE]: select comment0_.id as id12_2_, comment0_.author as author12_2_, comment0_.content as content12_2_, comment0_.post_id as post5_12_2_, comment0_.postedAt as postedAt12_2_, post1_.id as id14_0_, post1_.author_id as author5_14_0_, post1_.content as content14_0_, post1_.postedAt as postedAt14_0_, post1_.title as title14_0_, user2_.id as id13_1_, user2_.email as email13_1_, user2_.fullname as fullname13_1_, user2_.isAdmin as isAdmin13_1_, user2_.password as password13_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
20 10 2010 19:25:31,502 DEBUG ~ Static select for entity models.Comment [READ]: select comment0_.id as id12_2_, comment0_.author as author12_2_, comment0_.content as content12_2_, comment0_.post_id as post5_12_2_, comment0_.postedAt as postedAt12_2_, post1_.id as id14_0_, post1_.author_id as author5_14_0_, post1_.content as content14_0_, post1_.postedAt as postedAt14_0_, post1_.title as title14_0_, user2_.id as id13_1_, user2_.email as email13_1_, user2_.fullname as fullname13_1_, user2_.isAdmin as isAdmin13_1_, user2_.password as password13_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
20 10 2010 19:25:31,503 DEBUG ~ Static select for entity models.Comment [UPGRADE]: select comment0_.id as id12_0_, comment0_.author as author12_0_, comment0_.content as content12_0_, comment0_.post_id as post5_12_0_, comment0_.postedAt as postedAt12_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:25:31,503 DEBUG ~ Static select for entity models.Comment [UPGRADE_NOWAIT]: select comment0_.id as id12_0_, comment0_.author as author12_0_, comment0_.content as content12_0_, comment0_.post_id as post5_12_0_, comment0_.postedAt as postedAt12_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:25:31,504 DEBUG ~ Static select for entity models.Comment [FORCE]: select comment0_.id as id12_0_, comment0_.author as author12_0_, comment0_.content as content12_0_, comment0_.post_id as post5_12_0_, comment0_.postedAt as postedAt12_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:25:31,504 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_READ]: select comment0_.id as id12_0_, comment0_.author as author12_0_, comment0_.content as content12_0_, comment0_.post_id as post5_12_0_, comment0_.postedAt as postedAt12_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:25:31,504 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_WRITE]: select comment0_.id as id12_0_, comment0_.author as author12_0_, comment0_.content as content12_0_, comment0_.post_id as post5_12_0_, comment0_.postedAt as postedAt12_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:25:31,504 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_FORCE_INCREMENT]: select comment0_.id as id12_0_, comment0_.author as author12_0_, comment0_.content as content12_0_, comment0_.post_id as post5_12_0_, comment0_.postedAt as postedAt12_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:25:31,506 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC]: select comment0_.id as id12_2_, comment0_.author as author12_2_, comment0_.content as content12_2_, comment0_.post_id as post5_12_2_, comment0_.postedAt as postedAt12_2_, post1_.id as id14_0_, post1_.author_id as author5_14_0_, post1_.content as content14_0_, post1_.postedAt as postedAt14_0_, post1_.title as title14_0_, user2_.id as id13_1_, user2_.email as email13_1_, user2_.fullname as fullname13_1_, user2_.isAdmin as isAdmin13_1_, user2_.password as password13_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
20 10 2010 19:25:31,508 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC_FORCE_INCREMENT]: select comment0_.id as id12_2_, comment0_.author as author12_2_, comment0_.content as content12_2_, comment0_.post_id as post5_12_2_, comment0_.postedAt as postedAt12_2_, post1_.id as id14_0_, post1_.author_id as author5_14_0_, post1_.content as content14_0_, post1_.postedAt as postedAt14_0_, post1_.title as title14_0_, user2_.id as id13_1_, user2_.email as email13_1_, user2_.fullname as fullname13_1_, user2_.isAdmin as isAdmin13_1_, user2_.password as password13_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
20 10 2010 19:25:31,508 DEBUG ~ Static select for action ACTION_MERGE on entity models.Comment: select comment0_.id as id12_0_, comment0_.author as author12_0_, comment0_.content as content12_0_, comment0_.post_id as post5_12_0_, comment0_.postedAt as postedAt12_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:25:31,509 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Comment: select comment0_.id as id12_0_, comment0_.author as author12_0_, comment0_.content as content12_0_, comment0_.post_id as post5_12_0_, comment0_.postedAt as postedAt12_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:25:31,511 DEBUG ~ Static select for entity models.Post [NONE]: select post0_.id as id14_1_, post0_.author_id as author5_14_1_, post0_.content as content14_1_, post0_.postedAt as postedAt14_1_, post0_.title as title14_1_, user1_.id as id13_0_, user1_.email as email13_0_, user1_.fullname as fullname13_0_, user1_.isAdmin as isAdmin13_0_, user1_.password as password13_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
20 10 2010 19:25:31,512 DEBUG ~ Static select for entity models.Post [READ]: select post0_.id as id14_1_, post0_.author_id as author5_14_1_, post0_.content as content14_1_, post0_.postedAt as postedAt14_1_, post0_.title as title14_1_, user1_.id as id13_0_, user1_.email as email13_0_, user1_.fullname as fullname13_0_, user1_.isAdmin as isAdmin13_0_, user1_.password as password13_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
20 10 2010 19:25:31,512 DEBUG ~ Static select for entity models.Post [UPGRADE]: select post0_.id as id14_0_, post0_.author_id as author5_14_0_, post0_.content as content14_0_, post0_.postedAt as postedAt14_0_, post0_.title as title14_0_ from Post post0_ where post0_.id=?
20 10 2010 19:25:31,512 DEBUG ~ Static select for entity models.Post [UPGRADE_NOWAIT]: select post0_.id as id14_0_, post0_.author_id as author5_14_0_, post0_.content as content14_0_, post0_.postedAt as postedAt14_0_, post0_.title as title14_0_ from Post post0_ where post0_.id=?
20 10 2010 19:25:31,512 DEBUG ~ Static select for entity models.Post [FORCE]: select post0_.id as id14_0_, post0_.author_id as author5_14_0_, post0_.content as content14_0_, post0_.postedAt as postedAt14_0_, post0_.title as title14_0_ from Post post0_ where post0_.id=?
20 10 2010 19:25:31,512 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_READ]: select post0_.id as id14_0_, post0_.author_id as author5_14_0_, post0_.content as content14_0_, post0_.postedAt as postedAt14_0_, post0_.title as title14_0_ from Post post0_ where post0_.id=?
20 10 2010 19:25:31,513 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_WRITE]: select post0_.id as id14_0_, post0_.author_id as author5_14_0_, post0_.content as content14_0_, post0_.postedAt as postedAt14_0_, post0_.title as title14_0_ from Post post0_ where post0_.id=?
20 10 2010 19:25:31,514 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_FORCE_INCREMENT]: select post0_.id as id14_0_, post0_.author_id as author5_14_0_, post0_.content as content14_0_, post0_.postedAt as postedAt14_0_, post0_.title as title14_0_ from Post post0_ where post0_.id=?
20 10 2010 19:25:31,514 DEBUG ~ Static select for entity models.Post [OPTIMISTIC]: select post0_.id as id14_1_, post0_.author_id as author5_14_1_, post0_.content as content14_1_, post0_.postedAt as postedAt14_1_, post0_.title as title14_1_, user1_.id as id13_0_, user1_.email as email13_0_, user1_.fullname as fullname13_0_, user1_.isAdmin as isAdmin13_0_, user1_.password as password13_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
20 10 2010 19:25:31,514 DEBUG ~ Static select for entity models.Post [OPTIMISTIC_FORCE_INCREMENT]: select post0_.id as id14_1_, post0_.author_id as author5_14_1_, post0_.content as content14_1_, post0_.postedAt as postedAt14_1_, post0_.title as title14_1_, user1_.id as id13_0_, user1_.email as email13_0_, user1_.fullname as fullname13_0_, user1_.isAdmin as isAdmin13_0_, user1_.password as password13_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
20 10 2010 19:25:31,515 DEBUG ~ Static select for action ACTION_MERGE on entity models.Post: select post0_.id as id14_1_, post0_.author_id as author5_14_1_, post0_.content as content14_1_, post0_.postedAt as postedAt14_1_, post0_.title as title14_1_, comments1_.post_id as post5_14_3_, comments1_.id as id3_, comments1_.id as id12_0_, comments1_.author as author12_0_, comments1_.content as content12_0_, comments1_.post_id as post5_12_0_, comments1_.postedAt as postedAt12_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post_id where post0_.id=?
20 10 2010 19:25:31,519 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Post: select post0_.id as id14_1_, post0_.author_id as author5_14_1_, post0_.content as content14_1_, post0_.postedAt as postedAt14_1_, post0_.title as title14_1_, comments1_.post_id as post5_14_3_, comments1_.id as id3_, comments1_.id as id12_0_, comments1_.author as author12_0_, comments1_.content as content12_0_, comments1_.post_id as post5_12_0_, comments1_.postedAt as postedAt12_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post_id where post0_.id=?
20 10 2010 19:25:31,519 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
20 10 2010 19:25:31,519 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
20 10 2010 19:25:31,520 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
20 10 2010 19:25:31,520 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
20 10 2010 19:25:31,520 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
20 10 2010 19:25:31,520 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
20 10 2010 19:25:31,520 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
20 10 2010 19:25:31,520 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
20 10 2010 19:25:31,521 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
20 10 2010 19:25:31,521 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
20 10 2010 19:25:31,521 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
20 10 2010 19:25:31,521 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id13_0_, user0_.email as email13_0_, user0_.fullname as fullname13_0_, user0_.isAdmin as isAdmin13_0_, user0_.password as password13_0_ from User user0_ where user0_.id=?
20 10 2010 19:25:31,521 DEBUG ~ Static select for one-to-many models.Post.comments: select comments0_.post_id as post5_14_1_, comments0_.id as id1_, comments0_.id as id12_0_, comments0_.author as author12_0_, comments0_.content as content12_0_, comments0_.post_id as post5_12_0_, comments0_.postedAt as postedAt12_0_ from Comment comments0_ where comments0_.post_id=?
20 10 2010 19:25:31,521 DEBUG ~ registered: 2c9082cd2bc91307012bc92c17810002 (unnamed)
20 10 2010 19:25:31,521 INFO  ~ Not binding factory to JNDI, no JNDI name configured
20 10 2010 19:25:31,521 DEBUG ~ instantiated session factory
20 10 2010 19:25:31,521 DEBUG ~ Execute first pass mapping processing
20 10 2010 19:25:31,521 DEBUG ~ Process hbm files
20 10 2010 19:25:31,522 DEBUG ~ Process annotated classes
20 10 2010 19:25:31,522 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 19:25:31,522 DEBUG ~ processing extends queue
20 10 2010 19:25:31,522 DEBUG ~ processing collection mappings
20 10 2010 19:25:31,522 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 19:25:31,522 DEBUG ~ processing association property references
20 10 2010 19:25:31,522 DEBUG ~ processing foreign key constraints
20 10 2010 19:25:31,522 DEBUG ~ resolving reference to class: models.Post
20 10 2010 19:25:31,522 DEBUG ~ resolving reference to class: models.User
20 10 2010 19:25:31,524 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:25:31,524 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:25:31,524 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:25:31,524 DEBUG ~ Execute first pass mapping processing
20 10 2010 19:25:31,524 DEBUG ~ Process hbm files
20 10 2010 19:25:31,524 DEBUG ~ Process annotated classes
20 10 2010 19:25:31,524 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 19:25:31,524 DEBUG ~ processing extends queue
20 10 2010 19:25:31,524 DEBUG ~ processing collection mappings
20 10 2010 19:25:31,524 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 19:25:31,524 DEBUG ~ processing association property references
20 10 2010 19:25:31,524 DEBUG ~ processing foreign key constraints
20 10 2010 19:25:31,524 DEBUG ~ resolving reference to class: models.Post
20 10 2010 19:25:31,524 DEBUG ~ resolving reference to class: models.User
20 10 2010 19:25:31,526 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:25:31,526 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:25:31,526 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:25:31,527 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:25:31,527 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:25:31,527 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:25:31,527 INFO  ~ Running hbm2ddl schema export
20 10 2010 19:25:31,527 DEBUG ~ import file not found: /import.sql
20 10 2010 19:25:31,527 INFO  ~ exporting generated schema to database
20 10 2010 19:25:31,528 DEBUG ~ alter table Comment drop constraint FK9BDE863F388562DE
20 10 2010 19:25:31,528 DEBUG ~ Unsuccessful: alter table Comment drop constraint FK9BDE863F388562DE
20 10 2010 19:25:31,528 DEBUG ~ Table not found: COMMENT in statement [alter table Comment]
20 10 2010 19:25:31,528 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
20 10 2010 19:25:31,528 DEBUG ~ Unsuccessful: alter table Post drop constraint FK260CC0A7CD013E
20 10 2010 19:25:31,528 DEBUG ~ Table not found: POST in statement [alter table Post]
20 10 2010 19:25:31,528 DEBUG ~ drop table Comment if exists
20 10 2010 19:25:31,529 DEBUG ~ drop table Post if exists
20 10 2010 19:25:31,529 DEBUG ~ drop table User if exists
20 10 2010 19:25:31,529 DEBUG ~ create table Comment (id bigint generated by default as identity (start with 1), author varchar(255), content longvarchar, postedAt timestamp, post_id bigint, primary key (id))
20 10 2010 19:25:31,529 DEBUG ~ create table Post (id bigint generated by default as identity (start with 1), content longvarchar, postedAt timestamp, title varchar(255), author_id bigint, primary key (id))
20 10 2010 19:25:31,529 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
20 10 2010 19:25:31,529 DEBUG ~ alter table Comment add constraint FK9BDE863F388562DE foreign key (post_id) references Post
20 10 2010 19:25:31,529 DEBUG ~ alter table Post add constraint FK260CC0A7CD013E foreign key (author_id) references User
20 10 2010 19:25:31,530 INFO  ~ schema export complete
20 10 2010 19:25:31,530 DEBUG ~ Execute first pass mapping processing
20 10 2010 19:25:31,530 DEBUG ~ Process hbm files
20 10 2010 19:25:31,530 DEBUG ~ Process annotated classes
20 10 2010 19:25:31,530 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 19:25:31,530 DEBUG ~ processing extends queue
20 10 2010 19:25:31,530 DEBUG ~ processing collection mappings
20 10 2010 19:25:31,530 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 19:25:31,530 DEBUG ~ processing association property references
20 10 2010 19:25:31,530 DEBUG ~ processing foreign key constraints
20 10 2010 19:25:31,530 DEBUG ~ resolving reference to class: models.Post
20 10 2010 19:25:31,530 DEBUG ~ resolving reference to class: models.User
20 10 2010 19:25:31,533 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:25:31,533 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:25:31,533 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:25:31,533 DEBUG ~ Execute first pass mapping processing
20 10 2010 19:25:31,533 DEBUG ~ Process hbm files
20 10 2010 19:25:31,533 DEBUG ~ Process annotated classes
20 10 2010 19:25:31,533 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 19:25:31,533 DEBUG ~ processing extends queue
20 10 2010 19:25:31,533 DEBUG ~ processing collection mappings
20 10 2010 19:25:31,533 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 19:25:31,533 DEBUG ~ processing association property references
20 10 2010 19:25:31,533 DEBUG ~ processing foreign key constraints
20 10 2010 19:25:31,533 DEBUG ~ resolving reference to class: models.Post
20 10 2010 19:25:31,533 DEBUG ~ resolving reference to class: models.User
20 10 2010 19:25:31,537 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:25:31,537 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:25:31,537 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:25:31,537 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:25:31,537 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:25:31,537 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:25:31,537 DEBUG ~ Checking 0 named HQL queries
20 10 2010 19:25:31,538 DEBUG ~ Checking 0 named SQL queries
20 10 2010 19:25:31,559 DEBUG ~ opened session at timestamp: 12875703315
20 10 2010 19:25:31,559 DEBUG ~ begin
20 10 2010 19:25:31,560 DEBUG ~ opening JDBC connection
20 10 2010 19:25:31,560 DEBUG ~ current autocommit status: true
20 10 2010 19:25:31,560 DEBUG ~ disabling autocommit
20 10 2010 19:25:31,561 DEBUG ~ parse() - HQL: select count(e) from models.User e
20 10 2010 19:25:31,565 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'User'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

20 10 2010 19:25:31,565 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:25:31,565 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 19:25:31,565 DEBUG ~ FromClause{level=1} :  models.User (e) -> user0_
20 10 2010 19:25:31,565 DEBUG ~ Resolved :  e -> user0_.id
20 10 2010 19:25:31,566 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 19:25:31,566 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count user0_.id ) ) ( FromClause{level=1} User user0_ ) )
20 10 2010 19:25:31,566 DEBUG ~ Using FROM fragment [User user0_]
20 10 2010 19:25:31,566 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 19:25:31,566 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'user0_.id' {alias=e, className=models.User, tableAlias=user0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}

20 10 2010 19:25:31,566 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:25:31,567 DEBUG ~ HQL: select count(e) from models.User e
20 10 2010 19:25:31,567 DEBUG ~ SQL: select count(user0_.id) as col_0_0_ from User user0_
20 10 2010 19:25:31,567 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:25:31,567 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,567 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:25:31,567 DEBUG ~ result row: 
20 10 2010 19:25:31,568 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:25:31,568 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,568 DEBUG ~ initializing non-lazy collections
20 10 2010 19:25:31,581 DEBUG ~ executing identity-insert immediately
20 10 2010 19:25:31,582 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,582 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,582 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,582 DEBUG ~ Natively generated identity: 1
20 10 2010 19:25:31,582 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,583 DEBUG ~ processing flush-time cascades
20 10 2010 19:25:31,583 DEBUG ~ dirty checking collections
20 10 2010 19:25:31,583 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
20 10 2010 19:25:31,583 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
20 10 2010 19:25:31,583 DEBUG ~ listing entities:
20 10 2010 19:25:31,583 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:25:31,586 DEBUG ~ executing identity-insert immediately
20 10 2010 19:25:31,586 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,587 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,587 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,587 DEBUG ~ Natively generated identity: 2
20 10 2010 19:25:31,587 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,587 DEBUG ~ processing flush-time cascades
20 10 2010 19:25:31,587 DEBUG ~ dirty checking collections
20 10 2010 19:25:31,587 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
20 10 2010 19:25:31,587 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
20 10 2010 19:25:31,587 DEBUG ~ listing entities:
20 10 2010 19:25:31,587 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:25:31,588 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:25:31,590 DEBUG ~ parse() - HQL: from models.User where id = ?
20 10 2010 19:25:31,593 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

20 10 2010 19:25:31,593 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:25:31,593 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 19:25:31,593 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
20 10 2010 19:25:31,593 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:25:31,593 DEBUG ~ getDataType() : id -> org.hibernate.type.LongType@34521982
20 10 2010 19:25:31,593 DEBUG ~ Resolved :  {synthetic-alias}.id -> user0_.id
20 10 2010 19:25:31,594 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 19:25:31,594 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.id {synthetic-alias} id ) ? ) ) )
20 10 2010 19:25:31,594 DEBUG ~ Derived SELECT clause created.
20 10 2010 19:25:31,594 DEBUG ~ Using FROM fragment [User user0_]
20 10 2010 19:25:31,594 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 19:25:31,595 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id13_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email13_, user0_.fullname as fullname13_, user0_.isAdmin as isAdmin13_, user0_.password as password13_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.id' {propertyName=id,dereferenceType=ALL,propertyPath=id,path={synthetic-alias}.id,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.LongType@34521982}

20 10 2010 19:25:31,595 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:25:31,595 DEBUG ~ HQL: from models.User where id = ?
20 10 2010 19:25:31,595 DEBUG ~ SQL: select user0_.id as id13_, user0_.email as email13_, user0_.fullname as fullname13_, user0_.isAdmin as isAdmin13_, user0_.password as password13_ from User user0_ where user0_.id=?
20 10 2010 19:25:31,595 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:25:31,596 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,596 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:25:31,596 DEBUG ~ result row: EntityKey[models.User#1]
20 10 2010 19:25:31,596 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:25:31,596 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,596 DEBUG ~ initializing non-lazy collections
20 10 2010 19:25:31,599 DEBUG ~ executing identity-insert immediately
20 10 2010 19:25:31,599 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,600 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,600 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,600 DEBUG ~ Natively generated identity: 1
20 10 2010 19:25:31,600 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,600 DEBUG ~ processing flush-time cascades
20 10 2010 19:25:31,601 DEBUG ~ dirty checking collections
20 10 2010 19:25:31,601 DEBUG ~ Collection found: [models.Post.comments#1], was: [<unreferenced>] (initialized)
20 10 2010 19:25:31,601 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
20 10 2010 19:25:31,601 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
20 10 2010 19:25:31,601 DEBUG ~ listing entities:
20 10 2010 19:25:31,601 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:25:31,601 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 19:25:31,601 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:25:31,605 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,605 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:25:31,605 DEBUG ~ result row: EntityKey[models.User#1]
20 10 2010 19:25:31,605 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:25:31,605 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,605 DEBUG ~ initializing non-lazy collections
20 10 2010 19:25:31,608 DEBUG ~ executing identity-insert immediately
20 10 2010 19:25:31,609 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,609 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,609 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,609 DEBUG ~ Natively generated identity: 2
20 10 2010 19:25:31,609 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,611 DEBUG ~ processing flush-time cascades
20 10 2010 19:25:31,612 DEBUG ~ dirty checking collections
20 10 2010 19:25:31,612 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:25:31,612 DEBUG ~ Collection found: [models.Post.comments#2], was: [<unreferenced>] (initialized)
20 10 2010 19:25:31,612 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
20 10 2010 19:25:31,612 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 2 collections
20 10 2010 19:25:31,612 DEBUG ~ listing entities:
20 10 2010 19:25:31,612 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:25:31,612 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 19:25:31,612 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:25:31,613 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
20 10 2010 19:25:31,616 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,617 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:25:31,617 DEBUG ~ result row: EntityKey[models.User#2]
20 10 2010 19:25:31,617 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:25:31,617 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,617 DEBUG ~ initializing non-lazy collections
20 10 2010 19:25:31,620 DEBUG ~ executing identity-insert immediately
20 10 2010 19:25:31,620 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,620 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,620 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,621 DEBUG ~ Natively generated identity: 3
20 10 2010 19:25:31,621 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,621 DEBUG ~ processing flush-time cascades
20 10 2010 19:25:31,621 DEBUG ~ dirty checking collections
20 10 2010 19:25:31,621 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:25:31,621 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
20 10 2010 19:25:31,622 DEBUG ~ Collection found: [models.Post.comments#3], was: [<unreferenced>] (initialized)
20 10 2010 19:25:31,622 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 5 objects
20 10 2010 19:25:31,622 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 3 collections
20 10 2010 19:25:31,622 DEBUG ~ listing entities:
20 10 2010 19:25:31,622 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:25:31,622 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 19:25:31,622 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:25:31,622 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
20 10 2010 19:25:31,622 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
20 10 2010 19:25:31,626 DEBUG ~ parse() - HQL: from models.Post where id = ?
20 10 2010 19:25:31,639 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

20 10 2010 19:25:31,639 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:25:31,639 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 19:25:31,640 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
20 10 2010 19:25:31,640 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:25:31,640 DEBUG ~ getDataType() : id -> org.hibernate.type.LongType@34521982
20 10 2010 19:25:31,640 DEBUG ~ Resolved :  {synthetic-alias}.id -> post0_.id
20 10 2010 19:25:31,640 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 19:25:31,640 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( = ( post0_.id {synthetic-alias} id ) ? ) ) )
20 10 2010 19:25:31,640 DEBUG ~ Derived SELECT clause created.
20 10 2010 19:25:31,640 DEBUG ~ Using FROM fragment [Post post0_]
20 10 2010 19:25:31,640 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 19:25:31,641 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id14_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_14_, post0_.content as content14_, post0_.postedAt as postedAt14_, post0_.title as title14_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'post0_.id' {propertyName=id,dereferenceType=ALL,propertyPath=id,path={synthetic-alias}.id,tableAlias=post0_,className=models.Post,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.LongType@34521982}

20 10 2010 19:25:31,641 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:25:31,641 DEBUG ~ HQL: from models.Post where id = ?
20 10 2010 19:25:31,641 DEBUG ~ SQL: select post0_.id as id14_, post0_.author_id as author5_14_, post0_.content as content14_, post0_.postedAt as postedAt14_, post0_.title as title14_ from Post post0_ where post0_.id=?
20 10 2010 19:25:31,641 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:25:31,642 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,642 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:25:31,643 DEBUG ~ result row: EntityKey[models.Post#1]
20 10 2010 19:25:31,643 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:25:31,643 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,643 DEBUG ~ initializing non-lazy collections
20 10 2010 19:25:31,645 DEBUG ~ executing identity-insert immediately
20 10 2010 19:25:31,645 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,645 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,645 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,646 DEBUG ~ Natively generated identity: 1
20 10 2010 19:25:31,646 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,646 DEBUG ~ processing flush-time cascades
20 10 2010 19:25:31,646 DEBUG ~ dirty checking collections
20 10 2010 19:25:31,646 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:25:31,646 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
20 10 2010 19:25:31,647 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
20 10 2010 19:25:31,647 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
20 10 2010 19:25:31,647 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
20 10 2010 19:25:31,647 DEBUG ~ listing entities:
20 10 2010 19:25:31,647 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:25:31,647 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:25:31,647 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 19:25:31,647 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:25:31,648 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
20 10 2010 19:25:31,648 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
20 10 2010 19:25:31,651 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,651 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:25:31,651 DEBUG ~ result row: EntityKey[models.Post#1]
20 10 2010 19:25:31,651 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:25:31,651 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,651 DEBUG ~ initializing non-lazy collections
20 10 2010 19:25:31,654 DEBUG ~ executing identity-insert immediately
20 10 2010 19:25:31,654 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,654 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,654 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,654 DEBUG ~ Natively generated identity: 2
20 10 2010 19:25:31,654 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,655 DEBUG ~ processing flush-time cascades
20 10 2010 19:25:31,655 DEBUG ~ dirty checking collections
20 10 2010 19:25:31,655 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:25:31,655 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
20 10 2010 19:25:31,655 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
20 10 2010 19:25:31,655 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 7 objects
20 10 2010 19:25:31,655 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
20 10 2010 19:25:31,655 DEBUG ~ listing entities:
20 10 2010 19:25:31,656 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
20 10 2010 19:25:31,656 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:25:31,656 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:25:31,656 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:25:31,656 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 19:25:31,656 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
20 10 2010 19:25:31,656 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 19:25:31,659 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,660 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:25:31,660 DEBUG ~ result row: EntityKey[models.Post#2]
20 10 2010 19:25:31,660 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:25:31,660 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,660 DEBUG ~ initializing non-lazy collections
20 10 2010 19:25:31,663 DEBUG ~ executing identity-insert immediately
20 10 2010 19:25:31,663 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,663 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,663 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,663 DEBUG ~ Natively generated identity: 3
20 10 2010 19:25:31,663 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,664 DEBUG ~ processing flush-time cascades
20 10 2010 19:25:31,665 DEBUG ~ dirty checking collections
20 10 2010 19:25:31,665 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:25:31,665 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
20 10 2010 19:25:31,665 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
20 10 2010 19:25:31,666 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
20 10 2010 19:25:31,666 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
20 10 2010 19:25:31,666 DEBUG ~ listing entities:
20 10 2010 19:25:31,666 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
20 10 2010 19:25:31,666 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:25:31,666 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:25:31,666 DEBUG ~ models.Comment{content=This post is useless ?
, id=3, author=Tom, post=models.Post#2, postedAt=2009-04-05 09:00:00}
20 10 2010 19:25:31,666 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:25:31,666 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 19:25:31,667 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
20 10 2010 19:25:31,667 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 19:25:31,668 DEBUG ~ commit
20 10 2010 19:25:31,668 DEBUG ~ re-enabling autocommit
20 10 2010 19:25:31,668 DEBUG ~ committed JDBC Connection
20 10 2010 19:25:31,668 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:25:31,668 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:25:31,668 DEBUG ~ opened session at timestamp: 12875703316
20 10 2010 19:25:31,668 DEBUG ~ begin
20 10 2010 19:25:31,668 DEBUG ~ opening JDBC connection
20 10 2010 19:25:31,668 DEBUG ~ current autocommit status: true
20 10 2010 19:25:31,668 DEBUG ~ disabling autocommit
20 10 2010 19:25:31,678 DEBUG ~ loading entity: [models.Post#1]
20 10 2010 19:25:31,678 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,679 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:25:31,679 DEBUG ~ result row: EntityKey[models.User#1], EntityKey[models.Post#1]
20 10 2010 19:25:31,680 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:25:31,680 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,680 DEBUG ~ resolving associations for [models.User#1]
20 10 2010 19:25:31,680 DEBUG ~ done materializing entity [models.User#1]
20 10 2010 19:25:31,680 DEBUG ~ resolving associations for [models.Post#1]
20 10 2010 19:25:31,680 DEBUG ~ done materializing entity [models.Post#1]
20 10 2010 19:25:31,680 DEBUG ~ initializing non-lazy collections
20 10 2010 19:25:31,680 DEBUG ~ done entity load
20 10 2010 19:25:31,680 DEBUG ~ playCache: playMemoryStore miss for 5bc4bc17-5735-4f4f-87e5-818c7b8f0e09
20 10 2010 19:25:31,681 DEBUG ~ play cache - Miss
20 10 2010 19:25:31,777 DEBUG ~ parse() - HQL: from models.Post where postedAt > ? order by postedAt asc
20 10 2010 19:25:31,779 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    +-[WHERE] Node: 'where'
    |  \-[GT] Node: '>'
    |     +-[IDENT] Node: 'postedAt'
    |     \-[PARAM] Node: '?'
    \-[ORDER] Node: 'order'
       +-[IDENT] Node: 'postedAt'
       \-[ASCENDING] Node: 'asc'

20 10 2010 19:25:31,779 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:25:31,779 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 19:25:31,779 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
20 10 2010 19:25:31,779 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:25:31,779 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@5cf99513
20 10 2010 19:25:31,779 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
20 10 2010 19:25:31,779 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:25:31,780 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@5cf99513
20 10 2010 19:25:31,780 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
20 10 2010 19:25:31,780 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 19:25:31,780 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( > ( post0_.postedAt {synthetic-alias} postedAt ) ? ) ) ( order ( post0_.postedAt {synthetic-alias} postedAt ) asc ) )
20 10 2010 19:25:31,780 DEBUG ~ Derived SELECT clause created.
20 10 2010 19:25:31,780 DEBUG ~ Using FROM fragment [Post post0_]
20 10 2010 19:25:31,780 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 19:25:31,781 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id14_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_14_, post0_.content as content14_, post0_.postedAt as postedAt14_, post0_.title as title14_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    +-[WHERE] SqlNode: 'where'
    |  \-[GT] BinaryLogicOperatorNode: '>'
    |     +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
    |     |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
    |     \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.TimestampType@5cf99513}
    \-[ORDER] OrderByClause: 'order'
       +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
       |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
       |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
       \-[ASCENDING] SqlNode: 'asc'

20 10 2010 19:25:31,781 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:25:31,781 DEBUG ~ HQL: from models.Post where postedAt > ? order by postedAt asc
20 10 2010 19:25:31,781 DEBUG ~ SQL: select post0_.id as id14_, post0_.author_id as author5_14_, post0_.content as content14_, post0_.postedAt as postedAt14_, post0_.title as title14_ from Post post0_ where post0_.postedAt>? order by post0_.postedAt asc
20 10 2010 19:25:31,781 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:25:31,781 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,782 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:25:31,782 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:25:31,782 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,782 DEBUG ~ initializing non-lazy collections
20 10 2010 19:25:31,784 DEBUG ~ parse() - HQL: from models.Post where postedAt < ? order by postedAt desc
20 10 2010 19:25:31,787 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    +-[WHERE] Node: 'where'
    |  \-[LT] Node: '<'
    |     +-[IDENT] Node: 'postedAt'
    |     \-[PARAM] Node: '?'
    \-[ORDER] Node: 'order'
       +-[IDENT] Node: 'postedAt'
       \-[DESCENDING] Node: 'desc'

20 10 2010 19:25:31,787 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:25:31,788 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 19:25:31,788 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
20 10 2010 19:25:31,788 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:25:31,789 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@5cf99513
20 10 2010 19:25:31,789 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
20 10 2010 19:25:31,789 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:25:31,789 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@5cf99513
20 10 2010 19:25:31,789 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
20 10 2010 19:25:31,789 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 19:25:31,789 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( < ( post0_.postedAt {synthetic-alias} postedAt ) ? ) ) ( order ( post0_.postedAt {synthetic-alias} postedAt ) desc ) )
20 10 2010 19:25:31,789 DEBUG ~ Derived SELECT clause created.
20 10 2010 19:25:31,789 DEBUG ~ Using FROM fragment [Post post0_]
20 10 2010 19:25:31,790 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 19:25:31,790 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id14_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_14_, post0_.content as content14_, post0_.postedAt as postedAt14_, post0_.title as title14_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    +-[WHERE] SqlNode: 'where'
    |  \-[LT] BinaryLogicOperatorNode: '<'
    |     +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
    |     |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
    |     \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.TimestampType@5cf99513}
    \-[ORDER] OrderByClause: 'order'
       +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
       |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
       |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
       \-[DESCENDING] SqlNode: 'desc'

20 10 2010 19:25:31,790 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:25:31,790 DEBUG ~ HQL: from models.Post where postedAt < ? order by postedAt desc
20 10 2010 19:25:31,790 DEBUG ~ SQL: select post0_.id as id14_, post0_.author_id as author5_14_, post0_.content as content14_, post0_.postedAt as postedAt14_, post0_.title as title14_ from Post post0_ where post0_.postedAt<? order by post0_.postedAt desc
20 10 2010 19:25:31,791 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:25:31,791 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,792 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:25:31,792 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:25:31,792 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:25:31,792 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,792 DEBUG ~ resolving associations for [models.Post#3]
20 10 2010 19:25:31,792 DEBUG ~ loading entity: [models.User#2]
20 10 2010 19:25:31,792 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,792 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:25:31,792 DEBUG ~ result row: EntityKey[models.User#2]
20 10 2010 19:25:31,793 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:25:31,793 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,793 DEBUG ~ resolving associations for [models.User#2]
20 10 2010 19:25:31,793 DEBUG ~ done materializing entity [models.User#2]
20 10 2010 19:25:31,793 DEBUG ~ done entity load
20 10 2010 19:25:31,793 DEBUG ~ done materializing entity [models.Post#3]
20 10 2010 19:25:31,793 DEBUG ~ initializing non-lazy collections
20 10 2010 19:25:31,793 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,794 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:25:31,794 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:25:31,794 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:25:31,794 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,794 DEBUG ~ initializing non-lazy collections
20 10 2010 19:25:31,795 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,795 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:25:31,795 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:25:31,795 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:25:31,795 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,795 DEBUG ~ initializing non-lazy collections
20 10 2010 19:25:31,819 DEBUG ~ loading collection: [models.Post.comments#1]
20 10 2010 19:25:31,819 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:31,820 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:25:31,820 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
20 10 2010 19:25:31,820 DEBUG ~ result row: EntityKey[models.Comment#1]
20 10 2010 19:25:31,820 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:25:31,821 DEBUG ~ result row: EntityKey[models.Comment#2]
20 10 2010 19:25:31,821 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:25:31,821 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:25:31,821 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:31,821 DEBUG ~ resolving associations for [models.Comment#1]
20 10 2010 19:25:31,821 DEBUG ~ done materializing entity [models.Comment#1]
20 10 2010 19:25:31,821 DEBUG ~ resolving associations for [models.Comment#2]
20 10 2010 19:25:31,821 DEBUG ~ done materializing entity [models.Comment#2]
20 10 2010 19:25:31,821 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
20 10 2010 19:25:31,821 DEBUG ~ collection fully initialized: [models.Post.comments#1]
20 10 2010 19:25:31,821 DEBUG ~ 1 collections initialized for role: models.Post.comments
20 10 2010 19:25:31,821 DEBUG ~ initializing non-lazy collections
20 10 2010 19:25:31,821 DEBUG ~ done loading collection
20 10 2010 19:25:31,851 DEBUG ~ commit
20 10 2010 19:25:31,851 DEBUG ~ processing flush-time cascades
20 10 2010 19:25:31,851 DEBUG ~ dirty checking collections
20 10 2010 19:25:31,851 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:25:31,851 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (uninitialized)
20 10 2010 19:25:31,851 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
20 10 2010 19:25:31,852 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
20 10 2010 19:25:31,852 DEBUG ~ listing entities:
20 10 2010 19:25:31,852 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:25:31,852 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:25:31,852 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2], postedAt=2009-06-14 09:00:00}
20 10 2010 19:25:31,852 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:25:31,852 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 19:25:31,852 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=<uninitialized>, postedAt=2009-06-06 09:00:00}
20 10 2010 19:25:31,853 DEBUG ~ re-enabling autocommit
20 10 2010 19:25:31,853 DEBUG ~ committed JDBC Connection
20 10 2010 19:25:31,853 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:25:31,853 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:25:31,930 DEBUG ~ opened session at timestamp: 12875703319
20 10 2010 19:25:31,930 DEBUG ~ begin
20 10 2010 19:25:31,930 DEBUG ~ opening JDBC connection
20 10 2010 19:25:31,930 DEBUG ~ current autocommit status: true
20 10 2010 19:25:31,930 DEBUG ~ disabling autocommit
20 10 2010 19:25:31,951 DEBUG ~ commit
20 10 2010 19:25:31,953 DEBUG ~ re-enabling autocommit
20 10 2010 19:25:31,953 DEBUG ~ committed JDBC Connection
20 10 2010 19:25:31,953 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:25:31,953 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:25:49,037 DEBUG ~ opened session at timestamp: 12875703490
20 10 2010 19:25:49,037 DEBUG ~ begin
20 10 2010 19:25:49,037 DEBUG ~ opening JDBC connection
20 10 2010 19:25:49,037 DEBUG ~ current autocommit status: true
20 10 2010 19:25:49,037 DEBUG ~ disabling autocommit
20 10 2010 19:25:49,042 DEBUG ~ loading entity: [models.Post#1]
20 10 2010 19:25:49,042 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:25:49,043 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:25:49,043 DEBUG ~ result row: EntityKey[models.User#1], EntityKey[models.Post#1]
20 10 2010 19:25:49,043 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:25:49,043 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:25:49,043 DEBUG ~ resolving associations for [models.User#1]
20 10 2010 19:25:49,043 DEBUG ~ done materializing entity [models.User#1]
20 10 2010 19:25:49,043 DEBUG ~ resolving associations for [models.Post#1]
20 10 2010 19:25:49,044 DEBUG ~ done materializing entity [models.Post#1]
20 10 2010 19:25:49,044 DEBUG ~ initializing non-lazy collections
20 10 2010 19:25:49,044 DEBUG ~ done entity load
20 10 2010 19:25:49,044 DEBUG ~ playCache: playMemoryStore hit for 5bc4bc17-5735-4f4f-87e5-818c7b8f0e09
20 10 2010 19:25:49,046 DEBUG ~ rollback
20 10 2010 19:25:49,046 DEBUG ~ re-enabling autocommit
20 10 2010 19:25:49,046 DEBUG ~ rolled back JDBC Connection
20 10 2010 19:25:49,046 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:25:49,046 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:25:49,319 ERROR ~ 

@6480kedbl
Internal Server Error (500) for request POST /posts/1/comments

Execution exception (In /app/controllers/Application.scala around line 43)
ClassCastException occured : java.lang.String cannot be cast to scala.runtime.Nothing$

play.exceptions.JavaExecutionException: java.lang.String cannot be cast to scala.runtime.Nothing$
	at play.mvc.ActionInvoker.invoke(ActionInvoker.java:285)
	at Invocation.HTTP Request(Play!)
Caused by: java.lang.ClassCastException: java.lang.String cannot be cast to scala.runtime.Nothing$
	at controllers.Application$.postComment(/app/controllers/Application.scala:43)
	at play.mvc.ActionInvoker.invokeControllerMethod(ActionInvoker.java:420)
	at play.mvc.ActionInvoker.invokeControllerMethod(ActionInvoker.java:403)
	at play.mvc.ActionInvoker.invoke(ActionInvoker.java:176)
	... 1 more
20 10 2010 19:26:31,597 DEBUG ~ opened session at timestamp: 12875703915
20 10 2010 19:26:31,597 DEBUG ~ begin
20 10 2010 19:26:31,597 DEBUG ~ opening JDBC connection
20 10 2010 19:26:31,597 DEBUG ~ current autocommit status: true
20 10 2010 19:26:31,597 DEBUG ~ disabling autocommit
20 10 2010 19:26:31,599 DEBUG ~ parse() - HQL: from models.Post order by postedAt desc
20 10 2010 19:26:31,601 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[ORDER] Node: 'order'
       +-[IDENT] Node: 'postedAt'
       \-[DESCENDING] Node: 'desc'

20 10 2010 19:26:31,601 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:26:31,601 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 19:26:31,602 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
20 10 2010 19:26:31,602 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:26:31,602 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@5cf99513
20 10 2010 19:26:31,602 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
20 10 2010 19:26:31,602 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 19:26:31,602 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( order ( post0_.postedAt {synthetic-alias} postedAt ) desc ) )
20 10 2010 19:26:31,602 DEBUG ~ Derived SELECT clause created.
20 10 2010 19:26:31,602 DEBUG ~ Using FROM fragment [Post post0_]
20 10 2010 19:26:31,602 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 19:26:31,603 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id14_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_14_, post0_.content as content14_, post0_.postedAt as postedAt14_, post0_.title as title14_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[ORDER] OrderByClause: 'order'
       +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
       |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
       |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
       \-[DESCENDING] SqlNode: 'desc'

20 10 2010 19:26:31,603 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:26:31,603 DEBUG ~ HQL: from models.Post order by postedAt desc
20 10 2010 19:26:31,603 DEBUG ~ SQL: select post0_.id as id14_, post0_.author_id as author5_14_, post0_.content as content14_, post0_.postedAt as postedAt14_, post0_.title as title14_ from Post post0_ order by post0_.postedAt desc
20 10 2010 19:26:31,603 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:26:31,604 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:26:31,604 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:26:31,604 DEBUG ~ result row: EntityKey[models.Post#1]
20 10 2010 19:26:31,604 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:26:31,604 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:26:31,604 DEBUG ~ resolving associations for [models.Post#1]
20 10 2010 19:26:31,605 DEBUG ~ loading entity: [models.User#1]
20 10 2010 19:26:31,605 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:26:31,605 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:26:31,605 DEBUG ~ result row: EntityKey[models.User#1]
20 10 2010 19:26:31,605 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:26:31,605 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:26:31,605 DEBUG ~ resolving associations for [models.User#1]
20 10 2010 19:26:31,605 DEBUG ~ done materializing entity [models.User#1]
20 10 2010 19:26:31,605 DEBUG ~ done entity load
20 10 2010 19:26:31,605 DEBUG ~ done materializing entity [models.Post#1]
20 10 2010 19:26:31,605 DEBUG ~ initializing non-lazy collections
20 10 2010 19:26:31,606 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:26:31,606 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:26:31,606 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:26:31,606 DEBUG ~ result row: EntityKey[models.Post#2]
20 10 2010 19:26:31,606 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:26:31,606 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:26:31,606 DEBUG ~ resolving associations for [models.Post#3]
20 10 2010 19:26:31,606 DEBUG ~ loading entity: [models.User#2]
20 10 2010 19:26:31,607 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:26:31,607 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:26:31,607 DEBUG ~ result row: EntityKey[models.User#2]
20 10 2010 19:26:31,607 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:26:31,607 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:26:31,607 DEBUG ~ resolving associations for [models.User#2]
20 10 2010 19:26:31,607 DEBUG ~ done materializing entity [models.User#2]
20 10 2010 19:26:31,607 DEBUG ~ done entity load
20 10 2010 19:26:31,607 DEBUG ~ done materializing entity [models.Post#3]
20 10 2010 19:26:31,607 DEBUG ~ resolving associations for [models.Post#2]
20 10 2010 19:26:31,607 DEBUG ~ done materializing entity [models.Post#2]
20 10 2010 19:26:31,607 DEBUG ~ initializing non-lazy collections
20 10 2010 19:26:31,627 DEBUG ~ loading collection: [models.Post.comments#1]
20 10 2010 19:26:31,627 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:26:31,628 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:26:31,628 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
20 10 2010 19:26:31,628 DEBUG ~ result row: EntityKey[models.Comment#1]
20 10 2010 19:26:31,628 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:26:31,628 DEBUG ~ result row: EntityKey[models.Comment#2]
20 10 2010 19:26:31,629 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:26:31,629 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:26:31,629 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:26:31,629 DEBUG ~ resolving associations for [models.Comment#1]
20 10 2010 19:26:31,629 DEBUG ~ done materializing entity [models.Comment#1]
20 10 2010 19:26:31,629 DEBUG ~ resolving associations for [models.Comment#2]
20 10 2010 19:26:31,630 DEBUG ~ done materializing entity [models.Comment#2]
20 10 2010 19:26:31,630 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
20 10 2010 19:26:31,630 DEBUG ~ collection fully initialized: [models.Post.comments#1]
20 10 2010 19:26:31,630 DEBUG ~ 1 collections initialized for role: models.Post.comments
20 10 2010 19:26:31,630 DEBUG ~ initializing non-lazy collections
20 10 2010 19:26:31,630 DEBUG ~ done loading collection
20 10 2010 19:26:31,635 DEBUG ~ loading collection: [models.Post.comments#3]
20 10 2010 19:26:31,635 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:26:31,636 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:26:31,636 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#3]
20 10 2010 19:26:31,636 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:26:31,636 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:26:31,636 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
20 10 2010 19:26:31,636 DEBUG ~ collection fully initialized: [models.Post.comments#3]
20 10 2010 19:26:31,636 DEBUG ~ 1 collections initialized for role: models.Post.comments
20 10 2010 19:26:31,636 DEBUG ~ initializing non-lazy collections
20 10 2010 19:26:31,636 DEBUG ~ done loading collection
20 10 2010 19:26:31,639 DEBUG ~ loading collection: [models.Post.comments#2]
20 10 2010 19:26:31,639 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:26:31,639 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:26:31,639 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#2]
20 10 2010 19:26:31,639 DEBUG ~ result row: EntityKey[models.Comment#3]
20 10 2010 19:26:31,640 DEBUG ~ found row of collection: [models.Post.comments#2]
20 10 2010 19:26:31,641 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:26:31,641 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:26:31,641 DEBUG ~ resolving associations for [models.Comment#3]
20 10 2010 19:26:31,641 DEBUG ~ done materializing entity [models.Comment#3]
20 10 2010 19:26:31,641 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
20 10 2010 19:26:31,641 DEBUG ~ collection fully initialized: [models.Post.comments#2]
20 10 2010 19:26:31,641 DEBUG ~ 1 collections initialized for role: models.Post.comments
20 10 2010 19:26:31,641 DEBUG ~ initializing non-lazy collections
20 10 2010 19:26:31,641 DEBUG ~ done loading collection
20 10 2010 19:26:31,654 DEBUG ~ commit
20 10 2010 19:26:31,654 DEBUG ~ processing flush-time cascades
20 10 2010 19:26:31,654 DEBUG ~ dirty checking collections
20 10 2010 19:26:31,654 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:26:31,655 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
20 10 2010 19:26:31,655 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
20 10 2010 19:26:31,655 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
20 10 2010 19:26:31,655 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
20 10 2010 19:26:31,655 DEBUG ~ listing entities:
20 10 2010 19:26:31,655 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
20 10 2010 19:26:31,655 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:26:31,655 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:26:31,655 DEBUG ~ models.Comment{content=This post is useless ?
, id=3, author=Tom, post=models.Post#2, postedAt=2009-04-05 09:00:00}
20 10 2010 19:26:31,656 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2], postedAt=2009-06-14 09:00:00}
20 10 2010 19:26:31,656 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:26:31,656 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[models.Comment#3], postedAt=2009-03-25 09:00:00}
20 10 2010 19:26:31,656 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 19:26:31,656 DEBUG ~ re-enabling autocommit
20 10 2010 19:26:31,656 DEBUG ~ committed JDBC Connection
20 10 2010 19:26:31,656 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:26:31,656 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:26:33,516 DEBUG ~ opened session at timestamp: 12875703935
20 10 2010 19:26:33,516 DEBUG ~ begin
20 10 2010 19:26:33,516 DEBUG ~ opening JDBC connection
20 10 2010 19:26:33,516 DEBUG ~ current autocommit status: true
20 10 2010 19:26:33,516 DEBUG ~ disabling autocommit
20 10 2010 19:26:33,518 DEBUG ~ loading entity: [models.Post#1]
20 10 2010 19:26:33,518 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:26:33,518 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:26:33,518 DEBUG ~ result row: EntityKey[models.User#1], EntityKey[models.Post#1]
20 10 2010 19:26:33,519 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:26:33,519 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:26:33,519 DEBUG ~ resolving associations for [models.User#1]
20 10 2010 19:26:33,519 DEBUG ~ done materializing entity [models.User#1]
20 10 2010 19:26:33,519 DEBUG ~ resolving associations for [models.Post#1]
20 10 2010 19:26:33,519 DEBUG ~ done materializing entity [models.Post#1]
20 10 2010 19:26:33,519 DEBUG ~ initializing non-lazy collections
20 10 2010 19:26:33,519 DEBUG ~ done entity load
20 10 2010 19:26:33,522 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:26:33,522 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:26:33,522 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:26:33,522 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:26:33,522 DEBUG ~ initializing non-lazy collections
20 10 2010 19:26:33,523 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:26:33,523 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:26:33,523 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:26:33,523 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:26:33,523 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:26:33,523 DEBUG ~ resolving associations for [models.Post#3]
20 10 2010 19:26:33,523 DEBUG ~ loading entity: [models.User#2]
20 10 2010 19:26:33,523 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:26:33,524 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:26:33,524 DEBUG ~ result row: EntityKey[models.User#2]
20 10 2010 19:26:33,524 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:26:33,524 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:26:33,524 DEBUG ~ resolving associations for [models.User#2]
20 10 2010 19:26:33,524 DEBUG ~ done materializing entity [models.User#2]
20 10 2010 19:26:33,524 DEBUG ~ done entity load
20 10 2010 19:26:33,524 DEBUG ~ done materializing entity [models.Post#3]
20 10 2010 19:26:33,524 DEBUG ~ initializing non-lazy collections
20 10 2010 19:26:33,525 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:26:33,525 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:26:33,525 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:26:33,525 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:26:33,525 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:26:33,525 DEBUG ~ initializing non-lazy collections
20 10 2010 19:26:33,526 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:26:33,526 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:26:33,526 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:26:33,526 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:26:33,526 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:26:33,526 DEBUG ~ initializing non-lazy collections
20 10 2010 19:26:33,529 DEBUG ~ loading collection: [models.Post.comments#1]
20 10 2010 19:26:33,529 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:26:33,530 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:26:33,530 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
20 10 2010 19:26:33,530 DEBUG ~ result row: EntityKey[models.Comment#1]
20 10 2010 19:26:33,530 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:26:33,530 DEBUG ~ result row: EntityKey[models.Comment#2]
20 10 2010 19:26:33,530 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:26:33,530 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:26:33,530 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:26:33,530 DEBUG ~ resolving associations for [models.Comment#1]
20 10 2010 19:26:33,530 DEBUG ~ done materializing entity [models.Comment#1]
20 10 2010 19:26:33,530 DEBUG ~ resolving associations for [models.Comment#2]
20 10 2010 19:26:33,531 DEBUG ~ done materializing entity [models.Comment#2]
20 10 2010 19:26:33,531 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
20 10 2010 19:26:33,531 DEBUG ~ collection fully initialized: [models.Post.comments#1]
20 10 2010 19:26:33,531 DEBUG ~ 1 collections initialized for role: models.Post.comments
20 10 2010 19:26:33,531 DEBUG ~ initializing non-lazy collections
20 10 2010 19:26:33,532 DEBUG ~ done loading collection
20 10 2010 19:26:33,539 DEBUG ~ commit
20 10 2010 19:26:33,539 DEBUG ~ processing flush-time cascades
20 10 2010 19:26:33,540 DEBUG ~ dirty checking collections
20 10 2010 19:26:33,540 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:26:33,540 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (uninitialized)
20 10 2010 19:26:33,541 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
20 10 2010 19:26:33,541 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
20 10 2010 19:26:33,541 DEBUG ~ listing entities:
20 10 2010 19:26:33,541 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:26:33,541 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:26:33,541 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2], postedAt=2009-06-14 09:00:00}
20 10 2010 19:26:33,541 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:26:33,542 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 19:26:33,542 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=<uninitialized>, postedAt=2009-06-06 09:00:00}
20 10 2010 19:26:33,542 DEBUG ~ re-enabling autocommit
20 10 2010 19:26:33,542 DEBUG ~ committed JDBC Connection
20 10 2010 19:26:33,542 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:26:33,542 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:26:33,602 DEBUG ~ opened session at timestamp: 12875703936
20 10 2010 19:26:33,602 DEBUG ~ begin
20 10 2010 19:26:33,602 DEBUG ~ opening JDBC connection
20 10 2010 19:26:33,602 DEBUG ~ current autocommit status: true
20 10 2010 19:26:33,602 DEBUG ~ disabling autocommit
20 10 2010 19:26:33,624 DEBUG ~ commit
20 10 2010 19:26:33,624 DEBUG ~ re-enabling autocommit
20 10 2010 19:26:33,624 DEBUG ~ committed JDBC Connection
20 10 2010 19:26:33,624 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:26:33,624 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:26:44,634 DEBUG ~ opened session at timestamp: 12875704046
20 10 2010 19:26:44,634 DEBUG ~ begin
20 10 2010 19:26:44,634 DEBUG ~ opening JDBC connection
20 10 2010 19:26:44,634 DEBUG ~ current autocommit status: true
20 10 2010 19:26:44,634 DEBUG ~ disabling autocommit
20 10 2010 19:26:44,640 DEBUG ~ loading entity: [models.Post#1]
20 10 2010 19:26:44,640 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:26:44,640 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:26:44,640 DEBUG ~ result row: EntityKey[models.User#1], EntityKey[models.Post#1]
20 10 2010 19:26:44,640 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:26:44,640 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:26:44,641 DEBUG ~ resolving associations for [models.User#1]
20 10 2010 19:26:44,641 DEBUG ~ done materializing entity [models.User#1]
20 10 2010 19:26:44,641 DEBUG ~ resolving associations for [models.Post#1]
20 10 2010 19:26:44,641 DEBUG ~ done materializing entity [models.Post#1]
20 10 2010 19:26:44,641 DEBUG ~ initializing non-lazy collections
20 10 2010 19:26:44,641 DEBUG ~ done entity load
20 10 2010 19:26:44,641 DEBUG ~ playCache: playMemoryStore hit for 18ab4a6a-61e0-4623-b649-c982b0fa5d39
20 10 2010 19:26:44,641 DEBUG ~ rollback
20 10 2010 19:26:44,641 DEBUG ~ re-enabling autocommit
20 10 2010 19:26:44,641 DEBUG ~ rolled back JDBC Connection
20 10 2010 19:26:44,641 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:26:44,641 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:26:44,654 ERROR ~ 

@6480kedbm
Internal Server Error (500) for request POST /posts/1/comments

Execution exception (In /app/controllers/Application.scala around line 43)
ClassCastException occured : java.lang.String cannot be cast to scala.runtime.Nothing$

play.exceptions.JavaExecutionException: java.lang.String cannot be cast to scala.runtime.Nothing$
	at play.mvc.ActionInvoker.invoke(ActionInvoker.java:285)
	at Invocation.HTTP Request(Play!)
Caused by: java.lang.ClassCastException: java.lang.String cannot be cast to scala.runtime.Nothing$
	at controllers.Application$.postComment(/app/controllers/Application.scala:43)
	at play.mvc.ActionInvoker.invokeControllerMethod(ActionInvoker.java:420)
	at play.mvc.ActionInvoker.invokeControllerMethod(ActionInvoker.java:403)
	at play.mvc.ActionInvoker.invoke(ActionInvoker.java:176)
	... 1 more
20 10 2010 19:27:12,008 ERROR ~ 

@6480kedbn
Internal Server Error (500) for request POST /posts/1/comments

Compilation error (In /app/controllers/Application.scala around line 53)
The file /app/controllers/Application.scala could not be compiled. Error raised is : pattern type is incompatible with expected type;  found   : String  required: Nothing

play.exceptions.CompilationException: pattern type is incompatible with expected type;
 found   : String
 required: Nothing
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anon$1.info0(ScalaPlugin.scala:162)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply$mcV$sp(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler$$anonfun$compile$1.apply(ScalaPlugin.scala:319)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:71)
	at scala.Console$.withOut(Console.scala:81)
	at play.scalasupport.core.ScalaPlugin$ScalaCompiler.compile(ScalaPlugin.scala:318)
	at play.scalasupport.core.ScalaPlugin.compile(ScalaPlugin.scala:149)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:134)
	at play.scalasupport.core.ScalaPlugin.onClassesChange(ScalaPlugin.scala:39)
	at play.classloading.ApplicationClassloader.detectChanges(ApplicationClassloader.java:286)
	at play.Play.detectChanges(Play.java:486)
	at play.Invoker$Invocation.init(Invoker.java:100)
	at Invocation.HTTP Request(Play!)
20 10 2010 19:28:25,898 DEBUG ~ opened session at timestamp: 12875705058
20 10 2010 19:28:25,898 DEBUG ~ begin
20 10 2010 19:28:25,898 DEBUG ~ opening JDBC connection
20 10 2010 19:28:25,899 DEBUG ~ current autocommit status: true
20 10 2010 19:28:25,899 DEBUG ~ disabling autocommit
20 10 2010 19:28:25,905 DEBUG ~ loading entity: [models.Post#1]
20 10 2010 19:28:25,905 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:28:25,905 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:28:25,905 DEBUG ~ result row: EntityKey[models.User#1], EntityKey[models.Post#1]
20 10 2010 19:28:25,906 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:28:25,906 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:28:25,906 DEBUG ~ resolving associations for [models.User#1]
20 10 2010 19:28:25,906 DEBUG ~ done materializing entity [models.User#1]
20 10 2010 19:28:25,906 DEBUG ~ resolving associations for [models.Post#1]
20 10 2010 19:28:25,906 DEBUG ~ done materializing entity [models.Post#1]
20 10 2010 19:28:25,906 DEBUG ~ initializing non-lazy collections
20 10 2010 19:28:25,906 DEBUG ~ done entity load
20 10 2010 19:28:25,906 DEBUG ~ playCache: playMemoryStore miss for 18ab4a6a-61e0-4623-b649-c982b0fa5d39
20 10 2010 19:28:25,906 DEBUG ~ play cache - Miss
20 10 2010 19:28:25,909 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:28:25,909 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:28:25,909 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:28:25,909 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:28:25,909 DEBUG ~ initializing non-lazy collections
20 10 2010 19:28:25,909 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:28:25,910 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:28:25,910 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:28:25,910 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:28:25,910 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:28:25,910 DEBUG ~ resolving associations for [models.Post#3]
20 10 2010 19:28:25,910 DEBUG ~ loading entity: [models.User#2]
20 10 2010 19:28:25,910 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:28:25,911 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:28:25,911 DEBUG ~ result row: EntityKey[models.User#2]
20 10 2010 19:28:25,911 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:28:25,911 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:28:25,911 DEBUG ~ resolving associations for [models.User#2]
20 10 2010 19:28:25,911 DEBUG ~ done materializing entity [models.User#2]
20 10 2010 19:28:25,911 DEBUG ~ done entity load
20 10 2010 19:28:25,911 DEBUG ~ done materializing entity [models.Post#3]
20 10 2010 19:28:25,911 DEBUG ~ initializing non-lazy collections
20 10 2010 19:28:25,911 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:28:25,912 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:28:25,912 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:28:25,912 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:28:25,912 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:28:25,912 DEBUG ~ initializing non-lazy collections
20 10 2010 19:28:25,912 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:28:25,913 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:28:25,913 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:28:25,913 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:28:25,913 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:28:25,913 DEBUG ~ initializing non-lazy collections
20 10 2010 19:28:25,916 DEBUG ~ loading collection: [models.Post.comments#1]
20 10 2010 19:28:25,916 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:28:25,916 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:28:25,916 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
20 10 2010 19:28:25,916 DEBUG ~ result row: EntityKey[models.Comment#1]
20 10 2010 19:28:25,917 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:28:25,917 DEBUG ~ result row: EntityKey[models.Comment#2]
20 10 2010 19:28:25,917 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:28:25,917 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:28:25,917 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:28:25,917 DEBUG ~ resolving associations for [models.Comment#1]
20 10 2010 19:28:25,917 DEBUG ~ done materializing entity [models.Comment#1]
20 10 2010 19:28:25,917 DEBUG ~ resolving associations for [models.Comment#2]
20 10 2010 19:28:25,917 DEBUG ~ done materializing entity [models.Comment#2]
20 10 2010 19:28:25,917 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
20 10 2010 19:28:25,917 DEBUG ~ collection fully initialized: [models.Post.comments#1]
20 10 2010 19:28:25,917 DEBUG ~ 1 collections initialized for role: models.Post.comments
20 10 2010 19:28:25,918 DEBUG ~ initializing non-lazy collections
20 10 2010 19:28:25,918 DEBUG ~ done loading collection
20 10 2010 19:28:25,924 DEBUG ~ commit
20 10 2010 19:28:25,924 DEBUG ~ processing flush-time cascades
20 10 2010 19:28:25,924 DEBUG ~ dirty checking collections
20 10 2010 19:28:25,925 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:28:25,925 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (uninitialized)
20 10 2010 19:28:25,925 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
20 10 2010 19:28:25,925 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
20 10 2010 19:28:25,925 DEBUG ~ listing entities:
20 10 2010 19:28:25,925 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:28:25,925 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:28:25,926 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2], postedAt=2009-06-14 09:00:00}
20 10 2010 19:28:25,926 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:28:25,926 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 19:28:25,926 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=<uninitialized>, postedAt=2009-06-06 09:00:00}
20 10 2010 19:28:25,926 DEBUG ~ re-enabling autocommit
20 10 2010 19:28:25,926 DEBUG ~ committed JDBC Connection
20 10 2010 19:28:25,926 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:28:25,926 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:28:26,008 DEBUG ~ opened session at timestamp: 12875705060
20 10 2010 19:28:26,008 DEBUG ~ begin
20 10 2010 19:28:26,008 DEBUG ~ opening JDBC connection
20 10 2010 19:28:26,008 DEBUG ~ current autocommit status: true
20 10 2010 19:28:26,008 DEBUG ~ disabling autocommit
20 10 2010 19:28:26,031 DEBUG ~ commit
20 10 2010 19:28:26,031 DEBUG ~ re-enabling autocommit
20 10 2010 19:28:26,031 DEBUG ~ committed JDBC Connection
20 10 2010 19:28:26,031 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:28:26,031 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:28:36,018 DEBUG ~ opened session at timestamp: 12875705160
20 10 2010 19:28:36,018 DEBUG ~ begin
20 10 2010 19:28:36,018 DEBUG ~ opening JDBC connection
20 10 2010 19:28:36,018 DEBUG ~ current autocommit status: true
20 10 2010 19:28:36,018 DEBUG ~ disabling autocommit
20 10 2010 19:28:36,024 DEBUG ~ loading entity: [models.Post#1]
20 10 2010 19:28:36,024 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:28:36,025 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:28:36,025 DEBUG ~ result row: EntityKey[models.User#1], EntityKey[models.Post#1]
20 10 2010 19:28:36,026 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:28:36,026 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:28:36,026 DEBUG ~ resolving associations for [models.User#1]
20 10 2010 19:28:36,026 DEBUG ~ done materializing entity [models.User#1]
20 10 2010 19:28:36,026 DEBUG ~ resolving associations for [models.Post#1]
20 10 2010 19:28:36,027 DEBUG ~ done materializing entity [models.Post#1]
20 10 2010 19:28:36,027 DEBUG ~ initializing non-lazy collections
20 10 2010 19:28:36,027 DEBUG ~ done entity load
20 10 2010 19:28:36,027 DEBUG ~ playCache: playMemoryStore hit for 18ab4a6a-61e0-4623-b649-c982b0fa5d39
20 10 2010 19:28:36,027 DEBUG ~ rollback
20 10 2010 19:28:36,027 DEBUG ~ re-enabling autocommit
20 10 2010 19:28:36,027 DEBUG ~ rolled back JDBC Connection
20 10 2010 19:28:36,027 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:28:36,027 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:28:36,040 ERROR ~ 

@6480kedbo
Internal Server Error (500) for request POST /posts/1/comments

Execution exception (In /app/controllers/Application.scala around line 43)
ClassCastException occured : java.lang.String cannot be cast to scala.runtime.Nothing$

play.exceptions.JavaExecutionException: java.lang.String cannot be cast to scala.runtime.Nothing$
	at play.mvc.ActionInvoker.invoke(ActionInvoker.java:285)
	at Invocation.HTTP Request(Play!)
Caused by: java.lang.ClassCastException: java.lang.String cannot be cast to scala.runtime.Nothing$
	at controllers.Application$.postComment(/app/controllers/Application.scala:43)
	at play.mvc.ActionInvoker.invokeControllerMethod(ActionInvoker.java:420)
	at play.mvc.ActionInvoker.invokeControllerMethod(ActionInvoker.java:403)
	at play.mvc.ActionInvoker.invoke(ActionInvoker.java:176)
	... 1 more
20 10 2010 19:30:22,075 INFO  ~ closing
20 10 2010 19:30:22,075 INFO  ~ Running hbm2ddl schema export
20 10 2010 19:30:22,076 DEBUG ~ import file not found: /import.sql
20 10 2010 19:30:22,076 INFO  ~ exporting generated schema to database
20 10 2010 19:30:22,076 DEBUG ~ alter table Comment drop constraint FK9BDE863F388562DE
20 10 2010 19:30:22,076 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
20 10 2010 19:30:22,076 DEBUG ~ drop table Comment if exists
20 10 2010 19:30:22,076 DEBUG ~ drop table Post if exists
20 10 2010 19:30:22,076 DEBUG ~ drop table User if exists
20 10 2010 19:30:22,076 INFO  ~ schema export complete
20 10 2010 19:30:22,175 DEBUG ~ Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
20 10 2010 19:30:22,175 DEBUG ~ Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
20 10 2010 19:30:22,175 DEBUG ~ Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
20 10 2010 19:30:22,175 DEBUG ~ Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
20 10 2010 19:30:22,175 DEBUG ~ Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
20 10 2010 19:30:22,175 DEBUG ~ Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
20 10 2010 19:30:22,175 DEBUG ~ Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
20 10 2010 19:30:22,175 DEBUG ~ Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
20 10 2010 19:30:22,175 DEBUG ~ Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
20 10 2010 19:30:22,175 DEBUG ~ Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
20 10 2010 19:30:22,175 DEBUG ~ Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
20 10 2010 19:30:22,175 DEBUG ~ Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
20 10 2010 19:30:22,175 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
20 10 2010 19:30:22,175 DEBUG ~ Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
20 10 2010 19:30:22,176 DEBUG ~ Execute first pass mapping processing
20 10 2010 19:30:22,176 DEBUG ~ Process hbm files
20 10 2010 19:30:22,176 DEBUG ~ Process annotated classes
20 10 2010 19:30:22,176 INFO  ~ Binding entity from annotated class: models.Comment
20 10 2010 19:30:22,177 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
20 10 2010 19:30:22,177 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
20 10 2010 19:30:22,177 DEBUG ~ Import with entity name Comment
20 10 2010 19:30:22,177 INFO  ~ Bind entity models.Comment on table Comment
20 10 2010 19:30:22,180 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=id, insertable=true, updatable=true, unique=false}
20 10 2010 19:30:22,180 DEBUG ~ binding property id with lazy=false
20 10 2010 19:30:22,180 DEBUG ~ building SimpleValue for id
20 10 2010 19:30:22,180 DEBUG ~ Building property id
20 10 2010 19:30:22,180 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=author, insertable=true, updatable=true, unique=false}
20 10 2010 19:30:22,180 DEBUG ~ binding property author with lazy=false
20 10 2010 19:30:22,180 DEBUG ~ building SimpleValue for author
20 10 2010 19:30:22,180 DEBUG ~ Building property author
20 10 2010 19:30:22,181 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=content, insertable=true, updatable=true, unique=false}
20 10 2010 19:30:22,181 DEBUG ~ binding property content with lazy=false
20 10 2010 19:30:22,181 DEBUG ~ building SimpleValue for content
20 10 2010 19:30:22,181 DEBUG ~ Building property content
20 10 2010 19:30:22,181 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
20 10 2010 19:30:22,181 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=post, insertable=true, updatable=true, unique=false}
20 10 2010 19:30:22,181 DEBUG ~ Building property post
20 10 2010 19:30:22,181 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Comment), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
20 10 2010 19:30:22,181 DEBUG ~ binding property postedAt with lazy=false
20 10 2010 19:30:22,181 DEBUG ~ building SimpleValue for postedAt
20 10 2010 19:30:22,181 DEBUG ~ Building property postedAt
20 10 2010 19:30:22,181 INFO  ~ Binding entity from annotated class: models.User
20 10 2010 19:30:22,181 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
20 10 2010 19:30:22,181 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
20 10 2010 19:30:22,182 DEBUG ~ Import with entity name User
20 10 2010 19:30:22,182 INFO  ~ Bind entity models.User on table User
20 10 2010 19:30:22,183 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
20 10 2010 19:30:22,183 DEBUG ~ binding property id with lazy=false
20 10 2010 19:30:22,183 DEBUG ~ building SimpleValue for id
20 10 2010 19:30:22,183 DEBUG ~ Building property id
20 10 2010 19:30:22,183 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
20 10 2010 19:30:22,183 DEBUG ~ binding property email with lazy=false
20 10 2010 19:30:22,183 DEBUG ~ building SimpleValue for email
20 10 2010 19:30:22,183 DEBUG ~ Building property email
20 10 2010 19:30:22,184 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=fullname, insertable=true, updatable=true, unique=false}
20 10 2010 19:30:22,184 DEBUG ~ binding property fullname with lazy=false
20 10 2010 19:30:22,184 DEBUG ~ building SimpleValue for fullname
20 10 2010 19:30:22,184 DEBUG ~ Building property fullname
20 10 2010 19:30:22,184 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=isAdmin, insertable=true, updatable=true, unique=false}
20 10 2010 19:30:22,184 DEBUG ~ binding property isAdmin with lazy=false
20 10 2010 19:30:22,184 DEBUG ~ building SimpleValue for isAdmin
20 10 2010 19:30:22,184 DEBUG ~ Building property isAdmin
20 10 2010 19:30:22,184 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
20 10 2010 19:30:22,184 DEBUG ~ binding property password with lazy=false
20 10 2010 19:30:22,184 DEBUG ~ building SimpleValue for password
20 10 2010 19:30:22,184 DEBUG ~ Building property password
20 10 2010 19:30:22,184 INFO  ~ Binding entity from annotated class: models.Post
20 10 2010 19:30:22,184 DEBUG ~ Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
20 10 2010 19:30:22,184 DEBUG ~ no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
20 10 2010 19:30:22,185 DEBUG ~ Import with entity name Post
20 10 2010 19:30:22,185 INFO  ~ Bind entity models.Post on table Post
20 10 2010 19:30:22,187 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=id, insertable=true, updatable=true, unique=false}
20 10 2010 19:30:22,187 DEBUG ~ binding property id with lazy=false
20 10 2010 19:30:22,187 DEBUG ~ building SimpleValue for id
20 10 2010 19:30:22,188 DEBUG ~ Building property id
20 10 2010 19:30:22,188 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
20 10 2010 19:30:22,188 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=author, insertable=true, updatable=true, unique=false}
20 10 2010 19:30:22,189 DEBUG ~ Building property author
20 10 2010 19:30:22,189 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
20 10 2010 19:30:22,189 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments, insertable=true, updatable=true, unique=false}
20 10 2010 19:30:22,189 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=null, insertable=true, updatable=true, unique=false}
20 10 2010 19:30:22,189 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=element, insertable=true, updatable=true, unique=false}
20 10 2010 19:30:22,189 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=comments_KEY, insertable=true, updatable=true, unique=false}
20 10 2010 19:30:22,189 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='comments_KEY', referencedColumn='null', mappedBy='null'}
20 10 2010 19:30:22,189 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
20 10 2010 19:30:22,189 DEBUG ~ Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='post'}
20 10 2010 19:30:22,189 DEBUG ~ Collection role: models.Post.comments
20 10 2010 19:30:22,190 DEBUG ~ Building property comments
20 10 2010 19:30:22,190 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=content, insertable=true, updatable=true, unique=false}
20 10 2010 19:30:22,190 DEBUG ~ binding property content with lazy=false
20 10 2010 19:30:22,190 DEBUG ~ building SimpleValue for content
20 10 2010 19:30:22,190 DEBUG ~ Building property content
20 10 2010 19:30:22,190 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=postedAt, insertable=true, updatable=true, unique=false}
20 10 2010 19:30:22,190 DEBUG ~ binding property postedAt with lazy=false
20 10 2010 19:30:22,190 DEBUG ~ building SimpleValue for postedAt
20 10 2010 19:30:22,190 DEBUG ~ Building property postedAt
20 10 2010 19:30:22,190 DEBUG ~ Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=title, insertable=true, updatable=true, unique=false}
20 10 2010 19:30:22,190 DEBUG ~ binding property title with lazy=false
20 10 2010 19:30:22,190 DEBUG ~ building SimpleValue for title
20 10 2010 19:30:22,191 DEBUG ~ Building property title
20 10 2010 19:30:22,191 DEBUG ~ setting SimpleValue typeName for id
20 10 2010 19:30:22,191 DEBUG ~ setting SimpleValue typeName for author
20 10 2010 19:30:22,191 DEBUG ~ setting SimpleValue typeName for content
20 10 2010 19:30:22,191 DEBUG ~ setting SimpleValue typeName for postedAt
20 10 2010 19:30:22,191 DEBUG ~ setting SimpleValue typeName for id
20 10 2010 19:30:22,191 DEBUG ~ setting SimpleValue typeName for email
20 10 2010 19:30:22,191 DEBUG ~ setting SimpleValue typeName for fullname
20 10 2010 19:30:22,191 DEBUG ~ setting SimpleValue typeName for isAdmin
20 10 2010 19:30:22,191 DEBUG ~ setting SimpleValue typeName for password
20 10 2010 19:30:22,191 DEBUG ~ setting SimpleValue typeName for id
20 10 2010 19:30:22,191 DEBUG ~ setting SimpleValue typeName for content
20 10 2010 19:30:22,191 DEBUG ~ setting SimpleValue typeName for postedAt
20 10 2010 19:30:22,191 DEBUG ~ setting SimpleValue typeName for title
20 10 2010 19:30:22,191 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 19:30:22,192 DEBUG ~ processing extends queue
20 10 2010 19:30:22,192 DEBUG ~ processing collection mappings
20 10 2010 19:30:22,192 DEBUG ~ Second pass for collection: models.Post.comments
20 10 2010 19:30:22,192 DEBUG ~ Binding a OneToMany: models.Post.comments through a foreign key
20 10 2010 19:30:22,192 INFO  ~ Mapping collection: models.Post.comments -> Comment
20 10 2010 19:30:22,192 DEBUG ~ Retrieving property models.Comment.post
20 10 2010 19:30:22,192 DEBUG ~ Mapped collection key: post_id, one-to-many: models.Comment
20 10 2010 19:30:22,192 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 19:30:22,192 DEBUG ~ processing association property references
20 10 2010 19:30:22,192 DEBUG ~ processing foreign key constraints
20 10 2010 19:30:22,192 DEBUG ~ resolving reference to class: models.Post
20 10 2010 19:30:22,192 DEBUG ~ resolving reference to class: models.User
20 10 2010 19:30:22,193 INFO  ~ Hibernate Validator not found: ignoring
20 10 2010 19:30:22,204 DEBUG ~ No JNDI name configured for binding Ejb3Configuration
20 10 2010 19:30:22,205 DEBUG ~ Legacy Validator not present in classpath, ignoring event listener registration
20 10 2010 19:30:22,207 DEBUG ~ Search not present in classpath, ignoring event listener registration.
20 10 2010 19:30:22,207 INFO  ~ Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
20 10 2010 19:30:22,207 DEBUG ~ Preparing to build session factory with filters : {}
20 10 2010 19:30:22,207 DEBUG ~ Execute first pass mapping processing
20 10 2010 19:30:22,207 DEBUG ~ Process hbm files
20 10 2010 19:30:22,207 DEBUG ~ Process annotated classes
20 10 2010 19:30:22,208 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 19:30:22,208 DEBUG ~ processing extends queue
20 10 2010 19:30:22,208 DEBUG ~ processing collection mappings
20 10 2010 19:30:22,208 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 19:30:22,208 DEBUG ~ processing association property references
20 10 2010 19:30:22,208 DEBUG ~ processing foreign key constraints
20 10 2010 19:30:22,208 DEBUG ~ resolving reference to class: models.Post
20 10 2010 19:30:22,208 DEBUG ~ resolving reference to class: models.User
20 10 2010 19:30:22,210 INFO  ~ Initializing connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
20 10 2010 19:30:22,211 INFO  ~ Using provided datasource
20 10 2010 19:30:22,211 INFO  ~ RDBMS: HSQL Database Engine, version: 1.8.1
20 10 2010 19:30:22,211 INFO  ~ JDBC driver: HSQL Database Engine Driver, version: 1.8.1
20 10 2010 19:30:22,211 INFO  ~ Using dialect: org.hibernate.dialect.HSQLDialect
20 10 2010 19:30:22,211 INFO  ~ Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
20 10 2010 19:30:22,211 INFO  ~ Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
20 10 2010 19:30:22,212 INFO  ~ No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
20 10 2010 19:30:22,212 INFO  ~ Automatic flush during beforeCompletion(): disabled
20 10 2010 19:30:22,212 INFO  ~ Automatic session close at end of transaction: disabled
20 10 2010 19:30:22,212 INFO  ~ JDBC batch size: 15
20 10 2010 19:30:22,212 INFO  ~ JDBC batch updates for versioned data: disabled
20 10 2010 19:30:22,212 INFO  ~ Scrollable result sets: enabled
20 10 2010 19:30:22,212 DEBUG ~ Wrap result sets: disabled
20 10 2010 19:30:22,212 INFO  ~ JDBC3 getGeneratedKeys(): disabled
20 10 2010 19:30:22,212 INFO  ~ Connection release mode: auto
20 10 2010 19:30:22,212 INFO  ~ Default batch fetch size: 1
20 10 2010 19:30:22,212 INFO  ~ Generate SQL with comments: disabled
20 10 2010 19:30:22,212 INFO  ~ Order SQL updates by primary key: disabled
20 10 2010 19:30:22,212 INFO  ~ Order SQL inserts for batching: disabled
20 10 2010 19:30:22,212 INFO  ~ Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
20 10 2010 19:30:22,212 INFO  ~ Using ASTQueryTranslatorFactory
20 10 2010 19:30:22,212 INFO  ~ Query language substitutions: {}
20 10 2010 19:30:22,212 INFO  ~ JPA-QL strict compliance: enabled
20 10 2010 19:30:22,212 INFO  ~ Second-level cache: enabled
20 10 2010 19:30:22,212 INFO  ~ Query cache: disabled
20 10 2010 19:30:22,212 INFO  ~ Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
20 10 2010 19:30:22,213 INFO  ~ Optimize cache for minimal puts: disabled
20 10 2010 19:30:22,213 INFO  ~ Structured second-level cache entries: disabled
20 10 2010 19:30:22,213 INFO  ~ Statistics: disabled
20 10 2010 19:30:22,213 INFO  ~ Deleted entity synthetic identifier rollback: disabled
20 10 2010 19:30:22,213 INFO  ~ Default entity-mode: pojo
20 10 2010 19:30:22,213 INFO  ~ Named query checking : enabled
20 10 2010 19:30:22,213 INFO  ~ Check Nullability in Core (should be disabled when Bean Validation is on): enabled
20 10 2010 19:30:22,218 INFO  ~ building session factory
20 10 2010 19:30:22,218 DEBUG ~ Session factory constructed with filter configurations : {}
20 10 2010 19:30:22,218 DEBUG ~ instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=D:\tools\java\jdk1.6.0_19\jre\bin, java.vm.version=16.2-b04, play.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=JP, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work, java.runtime.version=1.6.0_19-b04, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\endorsed, os.arch=amd64, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\YUJI-O~1.ORA\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., user.variant=, os.name=Windows 7, play.debug=yes, sun.jnu.encoding=MS932, java.library.path=D:\tools\java\jdk1.6.0_19\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\cygwin\home\yuji-okazawa\.gem\ruby\1.9.1\bin;D:\tools\graphviz\bin;D:\cygwin\usr\local\bin;D:\cygwin\usr\local\sbin;D:\cygwin\home\yuji-okazawa\bin;D:\cygwin\usr\local\bin;D:\cygwin\bin;D:\cygwin\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\tools\Perforce;D:\tools\graphviz\bin;D:\w32tex\bin;D:\gs\gs8.71\bin;D:\gs\gs8.71\lib;1\lib;D:\tools\TortoiseSVN\bin;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;D:\Program Files\STI\bin\pc-win32, java.specification.name=Java Platform API Specification, java.class.version=50.0, play.id=test, sun.management.compiler=HotSpot 64-Bit Server Compiler, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, os.version=6.1, user.home=C:\Users\yuji-okazawa.ORANGE, user.timezone=Asia/Tokyo, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.6, file.encoding=MS932, com.mchange.v2.log.MLog=com.mchange.v2.log.FallbackMLog, user.name=yuji-okazawa, java.class.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog\conf;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\jline.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\play-scala.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-compiler.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scala-library.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\scala-0.7.3\lib\scalatest-1.2-for-scala-2.8.0.RC7-SNAPSHOT.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\modules\testrunner\lib\play-testrunner.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\activation-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\antlr-2.7.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\async-http-client-1.0.0-SNAPSHOT-shaded.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\c3p0-0.9.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\cglib-2.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-beanutils-1.8.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-codec-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-collections-3.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-email-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-fileupload-1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-io-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-lang-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\commons-logging-1.1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\dom4j-1.6.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ehcache-core-2.0.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\ezmorph-1.0.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\groovy-all-1.7.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\gson-1.4.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-annotations-3.5.3-Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-commons-annotations-3.2.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-core-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-entitymanager-3.5.3-Final-patched.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hibernate-jpa-2.0-api-1.0.0.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\hsqldb-1.8.1.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jamon-2.7.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javamail-1.4.3.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\javassist-3.9.0.GA.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jaxen-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-imaging.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-simplecaptcha.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-textile.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jj-wikitext.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jodatime-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jregex-1.2_01.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jsr107cache-1.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\jta-1.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\junit-4.8.1.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\log4j-1.2.15.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\memcached-2.4.2.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\mysql-connector-java-5.1.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\netty-3.2.1.Final.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\org.eclipse.jdt.core_3.6.0.v_A56.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\oval-1.50.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\provided-servlet-2.5.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-api-1.5.8.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\slf4j-log4j12-1.5.0.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\lib\snakeyaml-1.6.jar;D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\framework\play.jar, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL=OFF, java.vm.specification.version=1.0, javax.persistence.transaction=RESOURCE_LOCAL, sun.arch.data.model=64, java.home=D:\tools\java\jdk1.6.0_19\jre, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Sun Microsystems Inc., user.language=ja, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.6.0_19, hibernate.transaction.flush_before_completion=false, java.ext.dirs=D:\tools\java\jdk1.6.0_19\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, sun.boot.class.path=D:\tools\java\jdk1.6.0_19\jre\lib\resources.jar;D:\tools\java\jdk1.6.0_19\jre\lib\rt.jar;D:\tools\java\jdk1.6.0_19\jre\lib\sunrsasign.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jsse.jar;D:\tools\java\jdk1.6.0_19\jre\lib\jce.jar;D:\tools\java\jdk1.6.0_19\jre\lib\charsets.jar;D:\tools\java\jdk1.6.0_19\jre\classes, java.vendor=Sun Microsystems Inc., file.separator=\, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, hibernate.hbm2ddl.auto=create-drop, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, application.path=D:\cygwin\home\yuji-okazawa\work\j\play-1.1-beta2\work\blog, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=amd64}
20 10 2010 19:30:22,219 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:30:22,219 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:30:22,219 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:30:22,225 DEBUG ~ Static SQL for entity: models.Comment
20 10 2010 19:30:22,225 DEBUG ~  Version select: select id from Comment where id =?
20 10 2010 19:30:22,225 DEBUG ~  Snapshot select: select comment_.id, comment_.author as author18_, comment_.content as content18_, comment_.post_id as post5_18_, comment_.postedAt as postedAt18_ from Comment comment_ where comment_.id=?
20 10 2010 19:30:22,226 DEBUG ~  Insert 0: insert into Comment (author, content, post_id, postedAt, id) values (?, ?, ?, ?, ?)
20 10 2010 19:30:22,226 DEBUG ~  Update 0: update Comment set author=?, content=?, post_id=?, postedAt=? where id=?
20 10 2010 19:30:22,226 DEBUG ~  Delete 0: delete from Comment where id=?
20 10 2010 19:30:22,226 DEBUG ~  Identity insert: insert into Comment (id, author, content, post_id, postedAt) values (null, ?, ?, ?, ?)
20 10 2010 19:30:22,231 DEBUG ~ Static SQL for entity: models.Post
20 10 2010 19:30:22,231 DEBUG ~  Version select: select id from Post where id =?
20 10 2010 19:30:22,231 DEBUG ~  Snapshot select: select post_.id, post_.author_id as author5_20_, post_.content as content20_, post_.postedAt as postedAt20_, post_.title as title20_ from Post post_ where post_.id=?
20 10 2010 19:30:22,231 DEBUG ~  Insert 0: insert into Post (author_id, content, postedAt, title, id) values (?, ?, ?, ?, ?)
20 10 2010 19:30:22,232 DEBUG ~  Update 0: update Post set author_id=?, content=?, postedAt=?, title=? where id=?
20 10 2010 19:30:22,232 DEBUG ~  Delete 0: delete from Post where id=?
20 10 2010 19:30:22,232 DEBUG ~  Identity insert: insert into Post (id, author_id, content, postedAt, title) values (null, ?, ?, ?, ?)
20 10 2010 19:30:22,236 DEBUG ~ Static SQL for entity: models.User
20 10 2010 19:30:22,236 DEBUG ~  Version select: select id from User where id =?
20 10 2010 19:30:22,236 DEBUG ~  Snapshot select: select user_.id, user_.email as email19_, user_.fullname as fullname19_, user_.isAdmin as isAdmin19_, user_.password as password19_ from User user_ where user_.id=?
20 10 2010 19:30:22,236 DEBUG ~  Insert 0: insert into User (email, fullname, isAdmin, password, id) values (?, ?, ?, ?, ?)
20 10 2010 19:30:22,236 DEBUG ~  Update 0: update User set email=?, fullname=?, isAdmin=?, password=? where id=?
20 10 2010 19:30:22,236 DEBUG ~  Delete 0: delete from User where id=?
20 10 2010 19:30:22,236 DEBUG ~  Identity insert: insert into User (id, email, fullname, isAdmin, password) values (null, ?, ?, ?, ?)
20 10 2010 19:30:22,237 DEBUG ~ Static SQL for collection: models.Post.comments
20 10 2010 19:30:22,237 DEBUG ~  Row insert: update Comment set post_id=? where id=?
20 10 2010 19:30:22,237 DEBUG ~  Row delete: update Comment set post_id=null where post_id=? and id=?
20 10 2010 19:30:22,237 DEBUG ~  One-shot delete: update Comment set post_id=null where post_id=?
20 10 2010 19:30:22,237 DEBUG ~ Static select for entity models.Comment [NONE]: select comment0_.id as id18_2_, comment0_.author as author18_2_, comment0_.content as content18_2_, comment0_.post_id as post5_18_2_, comment0_.postedAt as postedAt18_2_, post1_.id as id20_0_, post1_.author_id as author5_20_0_, post1_.content as content20_0_, post1_.postedAt as postedAt20_0_, post1_.title as title20_0_, user2_.id as id19_1_, user2_.email as email19_1_, user2_.fullname as fullname19_1_, user2_.isAdmin as isAdmin19_1_, user2_.password as password19_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
20 10 2010 19:30:22,238 DEBUG ~ Static select for entity models.Comment [READ]: select comment0_.id as id18_2_, comment0_.author as author18_2_, comment0_.content as content18_2_, comment0_.post_id as post5_18_2_, comment0_.postedAt as postedAt18_2_, post1_.id as id20_0_, post1_.author_id as author5_20_0_, post1_.content as content20_0_, post1_.postedAt as postedAt20_0_, post1_.title as title20_0_, user2_.id as id19_1_, user2_.email as email19_1_, user2_.fullname as fullname19_1_, user2_.isAdmin as isAdmin19_1_, user2_.password as password19_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
20 10 2010 19:30:22,238 DEBUG ~ Static select for entity models.Comment [UPGRADE]: select comment0_.id as id18_0_, comment0_.author as author18_0_, comment0_.content as content18_0_, comment0_.post_id as post5_18_0_, comment0_.postedAt as postedAt18_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:30:22,238 DEBUG ~ Static select for entity models.Comment [UPGRADE_NOWAIT]: select comment0_.id as id18_0_, comment0_.author as author18_0_, comment0_.content as content18_0_, comment0_.post_id as post5_18_0_, comment0_.postedAt as postedAt18_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:30:22,238 DEBUG ~ Static select for entity models.Comment [FORCE]: select comment0_.id as id18_0_, comment0_.author as author18_0_, comment0_.content as content18_0_, comment0_.post_id as post5_18_0_, comment0_.postedAt as postedAt18_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:30:22,238 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_READ]: select comment0_.id as id18_0_, comment0_.author as author18_0_, comment0_.content as content18_0_, comment0_.post_id as post5_18_0_, comment0_.postedAt as postedAt18_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:30:22,238 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_WRITE]: select comment0_.id as id18_0_, comment0_.author as author18_0_, comment0_.content as content18_0_, comment0_.post_id as post5_18_0_, comment0_.postedAt as postedAt18_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:30:22,239 DEBUG ~ Static select for entity models.Comment [PESSIMISTIC_FORCE_INCREMENT]: select comment0_.id as id18_0_, comment0_.author as author18_0_, comment0_.content as content18_0_, comment0_.post_id as post5_18_0_, comment0_.postedAt as postedAt18_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:30:22,239 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC]: select comment0_.id as id18_2_, comment0_.author as author18_2_, comment0_.content as content18_2_, comment0_.post_id as post5_18_2_, comment0_.postedAt as postedAt18_2_, post1_.id as id20_0_, post1_.author_id as author5_20_0_, post1_.content as content20_0_, post1_.postedAt as postedAt20_0_, post1_.title as title20_0_, user2_.id as id19_1_, user2_.email as email19_1_, user2_.fullname as fullname19_1_, user2_.isAdmin as isAdmin19_1_, user2_.password as password19_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
20 10 2010 19:30:22,239 DEBUG ~ Static select for entity models.Comment [OPTIMISTIC_FORCE_INCREMENT]: select comment0_.id as id18_2_, comment0_.author as author18_2_, comment0_.content as content18_2_, comment0_.post_id as post5_18_2_, comment0_.postedAt as postedAt18_2_, post1_.id as id20_0_, post1_.author_id as author5_20_0_, post1_.content as content20_0_, post1_.postedAt as postedAt20_0_, post1_.title as title20_0_, user2_.id as id19_1_, user2_.email as email19_1_, user2_.fullname as fullname19_1_, user2_.isAdmin as isAdmin19_1_, user2_.password as password19_1_ from Comment comment0_ left outer join Post post1_ on comment0_.post_id=post1_.id left outer join User user2_ on post1_.author_id=user2_.id where comment0_.id=?
20 10 2010 19:30:22,239 DEBUG ~ Static select for action ACTION_MERGE on entity models.Comment: select comment0_.id as id18_0_, comment0_.author as author18_0_, comment0_.content as content18_0_, comment0_.post_id as post5_18_0_, comment0_.postedAt as postedAt18_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:30:22,240 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Comment: select comment0_.id as id18_0_, comment0_.author as author18_0_, comment0_.content as content18_0_, comment0_.post_id as post5_18_0_, comment0_.postedAt as postedAt18_0_ from Comment comment0_ where comment0_.id=?
20 10 2010 19:30:22,240 DEBUG ~ Static select for entity models.Post [NONE]: select post0_.id as id20_1_, post0_.author_id as author5_20_1_, post0_.content as content20_1_, post0_.postedAt as postedAt20_1_, post0_.title as title20_1_, user1_.id as id19_0_, user1_.email as email19_0_, user1_.fullname as fullname19_0_, user1_.isAdmin as isAdmin19_0_, user1_.password as password19_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
20 10 2010 19:30:22,240 DEBUG ~ Static select for entity models.Post [READ]: select post0_.id as id20_1_, post0_.author_id as author5_20_1_, post0_.content as content20_1_, post0_.postedAt as postedAt20_1_, post0_.title as title20_1_, user1_.id as id19_0_, user1_.email as email19_0_, user1_.fullname as fullname19_0_, user1_.isAdmin as isAdmin19_0_, user1_.password as password19_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
20 10 2010 19:30:22,240 DEBUG ~ Static select for entity models.Post [UPGRADE]: select post0_.id as id20_0_, post0_.author_id as author5_20_0_, post0_.content as content20_0_, post0_.postedAt as postedAt20_0_, post0_.title as title20_0_ from Post post0_ where post0_.id=?
20 10 2010 19:30:22,241 DEBUG ~ Static select for entity models.Post [UPGRADE_NOWAIT]: select post0_.id as id20_0_, post0_.author_id as author5_20_0_, post0_.content as content20_0_, post0_.postedAt as postedAt20_0_, post0_.title as title20_0_ from Post post0_ where post0_.id=?
20 10 2010 19:30:22,241 DEBUG ~ Static select for entity models.Post [FORCE]: select post0_.id as id20_0_, post0_.author_id as author5_20_0_, post0_.content as content20_0_, post0_.postedAt as postedAt20_0_, post0_.title as title20_0_ from Post post0_ where post0_.id=?
20 10 2010 19:30:22,241 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_READ]: select post0_.id as id20_0_, post0_.author_id as author5_20_0_, post0_.content as content20_0_, post0_.postedAt as postedAt20_0_, post0_.title as title20_0_ from Post post0_ where post0_.id=?
20 10 2010 19:30:22,241 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_WRITE]: select post0_.id as id20_0_, post0_.author_id as author5_20_0_, post0_.content as content20_0_, post0_.postedAt as postedAt20_0_, post0_.title as title20_0_ from Post post0_ where post0_.id=?
20 10 2010 19:30:22,241 DEBUG ~ Static select for entity models.Post [PESSIMISTIC_FORCE_INCREMENT]: select post0_.id as id20_0_, post0_.author_id as author5_20_0_, post0_.content as content20_0_, post0_.postedAt as postedAt20_0_, post0_.title as title20_0_ from Post post0_ where post0_.id=?
20 10 2010 19:30:22,241 DEBUG ~ Static select for entity models.Post [OPTIMISTIC]: select post0_.id as id20_1_, post0_.author_id as author5_20_1_, post0_.content as content20_1_, post0_.postedAt as postedAt20_1_, post0_.title as title20_1_, user1_.id as id19_0_, user1_.email as email19_0_, user1_.fullname as fullname19_0_, user1_.isAdmin as isAdmin19_0_, user1_.password as password19_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
20 10 2010 19:30:22,242 DEBUG ~ Static select for entity models.Post [OPTIMISTIC_FORCE_INCREMENT]: select post0_.id as id20_1_, post0_.author_id as author5_20_1_, post0_.content as content20_1_, post0_.postedAt as postedAt20_1_, post0_.title as title20_1_, user1_.id as id19_0_, user1_.email as email19_0_, user1_.fullname as fullname19_0_, user1_.isAdmin as isAdmin19_0_, user1_.password as password19_0_ from Post post0_ left outer join User user1_ on post0_.author_id=user1_.id where post0_.id=?
20 10 2010 19:30:22,242 DEBUG ~ Static select for action ACTION_MERGE on entity models.Post: select post0_.id as id20_1_, post0_.author_id as author5_20_1_, post0_.content as content20_1_, post0_.postedAt as postedAt20_1_, post0_.title as title20_1_, comments1_.post_id as post5_20_3_, comments1_.id as id3_, comments1_.id as id18_0_, comments1_.author as author18_0_, comments1_.content as content18_0_, comments1_.post_id as post5_18_0_, comments1_.postedAt as postedAt18_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post_id where post0_.id=?
20 10 2010 19:30:22,242 DEBUG ~ Static select for action ACTION_REFRESH on entity models.Post: select post0_.id as id20_1_, post0_.author_id as author5_20_1_, post0_.content as content20_1_, post0_.postedAt as postedAt20_1_, post0_.title as title20_1_, comments1_.post_id as post5_20_3_, comments1_.id as id3_, comments1_.id as id18_0_, comments1_.author as author18_0_, comments1_.content as content18_0_, comments1_.post_id as post5_18_0_, comments1_.postedAt as postedAt18_0_ from Post post0_ left outer join Comment comments1_ on post0_.id=comments1_.post_id where post0_.id=?
20 10 2010 19:30:22,242 DEBUG ~ Static select for entity models.User [NONE]: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
20 10 2010 19:30:22,243 DEBUG ~ Static select for entity models.User [READ]: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
20 10 2010 19:30:22,243 DEBUG ~ Static select for entity models.User [UPGRADE]: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
20 10 2010 19:30:22,243 DEBUG ~ Static select for entity models.User [UPGRADE_NOWAIT]: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
20 10 2010 19:30:22,243 DEBUG ~ Static select for entity models.User [FORCE]: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
20 10 2010 19:30:22,243 DEBUG ~ Static select for entity models.User [PESSIMISTIC_READ]: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
20 10 2010 19:30:22,243 DEBUG ~ Static select for entity models.User [PESSIMISTIC_WRITE]: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
20 10 2010 19:30:22,243 DEBUG ~ Static select for entity models.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
20 10 2010 19:30:22,244 DEBUG ~ Static select for entity models.User [OPTIMISTIC]: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
20 10 2010 19:30:22,244 DEBUG ~ Static select for entity models.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
20 10 2010 19:30:22,244 DEBUG ~ Static select for action ACTION_MERGE on entity models.User: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
20 10 2010 19:30:22,244 DEBUG ~ Static select for action ACTION_REFRESH on entity models.User: select user0_.id as id19_0_, user0_.email as email19_0_, user0_.fullname as fullname19_0_, user0_.isAdmin as isAdmin19_0_, user0_.password as password19_0_ from User user0_ where user0_.id=?
20 10 2010 19:30:22,244 DEBUG ~ Static select for one-to-many models.Post.comments: select comments0_.post_id as post5_20_1_, comments0_.id as id1_, comments0_.id as id18_0_, comments0_.author as author18_0_, comments0_.content as content18_0_, comments0_.post_id as post5_18_0_, comments0_.postedAt as postedAt18_0_ from Comment comments0_ where comments0_.post_id=?
20 10 2010 19:30:22,244 DEBUG ~ registered: 2c9082cd2bc91307012bc93087240003 (unnamed)
20 10 2010 19:30:22,244 INFO  ~ Not binding factory to JNDI, no JNDI name configured
20 10 2010 19:30:22,244 DEBUG ~ instantiated session factory
20 10 2010 19:30:22,244 DEBUG ~ Execute first pass mapping processing
20 10 2010 19:30:22,244 DEBUG ~ Process hbm files
20 10 2010 19:30:22,244 DEBUG ~ Process annotated classes
20 10 2010 19:30:22,245 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 19:30:22,245 DEBUG ~ processing extends queue
20 10 2010 19:30:22,245 DEBUG ~ processing collection mappings
20 10 2010 19:30:22,245 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 19:30:22,245 DEBUG ~ processing association property references
20 10 2010 19:30:22,245 DEBUG ~ processing foreign key constraints
20 10 2010 19:30:22,245 DEBUG ~ resolving reference to class: models.Post
20 10 2010 19:30:22,245 DEBUG ~ resolving reference to class: models.User
20 10 2010 19:30:22,246 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:30:22,247 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:30:22,247 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:30:22,247 DEBUG ~ Execute first pass mapping processing
20 10 2010 19:30:22,247 DEBUG ~ Process hbm files
20 10 2010 19:30:22,247 DEBUG ~ Process annotated classes
20 10 2010 19:30:22,247 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 19:30:22,247 DEBUG ~ processing extends queue
20 10 2010 19:30:22,247 DEBUG ~ processing collection mappings
20 10 2010 19:30:22,247 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 19:30:22,247 DEBUG ~ processing association property references
20 10 2010 19:30:22,247 DEBUG ~ processing foreign key constraints
20 10 2010 19:30:22,247 DEBUG ~ resolving reference to class: models.Post
20 10 2010 19:30:22,247 DEBUG ~ resolving reference to class: models.User
20 10 2010 19:30:22,248 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:30:22,248 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:30:22,249 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:30:22,249 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:30:22,249 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:30:22,249 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:30:22,249 INFO  ~ Running hbm2ddl schema export
20 10 2010 19:30:22,249 DEBUG ~ import file not found: /import.sql
20 10 2010 19:30:22,249 INFO  ~ exporting generated schema to database
20 10 2010 19:30:22,249 DEBUG ~ alter table Comment drop constraint FK9BDE863F388562DE
20 10 2010 19:30:22,250 DEBUG ~ Unsuccessful: alter table Comment drop constraint FK9BDE863F388562DE
20 10 2010 19:30:22,250 DEBUG ~ Table not found: COMMENT in statement [alter table Comment]
20 10 2010 19:30:22,250 DEBUG ~ alter table Post drop constraint FK260CC0A7CD013E
20 10 2010 19:30:22,250 DEBUG ~ Unsuccessful: alter table Post drop constraint FK260CC0A7CD013E
20 10 2010 19:30:22,250 DEBUG ~ Table not found: POST in statement [alter table Post]
20 10 2010 19:30:22,250 DEBUG ~ drop table Comment if exists
20 10 2010 19:30:22,250 DEBUG ~ drop table Post if exists
20 10 2010 19:30:22,250 DEBUG ~ drop table User if exists
20 10 2010 19:30:22,250 DEBUG ~ create table Comment (id bigint generated by default as identity (start with 1), author varchar(255), content longvarchar, postedAt timestamp, post_id bigint, primary key (id))
20 10 2010 19:30:22,251 DEBUG ~ create table Post (id bigint generated by default as identity (start with 1), content longvarchar, postedAt timestamp, title varchar(255), author_id bigint, primary key (id))
20 10 2010 19:30:22,251 DEBUG ~ create table User (id bigint generated by default as identity (start with 1), email varchar(255), fullname varchar(255), isAdmin bit not null, password varchar(255), primary key (id))
20 10 2010 19:30:22,251 DEBUG ~ alter table Comment add constraint FK9BDE863F388562DE foreign key (post_id) references Post
20 10 2010 19:30:22,251 DEBUG ~ alter table Post add constraint FK260CC0A7CD013E foreign key (author_id) references User
20 10 2010 19:30:22,251 INFO  ~ schema export complete
20 10 2010 19:30:22,251 DEBUG ~ Execute first pass mapping processing
20 10 2010 19:30:22,251 DEBUG ~ Process hbm files
20 10 2010 19:30:22,251 DEBUG ~ Process annotated classes
20 10 2010 19:30:22,251 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 19:30:22,251 DEBUG ~ processing extends queue
20 10 2010 19:30:22,251 DEBUG ~ processing collection mappings
20 10 2010 19:30:22,251 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 19:30:22,252 DEBUG ~ processing association property references
20 10 2010 19:30:22,252 DEBUG ~ processing foreign key constraints
20 10 2010 19:30:22,252 DEBUG ~ resolving reference to class: models.Post
20 10 2010 19:30:22,252 DEBUG ~ resolving reference to class: models.User
20 10 2010 19:30:22,253 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:30:22,253 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:30:22,253 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:30:22,253 DEBUG ~ Execute first pass mapping processing
20 10 2010 19:30:22,253 DEBUG ~ Process hbm files
20 10 2010 19:30:22,253 DEBUG ~ Process annotated classes
20 10 2010 19:30:22,253 DEBUG ~ processing fk mappings (*ToOne and JoinedSubclass)
20 10 2010 19:30:22,253 DEBUG ~ processing extends queue
20 10 2010 19:30:22,253 DEBUG ~ processing collection mappings
20 10 2010 19:30:22,253 DEBUG ~ processing native query and ResultSetMapping mappings
20 10 2010 19:30:22,254 DEBUG ~ processing association property references
20 10 2010 19:30:22,254 DEBUG ~ processing foreign key constraints
20 10 2010 19:30:22,254 DEBUG ~ resolving reference to class: models.Post
20 10 2010 19:30:22,254 DEBUG ~ resolving reference to class: models.User
20 10 2010 19:30:22,255 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:30:22,255 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:30:22,255 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:30:22,255 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:30:22,255 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:30:22,256 DEBUG ~ Setting dialect [org.hibernate.dialect.HSQLDialect]
20 10 2010 19:30:22,256 DEBUG ~ Checking 0 named HQL queries
20 10 2010 19:30:22,256 DEBUG ~ Checking 0 named SQL queries
20 10 2010 19:30:22,269 DEBUG ~ opened session at timestamp: 12875706222
20 10 2010 19:30:22,269 DEBUG ~ begin
20 10 2010 19:30:22,269 DEBUG ~ opening JDBC connection
20 10 2010 19:30:22,269 DEBUG ~ current autocommit status: true
20 10 2010 19:30:22,269 DEBUG ~ disabling autocommit
20 10 2010 19:30:22,270 DEBUG ~ parse() - HQL: select count(e) from models.User e
20 10 2010 19:30:22,285 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'models'
       |     |  \-[IDENT] Node: 'User'
       |     \-[ALIAS] Node: 'e'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'e'

20 10 2010 19:30:22,285 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:30:22,434 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 19:30:22,434 DEBUG ~ FromClause{level=1} :  models.User (e) -> user0_
20 10 2010 19:30:22,434 DEBUG ~ Resolved :  e -> user0_.id
20 10 2010 19:30:22,434 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 19:30:22,434 DEBUG ~ processQuery() :  ( SELECT ( {select clause} ( count user0_.id ) ) ( FromClause{level=1} User user0_ ) )
20 10 2010 19:30:22,435 DEBUG ~ Using FROM fragment [User user0_]
20 10 2010 19:30:22,435 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 19:30:22,435 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ALIAS_REF] IdentNode: 'user0_.id' {alias=e, className=models.User, tableAlias=user0_}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}

20 10 2010 19:30:22,435 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:30:22,435 DEBUG ~ HQL: select count(e) from models.User e
20 10 2010 19:30:22,435 DEBUG ~ SQL: select count(user0_.id) as col_0_0_ from User user0_
20 10 2010 19:30:22,435 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:30:22,436 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,436 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:22,436 DEBUG ~ result row: 
20 10 2010 19:30:22,436 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:22,436 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,436 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:22,447 DEBUG ~ executing identity-insert immediately
20 10 2010 19:30:22,447 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,447 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,448 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,448 DEBUG ~ Natively generated identity: 1
20 10 2010 19:30:22,448 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,448 DEBUG ~ processing flush-time cascades
20 10 2010 19:30:22,448 DEBUG ~ dirty checking collections
20 10 2010 19:30:22,448 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
20 10 2010 19:30:22,448 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
20 10 2010 19:30:22,448 DEBUG ~ listing entities:
20 10 2010 19:30:22,448 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:30:22,452 DEBUG ~ executing identity-insert immediately
20 10 2010 19:30:22,452 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,452 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,452 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,452 DEBUG ~ Natively generated identity: 2
20 10 2010 19:30:22,452 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,453 DEBUG ~ processing flush-time cascades
20 10 2010 19:30:22,453 DEBUG ~ dirty checking collections
20 10 2010 19:30:22,454 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
20 10 2010 19:30:22,454 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
20 10 2010 19:30:22,454 DEBUG ~ listing entities:
20 10 2010 19:30:22,454 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:30:22,454 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:30:22,458 DEBUG ~ parse() - HQL: from models.User where id = ?
20 10 2010 19:30:22,461 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'User'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

20 10 2010 19:30:22,461 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:30:22,461 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 19:30:22,461 DEBUG ~ FromClause{level=1} :  models.User (no alias) -> user0_
20 10 2010 19:30:22,461 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:30:22,461 DEBUG ~ getDataType() : id -> org.hibernate.type.LongType@34521982
20 10 2010 19:30:22,461 DEBUG ~ Resolved :  {synthetic-alias}.id -> user0_.id
20 10 2010 19:30:22,461 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 19:30:22,461 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.id {synthetic-alias} id ) ? ) ) )
20 10 2010 19:30:22,461 DEBUG ~ Derived SELECT clause created.
20 10 2010 19:30:22,462 DEBUG ~ Using FROM fragment [User user0_]
20 10 2010 19:30:22,462 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 19:30:22,462 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.id as id19_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.email as email19_, user0_.fullname as fullname19_, user0_.isAdmin as isAdmin19_, user0_.password as password19_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=models.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.id' {propertyName=id,dereferenceType=ALL,propertyPath=id,path={synthetic-alias}.id,tableAlias=user0_,className=models.User,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.LongType@34521982}

20 10 2010 19:30:22,462 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:30:22,462 DEBUG ~ HQL: from models.User where id = ?
20 10 2010 19:30:22,462 DEBUG ~ SQL: select user0_.id as id19_, user0_.email as email19_, user0_.fullname as fullname19_, user0_.isAdmin as isAdmin19_, user0_.password as password19_ from User user0_ where user0_.id=?
20 10 2010 19:30:22,462 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:30:22,463 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,463 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:22,463 DEBUG ~ result row: EntityKey[models.User#1]
20 10 2010 19:30:22,463 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:22,463 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,464 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:22,467 DEBUG ~ executing identity-insert immediately
20 10 2010 19:30:22,467 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,468 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,468 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,468 DEBUG ~ Natively generated identity: 1
20 10 2010 19:30:22,468 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,468 DEBUG ~ processing flush-time cascades
20 10 2010 19:30:22,468 DEBUG ~ dirty checking collections
20 10 2010 19:30:22,469 DEBUG ~ Collection found: [models.Post.comments#1], was: [<unreferenced>] (initialized)
20 10 2010 19:30:22,469 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
20 10 2010 19:30:22,469 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
20 10 2010 19:30:22,469 DEBUG ~ listing entities:
20 10 2010 19:30:22,469 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:30:22,469 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 19:30:22,469 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:30:22,474 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,474 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:22,474 DEBUG ~ result row: EntityKey[models.User#1]
20 10 2010 19:30:22,475 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:22,475 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,475 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:22,908 DEBUG ~ executing identity-insert immediately
20 10 2010 19:30:22,908 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,908 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,908 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,908 DEBUG ~ Natively generated identity: 2
20 10 2010 19:30:22,909 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,909 DEBUG ~ processing flush-time cascades
20 10 2010 19:30:22,909 DEBUG ~ dirty checking collections
20 10 2010 19:30:22,910 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:30:22,910 DEBUG ~ Collection found: [models.Post.comments#2], was: [<unreferenced>] (initialized)
20 10 2010 19:30:22,910 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
20 10 2010 19:30:22,910 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 2 collections
20 10 2010 19:30:22,910 DEBUG ~ listing entities:
20 10 2010 19:30:22,910 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:30:22,910 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 19:30:22,910 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:30:22,910 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
20 10 2010 19:30:22,914 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,914 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:22,914 DEBUG ~ result row: EntityKey[models.User#2]
20 10 2010 19:30:22,914 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:22,914 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,914 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:22,917 DEBUG ~ executing identity-insert immediately
20 10 2010 19:30:22,917 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,917 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,917 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,917 DEBUG ~ Natively generated identity: 3
20 10 2010 19:30:22,917 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,917 DEBUG ~ processing flush-time cascades
20 10 2010 19:30:22,918 DEBUG ~ dirty checking collections
20 10 2010 19:30:22,918 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:30:22,918 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
20 10 2010 19:30:22,918 DEBUG ~ Collection found: [models.Post.comments#3], was: [<unreferenced>] (initialized)
20 10 2010 19:30:22,918 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 5 objects
20 10 2010 19:30:22,918 DEBUG ~ Flushed: 1 (re)creations, 0 updates, 0 removals to 3 collections
20 10 2010 19:30:22,918 DEBUG ~ listing entities:
20 10 2010 19:30:22,918 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:30:22,918 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 19:30:22,918 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:30:22,918 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
20 10 2010 19:30:22,919 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
20 10 2010 19:30:22,922 DEBUG ~ parse() - HQL: from models.Post where id = ?
20 10 2010 19:30:22,923 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

20 10 2010 19:30:22,923 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:30:22,924 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 19:30:22,924 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
20 10 2010 19:30:22,924 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:30:22,924 DEBUG ~ getDataType() : id -> org.hibernate.type.LongType@34521982
20 10 2010 19:30:22,924 DEBUG ~ Resolved :  {synthetic-alias}.id -> post0_.id
20 10 2010 19:30:22,924 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 19:30:22,924 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( = ( post0_.id {synthetic-alias} id ) ? ) ) )
20 10 2010 19:30:22,934 DEBUG ~ Derived SELECT clause created.
20 10 2010 19:30:22,934 DEBUG ~ Using FROM fragment [Post post0_]
20 10 2010 19:30:22,934 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 19:30:22,934 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id20_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_20_, post0_.content as content20_, post0_.postedAt as postedAt20_, post0_.title as title20_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'post0_.id' {propertyName=id,dereferenceType=ALL,propertyPath=id,path={synthetic-alias}.id,tableAlias=post0_,className=models.Post,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.LongType@34521982}

20 10 2010 19:30:22,934 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:30:22,935 DEBUG ~ HQL: from models.Post where id = ?
20 10 2010 19:30:22,935 DEBUG ~ SQL: select post0_.id as id20_, post0_.author_id as author5_20_, post0_.content as content20_, post0_.postedAt as postedAt20_, post0_.title as title20_ from Post post0_ where post0_.id=?
20 10 2010 19:30:22,935 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:30:22,936 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,936 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:22,936 DEBUG ~ result row: EntityKey[models.Post#1]
20 10 2010 19:30:22,936 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:22,936 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,937 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:22,939 DEBUG ~ executing identity-insert immediately
20 10 2010 19:30:22,939 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,939 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,939 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,939 DEBUG ~ Natively generated identity: 1
20 10 2010 19:30:22,939 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,940 DEBUG ~ processing flush-time cascades
20 10 2010 19:30:22,940 DEBUG ~ dirty checking collections
20 10 2010 19:30:22,940 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:30:22,940 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
20 10 2010 19:30:22,940 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
20 10 2010 19:30:22,940 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
20 10 2010 19:30:22,940 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
20 10 2010 19:30:22,940 DEBUG ~ listing entities:
20 10 2010 19:30:22,940 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:30:22,941 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:30:22,941 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 19:30:22,941 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:30:22,943 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
20 10 2010 19:30:22,945 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
20 10 2010 19:30:22,957 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,957 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:22,957 DEBUG ~ result row: EntityKey[models.Post#1]
20 10 2010 19:30:22,957 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:22,957 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,957 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:22,960 DEBUG ~ executing identity-insert immediately
20 10 2010 19:30:22,960 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,960 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,960 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,960 DEBUG ~ Natively generated identity: 2
20 10 2010 19:30:22,960 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,961 DEBUG ~ processing flush-time cascades
20 10 2010 19:30:22,961 DEBUG ~ dirty checking collections
20 10 2010 19:30:22,961 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:30:22,961 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
20 10 2010 19:30:22,961 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
20 10 2010 19:30:22,962 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 7 objects
20 10 2010 19:30:22,962 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
20 10 2010 19:30:22,962 DEBUG ~ listing entities:
20 10 2010 19:30:22,962 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
20 10 2010 19:30:22,962 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:30:22,962 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:30:22,962 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:30:22,962 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 19:30:22,963 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
20 10 2010 19:30:22,963 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 19:30:22,965 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,965 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:22,965 DEBUG ~ result row: EntityKey[models.Post#2]
20 10 2010 19:30:22,965 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:22,965 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,966 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:22,967 DEBUG ~ executing identity-insert immediately
20 10 2010 19:30:22,967 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,967 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,968 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,968 DEBUG ~ Natively generated identity: 3
20 10 2010 19:30:22,968 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,968 DEBUG ~ processing flush-time cascades
20 10 2010 19:30:22,968 DEBUG ~ dirty checking collections
20 10 2010 19:30:22,969 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:30:22,969 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
20 10 2010 19:30:22,969 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
20 10 2010 19:30:22,969 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
20 10 2010 19:30:22,969 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
20 10 2010 19:30:22,969 DEBUG ~ listing entities:
20 10 2010 19:30:22,969 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
20 10 2010 19:30:22,969 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:30:22,969 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:30:22,980 DEBUG ~ models.Comment{content=This post is useless ?
, id=3, author=Tom, post=models.Post#2, postedAt=2009-04-05 09:00:00}
20 10 2010 19:30:22,980 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:30:22,980 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[], postedAt=2009-06-14 09:00:00}
20 10 2010 19:30:22,980 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[], postedAt=2009-03-25 09:00:00}
20 10 2010 19:30:22,980 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 19:30:22,981 DEBUG ~ commit
20 10 2010 19:30:22,981 DEBUG ~ re-enabling autocommit
20 10 2010 19:30:22,981 DEBUG ~ committed JDBC Connection
20 10 2010 19:30:22,981 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:30:22,981 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:30:22,981 DEBUG ~ opened session at timestamp: 12875706229
20 10 2010 19:30:22,982 DEBUG ~ begin
20 10 2010 19:30:22,982 DEBUG ~ opening JDBC connection
20 10 2010 19:30:22,982 DEBUG ~ current autocommit status: true
20 10 2010 19:30:22,982 DEBUG ~ disabling autocommit
20 10 2010 19:30:22,986 DEBUG ~ parse() - HQL: from models.Post order by postedAt desc
20 10 2010 19:30:22,987 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    \-[ORDER] Node: 'order'
       +-[IDENT] Node: 'postedAt'
       \-[DESCENDING] Node: 'desc'

20 10 2010 19:30:22,987 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:30:22,988 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 19:30:22,988 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
20 10 2010 19:30:22,988 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:30:22,988 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@5cf99513
20 10 2010 19:30:22,988 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
20 10 2010 19:30:22,988 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 19:30:22,988 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( order ( post0_.postedAt {synthetic-alias} postedAt ) desc ) )
20 10 2010 19:30:22,988 DEBUG ~ Derived SELECT clause created.
20 10 2010 19:30:22,988 DEBUG ~ Using FROM fragment [Post post0_]
20 10 2010 19:30:22,988 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 19:30:22,989 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id20_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_20_, post0_.content as content20_, post0_.postedAt as postedAt20_, post0_.title as title20_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    \-[ORDER] OrderByClause: 'order'
       +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
       |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
       |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
       \-[DESCENDING] SqlNode: 'desc'

20 10 2010 19:30:22,989 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:30:22,989 DEBUG ~ HQL: from models.Post order by postedAt desc
20 10 2010 19:30:22,989 DEBUG ~ SQL: select post0_.id as id20_, post0_.author_id as author5_20_, post0_.content as content20_, post0_.postedAt as postedAt20_, post0_.title as title20_ from Post post0_ order by post0_.postedAt desc
20 10 2010 19:30:22,989 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:30:22,989 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,990 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:22,990 DEBUG ~ result row: EntityKey[models.Post#1]
20 10 2010 19:30:22,990 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:22,990 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,990 DEBUG ~ resolving associations for [models.Post#1]
20 10 2010 19:30:22,990 DEBUG ~ loading entity: [models.User#1]
20 10 2010 19:30:22,990 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,990 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:22,990 DEBUG ~ result row: EntityKey[models.User#1]
20 10 2010 19:30:22,990 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:22,990 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,990 DEBUG ~ resolving associations for [models.User#1]
20 10 2010 19:30:22,990 DEBUG ~ done materializing entity [models.User#1]
20 10 2010 19:30:22,990 DEBUG ~ done entity load
20 10 2010 19:30:22,991 DEBUG ~ done materializing entity [models.Post#1]
20 10 2010 19:30:22,991 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:22,992 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,992 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:22,992 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:30:22,992 DEBUG ~ result row: EntityKey[models.Post#2]
20 10 2010 19:30:22,992 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:22,992 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,993 DEBUG ~ resolving associations for [models.Post#3]
20 10 2010 19:30:22,993 DEBUG ~ loading entity: [models.User#2]
20 10 2010 19:30:22,993 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:22,994 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:22,994 DEBUG ~ result row: EntityKey[models.User#2]
20 10 2010 19:30:22,994 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:22,994 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:22,994 DEBUG ~ resolving associations for [models.User#2]
20 10 2010 19:30:22,994 DEBUG ~ done materializing entity [models.User#2]
20 10 2010 19:30:22,994 DEBUG ~ done entity load
20 10 2010 19:30:22,994 DEBUG ~ done materializing entity [models.Post#3]
20 10 2010 19:30:22,994 DEBUG ~ resolving associations for [models.Post#2]
20 10 2010 19:30:22,994 DEBUG ~ done materializing entity [models.Post#2]
20 10 2010 19:30:22,994 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:23,055 DEBUG ~ loading collection: [models.Post.comments#1]
20 10 2010 19:30:23,055 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:23,056 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:23,056 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
20 10 2010 19:30:23,056 DEBUG ~ result row: EntityKey[models.Comment#1]
20 10 2010 19:30:23,056 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:30:23,056 DEBUG ~ result row: EntityKey[models.Comment#2]
20 10 2010 19:30:23,056 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:30:23,056 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:23,056 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:23,056 DEBUG ~ resolving associations for [models.Comment#1]
20 10 2010 19:30:23,057 DEBUG ~ done materializing entity [models.Comment#1]
20 10 2010 19:30:23,057 DEBUG ~ resolving associations for [models.Comment#2]
20 10 2010 19:30:23,057 DEBUG ~ done materializing entity [models.Comment#2]
20 10 2010 19:30:23,057 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
20 10 2010 19:30:23,057 DEBUG ~ collection fully initialized: [models.Post.comments#1]
20 10 2010 19:30:23,057 DEBUG ~ 1 collections initialized for role: models.Post.comments
20 10 2010 19:30:23,057 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:23,057 DEBUG ~ done loading collection
20 10 2010 19:30:23,065 DEBUG ~ loading collection: [models.Post.comments#3]
20 10 2010 19:30:23,065 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:23,065 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:23,065 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#3]
20 10 2010 19:30:23,065 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:23,065 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:23,065 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
20 10 2010 19:30:23,065 DEBUG ~ collection fully initialized: [models.Post.comments#3]
20 10 2010 19:30:23,065 DEBUG ~ 1 collections initialized for role: models.Post.comments
20 10 2010 19:30:23,065 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:23,065 DEBUG ~ done loading collection
20 10 2010 19:30:23,068 DEBUG ~ loading collection: [models.Post.comments#2]
20 10 2010 19:30:23,068 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:23,068 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:23,068 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#2]
20 10 2010 19:30:23,068 DEBUG ~ result row: EntityKey[models.Comment#3]
20 10 2010 19:30:23,069 DEBUG ~ found row of collection: [models.Post.comments#2]
20 10 2010 19:30:23,069 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:23,069 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:23,069 DEBUG ~ resolving associations for [models.Comment#3]
20 10 2010 19:30:23,069 DEBUG ~ done materializing entity [models.Comment#3]
20 10 2010 19:30:23,069 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
20 10 2010 19:30:23,069 DEBUG ~ collection fully initialized: [models.Post.comments#2]
20 10 2010 19:30:23,069 DEBUG ~ 1 collections initialized for role: models.Post.comments
20 10 2010 19:30:23,069 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:23,069 DEBUG ~ done loading collection
20 10 2010 19:30:23,085 DEBUG ~ commit
20 10 2010 19:30:23,087 DEBUG ~ processing flush-time cascades
20 10 2010 19:30:23,087 DEBUG ~ dirty checking collections
20 10 2010 19:30:23,087 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:30:23,087 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (initialized)
20 10 2010 19:30:23,087 DEBUG ~ Collection found: [models.Post.comments#2], was: [models.Post.comments#2] (initialized)
20 10 2010 19:30:23,088 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 8 objects
20 10 2010 19:30:23,088 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
20 10 2010 19:30:23,088 DEBUG ~ listing entities:
20 10 2010 19:30:23,088 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=[], postedAt=2009-06-06 09:00:00}
20 10 2010 19:30:23,088 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:30:23,088 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:30:23,088 DEBUG ~ models.Comment{content=This post is useless ?
, id=3, author=Tom, post=models.Post#2, postedAt=2009-04-05 09:00:00}
20 10 2010 19:30:23,088 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2], postedAt=2009-06-14 09:00:00}
20 10 2010 19:30:23,088 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:30:23,089 DEBUG ~ models.Post{content=Well, it's just a test.
, id=2, author=models.User#1, title=Just a test of YABE, comments=[models.Comment#3], postedAt=2009-03-25 09:00:00}
20 10 2010 19:30:23,089 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 19:30:23,089 DEBUG ~ re-enabling autocommit
20 10 2010 19:30:23,089 DEBUG ~ committed JDBC Connection
20 10 2010 19:30:23,089 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:30:23,089 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:30:24,969 DEBUG ~ opened session at timestamp: 12875706249
20 10 2010 19:30:24,969 DEBUG ~ begin
20 10 2010 19:30:24,969 DEBUG ~ opening JDBC connection
20 10 2010 19:30:24,969 DEBUG ~ current autocommit status: true
20 10 2010 19:30:24,969 DEBUG ~ disabling autocommit
20 10 2010 19:30:24,971 DEBUG ~ loading entity: [models.Post#1]
20 10 2010 19:30:24,971 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:24,971 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:24,971 DEBUG ~ result row: EntityKey[models.User#1], EntityKey[models.Post#1]
20 10 2010 19:30:24,972 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:24,972 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:24,972 DEBUG ~ resolving associations for [models.User#1]
20 10 2010 19:30:24,972 DEBUG ~ done materializing entity [models.User#1]
20 10 2010 19:30:24,972 DEBUG ~ resolving associations for [models.Post#1]
20 10 2010 19:30:24,972 DEBUG ~ done materializing entity [models.Post#1]
20 10 2010 19:30:24,972 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:24,972 DEBUG ~ done entity load
20 10 2010 19:30:24,995 DEBUG ~ parse() - HQL: from models.Post where postedAt > ? order by postedAt asc
20 10 2010 19:30:24,997 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    +-[WHERE] Node: 'where'
    |  \-[GT] Node: '>'
    |     +-[IDENT] Node: 'postedAt'
    |     \-[PARAM] Node: '?'
    \-[ORDER] Node: 'order'
       +-[IDENT] Node: 'postedAt'
       \-[ASCENDING] Node: 'asc'

20 10 2010 19:30:24,997 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:30:24,997 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 19:30:24,998 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
20 10 2010 19:30:24,998 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:30:24,998 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@5cf99513
20 10 2010 19:30:24,998 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
20 10 2010 19:30:24,998 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:30:24,998 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@5cf99513
20 10 2010 19:30:24,998 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
20 10 2010 19:30:24,998 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 19:30:24,998 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( > ( post0_.postedAt {synthetic-alias} postedAt ) ? ) ) ( order ( post0_.postedAt {synthetic-alias} postedAt ) asc ) )
20 10 2010 19:30:24,998 DEBUG ~ Derived SELECT clause created.
20 10 2010 19:30:24,998 DEBUG ~ Using FROM fragment [Post post0_]
20 10 2010 19:30:24,998 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 19:30:24,999 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id20_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_20_, post0_.content as content20_, post0_.postedAt as postedAt20_, post0_.title as title20_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    +-[WHERE] SqlNode: 'where'
    |  \-[GT] BinaryLogicOperatorNode: '>'
    |     +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
    |     |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
    |     \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.TimestampType@5cf99513}
    \-[ORDER] OrderByClause: 'order'
       +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
       |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
       |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
       \-[ASCENDING] SqlNode: 'asc'

20 10 2010 19:30:24,999 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:30:24,999 DEBUG ~ HQL: from models.Post where postedAt > ? order by postedAt asc
20 10 2010 19:30:24,999 DEBUG ~ SQL: select post0_.id as id20_, post0_.author_id as author5_20_, post0_.content as content20_, post0_.postedAt as postedAt20_, post0_.title as title20_ from Post post0_ where post0_.postedAt>? order by post0_.postedAt asc
20 10 2010 19:30:24,999 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:30:25,000 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:25,000 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:25,000 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:25,000 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:25,000 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:25,002 DEBUG ~ parse() - HQL: from models.Post where postedAt < ? order by postedAt desc
20 10 2010 19:30:25,004 DEBUG ~ --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'models'
    |           \-[IDENT] Node: 'Post'
    +-[WHERE] Node: 'where'
    |  \-[LT] Node: '<'
    |     +-[IDENT] Node: 'postedAt'
    |     \-[PARAM] Node: '?'
    \-[ORDER] Node: 'order'
       +-[IDENT] Node: 'postedAt'
       \-[DESCENDING] Node: 'desc'

20 10 2010 19:30:25,004 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:30:25,004 DEBUG ~ select << begin [level=1, statement=select]
20 10 2010 19:30:25,004 DEBUG ~ FromClause{level=1} :  models.Post (no alias) -> post0_
20 10 2010 19:30:25,004 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:30:25,004 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@5cf99513
20 10 2010 19:30:25,005 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
20 10 2010 19:30:25,005 DEBUG ~ Resolved :  {synthetic-alias} -> {synthetic-alias}
20 10 2010 19:30:25,005 DEBUG ~ getDataType() : postedAt -> org.hibernate.type.TimestampType@5cf99513
20 10 2010 19:30:25,005 DEBUG ~ Resolved :  {synthetic-alias}.postedAt -> post0_.postedAt
20 10 2010 19:30:25,005 DEBUG ~ select : finishing up [level=1, statement=select]
20 10 2010 19:30:25,005 DEBUG ~ processQuery() :  ( SELECT ( FromClause{level=1} Post post0_ ) ( where ( < ( post0_.postedAt {synthetic-alias} postedAt ) ? ) ) ( order ( post0_.postedAt {synthetic-alias} postedAt ) desc ) )
20 10 2010 19:30:25,005 DEBUG ~ Derived SELECT clause created.
20 10 2010 19:30:25,005 DEBUG ~ Using FROM fragment [Post post0_]
20 10 2010 19:30:25,005 DEBUG ~ select >> end [level=1, statement=select]
20 10 2010 19:30:25,006 DEBUG ~ --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'post0_.id as id20_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author_id as author5_20_, post0_.content as content20_, post0_.postedAt as postedAt20_, post0_.title as title20_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=models.Post}}
    +-[WHERE] SqlNode: 'where'
    |  \-[LT] BinaryLogicOperatorNode: '<'
    |     +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
    |     |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
    |     \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.TimestampType@5cf99513}
    \-[ORDER] OrderByClause: 'order'
       +-[DOT] DotNode: 'post0_.postedAt' {propertyName=postedAt,dereferenceType=ALL,propertyPath=postedAt,path={synthetic-alias}.postedAt,tableAlias=post0_,className=models.Post,classAlias=null}
       |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
       |  \-[IDENT] IdentNode: 'postedAt' {originalText=postedAt}
       \-[DESCENDING] SqlNode: 'desc'

20 10 2010 19:30:25,006 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:30:25,006 DEBUG ~ HQL: from models.Post where postedAt < ? order by postedAt desc
20 10 2010 19:30:25,006 DEBUG ~ SQL: select post0_.id as id20_, post0_.author_id as author5_20_, post0_.content as content20_, post0_.postedAt as postedAt20_, post0_.title as title20_ from Post post0_ where post0_.postedAt<? order by post0_.postedAt desc
20 10 2010 19:30:25,006 DEBUG ~ throwQueryException() : no errors
20 10 2010 19:30:25,006 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:25,007 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:25,007 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:30:25,007 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:25,007 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:25,007 DEBUG ~ resolving associations for [models.Post#3]
20 10 2010 19:30:25,007 DEBUG ~ loading entity: [models.User#2]
20 10 2010 19:30:25,007 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:25,007 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:25,007 DEBUG ~ result row: EntityKey[models.User#2]
20 10 2010 19:30:25,007 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:25,007 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:25,007 DEBUG ~ resolving associations for [models.User#2]
20 10 2010 19:30:25,008 DEBUG ~ done materializing entity [models.User#2]
20 10 2010 19:30:25,008 DEBUG ~ done entity load
20 10 2010 19:30:25,008 DEBUG ~ done materializing entity [models.Post#3]
20 10 2010 19:30:25,008 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:25,008 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:25,008 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:25,008 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:30:25,009 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:25,009 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:25,009 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:25,009 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:25,009 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:25,010 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:30:25,010 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:25,010 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:25,010 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:25,013 DEBUG ~ loading collection: [models.Post.comments#1]
20 10 2010 19:30:25,013 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:25,013 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:25,013 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
20 10 2010 19:30:25,013 DEBUG ~ result row: EntityKey[models.Comment#1]
20 10 2010 19:30:25,013 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:30:25,013 DEBUG ~ result row: EntityKey[models.Comment#2]
20 10 2010 19:30:25,013 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:30:25,013 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:25,013 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:25,013 DEBUG ~ resolving associations for [models.Comment#1]
20 10 2010 19:30:25,013 DEBUG ~ done materializing entity [models.Comment#1]
20 10 2010 19:30:25,014 DEBUG ~ resolving associations for [models.Comment#2]
20 10 2010 19:30:25,014 DEBUG ~ done materializing entity [models.Comment#2]
20 10 2010 19:30:25,014 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
20 10 2010 19:30:25,014 DEBUG ~ collection fully initialized: [models.Post.comments#1]
20 10 2010 19:30:25,014 DEBUG ~ 1 collections initialized for role: models.Post.comments
20 10 2010 19:30:25,014 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:25,014 DEBUG ~ done loading collection
20 10 2010 19:30:25,024 DEBUG ~ commit
20 10 2010 19:30:25,042 DEBUG ~ processing flush-time cascades
20 10 2010 19:30:25,042 DEBUG ~ dirty checking collections
20 10 2010 19:30:25,042 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:30:25,042 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (uninitialized)
20 10 2010 19:30:25,042 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 6 objects
20 10 2010 19:30:25,042 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
20 10 2010 19:30:25,042 DEBUG ~ listing entities:
20 10 2010 19:30:25,043 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:30:25,043 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:30:25,043 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2], postedAt=2009-06-14 09:00:00}
20 10 2010 19:30:25,043 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:30:25,043 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 19:30:25,043 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=<uninitialized>, postedAt=2009-06-06 09:00:00}
20 10 2010 19:30:25,043 DEBUG ~ re-enabling autocommit
20 10 2010 19:30:25,043 DEBUG ~ committed JDBC Connection
20 10 2010 19:30:25,043 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:30:25,043 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:30:25,198 DEBUG ~ opened session at timestamp: 12875706251
20 10 2010 19:30:25,198 DEBUG ~ begin
20 10 2010 19:30:25,198 DEBUG ~ opening JDBC connection
20 10 2010 19:30:25,199 DEBUG ~ current autocommit status: true
20 10 2010 19:30:25,199 DEBUG ~ disabling autocommit
20 10 2010 19:30:25,220 DEBUG ~ commit
20 10 2010 19:30:25,220 DEBUG ~ re-enabling autocommit
20 10 2010 19:30:25,221 DEBUG ~ committed JDBC Connection
20 10 2010 19:30:25,221 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:30:25,221 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:30:35,586 DEBUG ~ opened session at timestamp: 12875706355
20 10 2010 19:30:35,586 DEBUG ~ begin
20 10 2010 19:30:35,586 DEBUG ~ opening JDBC connection
20 10 2010 19:30:35,587 DEBUG ~ current autocommit status: true
20 10 2010 19:30:35,587 DEBUG ~ disabling autocommit
20 10 2010 19:30:35,592 DEBUG ~ loading entity: [models.Post#1]
20 10 2010 19:30:35,592 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:35,592 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:35,592 DEBUG ~ result row: EntityKey[models.User#1], EntityKey[models.Post#1]
20 10 2010 19:30:35,593 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:35,593 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:35,593 DEBUG ~ resolving associations for [models.User#1]
20 10 2010 19:30:35,593 DEBUG ~ done materializing entity [models.User#1]
20 10 2010 19:30:35,593 DEBUG ~ resolving associations for [models.Post#1]
20 10 2010 19:30:35,593 DEBUG ~ done materializing entity [models.Post#1]
20 10 2010 19:30:35,593 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:35,593 DEBUG ~ done entity load
20 10 2010 19:30:35,593 DEBUG ~ playCache: playMemoryStore hit for fd30815b-0070-438c-a9fa-9910492e91b3
20 10 2010 19:30:35,593 DEBUG ~ executing identity-insert immediately
20 10 2010 19:30:35,594 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:35,594 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:35,594 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:35,594 DEBUG ~ Natively generated identity: 4
20 10 2010 19:30:35,594 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:35,624 DEBUG ~ processing flush-time cascades
20 10 2010 19:30:35,625 DEBUG ~ dirty checking collections
20 10 2010 19:30:35,625 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (uninitialized)
20 10 2010 19:30:35,625 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
20 10 2010 19:30:35,625 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
20 10 2010 19:30:35,625 DEBUG ~ listing entities:
20 10 2010 19:30:35,632 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=<uninitialized>, postedAt=2009-06-14 09:00:00}
20 10 2010 19:30:35,632 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:30:35,633 DEBUG ~ models.Comment{content=yammy, id=4, author=yam, post=models.Post#1, postedAt=2010-10-20 19:30:35}
20 10 2010 19:30:35,637 DEBUG ~ commit
20 10 2010 19:30:35,638 DEBUG ~ processing flush-time cascades
20 10 2010 19:30:35,639 DEBUG ~ dirty checking collections
20 10 2010 19:30:35,639 DEBUG ~ Collection dirty: [models.Post.comments#1]
20 10 2010 19:30:35,639 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (uninitialized)
20 10 2010 19:30:35,639 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
20 10 2010 19:30:35,639 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
20 10 2010 19:30:35,639 DEBUG ~ listing entities:
20 10 2010 19:30:35,639 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=<uninitialized>, postedAt=2009-06-14 09:00:00}
20 10 2010 19:30:35,639 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:30:35,640 DEBUG ~ models.Comment{content=yammy, id=4, author=yam, post=models.Post#1, postedAt=2010-10-20 19:30:35}
20 10 2010 19:30:35,640 DEBUG ~ re-enabling autocommit
20 10 2010 19:30:35,640 DEBUG ~ committed JDBC Connection
20 10 2010 19:30:35,640 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:30:35,640 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:30:35,648 DEBUG ~ opened session at timestamp: 12875706356
20 10 2010 19:30:35,648 DEBUG ~ begin
20 10 2010 19:30:35,648 DEBUG ~ opening JDBC connection
20 10 2010 19:30:35,648 DEBUG ~ current autocommit status: true
20 10 2010 19:30:35,648 DEBUG ~ disabling autocommit
20 10 2010 19:30:35,649 DEBUG ~ loading entity: [models.Post#1]
20 10 2010 19:30:35,649 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:35,650 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:35,650 DEBUG ~ result row: EntityKey[models.User#1], EntityKey[models.Post#1]
20 10 2010 19:30:35,650 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:35,650 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:35,650 DEBUG ~ resolving associations for [models.User#1]
20 10 2010 19:30:35,650 DEBUG ~ done materializing entity [models.User#1]
20 10 2010 19:30:35,650 DEBUG ~ resolving associations for [models.Post#1]
20 10 2010 19:30:35,650 DEBUG ~ done materializing entity [models.Post#1]
20 10 2010 19:30:35,650 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:35,650 DEBUG ~ done entity load
20 10 2010 19:30:35,653 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:35,653 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:35,653 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:35,653 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:35,653 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:35,653 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:35,654 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:35,654 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:30:35,654 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:35,654 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:35,654 DEBUG ~ resolving associations for [models.Post#3]
20 10 2010 19:30:35,654 DEBUG ~ loading entity: [models.User#2]
20 10 2010 19:30:35,654 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:35,654 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:35,654 DEBUG ~ result row: EntityKey[models.User#2]
20 10 2010 19:30:35,654 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:35,654 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:35,654 DEBUG ~ resolving associations for [models.User#2]
20 10 2010 19:30:35,654 DEBUG ~ done materializing entity [models.User#2]
20 10 2010 19:30:35,654 DEBUG ~ done entity load
20 10 2010 19:30:35,655 DEBUG ~ done materializing entity [models.Post#3]
20 10 2010 19:30:35,655 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:35,655 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:35,655 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:35,655 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:30:35,655 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:35,655 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:35,655 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:35,656 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:35,656 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:35,656 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:30:35,656 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:35,656 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:35,656 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:35,660 DEBUG ~ loading collection: [models.Post.comments#1]
20 10 2010 19:30:35,661 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:35,661 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:35,661 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
20 10 2010 19:30:35,661 DEBUG ~ result row: EntityKey[models.Comment#1]
20 10 2010 19:30:35,661 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:30:35,661 DEBUG ~ result row: EntityKey[models.Comment#2]
20 10 2010 19:30:35,661 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:30:35,661 DEBUG ~ result row: EntityKey[models.Comment#4]
20 10 2010 19:30:35,661 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:30:35,661 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:35,662 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:35,662 DEBUG ~ resolving associations for [models.Comment#1]
20 10 2010 19:30:35,662 DEBUG ~ done materializing entity [models.Comment#1]
20 10 2010 19:30:35,662 DEBUG ~ resolving associations for [models.Comment#2]
20 10 2010 19:30:35,662 DEBUG ~ done materializing entity [models.Comment#2]
20 10 2010 19:30:35,662 DEBUG ~ resolving associations for [models.Comment#4]
20 10 2010 19:30:35,662 DEBUG ~ done materializing entity [models.Comment#4]
20 10 2010 19:30:35,662 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
20 10 2010 19:30:35,662 DEBUG ~ collection fully initialized: [models.Post.comments#1]
20 10 2010 19:30:35,662 DEBUG ~ 1 collections initialized for role: models.Post.comments
20 10 2010 19:30:35,662 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:35,662 DEBUG ~ done loading collection
20 10 2010 19:30:35,669 DEBUG ~ commit
20 10 2010 19:30:35,669 DEBUG ~ processing flush-time cascades
20 10 2010 19:30:35,669 DEBUG ~ dirty checking collections
20 10 2010 19:30:35,669 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:30:35,669 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (uninitialized)
20 10 2010 19:30:35,669 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 7 objects
20 10 2010 19:30:35,669 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
20 10 2010 19:30:35,669 DEBUG ~ listing entities:
20 10 2010 19:30:35,670 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=<uninitialized>, postedAt=2009-06-06 09:00:00}
20 10 2010 19:30:35,670 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:30:35,670 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:30:35,670 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:30:35,670 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2, models.Comment#4], postedAt=2009-06-14 09:00:00}
20 10 2010 19:30:35,670 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 19:30:35,670 DEBUG ~ models.Comment{content=yammy, id=4, author=yam, post=models.Post#1, postedAt=2010-10-20 19:30:35}
20 10 2010 19:30:35,670 DEBUG ~ re-enabling autocommit
20 10 2010 19:30:35,671 DEBUG ~ committed JDBC Connection
20 10 2010 19:30:35,671 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:30:35,671 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:30:35,764 DEBUG ~ opened session at timestamp: 12875706357
20 10 2010 19:30:35,764 DEBUG ~ begin
20 10 2010 19:30:35,764 DEBUG ~ opening JDBC connection
20 10 2010 19:30:35,764 DEBUG ~ current autocommit status: true
20 10 2010 19:30:35,764 DEBUG ~ disabling autocommit
20 10 2010 19:30:35,787 DEBUG ~ commit
20 10 2010 19:30:35,787 DEBUG ~ re-enabling autocommit
20 10 2010 19:30:35,787 DEBUG ~ committed JDBC Connection
20 10 2010 19:30:35,787 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:30:35,787 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:30:57,492 DEBUG ~ opened session at timestamp: 12875706574
20 10 2010 19:30:57,492 DEBUG ~ begin
20 10 2010 19:30:57,492 DEBUG ~ opening JDBC connection
20 10 2010 19:30:57,492 DEBUG ~ current autocommit status: true
20 10 2010 19:30:57,492 DEBUG ~ disabling autocommit
20 10 2010 19:30:57,498 DEBUG ~ loading entity: [models.Post#1]
20 10 2010 19:30:57,498 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:57,498 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:57,498 DEBUG ~ result row: EntityKey[models.User#1], EntityKey[models.Post#1]
20 10 2010 19:30:57,498 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:57,498 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:57,498 DEBUG ~ resolving associations for [models.User#1]
20 10 2010 19:30:57,499 DEBUG ~ done materializing entity [models.User#1]
20 10 2010 19:30:57,499 DEBUG ~ resolving associations for [models.Post#1]
20 10 2010 19:30:57,499 DEBUG ~ done materializing entity [models.Post#1]
20 10 2010 19:30:57,499 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:57,499 DEBUG ~ done entity load
20 10 2010 19:30:57,499 DEBUG ~ playCache: playMemoryStore hit for 1466c6ff-0c78-4f4b-8932-2bffc0988935
20 10 2010 19:30:57,501 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:57,502 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:57,502 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:57,502 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:57,502 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:57,502 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:57,502 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:57,502 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:30:57,502 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:57,502 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:57,503 DEBUG ~ resolving associations for [models.Post#3]
20 10 2010 19:30:57,503 DEBUG ~ loading entity: [models.User#2]
20 10 2010 19:30:57,503 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:57,503 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:57,503 DEBUG ~ result row: EntityKey[models.User#2]
20 10 2010 19:30:57,503 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:57,503 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:57,503 DEBUG ~ resolving associations for [models.User#2]
20 10 2010 19:30:57,503 DEBUG ~ done materializing entity [models.User#2]
20 10 2010 19:30:57,503 DEBUG ~ done entity load
20 10 2010 19:30:57,503 DEBUG ~ done materializing entity [models.Post#3]
20 10 2010 19:30:57,503 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:57,504 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:57,504 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:57,504 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:30:57,504 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:57,504 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:57,504 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:57,504 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:57,505 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:57,505 DEBUG ~ result row: EntityKey[models.Post#3]
20 10 2010 19:30:57,505 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:57,505 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:57,505 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:57,507 DEBUG ~ loading collection: [models.Post.comments#1]
20 10 2010 19:30:57,507 DEBUG ~ about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
20 10 2010 19:30:57,507 DEBUG ~ about to open ResultSet (open ResultSets: 0, globally: 0)
20 10 2010 19:30:57,507 DEBUG ~ result set contains (possibly empty) collection: [models.Post.comments#1]
20 10 2010 19:30:57,507 DEBUG ~ result row: EntityKey[models.Comment#1]
20 10 2010 19:30:57,507 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:30:57,508 DEBUG ~ result row: EntityKey[models.Comment#2]
20 10 2010 19:30:57,508 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:30:57,508 DEBUG ~ result row: EntityKey[models.Comment#4]
20 10 2010 19:30:57,508 DEBUG ~ found row of collection: [models.Post.comments#1]
20 10 2010 19:30:57,508 DEBUG ~ about to close ResultSet (open ResultSets: 1, globally: 1)
20 10 2010 19:30:57,508 DEBUG ~ about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
20 10 2010 19:30:57,508 DEBUG ~ resolving associations for [models.Comment#1]
20 10 2010 19:30:57,508 DEBUG ~ done materializing entity [models.Comment#1]
20 10 2010 19:30:57,508 DEBUG ~ resolving associations for [models.Comment#2]
20 10 2010 19:30:57,508 DEBUG ~ done materializing entity [models.Comment#2]
20 10 2010 19:30:57,508 DEBUG ~ resolving associations for [models.Comment#4]
20 10 2010 19:30:57,508 DEBUG ~ done materializing entity [models.Comment#4]
20 10 2010 19:30:57,508 DEBUG ~ 1 collections were found in result set for role: models.Post.comments
20 10 2010 19:30:57,508 DEBUG ~ collection fully initialized: [models.Post.comments#1]
20 10 2010 19:30:57,508 DEBUG ~ 1 collections initialized for role: models.Post.comments
20 10 2010 19:30:57,508 DEBUG ~ initializing non-lazy collections
20 10 2010 19:30:57,508 DEBUG ~ done loading collection
20 10 2010 19:30:57,516 DEBUG ~ commit
20 10 2010 19:30:57,517 DEBUG ~ processing flush-time cascades
20 10 2010 19:30:57,518 DEBUG ~ dirty checking collections
20 10 2010 19:30:57,518 DEBUG ~ Collection found: [models.Post.comments#1], was: [models.Post.comments#1] (initialized)
20 10 2010 19:30:57,518 DEBUG ~ Collection found: [models.Post.comments#3], was: [models.Post.comments#3] (uninitialized)
20 10 2010 19:30:57,518 DEBUG ~ Flushed: 0 insertions, 0 updates, 0 deletions to 7 objects
20 10 2010 19:30:57,518 DEBUG ~ Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
20 10 2010 19:30:57,518 DEBUG ~ listing entities:
20 10 2010 19:30:57,518 DEBUG ~ models.Post{content=A Play! application follows the MVC architectural pattern as applied to the  architecture of the Web.
This pattern splits the application into separate layers: the Presentation  layer and the Model layer. The Presentation layer is further split into a  View and a Controller layer.
, id=3, author=models.User#2, title=The MVC application, comments=<uninitialized>, postedAt=2009-06-06 09:00:00}
20 10 2010 19:30:57,519 DEBUG ~ models.Comment{content=You are right !
, id=1, author=Guest, post=models.Post#1, postedAt=2009-06-14 09:00:00}
20 10 2010 19:30:57,519 DEBUG ~ models.User{id=2, email=jeff@example.com, isAdmin=false, password=secret, fullname=Jeff}
20 10 2010 19:30:57,519 DEBUG ~ models.User{id=1, email=bob@example.com, isAdmin=true, password=secret, fullname=Bob}
20 10 2010 19:30:57,519 DEBUG ~ models.Post{content=The model has a central position in a Play! application. It is the domain-specific  representation of the information on which the application operates.
Martin fowler defines it as:
    
Responsible for representing concepts of the business, information about the  business situation, and business rules. State that reflects the business situation  is controlled and used here, even though the technical details of storing it are  delegated to the infrastructure. This layer is the heart of business software.
, id=1, author=models.User#1, title=About the model layer, comments=[models.Comment#1, models.Comment#2, models.Comment#4], postedAt=2009-06-14 09:00:00}
20 10 2010 19:30:57,519 DEBUG ~ models.Comment{content=I knew that ...
, id=2, author=Mike, post=models.Post#1, postedAt=2009-06-15 09:00:00}
20 10 2010 19:30:57,519 DEBUG ~ models.Comment{content=yammy, id=4, author=yam, post=models.Post#1, postedAt=2010-10-20 19:30:35}
20 10 2010 19:30:57,519 DEBUG ~ re-enabling autocommit
20 10 2010 19:30:57,519 DEBUG ~ committed JDBC Connection
20 10 2010 19:30:57,519 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:30:57,519 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
20 10 2010 19:30:57,605 DEBUG ~ opened session at timestamp: 12875706576
20 10 2010 19:30:57,605 DEBUG ~ begin
20 10 2010 19:30:57,605 DEBUG ~ opening JDBC connection
20 10 2010 19:30:57,605 DEBUG ~ current autocommit status: true
20 10 2010 19:30:57,605 DEBUG ~ disabling autocommit
20 10 2010 19:30:57,622 DEBUG ~ commit
20 10 2010 19:30:57,623 DEBUG ~ re-enabling autocommit
20 10 2010 19:30:57,623 DEBUG ~ committed JDBC Connection
20 10 2010 19:30:57,623 DEBUG ~ aggressively releasing JDBC connection
20 10 2010 19:30:57,623 DEBUG ~ releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
